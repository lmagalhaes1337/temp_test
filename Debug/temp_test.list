
temp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139f8  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08013cc8  08013cc8  00014cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014140  08014140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014148  08014148  00015148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801414c  0801414c  0001514c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  08014150  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  08014330  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  08014390  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005450  240002a0  080143f0  000162a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240056f0  080143f0  000166f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d68d  00000000  00000000  000162ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007216  00000000  00000000  0005395b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d30  00000000  00000000  0005ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002321  00000000  00000000  0005d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004235d  00000000  00000000  0005fbc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003edda  00000000  00000000  000a1f26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001961d1  00000000  00000000  000e0d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00276ed1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d1e0  00000000  00000000  00276f14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  002840f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002a0 	.word	0x240002a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013cb0 	.word	0x08013cb0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a4 	.word	0x240002a4
 800030c:	08013cb0 	.word	0x08013cb0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2224      	movs	r2, #36	@ 0x24
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f011 fa3e 	bl	8011b4a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d0:	4a32      	ldr	r2, [pc, #200]	@ (800079c <MX_ADC1_Init+0xec>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800072e:	2201      	movs	r2, #1
 8000730:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000734:	f003 f8e8 	bl	8003908 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800073e:	f001 fbb3 	bl	8001ea8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800074e:	f004 f927 	bl	80049a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000758:	f001 fba6 	bl	8001ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_ADC1_Init+0xf0>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000782:	f003 fac9 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800078c:	f001 fb8c 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240002bc 	.word	0x240002bc
 800079c:	40022000 	.word	0x40022000
 80007a0:	04300002 	.word	0x04300002

080007a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2224      	movs	r2, #36	@ 0x24
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f011 f9ca 	bl	8011b4a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <MX_ADC2_Init+0xc8>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000808:	2200      	movs	r2, #0
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000816:	2201      	movs	r2, #1
 8000818:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800081c:	f003 f874 	bl	8003908 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000826:	f001 fb3f 	bl	8001ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800082a:	2301      	movs	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082e:	2306      	movs	r3, #6
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000836:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083c:	2304      	movs	r3, #4
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000850:	f003 fa62 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800085a:	f001 fb25 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2400032c 	.word	0x2400032c
 800086c:	40022100 	.word	0x40022100

08000870 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2224      	movs	r2, #36	@ 0x24
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f011 f964 	bl	8011b4a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000884:	4a33      	ldr	r2, [pc, #204]	@ (8000954 <MX_ADC3_Init+0xe4>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000890:	2208      	movs	r2, #8
 8000892:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008fa:	4815      	ldr	r0, [pc, #84]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008fc:	f003 f804 	bl	8003908 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000906:	f001 facf 	bl	8001ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800090a:	2301      	movs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091c:	2304      	movs	r3, #4
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800093a:	f003 f9ed 	bl	8003d18 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000944:	f001 fab0 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2400039c 	.word	0x2400039c
 8000954:	58026000 	.word	0x58026000

08000958 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	@ 0x40
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a6c      	ldr	r2, [pc, #432]	@ (8000b28 <HAL_ADC_MspInit+0x1d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14e      	bne.n	8000a18 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a6a      	ldr	r2, [pc, #424]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000984:	4b69      	ldr	r3, [pc, #420]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800098c:	4b68      	ldr	r3, [pc, #416]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800098e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000992:	4a67      	ldr	r2, [pc, #412]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800099c:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800099e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b61      	ldr	r3, [pc, #388]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a5f      	ldr	r2, [pc, #380]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a58      	ldr	r2, [pc, #352]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b55      	ldr	r3, [pc, #340]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	484e      	ldr	r0, [pc, #312]	@ (8000b34 <HAL_ADC_MspInit+0x1dc>)
 80009fa:	f005 faf9 	bl	8005ff0 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80009fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a02:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a06:	f002 fd23 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a0a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a0e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a12:	f002 fd1d 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a16:	e082      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a46      	ldr	r2, [pc, #280]	@ (8000b38 <HAL_ADC_MspInit+0x1e0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d133      	bne.n	8000a8a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10e      	bne.n	8000a52 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a34:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a44:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a74:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a78:	f002 fcea 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a7c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a80:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a84:	f002 fce4 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a88:	e049      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <HAL_ADC_MspInit+0x1e4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d144      	bne.n	8000b1e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aee:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000af2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000af6:	f002 fcab 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000afa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8000afe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b02:	f002 fca5 	bl	8003450 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8000b06:	2304      	movs	r3, #4
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_ADC_MspInit+0x1e8>)
 8000b1a:	f005 fa69 	bl	8005ff0 <HAL_GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	3740      	adds	r7, #64	@ 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	2400040c 	.word	0x2400040c
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020800 	.word	0x58020800
 8000b38:	40022100 	.word	0x40022100
 8000b3c:	58026000 	.word	0x58026000
 8000b40:	58021c00 	.word	0x58021c00

08000b44 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2224      	movs	r2, #36	@ 0x24
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f010 fffa 	bl	8011b4a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_DAC1_Init+0x60>)
 8000b5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b5c:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b5e:	f004 f8e1 	bl	8004d24 <HAL_DAC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b68:	f001 f99e 	bl	8001ea8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2210      	movs	r2, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b88:	f004 f94e 	bl	8004e28 <HAL_DAC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b92:	f001 f989 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	24000410 	.word	0x24000410
 8000ba4:	40007400 	.word	0x40007400

08000ba8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_DAC_MspInit+0x90>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d131      	bne.n	8000c2e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <HAL_DAC_MspInit+0x98>)
 8000c1a:	f005 f9e9 	bl	8005ff0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	2036      	movs	r0, #54	@ 0x36
 8000c24:	f004 f856 	bl	8004cd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c28:	2036      	movs	r0, #54	@ 0x36
 8000c2a:	f004 f86d 	bl	8004d08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020000 	.word	0x58020000

08000c44 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <MX_ETH_Init+0x84>)
 8000c4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c5c:	22e1      	movs	r2, #225	@ 0xe1
 8000c5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c74:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_ETH_Init+0x8c>)
 8000c82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_ETH_Init+0x90>)
 8000c88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c8c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c94:	f004 fa14 	bl	80050c0 <HAL_ETH_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c9e:	f001 f903 	bl	8001ea8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ca2:	2238      	movs	r2, #56	@ 0x38
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000ca8:	f010 ff4f 	bl	8011b4a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cae:	2221      	movs	r2, #33	@ 0x21
 8000cb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400045c 	.word	0x2400045c
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	2400050c 	.word	0x2400050c
 8000cd0:	24000240 	.word	0x24000240
 8000cd4:	240001e0 	.word	0x240001e0
 8000cd8:	24000424 	.word	0x24000424

08000cdc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	@ (8000e20 <HAL_ETH_MspInit+0x144>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 808b 	bne.w	8000e16 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d00:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d06:	4a47      	ldr	r2, [pc, #284]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d10:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d24:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4c:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a30      	ldr	r2, [pc, #192]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8000db4:	2332      	movs	r3, #50	@ 0x32
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4816      	ldr	r0, [pc, #88]	@ (8000e28 <HAL_ETH_MspInit+0x14c>)
 8000dd0:	f005 f90e 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8000dd4:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_ETH_MspInit+0x150>)
 8000df2:	f005 f8fd 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000df6:	2386      	movs	r3, #134	@ 0x86
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <HAL_ETH_MspInit+0x154>)
 8000e12:	f005 f8ed 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40028000 	.word	0x40028000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	58020000 	.word	0x58020000

08000e34 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <MX_FDCAN1_Init+0xc4>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2210      	movs	r2, #16
 8000e60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ee2:	f004 fd21 	bl	8005928 <HAL_FDCAN_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000eec:	f000 ffdc 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000514 	.word	0x24000514
 8000ef8:	4000a000 	.word	0x4000a000

08000efc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f02:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <MX_FDCAN2_Init+0xc4>)
 8000f04:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f06:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f1e:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f26:	2210      	movs	r2, #16
 8000f28:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000faa:	f004 fcbd 	bl	8005928 <HAL_FDCAN_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fb4:	f000 ff78 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240005b4 	.word	0x240005b4
 8000fc0:	4000a400 	.word	0x4000a400

08000fc4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	22b8      	movs	r2, #184	@ 0xb8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f010 fdb0 	bl	8011b4a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a57      	ldr	r2, [pc, #348]	@ (800114c <HAL_FDCAN_MspInit+0x188>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d151      	bne.n	8001098 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001000:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f007 fc73 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001018:	f000 ff46 	bl	8001ea8 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800101c:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001024:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001026:	4b4a      	ldr	r3, [pc, #296]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10e      	bne.n	800104c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001030:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001034:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800103e:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001040:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a40      	ldr	r2, [pc, #256]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800106a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001084:	2309      	movs	r3, #9
 8001086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800108a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800108e:	4619      	mov	r1, r3
 8001090:	4831      	ldr	r0, [pc, #196]	@ (8001158 <HAL_FDCAN_MspInit+0x194>)
 8001092:	f004 ffad 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001096:	e054      	b.n	8001142 <HAL_FDCAN_MspInit+0x17e>
  else if(fdcanHandle->Instance==FDCAN2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2f      	ldr	r2, [pc, #188]	@ (800115c <HAL_FDCAN_MspInit+0x198>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d14f      	bne.n	8001142 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fc1c 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80010c6:	f000 feef 	bl	8001ea8 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10e      	bne.n	80010fa <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001118:	2360      	movs	r3, #96	@ 0x60
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001130:	2309      	movs	r3, #9
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4808      	ldr	r0, [pc, #32]	@ (8001160 <HAL_FDCAN_MspInit+0x19c>)
 800113e:	f004 ff57 	bl	8005ff0 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	@ 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	4000a000 	.word	0x4000a000
 8001150:	24000654 	.word	0x24000654
 8001154:	58024400 	.word	0x58024400
 8001158:	58021c00 	.word	0x58021c00
 800115c:	4000a400 	.word	0x4000a400
 8001160:	58020400 	.word	0x58020400

08001164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	logMutexHandle = osMutexNew (0);
 8001168:	2000      	movs	r0, #0
 800116a:	f00c fe19 	bl	800dda0 <osMutexNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <MX_FREERTOS_Init+0x40>)
 8001172:	6013      	str	r3, [r2, #0]
	if (logMutexHandle == NULL) {
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_FREERTOS_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MX_FREERTOS_Init+0x1c>
	    while(1);
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MX_FREERTOS_Init+0x18>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printToTerm */
  printToTermHandle = osThreadNew(StartDefaultTask, NULL, &printToTerm_attributes);
 8001180:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <MX_FREERTOS_Init+0x44>)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <MX_FREERTOS_Init+0x48>)
 8001186:	f00c fd3d 	bl	800dc04 <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <MX_FREERTOS_Init+0x4c>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(StartTask02, NULL, &getTemp_attributes);
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <MX_FREERTOS_Init+0x50>)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_FREERTOS_Init+0x54>)
 8001196:	f00c fd35 	bl	800dc04 <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <MX_FREERTOS_Init+0x58>)
 800119e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24000664 	.word	0x24000664
 80011a8:	08013d4c 	.word	0x08013d4c
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	24000668 	.word	0x24000668
 80011b4:	08013d70 	.word	0x08013d70
 80011b8:	08001271 	.word	0x08001271
 80011bc:	2400066c 	.word	0x2400066c

080011c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osStatus_t status;
	uint8_t retries = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	72fb      	strb	r3, [r7, #11]
	/* Infinite loop to continuously log temperatures */
  for(;;)
  {

	  if (temp_index < MAX_TEMP_INDEX) {
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <StartDefaultTask+0xa4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b09      	cmp	r3, #9
 80011d2:	d83c      	bhi.n	800124e <StartDefaultTask+0x8e>
		  /* Acquire mutex to ensure exclusive access to temperature log */
		  while(retries < MAX_RETRIES){
 80011d4:	e00d      	b.n	80011f2 <StartDefaultTask+0x32>
			  status = osMutexAcquire(logMutexHandle, MAX_MUTEX_WAIT);
 80011d6:	4b24      	ldr	r3, [pc, #144]	@ (8001268 <StartDefaultTask+0xa8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011de:	4618      	mov	r0, r3
 80011e0:	f00c fe64 	bl	800deac <osMutexAcquire>
 80011e4:	60f8      	str	r0, [r7, #12]
			  if(status == osOK){
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d006      	beq.n	80011fa <StartDefaultTask+0x3a>
				  break;
			  }
			  retries++;
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	3301      	adds	r3, #1
 80011f0:	72fb      	strb	r3, [r7, #11]
		  while(retries < MAX_RETRIES){
 80011f2:	7afb      	ldrb	r3, [r7, #11]
 80011f4:	2b09      	cmp	r3, #9
 80011f6:	d9ee      	bls.n	80011d6 <StartDefaultTask+0x16>
 80011f8:	e000      	b.n	80011fc <StartDefaultTask+0x3c>
				  break;
 80011fa:	bf00      	nop
		  }
		  if(status != osOK){
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d12d      	bne.n	800125e <StartDefaultTask+0x9e>
			  continue;
		  }
		  retries = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	72fb      	strb	r3, [r7, #11]
		  /* Simulate logging a temperature value */
	      temperature_log[temp_index] = get_temperature();
 8001206:	f000 f887 	bl	8001318 <get_temperature>
 800120a:	4601      	mov	r1, r0
 800120c:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <StartDefaultTask+0xa4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	b2c9      	uxtb	r1, r1
 8001214:	4b15      	ldr	r3, [pc, #84]	@ (800126c <StartDefaultTask+0xac>)
 8001216:	5499      	strb	r1, [r3, r2]
	      /* Release the mutex after updating the log */
	      while(retries < MAX_RETRIES){
 8001218:	e00b      	b.n	8001232 <StartDefaultTask+0x72>
	    	  status = osMutexRelease(logMutexHandle);
 800121a:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <StartDefaultTask+0xa8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f00c fe8f 	bl	800df42 <osMutexRelease>
 8001224:	60f8      	str	r0, [r7, #12]
			  if(status == osOK){
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d006      	beq.n	800123a <StartDefaultTask+0x7a>
				  break;
			  }
			  retries++;
 800122c:	7afb      	ldrb	r3, [r7, #11]
 800122e:	3301      	adds	r3, #1
 8001230:	72fb      	strb	r3, [r7, #11]
	      while(retries < MAX_RETRIES){
 8001232:	7afb      	ldrb	r3, [r7, #11]
 8001234:	2b09      	cmp	r3, #9
 8001236:	d9f0      	bls.n	800121a <StartDefaultTask+0x5a>
 8001238:	e000      	b.n	800123c <StartDefaultTask+0x7c>
				  break;
 800123a:	bf00      	nop
	      }
	      retries = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	72fb      	strb	r3, [r7, #11]

	      temp_index++; /* Increment the log index */
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <StartDefaultTask+0xa4>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <StartDefaultTask+0xa4>)
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e002      	b.n	8001254 <StartDefaultTask+0x94>
	  } else {
	      temp_index = 0; /* Reset log index if maximum log size reached */
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <StartDefaultTask+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
	  }
	  osDelay(TEMP_WRITE_DELAY); /* Delay between temperature log entries */
 8001254:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001258:	f00c fd87 	bl	800dd6a <osDelay>
 800125c:	e7b6      	b.n	80011cc <StartDefaultTask+0xc>
			  continue;
 800125e:	bf00      	nop
	  if (temp_index < MAX_TEMP_INDEX) {
 8001260:	e7b4      	b.n	80011cc <StartDefaultTask+0xc>
 8001262:	bf00      	nop
 8001264:	24000662 	.word	0x24000662
 8001268:	24000664 	.word	0x24000664
 800126c:	24000658 	.word	0x24000658

08001270 <StartTask02>:
  * @retval None
  * @note	If the printing fails, the task will be suspended since it has no purpose other than to print the log.
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	HAL_StatusTypeDef status = HAL_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	727b      	strb	r3, [r7, #9]
	osStatus_t osStatus = osOK;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
	uint8_t retries = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	72fb      	strb	r3, [r7, #11]
	uint8_t suspend_flag = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	72bb      	strb	r3, [r7, #10]
	/* Infinite loop to continuously print the temperature log */
  for(;;)
  {
	  /* Acquire mutex to ensure exclusive access to temperature log */
	  while(retries < MAX_RETRIES){
 8001288:	e00d      	b.n	80012a6 <StartTask02+0x36>
		  osStatus = osMutexAcquire(logMutexHandle, MAX_MUTEX_WAIT);
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <StartTask02+0xa0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001292:	4618      	mov	r0, r3
 8001294:	f00c fe0a 	bl	800deac <osMutexAcquire>
 8001298:	60f8      	str	r0, [r7, #12]
		  if(osStatus == osOK){
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <StartTask02+0x3e>
			  break;
		  }
		  retries++;
 80012a0:	7afb      	ldrb	r3, [r7, #11]
 80012a2:	3301      	adds	r3, #1
 80012a4:	72fb      	strb	r3, [r7, #11]
	  while(retries < MAX_RETRIES){
 80012a6:	7afb      	ldrb	r3, [r7, #11]
 80012a8:	2b09      	cmp	r3, #9
 80012aa:	d9ee      	bls.n	800128a <StartTask02+0x1a>
 80012ac:	e000      	b.n	80012b0 <StartTask02+0x40>
			  break;
 80012ae:	bf00      	nop
	  }
	  if(osStatus != osOK){
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d12a      	bne.n	800130c <StartTask02+0x9c>
		  continue;
	  }
	  retries = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	72fb      	strb	r3, [r7, #11]

	  /* Simulate printing the temperature log */
	  status = Print_Temperature_Log(temperature_log);
 80012ba:	4816      	ldr	r0, [pc, #88]	@ (8001314 <StartTask02+0xa4>)
 80012bc:	f001 ffe6 	bl	800328c <Print_Temperature_Log>
 80012c0:	4603      	mov	r3, r0
 80012c2:	727b      	strb	r3, [r7, #9]
	  if(status != HAL_OK){
 80012c4:	7a7b      	ldrb	r3, [r7, #9]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00e      	beq.n	80012e8 <StartTask02+0x78>
		  /* If printing the temperature log failed, then we suspend the task. However, we need to release the mutex first */
		  suspend_flag = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	72bb      	strb	r3, [r7, #10]
	  }
	  /* Release the mutex after printing the log */
	  while(retries < MAX_RETRIES){
 80012ce:	e00b      	b.n	80012e8 <StartTask02+0x78>
		  osStatus = osMutexRelease(logMutexHandle);
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <StartTask02+0xa0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00c fe34 	bl	800df42 <osMutexRelease>
 80012da:	60f8      	str	r0, [r7, #12]
		  if(osStatus != osOK){
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d106      	bne.n	80012f0 <StartTask02+0x80>
			  break;
		  }
		  retries++;
 80012e2:	7afb      	ldrb	r3, [r7, #11]
 80012e4:	3301      	adds	r3, #1
 80012e6:	72fb      	strb	r3, [r7, #11]
	  while(retries < MAX_RETRIES){
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	2b09      	cmp	r3, #9
 80012ec:	d9f0      	bls.n	80012d0 <StartTask02+0x60>
 80012ee:	e000      	b.n	80012f2 <StartTask02+0x82>
			  break;
 80012f0:	bf00      	nop
	  }
	  retries = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	72fb      	strb	r3, [r7, #11]

	  if(suspend_flag == 1){
 80012f6:	7abb      	ldrb	r3, [r7, #10]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d102      	bne.n	8001302 <StartTask02+0x92>
		  osThreadSuspend(NULL); // Suspend the current task
 80012fc:	2000      	movs	r0, #0
 80012fe:	f00c fd13 	bl	800dd28 <osThreadSuspend>
	  }

	  /* Delay between printing logs */
	  osDelay(LOG_PRINT_DELAY);
 8001302:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001306:	f00c fd30 	bl	800dd6a <osDelay>
 800130a:	e7cc      	b.n	80012a6 <StartTask02+0x36>
		  continue;
 800130c:	bf00      	nop
	  while(retries < MAX_RETRIES){
 800130e:	e7ca      	b.n	80012a6 <StartTask02+0x36>
 8001310:	24000664 	.word	0x24000664
 8001314:	24000658 	.word	0x24000658

08001318 <get_temperature>:
/**
  * @brief  Simulates retrieving the current temperature using random number generation
  * @retval Temperature value
  * @note	This function will always return a random value between 0 and 40 as those were the values chosen
  */
static int get_temperature(void){
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

	uint32_t temp = random_in_range(&seed, MIN_VAL_FOR_RAND, MAX_VAL_FOR_RAND);
 800131e:	2228      	movs	r2, #40	@ 0x28
 8001320:	2100      	movs	r1, #0
 8001322:	4804      	ldr	r0, [pc, #16]	@ (8001334 <get_temperature+0x1c>)
 8001324:	f000 f826 	bl	8001374 <random_in_range>
 8001328:	6078      	str	r0, [r7, #4]
	return (int)temp; /* Ensure range is valid */
 800132a:	687b      	ldr	r3, [r7, #4]

}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	24000000 	.word	0x24000000

08001338 <generate_random>:
  * @param  seed Pointer to the seed value
  * @retval Generated random number
  * @note   This function updates the seed and returns the next random value.
  */
uint32_t generate_random(uint32_t *seed)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
    /* Ensure the seed pointer is valid */
    if (seed == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <generate_random+0x12>
    {
        return 0; /* Error case, return a default value */
 8001346:	2300      	movs	r3, #0
 8001348:	e00a      	b.n	8001360 <generate_random+0x28>
    }

    /* Update the seed using the LCG formula */
    *seed = (RNG_MULTIPLIER * (*seed) + RNG_INCREMENT) & RNG_MODULUS;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a07      	ldr	r2, [pc, #28]	@ (800136c <generate_random+0x34>)
 8001350:	fb03 f202 	mul.w	r2, r3, r2
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <generate_random+0x38>)
 8001356:	4413      	add	r3, r2
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	6013      	str	r3, [r2, #0]

    /* Return the generated random number */
    return *seed;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	0019660d 	.word	0x0019660d
 8001370:	3c6ef35f 	.word	0x3c6ef35f

08001374 <random_in_range>:
  * @param  max Maximum value of the range
  * @retval Random number within the specified range
  * @note   This function scales the random value to the desired range [min, max].
  */
uint32_t random_in_range(uint32_t *seed, uint32_t min, uint32_t max)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
	/* Ensure valid input range */
    if (seed == NULL || min > max)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <random_in_range+0x1a>
 8001386:	68ba      	ldr	r2, [r7, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	429a      	cmp	r2, r3
 800138c:	d901      	bls.n	8001392 <random_in_range+0x1e>
    {
        return 0; /* Error case, return a default value */
 800138e:	2300      	movs	r3, #0
 8001390:	e00f      	b.n	80013b2 <random_in_range+0x3e>
    }

    /* Generate a random number and scale it to the desired range */
    uint32_t rand_value = generate_random(seed);
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff ffd0 	bl	8001338 <generate_random>
 8001398:	6178      	str	r0, [r7, #20]
    return min + (rand_value % (max - min + 1));
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80013a8:	fb01 f202 	mul.w	r2, r1, r2
 80013ac:	1a9a      	subs	r2, r3, r2
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	4413      	add	r3, r2
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
	...

080013bc <MX_GPIO_Init>:
     PA9   ------> USB_OTG_HS_VBUS
     PH7   ------> SPI5_MISO
     PF11   ------> SPI5_MOSI
*/
void MX_GPIO_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	@ 0x38
 80013c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d2:	4bc1      	ldr	r3, [pc, #772]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	4abf      	ldr	r2, [pc, #764]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80013da:	f043 0302 	orr.w	r3, r3, #2
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e2:	4bbd      	ldr	r3, [pc, #756]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	623b      	str	r3, [r7, #32]
 80013ee:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013f0:	4bb9      	ldr	r3, [pc, #740]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	4ab8      	ldr	r2, [pc, #736]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80013f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001400:	4bb5      	ldr	r3, [pc, #724]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4bb2      	ldr	r3, [pc, #712]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001414:	4ab0      	ldr	r2, [pc, #704]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001416:	f043 0308 	orr.w	r3, r3, #8
 800141a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800141e:	4bae      	ldr	r3, [pc, #696]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	61bb      	str	r3, [r7, #24]
 800142a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4baa      	ldr	r3, [pc, #680]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001432:	4aa9      	ldr	r2, [pc, #676]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143c:	4ba6      	ldr	r3, [pc, #664]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	617b      	str	r3, [r7, #20]
 8001448:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	4ba3      	ldr	r3, [pc, #652]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001450:	4aa1      	ldr	r2, [pc, #644]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145a:	4b9f      	ldr	r3, [pc, #636]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001460:	f003 0310 	and.w	r3, r3, #16
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001468:	4b9b      	ldr	r3, [pc, #620]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800146e:	4a9a      	ldr	r2, [pc, #616]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001478:	4b97      	ldr	r3, [pc, #604]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b94      	ldr	r3, [pc, #592]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148c:	4a92      	ldr	r2, [pc, #584]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 800148e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001492:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001496:	4b90      	ldr	r3, [pc, #576]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a4:	4b8c      	ldr	r3, [pc, #560]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014aa:	4a8b      	ldr	r2, [pc, #556]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80014ac:	f043 0320 	orr.w	r3, r3, #32
 80014b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b4:	4b88      	ldr	r3, [pc, #544]	@ (80016d8 <MX_GPIO_Init+0x31c>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ba:	f003 0320 	and.w	r3, r3, #32
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f240 4102 	movw	r1, #1026	@ 0x402
 80014c8:	4884      	ldr	r0, [pc, #528]	@ (80016dc <MX_GPIO_Init+0x320>)
 80014ca:	f004 ff39 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 80014d4:	4882      	ldr	r0, [pc, #520]	@ (80016e0 <MX_GPIO_Init+0x324>)
 80014d6:	f004 ff33 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80014da:	2200      	movs	r2, #0
 80014dc:	f248 1138 	movw	r1, #33080	@ 0x8138
 80014e0:	4880      	ldr	r0, [pc, #512]	@ (80016e4 <MX_GPIO_Init+0x328>)
 80014e2:	f004 ff2d 	bl	8006340 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210c      	movs	r1, #12
 80014ea:	487f      	ldr	r0, [pc, #508]	@ (80016e8 <MX_GPIO_Init+0x32c>)
 80014ec:	f004 ff28 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f6:	487d      	ldr	r0, [pc, #500]	@ (80016ec <MX_GPIO_Init+0x330>)
 80014f8:	f004 ff22 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2160      	movs	r1, #96	@ 0x60
 8001500:	487b      	ldr	r0, [pc, #492]	@ (80016f0 <MX_GPIO_Init+0x334>)
 8001502:	f004 ff1d 	bl	8006340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 8001506:	f240 4302 	movw	r3, #1026	@ 0x402
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4619      	mov	r1, r3
 800151e:	486f      	ldr	r0, [pc, #444]	@ (80016dc <MX_GPIO_Init+0x320>)
 8001520:	f004 fd66 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 8001524:	2330      	movs	r3, #48	@ 0x30
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001530:	2300      	movs	r3, #0
 8001532:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001534:	230a      	movs	r3, #10
 8001536:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001538:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153c:	4619      	mov	r1, r3
 800153e:	4868      	ldr	r0, [pc, #416]	@ (80016e0 <MX_GPIO_Init+0x324>)
 8001540:	f004 fd56 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 8001544:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154a:	2301      	movs	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001556:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800155a:	4619      	mov	r1, r3
 800155c:	4860      	ldr	r0, [pc, #384]	@ (80016e0 <MX_GPIO_Init+0x324>)
 800155e:	f004 fd47 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 8001562:	f242 0304 	movw	r3, #8196	@ 0x2004
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001568:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800156c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	485a      	ldr	r0, [pc, #360]	@ (80016e4 <MX_GPIO_Init+0x328>)
 800157a:	f004 fd39 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 800157e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001584:	2300      	movs	r3, #0
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	4855      	ldr	r0, [pc, #340]	@ (80016e8 <MX_GPIO_Init+0x32c>)
 8001594:	f004 fd2c 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001598:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80015aa:	230a      	movs	r3, #10
 80015ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	484f      	ldr	r0, [pc, #316]	@ (80016f4 <MX_GPIO_Init+0x338>)
 80015b6:	f004 fd1b 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80015ba:	f248 1338 	movw	r3, #33080	@ 0x8138
 80015be:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c0:	2301      	movs	r3, #1
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d0:	4619      	mov	r1, r3
 80015d2:	4844      	ldr	r0, [pc, #272]	@ (80016e4 <MX_GPIO_Init+0x328>)
 80015d4:	f004 fd0c 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80015d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015de:	2300      	movs	r3, #0
 80015e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4841      	ldr	r0, [pc, #260]	@ (80016f4 <MX_GPIO_Init+0x338>)
 80015ee:	f004 fcff 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015f2:	2320      	movs	r3, #32
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4839      	ldr	r0, [pc, #228]	@ (80016ec <MX_GPIO_Init+0x330>)
 8001608:	f004 fcf2 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 800160c:	230c      	movs	r3, #12
 800160e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4831      	ldr	r0, [pc, #196]	@ (80016e8 <MX_GPIO_Init+0x32c>)
 8001624:	f004 fce4 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001634:	2300      	movs	r3, #0
 8001636:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001638:	2305      	movs	r3, #5
 800163a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	482b      	ldr	r0, [pc, #172]	@ (80016f0 <MX_GPIO_Init+0x334>)
 8001644:	f004 fcd4 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001648:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800165a:	2305      	movs	r3, #5
 800165c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001662:	4619      	mov	r1, r3
 8001664:	4821      	ldr	r0, [pc, #132]	@ (80016ec <MX_GPIO_Init+0x330>)
 8001666:	f004 fcc3 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 800166a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001670:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 800167a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800167e:	4619      	mov	r1, r3
 8001680:	4817      	ldr	r0, [pc, #92]	@ (80016e0 <MX_GPIO_Init+0x324>)
 8001682:	f004 fcb5 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 8001686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800168a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169c:	4619      	mov	r1, r3
 800169e:	4813      	ldr	r0, [pc, #76]	@ (80016ec <MX_GPIO_Init+0x330>)
 80016a0:	f004 fca6 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	480d      	ldr	r0, [pc, #52]	@ (80016f0 <MX_GPIO_Init+0x334>)
 80016bc:	f004 fc98 	bl	8005ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80016c0:	2360      	movs	r3, #96	@ 0x60
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016d4:	e010      	b.n	80016f8 <MX_GPIO_Init+0x33c>
 80016d6:	bf00      	nop
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58020c00 	.word	0x58020c00
 80016e0:	58021000 	.word	0x58021000
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58020800 	.word	0x58020800
 80016ec:	58021400 	.word	0x58021400
 80016f0:	58021c00 	.word	0x58021c00
 80016f4:	58020000 	.word	0x58020000
 80016f8:	4619      	mov	r1, r3
 80016fa:	4803      	ldr	r0, [pc, #12]	@ (8001708 <MX_GPIO_Init+0x34c>)
 80016fc:	f004 fc78 	bl	8005ff0 <HAL_GPIO_Init>

}
 8001700:	bf00      	nop
 8001702:	3738      	adds	r7, #56	@ 0x38
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	58021c00 	.word	0x58021c00

0800170c <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001710:	4b1b      	ldr	r3, [pc, #108]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001712:	4a1c      	ldr	r2, [pc, #112]	@ (8001784 <MX_I2C4_Init+0x78>)
 8001714:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 8001716:	4b1a      	ldr	r3, [pc, #104]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001718:	4a1b      	ldr	r2, [pc, #108]	@ (8001788 <MX_I2C4_Init+0x7c>)
 800171a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800171c:	4b18      	ldr	r3, [pc, #96]	@ (8001780 <MX_I2C4_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001724:	2201      	movs	r2, #1
 8001726:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001728:	4b15      	ldr	r3, [pc, #84]	@ (8001780 <MX_I2C4_Init+0x74>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800172e:	4b14      	ldr	r3, [pc, #80]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001734:	4b12      	ldr	r3, [pc, #72]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800173a:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <MX_I2C4_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001740:	4b0f      	ldr	r3, [pc, #60]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001746:	480e      	ldr	r0, [pc, #56]	@ (8001780 <MX_I2C4_Init+0x74>)
 8001748:	f004 fe14 	bl	8006374 <HAL_I2C_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001752:	f000 fba9 	bl	8001ea8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4809      	ldr	r0, [pc, #36]	@ (8001780 <MX_I2C4_Init+0x74>)
 800175a:	f004 fea7 	bl	80064ac <HAL_I2CEx_ConfigAnalogFilter>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001764:	f000 fba0 	bl	8001ea8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	4805      	ldr	r0, [pc, #20]	@ (8001780 <MX_I2C4_Init+0x74>)
 800176c:	f004 fee9 	bl	8006542 <HAL_I2CEx_ConfigDigitalFilter>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001776:	f000 fb97 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	24000670 	.word	0x24000670
 8001784:	58001c00 	.word	0x58001c00
 8001788:	60404e72 	.word	0x60404e72

0800178c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b0b8      	sub	sp, #224	@ 0xe0
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	22b8      	movs	r2, #184	@ 0xb8
 80017aa:	2100      	movs	r1, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	f010 f9cc 	bl	8011b4a <memset>
  if(i2cHandle->Instance==I2C4)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_I2C_MspInit+0xc8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d146      	bne.n	800184a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80017bc:	f04f 0210 	mov.w	r2, #16
 80017c0:	f04f 0300 	mov.w	r3, #0
 80017c4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4618      	mov	r0, r3
 80017d4:	f007 f890 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80017de:	f000 fb63 	bl	8001ea8 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 80017ea:	f043 0320 	orr.w	r3, r3, #32
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f2:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f8:	f003 0320 	and.w	r3, r3, #32
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001800:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001804:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001808:	2312      	movs	r3, #18
 800180a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180e:	2301      	movs	r3, #1
 8001810:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001814:	2300      	movs	r3, #0
 8001816:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800181a:	2304      	movs	r3, #4
 800181c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001820:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001824:	4619      	mov	r1, r3
 8001826:	480d      	ldr	r0, [pc, #52]	@ (800185c <HAL_I2C_MspInit+0xd0>)
 8001828:	f004 fbe2 	bl	8005ff0 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 800182c:	4b0a      	ldr	r3, [pc, #40]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 800182e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001832:	4a09      	ldr	r2, [pc, #36]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 8001834:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001838:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <HAL_I2C_MspInit+0xcc>)
 800183e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 800184a:	bf00      	nop
 800184c:	37e0      	adds	r7, #224	@ 0xe0
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	58001c00 	.word	0x58001c00
 8001858:	58024400 	.word	0x58024400
 800185c:	58021400 	.word	0x58021400

08001860 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b09a      	sub	sp, #104	@ 0x68
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001866:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800186a:	2234      	movs	r2, #52	@ 0x34
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f010 f96b 	bl	8011b4a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001874:	463b      	mov	r3, r7
 8001876:	2234      	movs	r2, #52	@ 0x34
 8001878:	2100      	movs	r1, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f010 f965 	bl	8011b4a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001880:	4b4e      	ldr	r3, [pc, #312]	@ (80019bc <MX_LTDC_Init+0x15c>)
 8001882:	4a4f      	ldr	r2, [pc, #316]	@ (80019c0 <MX_LTDC_Init+0x160>)
 8001884:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001886:	4b4d      	ldr	r3, [pc, #308]	@ (80019bc <MX_LTDC_Init+0x15c>)
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800188c:	4b4b      	ldr	r3, [pc, #300]	@ (80019bc <MX_LTDC_Init+0x15c>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001892:	4b4a      	ldr	r3, [pc, #296]	@ (80019bc <MX_LTDC_Init+0x15c>)
 8001894:	2200      	movs	r2, #0
 8001896:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001898:	4b48      	ldr	r3, [pc, #288]	@ (80019bc <MX_LTDC_Init+0x15c>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018a0:	2207      	movs	r2, #7
 80018a2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80018a4:	4b45      	ldr	r3, [pc, #276]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018a6:	2203      	movs	r2, #3
 80018a8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80018aa:	4b44      	ldr	r3, [pc, #272]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018ac:	220e      	movs	r2, #14
 80018ae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80018b0:	4b42      	ldr	r3, [pc, #264]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018b2:	2205      	movs	r2, #5
 80018b4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018b8:	f240 228e 	movw	r2, #654	@ 0x28e
 80018bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80018be:	4b3f      	ldr	r3, [pc, #252]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018c0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80018c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018c8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80018cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80018ce:	4b3b      	ldr	r3, [pc, #236]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018d0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80018d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80018de:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80018e6:	4b35      	ldr	r3, [pc, #212]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80018ee:	4833      	ldr	r0, [pc, #204]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80018f0:	f004 fe74 	bl	80065dc <HAL_LTDC_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80018fa:	f000 fad5 	bl	8001ea8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800190e:	2300      	movs	r3, #0
 8001910:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001916:	2300      	movs	r3, #0
 8001918:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800191a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001920:	2305      	movs	r3, #5
 8001922:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001924:	2300      	movs	r3, #0
 8001926:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800192c:	2300      	movs	r3, #0
 800192e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001942:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001946:	2200      	movs	r2, #0
 8001948:	4619      	mov	r1, r3
 800194a:	481c      	ldr	r0, [pc, #112]	@ (80019bc <MX_LTDC_Init+0x15c>)
 800194c:	f004 ff16 	bl	800677c <HAL_LTDC_ConfigLayer>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001956:	f000 faa7 	bl	8001ea8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800197c:	2305      	movs	r3, #5
 800197e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	2201      	movs	r2, #1
 80019a2:	4619      	mov	r1, r3
 80019a4:	4805      	ldr	r0, [pc, #20]	@ (80019bc <MX_LTDC_Init+0x15c>)
 80019a6:	f004 fee9 	bl	800677c <HAL_LTDC_ConfigLayer>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80019b0:	f000 fa7a 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	3768      	adds	r7, #104	@ 0x68
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	240006c4 	.word	0x240006c4
 80019c0:	50001000 	.word	0x50001000

080019c4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b0be      	sub	sp, #248	@ 0xf8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
 80019da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019e0:	22b8      	movs	r2, #184	@ 0xb8
 80019e2:	2100      	movs	r1, #0
 80019e4:	4618      	mov	r0, r3
 80019e6:	f010 f8b0 	bl	8011b4a <memset>
  if(ltdcHandle->Instance==LTDC)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4ab1      	ldr	r2, [pc, #708]	@ (8001cb4 <HAL_LTDC_MspInit+0x2f0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	f040 815b 	bne.w	8001cac <HAL_LTDC_MspInit+0x2e8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019f6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80019fa:	f04f 0300 	mov.w	r3, #0
 80019fe:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001a02:	2320      	movs	r3, #32
 8001a04:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 8001a06:	2381      	movs	r3, #129	@ 0x81
 8001a08:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001a12:	2302      	movs	r3, #2
 8001a14:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001a16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a1a:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 ff65 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8001a34:	f000 fa38 	bl	8001ea8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a38:	4b9f      	ldr	r3, [pc, #636]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a3e:	4a9e      	ldr	r2, [pc, #632]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001a48:	4b9b      	ldr	r3, [pc, #620]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b98      	ldr	r3, [pc, #608]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5c:	4a96      	ldr	r2, [pc, #600]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a5e:	f043 0302 	orr.w	r3, r3, #2
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a66:	4b94      	ldr	r3, [pc, #592]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	623b      	str	r3, [r7, #32]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a74:	4b90      	ldr	r3, [pc, #576]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a7a:	4a8f      	ldr	r2, [pc, #572]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a84:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a92:	4b89      	ldr	r3, [pc, #548]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a98:	4a87      	ldr	r2, [pc, #540]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001a9a:	f043 0310 	orr.w	r3, r3, #16
 8001a9e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa2:	4b85      	ldr	r3, [pc, #532]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab0:	4b81      	ldr	r3, [pc, #516]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab6:	4a80      	ldr	r2, [pc, #512]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac0:	4b7d      	ldr	r3, [pc, #500]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ace:	4b7a      	ldr	r3, [pc, #488]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ad4:	4a78      	ldr	r2, [pc, #480]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ada:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ade:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aec:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af2:	4a71      	ldr	r2, [pc, #452]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001af8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afc:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b10:	4a69      	ldr	r2, [pc, #420]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b1a:	4b67      	ldr	r3, [pc, #412]	@ (8001cb8 <HAL_LTDC_MspInit+0x2f4>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	60bb      	str	r3, [r7, #8]
 8001b26:	68bb      	ldr	r3, [r7, #8]
    PH3     ------> LTDC_R1
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001b28:	f240 3303 	movw	r3, #771	@ 0x303
 8001b2c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b42:	230e      	movs	r3, #14
 8001b44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	485b      	ldr	r0, [pc, #364]	@ (8001cbc <HAL_LTDC_MspInit+0x2f8>)
 8001b50:	f004 fa4e 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001b54:	2349      	movs	r3, #73	@ 0x49
 8001b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6c:	230e      	movs	r3, #14
 8001b6e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b72:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b76:	4619      	mov	r1, r3
 8001b78:	4851      	ldr	r0, [pc, #324]	@ (8001cc0 <HAL_LTDC_MspInit+0x2fc>)
 8001b7a:	f004 fa39 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001b7e:	f64b 0303 	movw	r3, #47107	@ 0xb803
 8001b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R7_Pin|LCD_G3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b98:	230e      	movs	r3, #14
 8001b9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4847      	ldr	r0, [pc, #284]	@ (8001cc4 <HAL_LTDC_MspInit+0x300>)
 8001ba6:	f004 fa23 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001baa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001bc4:	230d      	movs	r3, #13
 8001bc6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001bca:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bce:	4619      	mov	r1, r3
 8001bd0:	483d      	ldr	r0, [pc, #244]	@ (8001cc8 <HAL_LTDC_MspInit+0x304>)
 8001bd2:	f004 fa0d 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001bd6:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bf0:	230e      	movs	r3, #14
 8001bf2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4833      	ldr	r0, [pc, #204]	@ (8001ccc <HAL_LTDC_MspInit+0x308>)
 8001bfe:	f004 f9f7 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001c02:	f648 7308 	movw	r3, #36616	@ 0x8f08
 8001c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R4_Pin|LCD_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c1c:	230e      	movs	r3, #14
 8001c1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c22:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4829      	ldr	r0, [pc, #164]	@ (8001cd0 <HAL_LTDC_MspInit+0x30c>)
 8001c2a:	f004 f9e1 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001c2e:	23c0      	movs	r3, #192	@ 0xc0
 8001c30:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c46:	230e      	movs	r3, #14
 8001c48:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c50:	4619      	mov	r1, r3
 8001c52:	4820      	ldr	r0, [pc, #128]	@ (8001cd4 <HAL_LTDC_MspInit+0x310>)
 8001c54:	f004 f9cc 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 8001c58:	2358      	movs	r3, #88	@ 0x58
 8001c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c70:	230e      	movs	r3, #14
 8001c72:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c76:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4812      	ldr	r0, [pc, #72]	@ (8001cc8 <HAL_LTDC_MspInit+0x304>)
 8001c7e:	f004 f9b7 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001c82:	2310      	movs	r3, #16
 8001c84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c9a:	2309      	movs	r3, #9
 8001c9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001ca0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480a      	ldr	r0, [pc, #40]	@ (8001cd0 <HAL_LTDC_MspInit+0x30c>)
 8001ca8:	f004 f9a2 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001cac:	bf00      	nop
 8001cae:	37f8      	adds	r7, #248	@ 0xf8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	50001000 	.word	0x50001000
 8001cb8:	58024400 	.word	0x58024400
 8001cbc:	58020400 	.word	0x58020400
 8001cc0:	58020c00 	.word	0x58020c00
 8001cc4:	58021000 	.word	0x58021000
 8001cc8:	58020000 	.word	0x58020000
 8001ccc:	58021800 	.word	0x58021800
 8001cd0:	58021c00 	.word	0x58021c00
 8001cd4:	58020800 	.word	0x58020800

08001cd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cdc:	f001 fb48 	bl	8003370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce0:	f000 f830 	bl	8001d44 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ce4:	f000 f89e 	bl	8001e24 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ce8:	f7ff fb68 	bl	80013bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cec:	f7fe fce0 	bl	80006b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001cf0:	f7fe fd58 	bl	80007a4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001cf4:	f7fe fdbc 	bl	8000870 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001cf8:	f7fe ff24 	bl	8000b44 <MX_DAC1_Init>
  MX_ETH_Init();
 8001cfc:	f7fe ffa2 	bl	8000c44 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8001d00:	f7ff f898 	bl	8000e34 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001d04:	f7ff f8fa 	bl	8000efc <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8001d08:	f7ff fd00 	bl	800170c <MX_I2C4_Init>
  MX_LTDC_Init();
 8001d0c:	f7ff fda8 	bl	8001860 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8001d10:	f000 f8d0 	bl	8001eb4 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001d14:	f000 f932 	bl	8001f7c <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8001d18:	f000 fbb4 	bl	8002484 <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8001d1c:	f000 ff0c 	bl	8002b38 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001d20:	f000 ff98 	bl	8002c54 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d24:	f001 f806 	bl	8002d34 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001d28:	f001 f95e 	bl	8002fe8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001d2c:	f001 f9a8 	bl	8003080 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001d30:	f001 faec 	bl	800330c <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d34:	f00b ff1c 	bl	800db70 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d38:	f7ff fa14 	bl	8001164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d3c:	f00b ff3c 	bl	800dbb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <main+0x68>

08001d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09c      	sub	sp, #112	@ 0x70
 8001d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4e:	224c      	movs	r2, #76	@ 0x4c
 8001d50:	2100      	movs	r1, #0
 8001d52:	4618      	mov	r0, r3
 8001d54:	f00f fef9 	bl	8011b4a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00f fef3 	bl	8011b4a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001d64:	2004      	movs	r0, #4
 8001d66:	f005 fdc5 	bl	80078f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001e20 <SystemClock_Config+0xdc>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	4a2b      	ldr	r2, [pc, #172]	@ (8001e20 <SystemClock_Config+0xdc>)
 8001d74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d78:	6193      	str	r3, [r2, #24]
 8001d7a:	4b29      	ldr	r3, [pc, #164]	@ (8001e20 <SystemClock_Config+0xdc>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d82:	603b      	str	r3, [r7, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d86:	bf00      	nop
 8001d88:	4b25      	ldr	r3, [pc, #148]	@ (8001e20 <SystemClock_Config+0xdc>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d94:	d1f8      	bne.n	8001d88 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001d96:	2321      	movs	r3, #33	@ 0x21
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d9a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001da0:	2301      	movs	r3, #1
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001da4:	2302      	movs	r3, #2
 8001da6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001da8:	2302      	movs	r3, #2
 8001daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001dac:	2305      	movs	r3, #5
 8001dae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001db0:	236e      	movs	r3, #110	@ 0x6e
 8001db2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001db8:	2304      	movs	r3, #4
 8001dba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001dc0:	2308      	movs	r3, #8
 8001dc2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f005 fde9 	bl	80079a8 <HAL_RCC_OscConfig>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001ddc:	f000 f864 	bl	8001ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de0:	233f      	movs	r3, #63	@ 0x3f
 8001de2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de4:	2303      	movs	r3, #3
 8001de6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001de8:	2300      	movs	r3, #0
 8001dea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001dec:	2308      	movs	r3, #8
 8001dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001df0:	2340      	movs	r3, #64	@ 0x40
 8001df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001df4:	2340      	movs	r3, #64	@ 0x40
 8001df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dfc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001dfe:	2340      	movs	r3, #64	@ 0x40
 8001e00:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2103      	movs	r1, #3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f006 f9a8 	bl	800815c <HAL_RCC_ClockConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e12:	f000 f849 	bl	8001ea8 <Error_Handler>
  }
}
 8001e16:	bf00      	nop
 8001e18:	3770      	adds	r7, #112	@ 0x70
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	58024800 	.word	0x58024800

08001e24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b0ae      	sub	sp, #184	@ 0xb8
 8001e28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	22b8      	movs	r2, #184	@ 0xb8
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4618      	mov	r0, r3
 8001e32:	f00f fe8a 	bl	8011b4a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e36:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001e42:	2305      	movs	r3, #5
 8001e44:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8001e46:	2350      	movs	r3, #80	@ 0x50
 8001e48:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001e52:	2302      	movs	r3, #2
 8001e54:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e68:	463b      	mov	r3, r7
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f006 fd44 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001e76:	f000 f817 	bl	8001ea8 <Error_Handler>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	37b8      	adds	r7, #184	@ 0xb8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e96:	f001 faa7 	bl	80033e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40001000 	.word	0x40001000

08001ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eac:	b672      	cpsid	i
}
 8001eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb0:	bf00      	nop
 8001eb2:	e7fd      	b.n	8001eb0 <Error_Handler+0x8>

08001eb4 <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001eba:	463b      	mov	r3, r7
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
 8001ec4:	60da      	str	r2, [r3, #12]
 8001ec6:	611a      	str	r2, [r3, #16]
 8001ec8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001eca:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ecc:	4a29      	ldr	r2, [pc, #164]	@ (8001f74 <MX_OCTOSPI1_Init+0xc0>)
 8001ece:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001ed0:	4b27      	ldr	r3, [pc, #156]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001edc:	4b24      	ldr	r3, [pc, #144]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001ee8:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001eee:	4b20      	ldr	r3, [pc, #128]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001efa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001f06:	4b1a      	ldr	r3, [pc, #104]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001f0c:	4b18      	ldr	r3, [pc, #96]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001f12:	4b17      	ldr	r3, [pc, #92]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001f18:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001f1e:	4b14      	ldr	r3, [pc, #80]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001f24:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001f2a:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f2c:	f004 fdfe 	bl	8006b2c <HAL_OSPI_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8001f36:	f7ff ffb7 	bl	8001ea8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001f42:	2301      	movs	r3, #1
 8001f44:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001f46:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001f4a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <MX_OCTOSPI1_Init+0xc4>)
 8001f4e:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f56:	4619      	mov	r1, r3
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <MX_OCTOSPI1_Init+0xbc>)
 8001f5a:	f004 fef1 	bl	8006d40 <HAL_OSPIM_Config>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_OCTOSPI1_Init+0xb4>
  {
    Error_Handler();
 8001f64:	f7ff ffa0 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2400076c 	.word	0x2400076c
 8001f74:	52005000 	.word	0x52005000
 8001f78:	01000001 	.word	0x01000001

08001f7c <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08a      	sub	sp, #40	@ 0x28
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001f82:	f107 0310 	add.w	r3, r7, #16
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001f94:	463b      	mov	r3, r7
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	605a      	str	r2, [r3, #4]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fa2:	4a34      	ldr	r2, [pc, #208]	@ (8002074 <MX_OCTOSPI2_Init+0xf8>)
 8001fa4:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001fa6:	4b32      	ldr	r3, [pc, #200]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001fac:	4b30      	ldr	r3, [pc, #192]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001fb2:	4b2f      	ldr	r3, [pc, #188]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001fb8:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001fba:	4b2d      	ldr	r3, [pc, #180]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001fcc:	4b28      	ldr	r3, [pc, #160]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001fd2:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001fd8:	4b25      	ldr	r3, [pc, #148]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001fde:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001fe4:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001fea:	4b21      	ldr	r3, [pc, #132]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001ff0:	4b1f      	ldr	r3, [pc, #124]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8002002:	481b      	ldr	r0, [pc, #108]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8002004:	f004 fd92 	bl	8006b2c <HAL_OSPI_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 800200e:	f7ff ff4b 	bl	8001ea8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8002012:	2302      	movs	r3, #2
 8002014:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8002016:	2302      	movs	r3, #2
 8002018:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 800201a:	2302      	movs	r3, #2
 800201c:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <MX_OCTOSPI2_Init+0xfc>)
 8002020:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_OCTOSPI2_Init+0x100>)
 8002024:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002026:	f107 0310 	add.w	r3, r7, #16
 800202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202e:	4619      	mov	r1, r3
 8002030:	480f      	ldr	r0, [pc, #60]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 8002032:	f004 fe85 	bl	8006d40 <HAL_OSPIM_Config>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <MX_OCTOSPI2_Init+0xc4>
  {
    Error_Handler();
 800203c:	f7ff ff34 	bl	8001ea8 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8002048:	2302      	movs	r3, #2
 800204a:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8002050:	463b      	mov	r3, r7
 8002052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	@ (8002070 <MX_OCTOSPI2_Init+0xf4>)
 800205a:	f004 fe23 	bl	8006ca4 <HAL_OSPI_HyperbusCfg>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_OCTOSPI2_Init+0xec>
  {
    Error_Handler();
 8002064:	f7ff ff20 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	@ 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	240007c8 	.word	0x240007c8
 8002074:	5200a000 	.word	0x5200a000
 8002078:	00010002 	.word	0x00010002
 800207c:	01000002 	.word	0x01000002

08002080 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0c2      	sub	sp, #264	@ 0x108
 8002084:	af00      	add	r7, sp, #0
 8002086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800208a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800208e:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020a4:	22b8      	movs	r2, #184	@ 0xb8
 80020a6:	2100      	movs	r1, #0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00f fd4e 	bl	8011b4a <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 80020ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80020b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a90      	ldr	r2, [pc, #576]	@ (80022fc <HAL_OSPI_MspInit+0x27c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	f040 812d 	bne.w	800231c <HAL_OSPI_MspInit+0x29c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80020c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020d8:	4618      	mov	r0, r3
 80020da:	f006 fc0d 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80020e4:	f7ff fee0 	bl	8001ea8 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80020e8:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_OSPI_MspInit+0x280>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3301      	adds	r3, #1
 80020ee:	4a84      	ldr	r2, [pc, #528]	@ (8002300 <HAL_OSPI_MspInit+0x280>)
 80020f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80020f2:	4b83      	ldr	r3, [pc, #524]	@ (8002300 <HAL_OSPI_MspInit+0x280>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10e      	bne.n	8002118 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 80020fc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002100:	4a80      	ldr	r2, [pc, #512]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002102:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002106:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800210a:	4b7e      	ldr	r3, [pc, #504]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800210c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
 8002116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002118:	4b7a      	ldr	r3, [pc, #488]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800211a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800211e:	4a79      	ldr	r2, [pc, #484]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002124:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002128:	4b76      	ldr	r3, [pc, #472]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800212a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800212e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
 8002134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002136:	4b73      	ldr	r3, [pc, #460]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002138:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800213c:	4a71      	ldr	r2, [pc, #452]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800213e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002142:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002146:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800214c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800215a:	4a6a      	ldr	r2, [pc, #424]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800215c:	f043 0308 	orr.w	r3, r3, #8
 8002160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002164:	4b67      	ldr	r3, [pc, #412]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002172:	4b64      	ldr	r3, [pc, #400]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002178:	4a62      	ldr	r2, [pc, #392]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 800217a:	f043 0310 	orr.w	r3, r3, #16
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002182:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002190:	4b5c      	ldr	r3, [pc, #368]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002196:	4a5b      	ldr	r2, [pc, #364]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021a0:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 80021a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a6:	f003 0320 	and.w	r3, r3, #32
 80021aa:	623b      	str	r3, [r7, #32]
 80021ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	4b55      	ldr	r3, [pc, #340]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 80021b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b4:	4a53      	ldr	r2, [pc, #332]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021be:	4b51      	ldr	r3, [pc, #324]	@ (8002304 <HAL_OSPI_MspInit+0x284>)
 80021c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	61fb      	str	r3, [r7, #28]
 80021ca:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80021cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	2302      	movs	r3, #2
 80021d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e0:	2303      	movs	r3, #3
 80021e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80021e6:	2309      	movs	r3, #9
 80021e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4845      	ldr	r0, [pc, #276]	@ (8002308 <HAL_OSPI_MspInit+0x288>)
 80021f4:	f003 fefc 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 80021f8:	23b0      	movs	r3, #176	@ 0xb0
 80021fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fe:	2302      	movs	r3, #2
 8002200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220a:	2303      	movs	r3, #3
 800220c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002210:	230a      	movs	r3, #10
 8002212:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002216:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800221a:	4619      	mov	r1, r3
 800221c:	483b      	ldr	r0, [pc, #236]	@ (800230c <HAL_OSPI_MspInit+0x28c>)
 800221e:	f003 fee7 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 8002222:	2304      	movs	r3, #4
 8002224:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800223a:	2309      	movs	r3, #9
 800223c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8002240:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002244:	4619      	mov	r1, r3
 8002246:	4832      	ldr	r0, [pc, #200]	@ (8002310 <HAL_OSPI_MspInit+0x290>)
 8002248:	f003 fed2 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 800224c:	2340      	movs	r3, #64	@ 0x40
 800224e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002252:	2302      	movs	r3, #2
 8002254:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002264:	230a      	movs	r3, #10
 8002266:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 800226a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800226e:	4619      	mov	r1, r3
 8002270:	4825      	ldr	r0, [pc, #148]	@ (8002308 <HAL_OSPI_MspInit+0x288>)
 8002272:	f003 febd 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 8002276:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800227a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228a:	2303      	movs	r3, #3
 800228c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002290:	2309      	movs	r3, #9
 8002292:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002296:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800229a:	4619      	mov	r1, r3
 800229c:	481b      	ldr	r0, [pc, #108]	@ (800230c <HAL_OSPI_MspInit+0x28c>)
 800229e:	f003 fea7 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80022a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022a6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022aa:	2302      	movs	r3, #2
 80022ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80022bc:	2309      	movs	r3, #9
 80022be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4812      	ldr	r0, [pc, #72]	@ (8002314 <HAL_OSPI_MspInit+0x294>)
 80022ca:	f003 fe91 	bl	8005ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 80022ce:	2304      	movs	r3, #4
 80022d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80022e6:	230a      	movs	r3, #10
 80022e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 80022ec:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4809      	ldr	r0, [pc, #36]	@ (8002318 <HAL_OSPI_MspInit+0x298>)
 80022f4:	f003 fe7c 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 80022f8:	e0b4      	b.n	8002464 <HAL_OSPI_MspInit+0x3e4>
 80022fa:	bf00      	nop
 80022fc:	52005000 	.word	0x52005000
 8002300:	24000824 	.word	0x24000824
 8002304:	58024400 	.word	0x58024400
 8002308:	58021800 	.word	0x58021800
 800230c:	58020c00 	.word	0x58020c00
 8002310:	58021000 	.word	0x58021000
 8002314:	58021400 	.word	0x58021400
 8002318:	58020400 	.word	0x58020400
  else if(ospiHandle->Instance==OCTOSPI2)
 800231c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a51      	ldr	r2, [pc, #324]	@ (8002470 <HAL_OSPI_MspInit+0x3f0>)
 800232a:	4293      	cmp	r3, r2
 800232c:	f040 809a 	bne.w	8002464 <HAL_OSPI_MspInit+0x3e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002330:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002334:	f04f 0300 	mov.w	r3, #0
 8002338:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002342:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002346:	4618      	mov	r0, r3
 8002348:	f006 fad6 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_OSPI_MspInit+0x2d6>
      Error_Handler();
 8002352:	f7ff fda9 	bl	8001ea8 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002356:	4b47      	ldr	r3, [pc, #284]	@ (8002474 <HAL_OSPI_MspInit+0x3f4>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	4a45      	ldr	r2, [pc, #276]	@ (8002474 <HAL_OSPI_MspInit+0x3f4>)
 800235e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8002360:	4b44      	ldr	r3, [pc, #272]	@ (8002474 <HAL_OSPI_MspInit+0x3f4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10e      	bne.n	8002386 <HAL_OSPI_MspInit+0x306>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002368:	4b43      	ldr	r3, [pc, #268]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 800236a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800236e:	4a42      	ldr	r2, [pc, #264]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 8002370:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002374:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002378:	4b3f      	ldr	r3, [pc, #252]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 800237a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800237e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002386:	4b3c      	ldr	r3, [pc, #240]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 8002388:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800238c:	4a3a      	ldr	r2, [pc, #232]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 800238e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002392:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002396:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 8002398:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800239c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023a0:	617b      	str	r3, [r7, #20]
 80023a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023a4:	4b34      	ldr	r3, [pc, #208]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023aa:	4a33      	ldr	r2, [pc, #204]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023b4:	4b30      	ldr	r3, [pc, #192]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023ca:	f043 0320 	orr.w	r3, r3, #32
 80023ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023d2:	4b29      	ldr	r3, [pc, #164]	@ (8002478 <HAL_OSPI_MspInit+0x3f8>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 80023e0:	f640 0303 	movw	r3, #2051	@ 0x803
 80023e4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e8:	2302      	movs	r3, #2
 80023ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f4:	2303      	movs	r3, #3
 80023f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80023fa:	2309      	movs	r3, #9
 80023fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002400:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002404:	4619      	mov	r1, r3
 8002406:	481d      	ldr	r0, [pc, #116]	@ (800247c <HAL_OSPI_MspInit+0x3fc>)
 8002408:	f003 fdf2 	bl	8005ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 800240c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002410:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241a:	2300      	movs	r3, #0
 800241c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 8002426:	2303      	movs	r3, #3
 8002428:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800242c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002430:	4619      	mov	r1, r3
 8002432:	4812      	ldr	r0, [pc, #72]	@ (800247c <HAL_OSPI_MspInit+0x3fc>)
 8002434:	f003 fddc 	bl	8005ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8002438:	f241 031f 	movw	r3, #4127	@ 0x101f
 800243c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002452:	2309      	movs	r3, #9
 8002454:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002458:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800245c:	4619      	mov	r1, r3
 800245e:	4808      	ldr	r0, [pc, #32]	@ (8002480 <HAL_OSPI_MspInit+0x400>)
 8002460:	f003 fdc6 	bl	8005ff0 <HAL_GPIO_Init>
}
 8002464:	bf00      	nop
 8002466:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	5200a000 	.word	0x5200a000
 8002474:	24000824 	.word	0x24000824
 8002478:	58024400 	.word	0x58024400
 800247c:	58021800 	.word	0x58021800
 8002480:	58021400 	.word	0x58021400

08002484 <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002488:	4b58      	ldr	r3, [pc, #352]	@ (80025ec <MX_SAI1_Init+0x168>)
 800248a:	4a59      	ldr	r2, [pc, #356]	@ (80025f0 <MX_SAI1_Init+0x16c>)
 800248c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800248e:	4b57      	ldr	r3, [pc, #348]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002490:	2200      	movs	r2, #0
 8002492:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 8002494:	4b55      	ldr	r3, [pc, #340]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002496:	2203      	movs	r2, #3
 8002498:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800249a:	4b54      	ldr	r3, [pc, #336]	@ (80025ec <MX_SAI1_Init+0x168>)
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80024a0:	4b52      	ldr	r3, [pc, #328]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80024a6:	4b51      	ldr	r3, [pc, #324]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 80024ac:	4b4f      	ldr	r3, [pc, #316]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024ae:	2201      	movs	r2, #1
 80024b0:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80024b8:	4b4c      	ldr	r3, [pc, #304]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80024be:	4b4b      	ldr	r3, [pc, #300]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80024c4:	4b49      	ldr	r3, [pc, #292]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80024ca:	4b48      	ldr	r3, [pc, #288]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80024d0:	4b46      	ldr	r3, [pc, #280]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80024d6:	4b45      	ldr	r3, [pc, #276]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 80024de:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80024e4:	4b41      	ldr	r3, [pc, #260]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80024ec:	4b3f      	ldr	r3, [pc, #252]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024ee:	2208      	movs	r2, #8
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80024f2:	4b3e      	ldr	r3, [pc, #248]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80024f8:	4b3c      	ldr	r3, [pc, #240]	@ (80025ec <MX_SAI1_Init+0x168>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80024fe:	4b3b      	ldr	r3, [pc, #236]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002500:	2200      	movs	r2, #0
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002504:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002506:	2200      	movs	r2, #0
 8002508:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 800250a:	4b38      	ldr	r3, [pc, #224]	@ (80025ec <MX_SAI1_Init+0x168>)
 800250c:	2200      	movs	r2, #0
 800250e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002510:	4b36      	ldr	r3, [pc, #216]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002512:	2200      	movs	r2, #0
 8002514:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8002516:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002518:	2201      	movs	r2, #1
 800251a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 800251c:	4b33      	ldr	r3, [pc, #204]	@ (80025ec <MX_SAI1_Init+0x168>)
 800251e:	2200      	movs	r2, #0
 8002520:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8002522:	4832      	ldr	r0, [pc, #200]	@ (80025ec <MX_SAI1_Init+0x168>)
 8002524:	f008 fdce 	bl	800b0c4 <HAL_SAI_Init>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 800252e:	f7ff fcbb 	bl	8001ea8 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8002532:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002534:	4a30      	ldr	r2, [pc, #192]	@ (80025f8 <MX_SAI1_Init+0x174>)
 8002536:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002538:	4b2e      	ldr	r3, [pc, #184]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800253a:	2200      	movs	r2, #0
 800253c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 800253e:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002540:	2200      	movs	r2, #0
 8002542:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8002544:	4b2b      	ldr	r3, [pc, #172]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002546:	2240      	movs	r2, #64	@ 0x40
 8002548:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800254a:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800254c:	2200      	movs	r2, #0
 800254e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002550:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002552:	2200      	movs	r2, #0
 8002554:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8002556:	4b27      	ldr	r3, [pc, #156]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002558:	2200      	movs	r2, #0
 800255a:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800255c:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800255e:	2200      	movs	r2, #0
 8002560:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8002562:	4b24      	ldr	r3, [pc, #144]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002564:	2200      	movs	r2, #0
 8002566:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002568:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800256a:	2200      	movs	r2, #0
 800256c:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800256e:	4b21      	ldr	r3, [pc, #132]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <MX_SAI1_Init+0x178>)
 8002572:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 800257a:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800257c:	2200      	movs	r2, #0
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002580:	4b1c      	ldr	r3, [pc, #112]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002582:	2200      	movs	r2, #0
 8002584:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002586:	4b1b      	ldr	r3, [pc, #108]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002588:	2200      	movs	r2, #0
 800258a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 800258c:	4b19      	ldr	r3, [pc, #100]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800258e:	2200      	movs	r2, #0
 8002590:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 8002594:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <MX_SAI1_Init+0x170>)
 8002596:	2200      	movs	r2, #0
 8002598:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800259a:	4b16      	ldr	r3, [pc, #88]	@ (80025f4 <MX_SAI1_Init+0x170>)
 800259c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80025a2:	4b14      	ldr	r3, [pc, #80]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025a4:	2208      	movs	r2, #8
 80025a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80025a8:	4b12      	ldr	r3, [pc, #72]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80025ae:	4b11      	ldr	r3, [pc, #68]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80025b4:	4b0f      	ldr	r3, [pc, #60]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80025ba:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025bc:	2200      	movs	r2, #0
 80025be:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80025cc:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 80025d8:	4806      	ldr	r0, [pc, #24]	@ (80025f4 <MX_SAI1_Init+0x170>)
 80025da:	f008 fd73 	bl	800b0c4 <HAL_SAI_Init>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 80025e4:	f7ff fc60 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	24000828 	.word	0x24000828
 80025f0:	40015804 	.word	0x40015804
 80025f4:	240008c0 	.word	0x240008c0
 80025f8:	40015824 	.word	0x40015824
 80025fc:	0002ee00 	.word	0x0002ee00

08002600 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b0b8      	sub	sp, #224	@ 0xe0
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	22b8      	movs	r2, #184	@ 0xb8
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f00f fa9a 	bl	8011b4a <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a45      	ldr	r2, [pc, #276]	@ (8002730 <HAL_SAI_MspInit+0x130>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d13e      	bne.n	800269e <HAL_SAI_MspInit+0x9e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002620:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800262c:	2300      	movs	r3, #0
 800262e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002630:	f107 0310 	add.w	r3, r7, #16
 8002634:	4618      	mov	r0, r3
 8002636:	f006 f95f 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002640:	f7ff fc32 	bl	8001ea8 <Error_Handler>
    }

    if (SAI1_client == 0)
 8002644:	4b3b      	ldr	r3, [pc, #236]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10e      	bne.n	800266a <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800264c:	4b3a      	ldr	r3, [pc, #232]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 800264e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002652:	4a39      	ldr	r2, [pc, #228]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 8002654:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002658:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800265c:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 800265e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	60fb      	str	r3, [r7, #12]
 8002668:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 800266a:	4b32      	ldr	r3, [pc, #200]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	3301      	adds	r3, #1
 8002670:	4a30      	ldr	r2, [pc, #192]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 8002672:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 8002674:	2340      	movs	r3, #64	@ 0x40
 8002676:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800268c:	2306      	movs	r3, #6
 800268e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002696:	4619      	mov	r1, r3
 8002698:	4828      	ldr	r0, [pc, #160]	@ (800273c <HAL_SAI_MspInit+0x13c>)
 800269a:	f003 fca9 	bl	8005ff0 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a27      	ldr	r2, [pc, #156]	@ (8002740 <HAL_SAI_MspInit+0x140>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d13f      	bne.n	8002728 <HAL_SAI_MspInit+0x128>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80026a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	4618      	mov	r0, r3
 80026be:	f006 f91b 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80026c8:	f7ff fbee 	bl	8001ea8 <Error_Handler>
    }

      if (SAI1_client == 0)
 80026cc:	4b19      	ldr	r3, [pc, #100]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10e      	bne.n	80026f2 <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 80026d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026da:	4a17      	ldr	r2, [pc, #92]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 80026dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80026e0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80026e4:	4b14      	ldr	r3, [pc, #80]	@ (8002738 <HAL_SAI_MspInit+0x138>)
 80026e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80026ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 80026f2:	4b10      	ldr	r3, [pc, #64]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002734 <HAL_SAI_MspInit+0x134>)
 80026fa:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 80026fc:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002700:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002704:	2302      	movs	r3, #2
 8002706:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002716:	2306      	movs	r3, #6
 8002718:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800271c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002720:	4619      	mov	r1, r3
 8002722:	4808      	ldr	r0, [pc, #32]	@ (8002744 <HAL_SAI_MspInit+0x144>)
 8002724:	f003 fc64 	bl	8005ff0 <HAL_GPIO_Init>

    }
}
 8002728:	bf00      	nop
 800272a:	37e0      	adds	r7, #224	@ 0xe0
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40015804 	.word	0x40015804
 8002734:	24000958 	.word	0x24000958
 8002738:	58024400 	.word	0x58024400
 800273c:	58021000 	.word	0x58021000
 8002740:	40015824 	.word	0x40015824
 8002744:	58021400 	.word	0x58021400

08002748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <HAL_MspInit+0x38>)
 8002750:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002754:	4a0a      	ldr	r2, [pc, #40]	@ (8002780 <HAL_MspInit+0x38>)
 8002756:	f043 0302 	orr.w	r3, r3, #2
 800275a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <HAL_MspInit+0x38>)
 8002760:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800276c:	2200      	movs	r2, #0
 800276e:	210f      	movs	r1, #15
 8002770:	f06f 0001 	mvn.w	r0, #1
 8002774:	f002 faae 	bl	8004cd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	58024400 	.word	0x58024400

08002784 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b090      	sub	sp, #64	@ 0x40
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	d827      	bhi.n	80027e2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002792:	2200      	movs	r2, #0
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	2036      	movs	r0, #54	@ 0x36
 8002798:	f002 fa9c 	bl	8004cd4 <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800279c:	2036      	movs	r0, #54	@ 0x36
 800279e:	f002 fab3 	bl	8004d08 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80027a2:	4a29      	ldr	r2, [pc, #164]	@ (8002848 <HAL_InitTick+0xc4>)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_InitTick+0xc8>)
 80027aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027ae:	4a27      	ldr	r2, [pc, #156]	@ (800284c <HAL_InitTick+0xc8>)
 80027b0:	f043 0310 	orr.w	r3, r3, #16
 80027b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027b8:	4b24      	ldr	r3, [pc, #144]	@ (800284c <HAL_InitTick+0xc8>)
 80027ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027be:	f003 0310 	and.w	r3, r3, #16
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80027c6:	f107 0210 	add.w	r2, r7, #16
 80027ca:	f107 0314 	add.w	r3, r7, #20
 80027ce:	4611      	mov	r1, r2
 80027d0:	4618      	mov	r0, r3
 80027d2:	f006 f84f 	bl	8008874 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80027d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80027da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <HAL_InitTick+0x6a>
 80027e0:	e001      	b.n	80027e6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e02b      	b.n	800283e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80027e6:	f006 f819 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 80027ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80027ec:	e004      	b.n	80027f8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80027ee:	f006 f815 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027fa:	4a15      	ldr	r2, [pc, #84]	@ (8002850 <HAL_InitTick+0xcc>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	0c9b      	lsrs	r3, r3, #18
 8002802:	3b01      	subs	r3, #1
 8002804:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002806:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_InitTick+0xd0>)
 8002808:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <HAL_InitTick+0xd4>)
 800280a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800280c:	4b11      	ldr	r3, [pc, #68]	@ (8002854 <HAL_InitTick+0xd0>)
 800280e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002812:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002814:	4a0f      	ldr	r2, [pc, #60]	@ (8002854 <HAL_InitTick+0xd0>)
 8002816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002818:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800281a:	4b0e      	ldr	r3, [pc, #56]	@ (8002854 <HAL_InitTick+0xd0>)
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <HAL_InitTick+0xd0>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002826:	480b      	ldr	r0, [pc, #44]	@ (8002854 <HAL_InitTick+0xd0>)
 8002828:	f008 fea0 	bl	800b56c <HAL_TIM_Base_Init>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002832:	4808      	ldr	r0, [pc, #32]	@ (8002854 <HAL_InitTick+0xd0>)
 8002834:	f008 fefc 	bl	800b630 <HAL_TIM_Base_Start_IT>
 8002838:	4603      	mov	r3, r0
 800283a:	e000      	b.n	800283e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
}
 800283e:	4618      	mov	r0, r3
 8002840:	3740      	adds	r7, #64	@ 0x40
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	2400000c 	.word	0x2400000c
 800284c:	58024400 	.word	0x58024400
 8002850:	431bde83 	.word	0x431bde83
 8002854:	2400095c 	.word	0x2400095c
 8002858:	40001000 	.word	0x40001000

0800285c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <NMI_Handler+0x4>

08002864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002868:	bf00      	nop
 800286a:	e7fd      	b.n	8002868 <HardFault_Handler+0x4>

0800286c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002870:	bf00      	nop
 8002872:	e7fd      	b.n	8002870 <MemManage_Handler+0x4>

08002874 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002878:	bf00      	nop
 800287a:	e7fd      	b.n	8002878 <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	bf00      	nop
 8002882:	e7fd      	b.n	8002880 <UsageFault_Handler+0x4>

08002884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <TIM6_DAC_IRQHandler+0x20>)
 800289a:	791b      	ldrb	r3, [r3, #4]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80028a2:	4804      	ldr	r0, [pc, #16]	@ (80028b4 <TIM6_DAC_IRQHandler+0x20>)
 80028a4:	f002 fa60 	bl	8004d68 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80028a8:	4803      	ldr	r0, [pc, #12]	@ (80028b8 <TIM6_DAC_IRQHandler+0x24>)
 80028aa:	f008 ff9e 	bl	800b7ea <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	24000410 	.word	0x24000410
 80028b8:	2400095c 	.word	0x2400095c

080028bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d6:	f00f f9e1 	bl	8011c9c <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
  return -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffe7 	bl	80028cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <_exit+0x12>

08002902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002914:	f3af 8000 	nop.w
 8002918:	4601      	mov	r1, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbf0      	blt.n	8002914 <_read+0x12>
  }

  return len;
 8002932:	687b      	ldr	r3, [r7, #4]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60ba      	str	r2, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf1      	blt.n	800294e <_write+0x12>
  }
  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_close>:

int _close(int file)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299c:	605a      	str	r2, [r3, #4]
  return 0;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_isatty>:

int _isatty(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e4:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <_sbrk+0x5c>)
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <_sbrk+0x60>)
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_sbrk+0x64>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <_sbrk+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a0c:	f00f f946 	bl	8011c9c <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	220c      	movs	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e009      	b.n	8002a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <_sbrk+0x64>)
 8002a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	24050000 	.word	0x24050000
 8002a3c:	00000400 	.word	0x00000400
 8002a40:	240009a8 	.word	0x240009a8
 8002a44:	240056f0 	.word	0x240056f0

08002a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a4c:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <SystemInit+0xd0>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	4a31      	ldr	r2, [pc, #196]	@ (8002b18 <SystemInit+0xd0>)
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b1c <SystemInit+0xd4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	2b06      	cmp	r3, #6
 8002a66:	d807      	bhi.n	8002a78 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a68:	4b2c      	ldr	r3, [pc, #176]	@ (8002b1c <SystemInit+0xd4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f023 030f 	bic.w	r3, r3, #15
 8002a70:	4a2a      	ldr	r2, [pc, #168]	@ (8002b1c <SystemInit+0xd4>)
 8002a72:	f043 0307 	orr.w	r3, r3, #7
 8002a76:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a78:	4b29      	ldr	r3, [pc, #164]	@ (8002b20 <SystemInit+0xd8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <SystemInit+0xd8>)
 8002a7e:	f043 0301 	orr.w	r3, r3, #1
 8002a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a84:	4b26      	ldr	r3, [pc, #152]	@ (8002b20 <SystemInit+0xd8>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	@ (8002b20 <SystemInit+0xd8>)
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	4924      	ldr	r1, [pc, #144]	@ (8002b20 <SystemInit+0xd8>)
 8002a90:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <SystemInit+0xdc>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a96:	4b21      	ldr	r3, [pc, #132]	@ (8002b1c <SystemInit+0xd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b1c <SystemInit+0xd4>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f023 030f 	bic.w	r3, r3, #15
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b1c <SystemInit+0xd4>)
 8002aac:	f043 0307 	orr.w	r3, r3, #7
 8002ab0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <SystemInit+0xd8>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	@ (8002b20 <SystemInit+0xd8>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002abe:	4b18      	ldr	r3, [pc, #96]	@ (8002b20 <SystemInit+0xd8>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	@ (8002b20 <SystemInit+0xd8>)
 8002ac6:	4a18      	ldr	r2, [pc, #96]	@ (8002b28 <SystemInit+0xe0>)
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <SystemInit+0xd8>)
 8002acc:	4a17      	ldr	r2, [pc, #92]	@ (8002b2c <SystemInit+0xe4>)
 8002ace:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ad0:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <SystemInit+0xd8>)
 8002ad2:	4a17      	ldr	r2, [pc, #92]	@ (8002b30 <SystemInit+0xe8>)
 8002ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ad6:	4b12      	ldr	r3, [pc, #72]	@ (8002b20 <SystemInit+0xd8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002adc:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <SystemInit+0xd8>)
 8002ade:	4a14      	ldr	r2, [pc, #80]	@ (8002b30 <SystemInit+0xe8>)
 8002ae0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <SystemInit+0xd8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <SystemInit+0xd8>)
 8002aea:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <SystemInit+0xe8>)
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <SystemInit+0xd8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002af4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <SystemInit+0xd8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a09      	ldr	r2, [pc, #36]	@ (8002b20 <SystemInit+0xd8>)
 8002afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002afe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b00:	4b07      	ldr	r3, [pc, #28]	@ (8002b20 <SystemInit+0xd8>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b06:	4b0b      	ldr	r3, [pc, #44]	@ (8002b34 <SystemInit+0xec>)
 8002b08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002b0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002b0e:	bf00      	nop
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000ed00 	.word	0xe000ed00
 8002b1c:	52002000 	.word	0x52002000
 8002b20:	58024400 	.word	0x58024400
 8002b24:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b28:	02020200 	.word	0x02020200
 8002b2c:	01ff0000 	.word	0x01ff0000
 8002b30:	01010280 	.word	0x01010280
 8002b34:	52004000 	.word	0x52004000

08002b38 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b098      	sub	sp, #96	@ 0x60
 8002b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b3e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002b42:	2200      	movs	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
 8002b46:	605a      	str	r2, [r3, #4]
 8002b48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	609a      	str	r2, [r3, #8]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	615a      	str	r2, [r3, #20]
 8002b5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b5e:	1d3b      	adds	r3, r7, #4
 8002b60:	2234      	movs	r2, #52	@ 0x34
 8002b62:	2100      	movs	r1, #0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00e fff0 	bl	8011b4a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b6a:	4b38      	ldr	r3, [pc, #224]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b6c:	4a38      	ldr	r2, [pc, #224]	@ (8002c50 <MX_TIM1_Init+0x118>)
 8002b6e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b70:	4b36      	ldr	r3, [pc, #216]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b76:	4b35      	ldr	r3, [pc, #212]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b7c:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b8a:	4b30      	ldr	r3, [pc, #192]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b90:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b96:	482d      	ldr	r0, [pc, #180]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002b98:	f008 fdd0 	bl	800b73c <HAL_TIM_PWM_Init>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002ba2:	f7ff f981 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4824      	ldr	r0, [pc, #144]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002bba:	f009 fbe1 	bl	800c380 <HAL_TIMEx_MasterConfigSynchronization>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002bc4:	f7ff f970 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bc8:	2360      	movs	r3, #96	@ 0x60
 8002bca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002be0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002be4:	220c      	movs	r2, #12
 8002be6:	4619      	mov	r1, r3
 8002be8:	4818      	ldr	r0, [pc, #96]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002bea:	f008 ff05 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002bf4:	f7ff f958 	bl	8001ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c0c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002c1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c28:	1d3b      	adds	r3, r7, #4
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4807      	ldr	r0, [pc, #28]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002c2e:	f009 fc43 	bl	800c4b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8002c38:	f7ff f936 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c3c:	4803      	ldr	r0, [pc, #12]	@ (8002c4c <MX_TIM1_Init+0x114>)
 8002c3e:	f000 f923 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002c42:	bf00      	nop
 8002c44:	3760      	adds	r7, #96	@ 0x60
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	240009ac 	.word	0x240009ac
 8002c50:	40010000 	.word	0x40010000

08002c54 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c66:	463b      	mov	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
 8002c74:	615a      	str	r2, [r3, #20]
 8002c76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c78:	4b2c      	ldr	r3, [pc, #176]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002d30 <MX_TIM4_Init+0xdc>)
 8002c7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c84:	4b29      	ldr	r3, [pc, #164]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c8a:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c8c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c92:	4b26      	ldr	r3, [pc, #152]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c98:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002c9e:	4823      	ldr	r0, [pc, #140]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002ca0:	f008 fd4c 	bl	800b73c <HAL_TIM_PWM_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002caa:	f7ff f8fd 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	481b      	ldr	r0, [pc, #108]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002cbe:	f009 fb5f 	bl	800c380 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002cc8:	f7ff f8ee 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ccc:	2360      	movs	r3, #96	@ 0x60
 8002cce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cdc:	463b      	mov	r3, r7
 8002cde:	2204      	movs	r2, #4
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4812      	ldr	r0, [pc, #72]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002ce4:	f008 fe88 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002cee:	f7ff f8db 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cf2:	463b      	mov	r3, r7
 8002cf4:	2208      	movs	r2, #8
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002cfa:	f008 fe7d 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002d04:	f7ff f8d0 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d08:	463b      	mov	r3, r7
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4807      	ldr	r0, [pc, #28]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002d10:	f008 fe72 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002d1a:	f7ff f8c5 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002d1e:	4803      	ldr	r0, [pc, #12]	@ (8002d2c <MX_TIM4_Init+0xd8>)
 8002d20:	f000 f8b2 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	@ 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	240009f8 	.word	0x240009f8
 8002d30:	40000800 	.word	0x40000800

08002d34 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	@ 0x28
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3a:	f107 031c 	add.w	r3, r7, #28
 8002d3e:	2200      	movs	r2, #0
 8002d40:	601a      	str	r2, [r3, #0]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d46:	463b      	mov	r3, r7
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d58:	4b21      	ldr	r3, [pc, #132]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d5a:	4a22      	ldr	r2, [pc, #136]	@ (8002de4 <MX_TIM5_Init+0xb0>)
 8002d5c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d5e:	4b20      	ldr	r3, [pc, #128]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d64:	4b1e      	ldr	r3, [pc, #120]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d70:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d72:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d78:	4b19      	ldr	r3, [pc, #100]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002d7e:	4818      	ldr	r0, [pc, #96]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d80:	f008 fcdc 	bl	800b73c <HAL_TIM_PWM_Init>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002d8a:	f7ff f88d 	bl	8001ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d92:	2300      	movs	r3, #0
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4810      	ldr	r0, [pc, #64]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002d9e:	f009 faef 	bl	800c380 <HAL_TIMEx_MasterConfigSynchronization>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002da8:	f7ff f87e 	bl	8001ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002dac:	2360      	movs	r3, #96	@ 0x60
 8002dae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4807      	ldr	r0, [pc, #28]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002dc4:	f008 fe18 	bl	800b9f8 <HAL_TIM_PWM_ConfigChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002dce:	f7ff f86b 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002dd2:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <MX_TIM5_Init+0xac>)
 8002dd4:	f000 f858 	bl	8002e88 <HAL_TIM_MspPostInit>

}
 8002dd8:	bf00      	nop
 8002dda:	3728      	adds	r7, #40	@ 0x28
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	24000a44 	.word	0x24000a44
 8002de4:	40000c00 	.word	0x40000c00

08002de8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a20      	ldr	r2, [pc, #128]	@ (8002e78 <HAL_TIM_PWM_MspInit+0x90>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10f      	bne.n	8002e1a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002dfa:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e00:	4a1e      	ldr	r2, [pc, #120]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e02:	f043 0301 	orr.w	r3, r3, #1
 8002e06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002e10:	f003 0301 	and.w	r3, r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002e18:	e028      	b.n	8002e6c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a18      	ldr	r2, [pc, #96]	@ (8002e80 <HAL_TIM_PWM_MspInit+0x98>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d10f      	bne.n	8002e44 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e24:	4b15      	ldr	r3, [pc, #84]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e2a:	4a14      	ldr	r2, [pc, #80]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e2c:	f043 0304 	orr.w	r3, r3, #4
 8002e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e34:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
}
 8002e42:	e013      	b.n	8002e6c <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM5)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0e      	ldr	r2, [pc, #56]	@ (8002e84 <HAL_TIM_PWM_MspInit+0x9c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d10e      	bne.n	8002e6c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e54:	4a09      	ldr	r2, [pc, #36]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e56:	f043 0308 	orr.w	r3, r3, #8
 8002e5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002e5e:	4b07      	ldr	r3, [pc, #28]	@ (8002e7c <HAL_TIM_PWM_MspInit+0x94>)
 8002e60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	58024400 	.word	0x58024400
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40000c00 	.word	0x40000c00

08002e88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08c      	sub	sp, #48	@ 0x30
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a48      	ldr	r2, [pc, #288]	@ (8002fc8 <HAL_TIM_MspPostInit+0x140>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d120      	bne.n	8002eec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eaa:	4b48      	ldr	r3, [pc, #288]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eb0:	4a46      	ldr	r2, [pc, #280]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eba:	4b44      	ldr	r3, [pc, #272]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	61bb      	str	r3, [r7, #24]
 8002ec6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002ec8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 031c 	add.w	r3, r7, #28
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	483a      	ldr	r0, [pc, #232]	@ (8002fd0 <HAL_TIM_MspPostInit+0x148>)
 8002ee6:	f003 f883 	bl	8005ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002eea:	e068      	b.n	8002fbe <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a38      	ldr	r2, [pc, #224]	@ (8002fd4 <HAL_TIM_MspPostInit+0x14c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d13f      	bne.n	8002f76 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef6:	4b35      	ldr	r3, [pc, #212]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002efc:	4a33      	ldr	r2, [pc, #204]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f06:	4b31      	ldr	r3, [pc, #196]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f14:	4b2d      	ldr	r3, [pc, #180]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f1a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f1c:	f043 0308 	orr.w	r3, r3, #8
 8002f20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f24:	4b29      	ldr	r3, [pc, #164]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f42:	2302      	movs	r3, #2
 8002f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002f46:	f107 031c 	add.w	r3, r7, #28
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4822      	ldr	r0, [pc, #136]	@ (8002fd8 <HAL_TIM_MspPostInit+0x150>)
 8002f4e:	f003 f84f 	bl	8005ff0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8002f52:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f60:	2300      	movs	r3, #0
 8002f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f64:	2302      	movs	r3, #2
 8002f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	481b      	ldr	r0, [pc, #108]	@ (8002fdc <HAL_TIM_MspPostInit+0x154>)
 8002f70:	f003 f83e 	bl	8005ff0 <HAL_GPIO_Init>
}
 8002f74:	e023      	b.n	8002fbe <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM5)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a19      	ldr	r2, [pc, #100]	@ (8002fe0 <HAL_TIM_MspPostInit+0x158>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d11e      	bne.n	8002fbe <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f80:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f86:	4a11      	ldr	r2, [pc, #68]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f90:	4b0e      	ldr	r3, [pc, #56]	@ (8002fcc <HAL_TIM_MspPostInit+0x144>)
 8002f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	480a      	ldr	r0, [pc, #40]	@ (8002fe4 <HAL_TIM_MspPostInit+0x15c>)
 8002fba:	f003 f819 	bl	8005ff0 <HAL_GPIO_Init>
}
 8002fbe:	bf00      	nop
 8002fc0:	3730      	adds	r7, #48	@ 0x30
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	58024400 	.word	0x58024400
 8002fd0:	58021000 	.word	0x58021000
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	58020400 	.word	0x58020400
 8002fdc:	58020c00 	.word	0x58020c00
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	58020000 	.word	0x58020000

08002fe8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fec:	4b22      	ldr	r3, [pc, #136]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8002fee:	4a23      	ldr	r2, [pc, #140]	@ (800307c <MX_USART1_UART_Init+0x94>)
 8002ff0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ff2:	4b21      	ldr	r3, [pc, #132]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8002ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ff8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003000:	4b1d      	ldr	r3, [pc, #116]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003006:	4b1c      	ldr	r3, [pc, #112]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800300c:	4b1a      	ldr	r3, [pc, #104]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 800300e:	220c      	movs	r2, #12
 8003010:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003012:	4b19      	ldr	r3, [pc, #100]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003018:	4b17      	ldr	r3, [pc, #92]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800301e:	4b16      	ldr	r3, [pc, #88]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003020:	2200      	movs	r2, #0
 8003022:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003024:	4b14      	ldr	r3, [pc, #80]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003026:	2200      	movs	r2, #0
 8003028:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800302a:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 800302c:	2200      	movs	r2, #0
 800302e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003030:	4811      	ldr	r0, [pc, #68]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003032:	f009 faeb 	bl	800c60c <HAL_UART_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800303c:	f7fe ff34 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	480d      	ldr	r0, [pc, #52]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003044:	f00a fc85 	bl	800d952 <HAL_UARTEx_SetTxFifoThreshold>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800304e:	f7fe ff2b 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003052:	2100      	movs	r1, #0
 8003054:	4808      	ldr	r0, [pc, #32]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003056:	f00a fcba 	bl	800d9ce <HAL_UARTEx_SetRxFifoThreshold>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003060:	f7fe ff22 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003064:	4804      	ldr	r0, [pc, #16]	@ (8003078 <MX_USART1_UART_Init+0x90>)
 8003066:	f00a fc3b 	bl	800d8e0 <HAL_UARTEx_DisableFifoMode>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d001      	beq.n	8003074 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003070:	f7fe ff1a 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	24000a90 	.word	0x24000a90
 800307c:	40011000 	.word	0x40011000

08003080 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003084:	4b22      	ldr	r3, [pc, #136]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 8003086:	4a23      	ldr	r2, [pc, #140]	@ (8003114 <MX_USART3_UART_Init+0x94>)
 8003088:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800308a:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 800308c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003090:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003092:	4b1f      	ldr	r3, [pc, #124]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003098:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 800309a:	2200      	movs	r2, #0
 800309c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800309e:	4b1c      	ldr	r3, [pc, #112]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80030a4:	4b1a      	ldr	r3, [pc, #104]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030a6:	220c      	movs	r2, #12
 80030a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030aa:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80030b0:	4b17      	ldr	r3, [pc, #92]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030b6:	4b16      	ldr	r3, [pc, #88]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030bc:	4b14      	ldr	r3, [pc, #80]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030c2:	4b13      	ldr	r3, [pc, #76]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80030c8:	4811      	ldr	r0, [pc, #68]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030ca:	f009 fa9f 	bl	800c60c <HAL_UART_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80030d4:	f7fe fee8 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030d8:	2100      	movs	r1, #0
 80030da:	480d      	ldr	r0, [pc, #52]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030dc:	f00a fc39 	bl	800d952 <HAL_UARTEx_SetTxFifoThreshold>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80030e6:	f7fe fedf 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030ea:	2100      	movs	r1, #0
 80030ec:	4808      	ldr	r0, [pc, #32]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030ee:	f00a fc6e 	bl	800d9ce <HAL_UARTEx_SetRxFifoThreshold>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80030f8:	f7fe fed6 	bl	8001ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80030fc:	4804      	ldr	r0, [pc, #16]	@ (8003110 <MX_USART3_UART_Init+0x90>)
 80030fe:	f00a fbef 	bl	800d8e0 <HAL_UARTEx_DisableFifoMode>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003108:	f7fe fece 	bl	8001ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800310c:	bf00      	nop
 800310e:	bd80      	pop	{r7, pc}
 8003110:	24000b24 	.word	0x24000b24
 8003114:	40004800 	.word	0x40004800

08003118 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0ba      	sub	sp, #232	@ 0xe8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	22b8      	movs	r2, #184	@ 0xb8
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f00e fd06 	bl	8011b4a <memset>
  if(uartHandle->Instance==USART1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a4d      	ldr	r2, [pc, #308]	@ (8003278 <HAL_UART_MspInit+0x160>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d147      	bne.n	80031d8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003148:	f04f 0201 	mov.w	r2, #1
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003154:	2300      	movs	r3, #0
 8003156:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800315a:	f107 0318 	add.w	r3, r7, #24
 800315e:	4618      	mov	r0, r3
 8003160:	f005 fbca 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800316a:	f7fe fe9d 	bl	8001ea8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800316e:	4b43      	ldr	r3, [pc, #268]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003170:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003174:	4a41      	ldr	r2, [pc, #260]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003176:	f043 0310 	orr.w	r3, r3, #16
 800317a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800317e:	4b3f      	ldr	r3, [pc, #252]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003180:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318c:	4b3b      	ldr	r3, [pc, #236]	@ (800327c <HAL_UART_MspInit+0x164>)
 800318e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003192:	4a3a      	ldr	r2, [pc, #232]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003194:	f043 0302 	orr.w	r3, r3, #2
 8003198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800319c:	4b37      	ldr	r3, [pc, #220]	@ (800327c <HAL_UART_MspInit+0x164>)
 800319e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80031aa:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80031ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80031c4:	2304      	movs	r3, #4
 80031c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80031ce:	4619      	mov	r1, r3
 80031d0:	482b      	ldr	r0, [pc, #172]	@ (8003280 <HAL_UART_MspInit+0x168>)
 80031d2:	f002 ff0d 	bl	8005ff0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031d6:	e04b      	b.n	8003270 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a29      	ldr	r2, [pc, #164]	@ (8003284 <HAL_UART_MspInit+0x16c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d146      	bne.n	8003270 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80031e2:	f04f 0202 	mov.w	r2, #2
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f4:	f107 0318 	add.w	r3, r7, #24
 80031f8:	4618      	mov	r0, r3
 80031fa:	f005 fb7d 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003204:	f7fe fe50 	bl	8001ea8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003208:	4b1c      	ldr	r3, [pc, #112]	@ (800327c <HAL_UART_MspInit+0x164>)
 800320a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800320e:	4a1b      	ldr	r2, [pc, #108]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003210:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003214:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003218:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_UART_MspInit+0x164>)
 800321a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800321e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800322c:	4a13      	ldr	r2, [pc, #76]	@ (800327c <HAL_UART_MspInit+0x164>)
 800322e:	f043 0308 	orr.w	r3, r3, #8
 8003232:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003236:	4b11      	ldr	r3, [pc, #68]	@ (800327c <HAL_UART_MspInit+0x164>)
 8003238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	60bb      	str	r3, [r7, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8003244:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003248:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003258:	2300      	movs	r3, #0
 800325a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800325e:	2307      	movs	r3, #7
 8003260:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003264:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003268:	4619      	mov	r1, r3
 800326a:	4807      	ldr	r0, [pc, #28]	@ (8003288 <HAL_UART_MspInit+0x170>)
 800326c:	f002 fec0 	bl	8005ff0 <HAL_GPIO_Init>
}
 8003270:	bf00      	nop
 8003272:	37e8      	adds	r7, #232	@ 0xe8
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40011000 	.word	0x40011000
 800327c:	58024400 	.word	0x58024400
 8003280:	58020400 	.word	0x58020400
 8003284:	40004800 	.word	0x40004800
 8003288:	58020c00 	.word	0x58020c00

0800328c <Print_Temperature_Log>:
  * @param  array: Pointer to an array containing temperature values to be transmitted.
  *
  * @retval HAL_StatusTypeDef: Returns HAL_OK if all transmissions were successful.
  *                             Otherwise, it returns the appropriate error status from HAL_UART_Transmit.
  */
HAL_StatusTypeDef Print_Temperature_Log(uint8_t *array) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b094      	sub	sp, #80	@ 0x50
 8003290:	af02      	add	r7, sp, #8
 8003292:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t buffer[BUFFER_SIZE];  // Replaced magic number with constant

    for (int n = 0; n < MAX_NUMBER_OF_WRITES; n++) {
 800329a:	2300      	movs	r3, #0
 800329c:	643b      	str	r3, [r7, #64]	@ 0x40
 800329e:	e028      	b.n	80032f2 <Print_Temperature_Log+0x66>

        // Create the log entry
        snprintf((char *)buffer, BUFFER_SIZE, "%d: %d\r\n", n + 1, array[n]);
 80032a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	f107 000c 	add.w	r0, r7, #12
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	460b      	mov	r3, r1
 80032b4:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <Print_Temperature_Log+0x78>)
 80032b6:	2132      	movs	r1, #50	@ 0x32
 80032b8:	f00e fbd0 	bl	8011a5c <sniprintf>

        // Transmit the log entry over UART
        status = HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), UART_TIMEOUT);
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fd f875 	bl	80003b0 <strlen>
 80032c6:	4603      	mov	r3, r0
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	f107 010c 	add.w	r1, r7, #12
 80032ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80032d2:	480d      	ldr	r0, [pc, #52]	@ (8003308 <Print_Temperature_Log+0x7c>)
 80032d4:	f009 f9ea 	bl	800c6ac <HAL_UART_Transmit>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (status != HAL_OK) {
 80032de:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <Print_Temperature_Log+0x60>
            return status;  // Handle UART transmission error
 80032e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80032ea:	e007      	b.n	80032fc <Print_Temperature_Log+0x70>
    for (int n = 0; n < MAX_NUMBER_OF_WRITES; n++) {
 80032ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ee:	3301      	adds	r3, #1
 80032f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032f4:	2b09      	cmp	r3, #9
 80032f6:	ddd3      	ble.n	80032a0 <Print_Temperature_Log+0x14>
        }
    }

    return status;
 80032f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3748      	adds	r7, #72	@ 0x48
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	08013cdc 	.word	0x08013cdc
 8003308:	24000b24 	.word	0x24000b24

0800330c <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
	...

0800331c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800331c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003354 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003320:	f7ff fb92 	bl	8002a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003324:	480c      	ldr	r0, [pc, #48]	@ (8003358 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003326:	490d      	ldr	r1, [pc, #52]	@ (800335c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003328:	4a0d      	ldr	r2, [pc, #52]	@ (8003360 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800332a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800332c:	e002      	b.n	8003334 <LoopCopyDataInit>

0800332e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800332e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003332:	3304      	adds	r3, #4

08003334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003338:	d3f9      	bcc.n	800332e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800333a:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800333c:	4c0a      	ldr	r4, [pc, #40]	@ (8003368 <LoopFillZerobss+0x22>)
  movs r3, #0
 800333e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003340:	e001      	b.n	8003346 <LoopFillZerobss>

08003342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003344:	3204      	adds	r2, #4

08003346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003348:	d3fb      	bcc.n	8003342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800334a:	f00e fcad 	bl	8011ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800334e:	f7fe fcc3 	bl	8001cd8 <main>
  bx  lr
 8003352:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003354:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003358:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800335c:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8003360:	08014150 	.word	0x08014150
  ldr r2, =_sbss
 8003364:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 8003368:	240056f0 	.word	0x240056f0

0800336c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800336c:	e7fe      	b.n	800336c <ADC3_IRQHandler>
	...

08003370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003376:	2003      	movs	r0, #3
 8003378:	f001 fca1 	bl	8004cbe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800337c:	f005 f8a4 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 8003380:	4602      	mov	r2, r0
 8003382:	4b15      	ldr	r3, [pc, #84]	@ (80033d8 <HAL_Init+0x68>)
 8003384:	699b      	ldr	r3, [r3, #24]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	f003 030f 	and.w	r3, r3, #15
 800338c:	4913      	ldr	r1, [pc, #76]	@ (80033dc <HAL_Init+0x6c>)
 800338e:	5ccb      	ldrb	r3, [r1, r3]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <HAL_Init+0x68>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f003 030f 	and.w	r3, r3, #15
 80033a2:	4a0e      	ldr	r2, [pc, #56]	@ (80033dc <HAL_Init+0x6c>)
 80033a4:	5cd3      	ldrb	r3, [r2, r3]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	4a0b      	ldr	r2, [pc, #44]	@ (80033e0 <HAL_Init+0x70>)
 80033b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033b4:	4a0b      	ldr	r2, [pc, #44]	@ (80033e4 <HAL_Init+0x74>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033ba:	200f      	movs	r0, #15
 80033bc:	f7ff f9e2 	bl	8002784 <HAL_InitTick>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e002      	b.n	80033d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80033ca:	f7ff f9bd 	bl	8002748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	58024400 	.word	0x58024400
 80033dc:	08013d94 	.word	0x08013d94
 80033e0:	24000008 	.word	0x24000008
 80033e4:	24000004 	.word	0x24000004

080033e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033ec:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <HAL_IncTick+0x20>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_IncTick+0x24>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	4a04      	ldr	r2, [pc, #16]	@ (800340c <HAL_IncTick+0x24>)
 80033fa:	6013      	str	r3, [r2, #0]
}
 80033fc:	bf00      	nop
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	24000010 	.word	0x24000010
 800340c:	24000bb8 	.word	0x24000bb8

08003410 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  return uwTick;
 8003414:	4b03      	ldr	r3, [pc, #12]	@ (8003424 <HAL_GetTick+0x14>)
 8003416:	681b      	ldr	r3, [r3, #0]
}
 8003418:	4618      	mov	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	24000bb8 	.word	0x24000bb8

08003428 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003430:	4b06      	ldr	r3, [pc, #24]	@ (800344c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003438:	4904      	ldr	r1, [pc, #16]	@ (800344c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4313      	orrs	r3, r2
 800343e:	604b      	str	r3, [r1, #4]
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	58000400 	.word	0x58000400

08003450 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	43db      	mvns	r3, r3
 8003462:	401a      	ands	r2, r3
 8003464:	4904      	ldr	r1, [pc, #16]	@ (8003478 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	58000400 	.word	0x58000400

0800347c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	431a      	orrs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034a2:	b480      	push	{r7}
 80034a4:	b083      	sub	sp, #12
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	431a      	orrs	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	609a      	str	r2, [r3, #8]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3360      	adds	r3, #96	@ 0x60
 80034f6:	461a      	mov	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a10      	ldr	r2, [pc, #64]	@ (8003544 <LL_ADC_SetOffset+0x60>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d10b      	bne.n	8003520 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4313      	orrs	r3, r2
 8003516:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800351e:	e00b      	b.n	8003538 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	431a      	orrs	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	58026000 	.word	0x58026000

08003548 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3360      	adds	r3, #96	@ 0x60
 8003556:	461a      	mov	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 031f 	and.w	r3, r3, #31
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	fa01 f303 	lsl.w	r3, r1, r3
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	611a      	str	r2, [r3, #16]
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
	...

080035a8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b087      	sub	sp, #28
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	60b9      	str	r1, [r7, #8]
 80035b2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	3360      	adds	r3, #96	@ 0x60
 80035c0:	461a      	mov	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	601a      	str	r2, [r3, #0]
  }
}
 80035da:	bf00      	nop
 80035dc:	371c      	adds	r7, #28
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	58026000 	.word	0x58026000

080035ec <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4a0c      	ldr	r2, [pc, #48]	@ (800362c <LL_ADC_SetOffsetSaturation+0x40>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10e      	bne.n	800361e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	3360      	adds	r3, #96	@ 0x60
 8003604:	461a      	mov	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4413      	add	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	431a      	orrs	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800361e:	bf00      	nop
 8003620:	371c      	adds	r7, #28
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	58026000 	.word	0x58026000

08003630 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4a0c      	ldr	r2, [pc, #48]	@ (8003670 <LL_ADC_SetOffsetSign+0x40>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10e      	bne.n	8003662 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3360      	adds	r3, #96	@ 0x60
 8003648:	461a      	mov	r2, r3
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	431a      	orrs	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	58026000 	.word	0x58026000

08003674 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3360      	adds	r3, #96	@ 0x60
 8003684:	461a      	mov	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	4a0c      	ldr	r2, [pc, #48]	@ (80036c4 <LL_ADC_SetOffsetState+0x50>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	431a      	orrs	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80036a6:	e007      	b.n	80036b8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	601a      	str	r2, [r3, #0]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr
 80036c4:	58026000 	.word	0x58026000

080036c8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3330      	adds	r3, #48	@ 0x30
 80036d8:	461a      	mov	r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	0a1b      	lsrs	r3, r3, #8
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	f003 030c 	and.w	r3, r3, #12
 80036e4:	4413      	add	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f003 031f 	and.w	r3, r3, #31
 80036f2:	211f      	movs	r1, #31
 80036f4:	fa01 f303 	lsl.w	r3, r1, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	401a      	ands	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	0e9b      	lsrs	r3, r3, #26
 8003700:	f003 011f 	and.w	r1, r3, #31
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	431a      	orrs	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	3314      	adds	r3, #20
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	0e5b      	lsrs	r3, r3, #25
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	4413      	add	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0d1b      	lsrs	r3, r3, #20
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2107      	movs	r1, #7
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	401a      	ands	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	0d1b      	lsrs	r3, r3, #20
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	fa01 f303 	lsl.w	r3, r1, r3
 8003764:	431a      	orrs	r2, r3
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800376a:	bf00      	nop
 800376c:	371c      	adds	r7, #28
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
	...

08003778 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a1a      	ldr	r2, [pc, #104]	@ (80037f0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d115      	bne.n	80037b8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	43db      	mvns	r3, r3
 800379a:	401a      	ands	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0318 	and.w	r3, r3, #24
 80037a2:	4914      	ldr	r1, [pc, #80]	@ (80037f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80037a4:	40d9      	lsrs	r1, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	400b      	ands	r3, r1
 80037aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037ae:	431a      	orrs	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80037b6:	e014      	b.n	80037e2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037c4:	43db      	mvns	r3, r3
 80037c6:	401a      	ands	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f003 0318 	and.w	r3, r3, #24
 80037ce:	4909      	ldr	r1, [pc, #36]	@ (80037f4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80037d0:	40d9      	lsrs	r1, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	400b      	ands	r3, r1
 80037d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037da:	431a      	orrs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80037e2:	bf00      	nop
 80037e4:	3714      	adds	r7, #20
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	58026000 	.word	0x58026000
 80037f4:	000fffff 	.word	0x000fffff

080037f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b04      	ldr	r3, [pc, #16]	@ (8003818 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003806:	4013      	ands	r3, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6093      	str	r3, [r2, #8]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	5fffffc0 	.word	0x5fffffc0

0800381c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d101      	bne.n	8003836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	4b05      	ldr	r3, [pc, #20]	@ (8003868 <LL_ADC_EnableInternalRegulator+0x24>)
 8003852:	4013      	ands	r3, r2
 8003854:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	6fffffc0 	.word	0x6fffffc0

0800386c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800387c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003880:	d101      	bne.n	8003886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <LL_ADC_IsEnabled+0x18>
 80038a8:	2301      	movs	r3, #1
 80038aa:	e000      	b.n	80038ae <LL_ADC_IsEnabled+0x1a>
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d101      	bne.n	80038d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b08      	cmp	r3, #8
 80038f2:	d101      	bne.n	80038f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003908:	b590      	push	{r4, r7, lr}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003910:	2300      	movs	r3, #0
 8003912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003914:	2300      	movs	r3, #0
 8003916:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e1ee      	b.n	8003d00 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800392c:	2b00      	cmp	r3, #0
 800392e:	d109      	bne.n	8003944 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f811 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff67 	bl	800381c <LL_ADC_IsDeepPowerDownEnabled>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d004      	beq.n	800395e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff4d 	bl	80037f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff ff82 	bl	800386c <LL_ADC_IsInternalRegulatorEnabled>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d114      	bne.n	8003998 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7ff ff66 	bl	8003844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003978:	4b8e      	ldr	r3, [pc, #568]	@ (8003bb4 <HAL_ADC_Init+0x2ac>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	099b      	lsrs	r3, r3, #6
 800397e:	4a8e      	ldr	r2, [pc, #568]	@ (8003bb8 <HAL_ADC_Init+0x2b0>)
 8003980:	fba2 2303 	umull	r2, r3, r2, r3
 8003984:	099b      	lsrs	r3, r3, #6
 8003986:	3301      	adds	r3, #1
 8003988:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800398a:	e002      	b.n	8003992 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff65 	bl	800386c <LL_ADC_IsInternalRegulatorEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10d      	bne.n	80039c4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ac:	f043 0210 	orr.w	r2, r3, #16
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039b8:	f043 0201 	orr.w	r2, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff76 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 80039ce:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f040 8188 	bne.w	8003cee <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f040 8184 	bne.w	8003cee <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ea:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039ee:	f043 0202 	orr.w	r2, r3, #2
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7ff ff4a 	bl	8003894 <LL_ADC_IsEnabled>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d136      	bne.n	8003a74 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003bbc <HAL_ADC_Init+0x2b4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_Init+0x112>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc0 <HAL_ADC_Init+0x2b8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10e      	bne.n	8003a38 <HAL_ADC_Init+0x130>
 8003a1a:	4868      	ldr	r0, [pc, #416]	@ (8003bbc <HAL_ADC_Init+0x2b4>)
 8003a1c:	f7ff ff3a 	bl	8003894 <LL_ADC_IsEnabled>
 8003a20:	4604      	mov	r4, r0
 8003a22:	4867      	ldr	r0, [pc, #412]	@ (8003bc0 <HAL_ADC_Init+0x2b8>)
 8003a24:	f7ff ff36 	bl	8003894 <LL_ADC_IsEnabled>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	4323      	orrs	r3, r4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e008      	b.n	8003a4a <HAL_ADC_Init+0x142>
 8003a38:	4862      	ldr	r0, [pc, #392]	@ (8003bc4 <HAL_ADC_Init+0x2bc>)
 8003a3a:	f7ff ff2b 	bl	8003894 <LL_ADC_IsEnabled>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d012      	beq.n	8003a74 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a5a      	ldr	r2, [pc, #360]	@ (8003bbc <HAL_ADC_Init+0x2b4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d004      	beq.n	8003a62 <HAL_ADC_Init+0x15a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a58      	ldr	r2, [pc, #352]	@ (8003bc0 <HAL_ADC_Init+0x2b8>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d101      	bne.n	8003a66 <HAL_ADC_Init+0x15e>
 8003a62:	4a59      	ldr	r2, [pc, #356]	@ (8003bc8 <HAL_ADC_Init+0x2c0>)
 8003a64:	e000      	b.n	8003a68 <HAL_ADC_Init+0x160>
 8003a66:	4a59      	ldr	r2, [pc, #356]	@ (8003bcc <HAL_ADC_Init+0x2c4>)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f7ff fd04 	bl	800347c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a52      	ldr	r2, [pc, #328]	@ (8003bc4 <HAL_ADC_Init+0x2bc>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d129      	bne.n	8003ad2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	7e5b      	ldrb	r3, [r3, #25]
 8003a82:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003a88:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003a8e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d013      	beq.n	8003ac0 <HAL_ADC_Init+0x1b8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	2b0c      	cmp	r3, #12
 8003a9e:	d00d      	beq.n	8003abc <HAL_ADC_Init+0x1b4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	2b1c      	cmp	r3, #28
 8003aa6:	d007      	beq.n	8003ab8 <HAL_ADC_Init+0x1b0>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	2b18      	cmp	r3, #24
 8003aae:	d101      	bne.n	8003ab4 <HAL_ADC_Init+0x1ac>
 8003ab0:	2318      	movs	r3, #24
 8003ab2:	e006      	b.n	8003ac2 <HAL_ADC_Init+0x1ba>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e004      	b.n	8003ac2 <HAL_ADC_Init+0x1ba>
 8003ab8:	2310      	movs	r3, #16
 8003aba:	e002      	b.n	8003ac2 <HAL_ADC_Init+0x1ba>
 8003abc:	2308      	movs	r3, #8
 8003abe:	e000      	b.n	8003ac2 <HAL_ADC_Init+0x1ba>
 8003ac0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003ac2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e00e      	b.n	8003af0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	7e5b      	ldrb	r3, [r3, #25]
 8003ad6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003adc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003ae2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d106      	bne.n	8003b08 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	3b01      	subs	r3, #1
 8003b00:	045b      	lsls	r3, r3, #17
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d009      	beq.n	8003b24 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b14:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b1c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a26      	ldr	r2, [pc, #152]	@ (8003bc4 <HAL_ADC_Init+0x2bc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d115      	bne.n	8003b5a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	4b26      	ldr	r3, [pc, #152]	@ (8003bd0 <HAL_ADC_Init+0x2c8>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6812      	ldr	r2, [r2, #0]
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	611a      	str	r2, [r3, #16]
 8003b58:	e009      	b.n	8003b6e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <HAL_ADC_Init+0x2cc>)
 8003b62:	4013      	ands	r3, r2
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	69b9      	ldr	r1, [r7, #24]
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f7ff fea1 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003b78:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff feae 	bl	80038e0 <LL_ADC_INJ_IsConversionOngoing>
 8003b84:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f040 808e 	bne.w	8003caa <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f040 808a 	bne.w	8003caa <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <HAL_ADC_Init+0x2bc>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d11b      	bne.n	8003bd8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7e1b      	ldrb	r3, [r3, #24]
 8003ba4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003bac:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61bb      	str	r3, [r7, #24]
 8003bb2:	e018      	b.n	8003be6 <HAL_ADC_Init+0x2de>
 8003bb4:	24000004 	.word	0x24000004
 8003bb8:	053e2d63 	.word	0x053e2d63
 8003bbc:	40022000 	.word	0x40022000
 8003bc0:	40022100 	.word	0x40022100
 8003bc4:	58026000 	.word	0x58026000
 8003bc8:	40022300 	.word	0x40022300
 8003bcc:	58026300 	.word	0x58026300
 8003bd0:	fff04007 	.word	0xfff04007
 8003bd4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7e1b      	ldrb	r3, [r3, #24]
 8003bdc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	4b46      	ldr	r3, [pc, #280]	@ (8003d08 <HAL_ADC_Init+0x400>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	69b9      	ldr	r1, [r7, #24]
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d137      	bne.n	8003c74 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c08:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d0c <HAL_ADC_Init+0x404>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d116      	bne.n	8003c42 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d10 <HAL_ADC_Init+0x408>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c2c:	4311      	orrs	r1, r2
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c32:	430a      	orrs	r2, r1
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	611a      	str	r2, [r3, #16]
 8003c40:	e020      	b.n	8003c84 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	4b32      	ldr	r3, [pc, #200]	@ (8003d14 <HAL_ADC_Init+0x40c>)
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0411      	lsls	r1, r2, #16
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c58:	4311      	orrs	r1, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c64:	430a      	orrs	r2, r1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 0201 	orr.w	r2, r2, #1
 8003c70:	611a      	str	r2, [r3, #16]
 8003c72:	e007      	b.n	8003c84 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	691a      	ldr	r2, [r3, #16]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0201 	bic.w	r2, r2, #1
 8003c82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003d0c <HAL_ADC_Init+0x404>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d002      	beq.n	8003caa <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fd67 	bl	8004778 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d10c      	bne.n	8003ccc <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f023 010f 	bic.w	r1, r3, #15
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cca:	e007      	b.n	8003cdc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 020f 	bic.w	r2, r2, #15
 8003cda:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce0:	f023 0303 	bic.w	r3, r3, #3
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	661a      	str	r2, [r3, #96]	@ 0x60
 8003cec:	e007      	b.n	8003cfe <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	f043 0210 	orr.w	r2, r3, #16
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cfe:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3724      	adds	r7, #36	@ 0x24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd90      	pop	{r4, r7, pc}
 8003d08:	ffffbffc 	.word	0xffffbffc
 8003d0c:	58026000 	.word	0x58026000
 8003d10:	fc00f81f 	.word	0xfc00f81f
 8003d14:	fc00f81e 	.word	0xfc00f81e

08003d18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b0b9      	sub	sp, #228	@ 0xe4
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d32:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4aab      	ldr	r2, [pc, #684]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x2d0>)
 8003d3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x34>
 8003d46:	2302      	movs	r3, #2
 8003d48:	f000 bcfe 	b.w	8004748 <HAL_ADC_ConfigChannel+0xa30>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f7ff fdae 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f040 84e2 	bne.w	800472a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	db38      	blt.n	8003de0 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a9e      	ldr	r2, [pc, #632]	@ (8003fec <HAL_ADC_ConfigChannel+0x2d4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d033      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d108      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x7e>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	0e9b      	lsrs	r3, r3, #26
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2201      	movs	r2, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	e01d      	b.n	8003dd2 <HAL_ADC_ConfigChannel+0xba>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003dae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003dba:	2320      	movs	r3, #32
 8003dbc:	e004      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003dbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	2201      	movs	r2, #1
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6812      	ldr	r2, [r2, #0]
 8003dd6:	69d1      	ldr	r1, [r2, #28]
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6812      	ldr	r2, [r2, #0]
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	f7ff fc6b 	bl	80036c8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fd5f 	bl	80038ba <LL_ADC_REG_IsConversionOngoing>
 8003dfc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fd6b 	bl	80038e0 <LL_ADC_INJ_IsConversionOngoing>
 8003e0a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 8270 	bne.w	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e18:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f040 826b 	bne.w	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6819      	ldr	r1, [r3, #0]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f7ff fc76 	bl	8003720 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6c      	ldr	r2, [pc, #432]	@ (8003fec <HAL_ADC_ConfigChannel+0x2d4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d10d      	bne.n	8003e5a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695a      	ldr	r2, [r3, #20]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	08db      	lsrs	r3, r3, #3
 8003e4a:	f003 0303 	and.w	r3, r3, #3
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e58:	e032      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e5a:	4b65      	ldr	r3, [pc, #404]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x2d8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e66:	d10b      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x168>
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	695a      	ldr	r2, [r3, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	089b      	lsrs	r3, r3, #2
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	e01d      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x1a4>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10b      	bne.n	8003ea6 <HAL_ADC_ConfigChannel+0x18e>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	089b      	lsrs	r3, r3, #2
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea4:	e00a      	b.n	8003ebc <HAL_ADC_ConfigChannel+0x1a4>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	005b      	lsls	r3, r3, #1
 8003eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d048      	beq.n	8003f5a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6818      	ldr	r0, [r3, #0]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	6919      	ldr	r1, [r3, #16]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ed8:	f7ff fb04 	bl	80034e4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a42      	ldr	r2, [pc, #264]	@ (8003fec <HAL_ADC_ConfigChannel+0x2d4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d119      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6919      	ldr	r1, [r3, #16]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	f7ff fb9c 	bl	8003630 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6919      	ldr	r1, [r3, #16]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d102      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1f8>
 8003f0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f0e:	e000      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x1fa>
 8003f10:	2300      	movs	r3, #0
 8003f12:	461a      	mov	r2, r3
 8003f14:	f7ff fb6a 	bl	80035ec <LL_ADC_SetOffsetSaturation>
 8003f18:	e1ee      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6919      	ldr	r1, [r3, #16]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d102      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x21a>
 8003f2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f30:	e000      	b.n	8003f34 <HAL_ADC_ConfigChannel+0x21c>
 8003f32:	2300      	movs	r3, #0
 8003f34:	461a      	mov	r2, r3
 8003f36:	f7ff fb37 	bl	80035a8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6919      	ldr	r1, [r3, #16]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	7e1b      	ldrb	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d102      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x238>
 8003f4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f4e:	e000      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x23a>
 8003f50:	2300      	movs	r3, #0
 8003f52:	461a      	mov	r2, r3
 8003f54:	f7ff fb0e 	bl	8003574 <LL_ADC_SetDataRightShift>
 8003f58:	e1ce      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a23      	ldr	r2, [pc, #140]	@ (8003fec <HAL_ADC_ConfigChannel+0x2d4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f040 8181 	bne.w	8004268 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff faeb 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x27a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fae0 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	0e9b      	lsrs	r3, r3, #26
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	e01e      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x2b8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2100      	movs	r1, #0
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fad5 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003fb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003fb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e004      	b.n	8003fce <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d10b      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x2dc>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	e01e      	b.n	8004026 <HAL_ADC_ConfigChannel+0x30e>
 8003fe8:	47ff0000 	.word	0x47ff0000
 8003fec:	58026000 	.word	0x58026000
 8003ff0:	5c001000 	.word	0x5c001000
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004000:	fa93 f3a3 	rbit	r3, r3
 8004004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004018:	2320      	movs	r3, #32
 800401a:	e004      	b.n	8004026 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 800401c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004020:	fab3 f383 	clz	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	429a      	cmp	r2, r3
 8004028:	d106      	bne.n	8004038 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2200      	movs	r2, #0
 8004030:	2100      	movs	r1, #0
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fb1e 	bl	8003674 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fa82 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004044:	4603      	mov	r3, r0
 8004046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x34c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2101      	movs	r1, #1
 8004054:	4618      	mov	r0, r3
 8004056:	f7ff fa77 	bl	8003548 <LL_ADC_GetOffsetChannel>
 800405a:	4603      	mov	r3, r0
 800405c:	0e9b      	lsrs	r3, r3, #26
 800405e:	f003 021f 	and.w	r2, r3, #31
 8004062:	e01e      	b.n	80040a2 <HAL_ADC_ConfigChannel+0x38a>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2101      	movs	r1, #1
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fa6c 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004070:	4603      	mov	r3, r0
 8004072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800407a:	fa93 f3a3 	rbit	r3, r3
 800407e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8004082:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800408a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8004092:	2320      	movs	r3, #32
 8004094:	e004      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8004096:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800409a:	fab3 f383 	clz	r3, r3
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d105      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x3a2>
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	0e9b      	lsrs	r3, r3, #26
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	e018      	b.n	80040ec <HAL_ADC_ConfigChannel+0x3d4>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040c6:	fa93 f3a3 	rbit	r3, r3
 80040ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80040ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80040d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80040d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80040de:	2320      	movs	r3, #32
 80040e0:	e004      	b.n	80040ec <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80040e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040e6:	fab3 f383 	clz	r3, r3
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d106      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2200      	movs	r2, #0
 80040f6:	2101      	movs	r1, #1
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fabb 	bl	8003674 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2102      	movs	r1, #2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff fa1f 	bl	8003548 <LL_ADC_GetOffsetChannel>
 800410a:	4603      	mov	r3, r0
 800410c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <HAL_ADC_ConfigChannel+0x412>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f7ff fa14 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004120:	4603      	mov	r3, r0
 8004122:	0e9b      	lsrs	r3, r3, #26
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	e01e      	b.n	8004168 <HAL_ADC_ConfigChannel+0x450>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2102      	movs	r1, #2
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fa09 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004140:	fa93 f3a3 	rbit	r3, r3
 8004144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800414c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004154:	2b00      	cmp	r3, #0
 8004156:	d101      	bne.n	800415c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004158:	2320      	movs	r3, #32
 800415a:	e004      	b.n	8004166 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800415c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004160:	fab3 f383 	clz	r3, r3
 8004164:	b2db      	uxtb	r3, r3
 8004166:	461a      	mov	r2, r3
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x468>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	f003 031f 	and.w	r3, r3, #31
 800417e:	e014      	b.n	80041aa <HAL_ADC_ConfigChannel+0x492>
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800418e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004190:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8004194:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800419c:	2320      	movs	r3, #32
 800419e:	e004      	b.n	80041aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80041a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041a4:	fab3 f383 	clz	r3, r3
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d106      	bne.n	80041bc <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	2102      	movs	r1, #2
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fa5c 	bl	8003674 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2103      	movs	r1, #3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff f9c0 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <HAL_ADC_ConfigChannel+0x4d0>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2103      	movs	r1, #3
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff f9b5 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041de:	4603      	mov	r3, r0
 80041e0:	0e9b      	lsrs	r3, r3, #26
 80041e2:	f003 021f 	and.w	r2, r3, #31
 80041e6:	e017      	b.n	8004218 <HAL_ADC_ConfigChannel+0x500>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2103      	movs	r1, #3
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff f9aa 	bl	8003548 <LL_ADC_GetOffsetChannel>
 80041f4:	4603      	mov	r3, r0
 80041f6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004202:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8004204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 800420a:	2320      	movs	r3, #32
 800420c:	e003      	b.n	8004216 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 800420e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004210:	fab3 f383 	clz	r3, r3
 8004214:	b2db      	uxtb	r3, r3
 8004216:	461a      	mov	r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004220:	2b00      	cmp	r3, #0
 8004222:	d105      	bne.n	8004230 <HAL_ADC_ConfigChannel+0x518>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	f003 031f 	and.w	r3, r3, #31
 800422e:	e011      	b.n	8004254 <HAL_ADC_ConfigChannel+0x53c>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800423e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004240:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8004242:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e003      	b.n	8004254 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800424c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	429a      	cmp	r2, r3
 8004256:	d14f      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2200      	movs	r2, #0
 800425e:	2103      	movs	r1, #3
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fa07 	bl	8003674 <LL_ADC_SetOffsetState>
 8004266:	e047      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	069b      	lsls	r3, r3, #26
 8004278:	429a      	cmp	r2, r3
 800427a:	d107      	bne.n	800428c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800428a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004292:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	069b      	lsls	r3, r3, #26
 800429c:	429a      	cmp	r2, r3
 800429e:	d107      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042ae:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	069b      	lsls	r3, r3, #26
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d107      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042d2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	069b      	lsls	r3, r3, #26
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d107      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042f6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff fac9 	bl	8003894 <LL_ADC_IsEnabled>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 8219 	bne.w	800473c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6818      	ldr	r0, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	6819      	ldr	r1, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	461a      	mov	r2, r3
 8004318:	f7ff fa2e 	bl	8003778 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4aa1      	ldr	r2, [pc, #644]	@ (80045a8 <HAL_ADC_ConfigChannel+0x890>)
 8004322:	4293      	cmp	r3, r2
 8004324:	f040 812e 	bne.w	8004584 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10b      	bne.n	8004350 <HAL_ADC_ConfigChannel+0x638>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	3301      	adds	r3, #1
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2b09      	cmp	r3, #9
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	e019      	b.n	8004384 <HAL_ADC_ConfigChannel+0x66c>
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004358:	fa93 f3a3 	rbit	r3, r3
 800435c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800435e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8004362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8004368:	2320      	movs	r3, #32
 800436a:	e003      	b.n	8004374 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800436c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800436e:	fab3 f383 	clz	r3, r3
 8004372:	b2db      	uxtb	r3, r3
 8004374:	3301      	adds	r3, #1
 8004376:	f003 031f 	and.w	r3, r3, #31
 800437a:	2b09      	cmp	r3, #9
 800437c:	bf94      	ite	ls
 800437e:	2301      	movls	r3, #1
 8004380:	2300      	movhi	r3, #0
 8004382:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004384:	2b00      	cmp	r3, #0
 8004386:	d079      	beq.n	800447c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004390:	2b00      	cmp	r3, #0
 8004392:	d107      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x68c>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	0e9b      	lsrs	r3, r3, #26
 800439a:	3301      	adds	r3, #1
 800439c:	069b      	lsls	r3, r3, #26
 800439e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043a2:	e015      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x6b8>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80043b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80043b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80043c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	069b      	lsls	r3, r3, #26
 80043cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_ADC_ConfigChannel+0x6d8>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	3301      	adds	r3, #1
 80043e4:	f003 031f 	and.w	r3, r3, #31
 80043e8:	2101      	movs	r1, #1
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	e017      	b.n	8004420 <HAL_ADC_ConfigChannel+0x708>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043f8:	fa93 f3a3 	rbit	r3, r3
 80043fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80043fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004400:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8004402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004408:	2320      	movs	r3, #32
 800440a:	e003      	b.n	8004414 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 800440c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f003 031f 	and.w	r3, r3, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	ea42 0103 	orr.w	r1, r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10a      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x72e>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 021f 	and.w	r2, r3, #31
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	051b      	lsls	r3, r3, #20
 8004444:	e018      	b.n	8004478 <HAL_ADC_ConfigChannel+0x760>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444e:	fa93 f3a3 	rbit	r3, r3
 8004452:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8004454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004456:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800445e:	2320      	movs	r3, #32
 8004460:	e003      	b.n	800446a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8004462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004464:	fab3 f383 	clz	r3, r3
 8004468:	b2db      	uxtb	r3, r3
 800446a:	3301      	adds	r3, #1
 800446c:	f003 021f 	and.w	r2, r3, #31
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004478:	430b      	orrs	r3, r1
 800447a:	e07e      	b.n	800457a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004484:	2b00      	cmp	r3, #0
 8004486:	d107      	bne.n	8004498 <HAL_ADC_ConfigChannel+0x780>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	0e9b      	lsrs	r3, r3, #26
 800448e:	3301      	adds	r3, #1
 8004490:	069b      	lsls	r3, r3, #26
 8004492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004496:	e015      	b.n	80044c4 <HAL_ADC_ConfigChannel+0x7ac>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80044b0:	2320      	movs	r3, #32
 80044b2:	e003      	b.n	80044bc <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80044b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b6:	fab3 f383 	clz	r3, r3
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	3301      	adds	r3, #1
 80044be:	069b      	lsls	r3, r3, #26
 80044c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d109      	bne.n	80044e4 <HAL_ADC_ConfigChannel+0x7cc>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	0e9b      	lsrs	r3, r3, #26
 80044d6:	3301      	adds	r3, #1
 80044d8:	f003 031f 	and.w	r3, r3, #31
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	e017      	b.n	8004514 <HAL_ADC_ConfigChannel+0x7fc>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	fa93 f3a3 	rbit	r3, r3
 80044f0:	61bb      	str	r3, [r7, #24]
  return result;
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80044fc:	2320      	movs	r3, #32
 80044fe:	e003      	b.n	8004508 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	fab3 f383 	clz	r3, r3
 8004506:	b2db      	uxtb	r3, r3
 8004508:	3301      	adds	r3, #1
 800450a:	f003 031f 	and.w	r3, r3, #31
 800450e:	2101      	movs	r1, #1
 8004510:	fa01 f303 	lsl.w	r3, r1, r3
 8004514:	ea42 0103 	orr.w	r1, r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10d      	bne.n	8004540 <HAL_ADC_ConfigChannel+0x828>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	3301      	adds	r3, #1
 800452c:	f003 021f 	and.w	r2, r3, #31
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	3b1e      	subs	r3, #30
 8004538:	051b      	lsls	r3, r3, #20
 800453a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800453e:	e01b      	b.n	8004578 <HAL_ADC_ConfigChannel+0x860>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	fa93 f3a3 	rbit	r3, r3
 800454c:	60fb      	str	r3, [r7, #12]
  return result;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d101      	bne.n	800455c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004558:	2320      	movs	r3, #32
 800455a:	e003      	b.n	8004564 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	3301      	adds	r3, #1
 8004566:	f003 021f 	and.w	r2, r3, #31
 800456a:	4613      	mov	r3, r2
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	4413      	add	r3, r2
 8004570:	3b1e      	subs	r3, #30
 8004572:	051b      	lsls	r3, r3, #20
 8004574:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004578:	430b      	orrs	r3, r1
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	4619      	mov	r1, r3
 8004580:	f7ff f8ce 	bl	8003720 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	f280 80d7 	bge.w	800473c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a06      	ldr	r2, [pc, #24]	@ (80045ac <HAL_ADC_ConfigChannel+0x894>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d004      	beq.n	80045a2 <HAL_ADC_ConfigChannel+0x88a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <HAL_ADC_ConfigChannel+0x898>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d10a      	bne.n	80045b8 <HAL_ADC_ConfigChannel+0x8a0>
 80045a2:	4b04      	ldr	r3, [pc, #16]	@ (80045b4 <HAL_ADC_ConfigChannel+0x89c>)
 80045a4:	e009      	b.n	80045ba <HAL_ADC_ConfigChannel+0x8a2>
 80045a6:	bf00      	nop
 80045a8:	47ff0000 	.word	0x47ff0000
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40022100 	.word	0x40022100
 80045b4:	40022300 	.word	0x40022300
 80045b8:	4b65      	ldr	r3, [pc, #404]	@ (8004750 <HAL_ADC_ConfigChannel+0xa38>)
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fe ff84 	bl	80034c8 <LL_ADC_GetCommonPathInternalCh>
 80045c0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a62      	ldr	r2, [pc, #392]	@ (8004754 <HAL_ADC_ConfigChannel+0xa3c>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d004      	beq.n	80045d8 <HAL_ADC_ConfigChannel+0x8c0>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a61      	ldr	r2, [pc, #388]	@ (8004758 <HAL_ADC_ConfigChannel+0xa40>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d10e      	bne.n	80045f6 <HAL_ADC_ConfigChannel+0x8de>
 80045d8:	485e      	ldr	r0, [pc, #376]	@ (8004754 <HAL_ADC_ConfigChannel+0xa3c>)
 80045da:	f7ff f95b 	bl	8003894 <LL_ADC_IsEnabled>
 80045de:	4604      	mov	r4, r0
 80045e0:	485d      	ldr	r0, [pc, #372]	@ (8004758 <HAL_ADC_ConfigChannel+0xa40>)
 80045e2:	f7ff f957 	bl	8003894 <LL_ADC_IsEnabled>
 80045e6:	4603      	mov	r3, r0
 80045e8:	4323      	orrs	r3, r4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bf0c      	ite	eq
 80045ee:	2301      	moveq	r3, #1
 80045f0:	2300      	movne	r3, #0
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	e008      	b.n	8004608 <HAL_ADC_ConfigChannel+0x8f0>
 80045f6:	4859      	ldr	r0, [pc, #356]	@ (800475c <HAL_ADC_ConfigChannel+0xa44>)
 80045f8:	f7ff f94c 	bl	8003894 <LL_ADC_IsEnabled>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	bf0c      	ite	eq
 8004602:	2301      	moveq	r3, #1
 8004604:	2300      	movne	r3, #0
 8004606:	b2db      	uxtb	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8084 	beq.w	8004716 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a53      	ldr	r2, [pc, #332]	@ (8004760 <HAL_ADC_ConfigChannel+0xa48>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d132      	bne.n	800467e <HAL_ADC_ConfigChannel+0x966>
 8004618:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800461c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d12c      	bne.n	800467e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a4c      	ldr	r2, [pc, #304]	@ (800475c <HAL_ADC_ConfigChannel+0xa44>)
 800462a:	4293      	cmp	r3, r2
 800462c:	f040 8086 	bne.w	800473c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a47      	ldr	r2, [pc, #284]	@ (8004754 <HAL_ADC_ConfigChannel+0xa3c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d004      	beq.n	8004644 <HAL_ADC_ConfigChannel+0x92c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a46      	ldr	r2, [pc, #280]	@ (8004758 <HAL_ADC_ConfigChannel+0xa40>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d101      	bne.n	8004648 <HAL_ADC_ConfigChannel+0x930>
 8004644:	4a47      	ldr	r2, [pc, #284]	@ (8004764 <HAL_ADC_ConfigChannel+0xa4c>)
 8004646:	e000      	b.n	800464a <HAL_ADC_ConfigChannel+0x932>
 8004648:	4a41      	ldr	r2, [pc, #260]	@ (8004750 <HAL_ADC_ConfigChannel+0xa38>)
 800464a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800464e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004652:	4619      	mov	r1, r3
 8004654:	4610      	mov	r0, r2
 8004656:	f7fe ff24 	bl	80034a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800465a:	4b43      	ldr	r3, [pc, #268]	@ (8004768 <HAL_ADC_ConfigChannel+0xa50>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	4a42      	ldr	r2, [pc, #264]	@ (800476c <HAL_ADC_ConfigChannel+0xa54>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	099b      	lsrs	r3, r3, #6
 8004668:	3301      	adds	r3, #1
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800466e:	e002      	b.n	8004676 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3b01      	subs	r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f9      	bne.n	8004670 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800467c:	e05e      	b.n	800473c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a3b      	ldr	r2, [pc, #236]	@ (8004770 <HAL_ADC_ConfigChannel+0xa58>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d120      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x9b2>
 8004688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800468c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d11a      	bne.n	80046ca <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a30      	ldr	r2, [pc, #192]	@ (800475c <HAL_ADC_ConfigChannel+0xa44>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d14e      	bne.n	800473c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <HAL_ADC_ConfigChannel+0xa3c>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_ADC_ConfigChannel+0x99a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a2a      	ldr	r2, [pc, #168]	@ (8004758 <HAL_ADC_ConfigChannel+0xa40>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x99e>
 80046b2:	4a2c      	ldr	r2, [pc, #176]	@ (8004764 <HAL_ADC_ConfigChannel+0xa4c>)
 80046b4:	e000      	b.n	80046b8 <HAL_ADC_ConfigChannel+0x9a0>
 80046b6:	4a26      	ldr	r2, [pc, #152]	@ (8004750 <HAL_ADC_ConfigChannel+0xa38>)
 80046b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046c0:	4619      	mov	r1, r3
 80046c2:	4610      	mov	r0, r2
 80046c4:	f7fe feed 	bl	80034a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046c8:	e038      	b.n	800473c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a29      	ldr	r2, [pc, #164]	@ (8004774 <HAL_ADC_ConfigChannel+0xa5c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d133      	bne.n	800473c <HAL_ADC_ConfigChannel+0xa24>
 80046d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d12d      	bne.n	800473c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	@ (800475c <HAL_ADC_ConfigChannel+0xa44>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d128      	bne.n	800473c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a19      	ldr	r2, [pc, #100]	@ (8004754 <HAL_ADC_ConfigChannel+0xa3c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_ADC_ConfigChannel+0x9e6>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a17      	ldr	r2, [pc, #92]	@ (8004758 <HAL_ADC_ConfigChannel+0xa40>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d101      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x9ea>
 80046fe:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <HAL_ADC_ConfigChannel+0xa4c>)
 8004700:	e000      	b.n	8004704 <HAL_ADC_ConfigChannel+0x9ec>
 8004702:	4a13      	ldr	r2, [pc, #76]	@ (8004750 <HAL_ADC_ConfigChannel+0xa38>)
 8004704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800470c:	4619      	mov	r1, r3
 800470e:	4610      	mov	r0, r2
 8004710:	f7fe fec7 	bl	80034a2 <LL_ADC_SetCommonPathInternalCh>
 8004714:	e012      	b.n	800473c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471a:	f043 0220 	orr.w	r2, r3, #32
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004728:	e008      	b.n	800473c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004744:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004748:	4618      	mov	r0, r3
 800474a:	37e4      	adds	r7, #228	@ 0xe4
 800474c:	46bd      	mov	sp, r7
 800474e:	bd90      	pop	{r4, r7, pc}
 8004750:	58026300 	.word	0x58026300
 8004754:	40022000 	.word	0x40022000
 8004758:	40022100 	.word	0x40022100
 800475c:	58026000 	.word	0x58026000
 8004760:	c7520000 	.word	0xc7520000
 8004764:	40022300 	.word	0x40022300
 8004768:	24000004 	.word	0x24000004
 800476c:	053e2d63 	.word	0x053e2d63
 8004770:	c3210000 	.word	0xc3210000
 8004774:	cb840000 	.word	0xcb840000

08004778 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6c      	ldr	r2, [pc, #432]	@ (8004938 <ADC_ConfigureBoostMode+0x1c0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <ADC_ConfigureBoostMode+0x1c>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a6b      	ldr	r2, [pc, #428]	@ (800493c <ADC_ConfigureBoostMode+0x1c4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d109      	bne.n	80047a8 <ADC_ConfigureBoostMode+0x30>
 8004794:	4b6a      	ldr	r3, [pc, #424]	@ (8004940 <ADC_ConfigureBoostMode+0x1c8>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e008      	b.n	80047ba <ADC_ConfigureBoostMode+0x42>
 80047a8:	4b66      	ldr	r3, [pc, #408]	@ (8004944 <ADC_ConfigureBoostMode+0x1cc>)
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01c      	beq.n	80047f8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047be:	f003 fffd 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 80047c2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047cc:	d010      	beq.n	80047f0 <ADC_ConfigureBoostMode+0x78>
 80047ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80047d2:	d873      	bhi.n	80048bc <ADC_ConfigureBoostMode+0x144>
 80047d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d8:	d002      	beq.n	80047e0 <ADC_ConfigureBoostMode+0x68>
 80047da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80047de:	d16d      	bne.n	80048bc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	60fb      	str	r3, [r7, #12]
        break;
 80047ee:	e068      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	089b      	lsrs	r3, r3, #2
 80047f4:	60fb      	str	r3, [r7, #12]
        break;
 80047f6:	e064      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80047f8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80047fc:	f04f 0100 	mov.w	r1, #0
 8004800:	f005 fa1a 	bl	8009c38 <HAL_RCCEx_GetPeriphCLKFreq>
 8004804:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800480e:	d051      	beq.n	80048b4 <ADC_ConfigureBoostMode+0x13c>
 8004810:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004814:	d854      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004816:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800481a:	d047      	beq.n	80048ac <ADC_ConfigureBoostMode+0x134>
 800481c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004820:	d84e      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004822:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004826:	d03d      	beq.n	80048a4 <ADC_ConfigureBoostMode+0x12c>
 8004828:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800482c:	d848      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800482e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004832:	d033      	beq.n	800489c <ADC_ConfigureBoostMode+0x124>
 8004834:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004838:	d842      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800483a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800483e:	d029      	beq.n	8004894 <ADC_ConfigureBoostMode+0x11c>
 8004840:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004844:	d83c      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004846:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800484a:	d01a      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 800484c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004850:	d836      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004852:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004856:	d014      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004858:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800485c:	d830      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004862:	d00e      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004864:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004868:	d82a      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 800486a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800486e:	d008      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 8004870:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004874:	d824      	bhi.n	80048c0 <ADC_ConfigureBoostMode+0x148>
 8004876:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800487a:	d002      	beq.n	8004882 <ADC_ConfigureBoostMode+0x10a>
 800487c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004880:	d11e      	bne.n	80048c0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	0c9b      	lsrs	r3, r3, #18
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	68fa      	ldr	r2, [r7, #12]
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	60fb      	str	r3, [r7, #12]
        break;
 8004892:	e016      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	091b      	lsrs	r3, r3, #4
 8004898:	60fb      	str	r3, [r7, #12]
        break;
 800489a:	e012      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	095b      	lsrs	r3, r3, #5
 80048a0:	60fb      	str	r3, [r7, #12]
        break;
 80048a2:	e00e      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	099b      	lsrs	r3, r3, #6
 80048a8:	60fb      	str	r3, [r7, #12]
        break;
 80048aa:	e00a      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	09db      	lsrs	r3, r3, #7
 80048b0:	60fb      	str	r3, [r7, #12]
        break;
 80048b2:	e006      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	0a1b      	lsrs	r3, r3, #8
 80048b8:	60fb      	str	r3, [r7, #12]
        break;
 80048ba:	e002      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80048bc:	bf00      	nop
 80048be:	e000      	b.n	80048c2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048c0:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	085b      	lsrs	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004948 <ADC_ConfigureBoostMode+0x1d0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d808      	bhi.n	80048e2 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048de:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80048e0:	e025      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4a19      	ldr	r2, [pc, #100]	@ (800494c <ADC_ConfigureBoostMode+0x1d4>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d80a      	bhi.n	8004900 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fc:	609a      	str	r2, [r3, #8]
}
 80048fe:	e016      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a13      	ldr	r2, [pc, #76]	@ (8004950 <ADC_ConfigureBoostMode+0x1d8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d80a      	bhi.n	800491e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800491a:	609a      	str	r2, [r3, #8]
}
 800491c:	e007      	b.n	800492e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689a      	ldr	r2, [r3, #8]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800492c:	609a      	str	r2, [r3, #8]
}
 800492e:	bf00      	nop
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40022000 	.word	0x40022000
 800493c:	40022100 	.word	0x40022100
 8004940:	40022300 	.word	0x40022300
 8004944:	58026300 	.word	0x58026300
 8004948:	005f5e10 	.word	0x005f5e10
 800494c:	00bebc20 	.word	0x00bebc20
 8004950:	017d7840 	.word	0x017d7840

08004954 <LL_ADC_IsEnabled>:
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d101      	bne.n	800496c <LL_ADC_IsEnabled+0x18>
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <LL_ADC_IsEnabled+0x1a>
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <LL_ADC_REG_IsConversionOngoing>:
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f003 0304 	and.w	r3, r3, #4
 800498a:	2b04      	cmp	r3, #4
 800498c:	d101      	bne.n	8004992 <LL_ADC_REG_IsConversionOngoing+0x18>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049a0:	b590      	push	{r4, r7, lr}
 80049a2:	b0a3      	sub	sp, #140	@ 0x8c
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d101      	bne.n	80049be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e0c1      	b.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049c6:	2300      	movs	r3, #0
 80049c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a5e      	ldr	r2, [pc, #376]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d102      	bne.n	80049de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049d8:	4b5d      	ldr	r3, [pc, #372]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e001      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0a0      	b.n	8004b42 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7ff ffb9 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004a08:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff ffb2 	bl	800497a <LL_ADC_REG_IsConversionOngoing>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 8081 	bne.w	8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d17c      	bne.n	8004b20 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a48      	ldr	r2, [pc, #288]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d004      	beq.n	8004a3a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a46      	ldr	r2, [pc, #280]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d101      	bne.n	8004a3e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a3a:	4b46      	ldr	r3, [pc, #280]	@ (8004b54 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a3c:	e000      	b.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a3e:	4b46      	ldr	r3, [pc, #280]	@ (8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a40:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d039      	beq.n	8004abe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a5a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3a      	ldr	r2, [pc, #232]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a39      	ldr	r2, [pc, #228]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d10e      	bne.n	8004a8e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004a70:	4836      	ldr	r0, [pc, #216]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a72:	f7ff ff6f 	bl	8004954 <LL_ADC_IsEnabled>
 8004a76:	4604      	mov	r4, r0
 8004a78:	4835      	ldr	r0, [pc, #212]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a7a:	f7ff ff6b 	bl	8004954 <LL_ADC_IsEnabled>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4323      	orrs	r3, r4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	bf0c      	ite	eq
 8004a86:	2301      	moveq	r3, #1
 8004a88:	2300      	movne	r3, #0
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	e008      	b.n	8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004a8e:	4833      	ldr	r0, [pc, #204]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004a90:	f7ff ff60 	bl	8004954 <LL_ADC_IsEnabled>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d047      	beq.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004aa4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	6811      	ldr	r1, [r2, #0]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	6892      	ldr	r2, [r2, #8]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004aba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004abc:	e03a      	b.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004abe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ac8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10e      	bne.n	8004afc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004ade:	481b      	ldr	r0, [pc, #108]	@ (8004b4c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ae0:	f7ff ff38 	bl	8004954 <LL_ADC_IsEnabled>
 8004ae4:	4604      	mov	r4, r0
 8004ae6:	481a      	ldr	r0, [pc, #104]	@ (8004b50 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ae8:	f7ff ff34 	bl	8004954 <LL_ADC_IsEnabled>
 8004aec:	4603      	mov	r3, r0
 8004aee:	4323      	orrs	r3, r4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	e008      	b.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004afc:	4817      	ldr	r0, [pc, #92]	@ (8004b5c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004afe:	f7ff ff29 	bl	8004954 <LL_ADC_IsEnabled>
 8004b02:	4603      	mov	r3, r0
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	bf0c      	ite	eq
 8004b08:	2301      	moveq	r3, #1
 8004b0a:	2300      	movne	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b12:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b1e:	e009      	b.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b32:	e000      	b.n	8004b36 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b3e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	378c      	adds	r7, #140	@ 0x8c
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd90      	pop	{r4, r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40022000 	.word	0x40022000
 8004b50:	40022100 	.word	0x40022100
 8004b54:	40022300 	.word	0x40022300
 8004b58:	58026300 	.word	0x58026300
 8004b5c:	58026000 	.word	0x58026000
 8004b60:	fffff0e0 	.word	0xfffff0e0

08004b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b74:	4b0b      	ldr	r3, [pc, #44]	@ (8004ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b7a:	68ba      	ldr	r2, [r7, #8]
 8004b7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b80:	4013      	ands	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b92:	4a04      	ldr	r2, [pc, #16]	@ (8004ba4 <__NVIC_SetPriorityGrouping+0x40>)
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	60d3      	str	r3, [r2, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	3714      	adds	r7, #20
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr
 8004ba4:	e000ed00 	.word	0xe000ed00
 8004ba8:	05fa0000 	.word	0x05fa0000

08004bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb0:	4b04      	ldr	r3, [pc, #16]	@ (8004bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	0a1b      	lsrs	r3, r3, #8
 8004bb6:	f003 0307 	and.w	r3, r3, #7
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db0b      	blt.n	8004bf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	f003 021f 	and.w	r2, r3, #31
 8004be0:	4907      	ldr	r1, [pc, #28]	@ (8004c00 <__NVIC_EnableIRQ+0x38>)
 8004be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004be6:	095b      	lsrs	r3, r3, #5
 8004be8:	2001      	movs	r0, #1
 8004bea:	fa00 f202 	lsl.w	r2, r0, r2
 8004bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	e000e100 	.word	0xe000e100

08004c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	6039      	str	r1, [r7, #0]
 8004c0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	db0a      	blt.n	8004c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	490c      	ldr	r1, [pc, #48]	@ (8004c50 <__NVIC_SetPriority+0x4c>)
 8004c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c22:	0112      	lsls	r2, r2, #4
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	440b      	add	r3, r1
 8004c28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c2c:	e00a      	b.n	8004c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4908      	ldr	r1, [pc, #32]	@ (8004c54 <__NVIC_SetPriority+0x50>)
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	f003 030f 	and.w	r3, r3, #15
 8004c3a:	3b04      	subs	r3, #4
 8004c3c:	0112      	lsls	r2, r2, #4
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	440b      	add	r3, r1
 8004c42:	761a      	strb	r2, [r3, #24]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr
 8004c50:	e000e100 	.word	0xe000e100
 8004c54:	e000ed00 	.word	0xe000ed00

08004c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b089      	sub	sp, #36	@ 0x24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f003 0307 	and.w	r3, r3, #7
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	f1c3 0307 	rsb	r3, r3, #7
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	bf28      	it	cs
 8004c76:	2304      	movcs	r3, #4
 8004c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	d902      	bls.n	8004c88 <NVIC_EncodePriority+0x30>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3b03      	subs	r3, #3
 8004c86:	e000      	b.n	8004c8a <NVIC_EncodePriority+0x32>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8004caa:	43d9      	mvns	r1, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb0:	4313      	orrs	r3, r2
         );
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	@ 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b082      	sub	sp, #8
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7ff ff4c 	bl	8004b64 <__NVIC_SetPriorityGrouping>
}
 8004ccc:	bf00      	nop
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b086      	sub	sp, #24
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ce2:	f7ff ff63 	bl	8004bac <__NVIC_GetPriorityGrouping>
 8004ce6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	6978      	ldr	r0, [r7, #20]
 8004cee:	f7ff ffb3 	bl	8004c58 <NVIC_EncodePriority>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7ff ff82 	bl	8004c04 <__NVIC_SetPriority>
}
 8004d00:	bf00      	nop
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7ff ff56 	bl	8004bc8 <__NVIC_EnableIRQ>
}
 8004d1c:	bf00      	nop
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e014      	b.n	8004d60 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	791b      	ldrb	r3, [r3, #4]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d105      	bne.n	8004d4c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7fb ff2e 	bl	8000ba8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2202      	movs	r2, #2
 8004d50:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d01d      	beq.n	8004dc6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d018      	beq.n	8004dc6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2204      	movs	r2, #4
 8004d98:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f043 0201 	orr.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004dbe:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f827 	bl	8004e14 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01d      	beq.n	8004e0c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2204      	movs	r2, #4
 8004dde:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f043 0202 	orr.w	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004df4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e04:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f950 	bl	80050ac <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	@ 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <HAL_DAC_ConfigChannel+0x1e>
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e12a      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	795b      	ldrb	r3, [r3, #5]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_DAC_ConfigChannel+0x2e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e124      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d17a      	bne.n	8004f60 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004e6a:	f7fe fad1 	bl	8003410 <HAL_GetTick>
 8004e6e:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d13d      	bne.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e76:	e018      	b.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004e78:	f7fe faca 	bl	8003410 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d911      	bls.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8c:	4b86      	ldr	r3, [pc, #536]	@ (80050a8 <HAL_DAC_ConfigChannel+0x280>)
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d00a      	beq.n	8004eaa <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	691b      	ldr	r3, [r3, #16]
 8004e98:	f043 0208 	orr.w	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2203      	movs	r2, #3
 8004ea4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0fa      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb0:	4b7d      	ldr	r3, [pc, #500]	@ (80050a8 <HAL_DAC_ConfigChannel+0x280>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d1df      	bne.n	8004e78 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	6992      	ldr	r2, [r2, #24]
 8004ec0:	641a      	str	r2, [r3, #64]	@ 0x40
 8004ec2:	e020      	b.n	8004f06 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ec4:	f7fe faa4 	bl	8003410 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d90f      	bls.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	da0a      	bge.n	8004ef2 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f043 0208 	orr.w	r2, r3, #8
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2203      	movs	r2, #3
 8004eec:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0d6      	b.n	80050a0 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	dbe3      	blt.n	8004ec4 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68ba      	ldr	r2, [r7, #8]
 8004f02:	6992      	ldr	r2, [r2, #24]
 8004f04:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f003 0310 	and.w	r3, r3, #16
 8004f12:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f16:	fa01 f303 	lsl.w	r3, r1, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	ea02 0103 	and.w	r1, r2, r3
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f003 0310 	and.w	r3, r3, #16
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0310 	and.w	r3, r3, #16
 8004f40:	21ff      	movs	r1, #255	@ 0xff
 8004f42:	fa01 f303 	lsl.w	r3, r1, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	ea02 0103 	and.w	r1, r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6a1a      	ldr	r2, [r3, #32]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	f003 0310 	and.w	r3, r3, #16
 8004f56:	409a      	lsls	r2, r3
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d11d      	bne.n	8004fa4 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6e:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	221f      	movs	r2, #31
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	695b      	ldr	r3, [r3, #20]
 8004f88:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f003 0310 	and.w	r3, r3, #16
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	69ba      	ldr	r2, [r7, #24]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004faa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f003 0310 	and.w	r3, r3, #16
 8004fb2:	2207      	movs	r2, #7
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d102      	bne.n	8004fce <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fcc:	e00f      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d102      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fda:	e008      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d102      	bne.n	8004fea <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe8:	e001      	b.n	8004fee <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f003 0310 	and.w	r3, r3, #16
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	fa02 f303 	lsl.w	r3, r2, r3
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6819      	ldr	r1, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005028:	fa02 f303 	lsl.w	r3, r2, r3
 800502c:	43da      	mvns	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	400a      	ands	r2, r1
 8005034:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f003 0310 	and.w	r3, r3, #16
 8005044:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005048:	fa02 f303 	lsl.w	r3, r2, r3
 800504c:	43db      	mvns	r3, r3
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	4013      	ands	r3, r2
 8005052:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f003 0310 	and.w	r3, r3, #16
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6819      	ldr	r1, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	22c0      	movs	r2, #192	@ 0xc0
 8005082:	fa02 f303 	lsl.w	r3, r2, r3
 8005086:	43da      	mvns	r2, r3
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	400a      	ands	r2, r1
 800508e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2201      	movs	r2, #1
 8005094:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800509c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3728      	adds	r7, #40	@ 0x28
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	20008000 	.word	0x20008000

080050ac <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80050b4:	bf00      	nop
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e0e3      	b.n	800529a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d106      	bne.n	80050ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2223      	movs	r2, #35	@ 0x23
 80050e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7fb fdf9 	bl	8000cdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ea:	4b6e      	ldr	r3, [pc, #440]	@ (80052a4 <HAL_ETH_Init+0x1e4>)
 80050ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80050f0:	4a6c      	ldr	r2, [pc, #432]	@ (80052a4 <HAL_ETH_Init+0x1e4>)
 80050f2:	f043 0302 	orr.w	r3, r3, #2
 80050f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80050fa:	4b6a      	ldr	r3, [pc, #424]	@ (80052a4 <HAL_ETH_Init+0x1e4>)
 80050fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	7a1b      	ldrb	r3, [r3, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d103      	bne.n	8005118 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005110:	2000      	movs	r0, #0
 8005112:	f7fe f989 	bl	8003428 <HAL_SYSCFG_ETHInterfaceSelect>
 8005116:	e003      	b.n	8005120 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005118:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800511c:	f7fe f984 	bl	8003428 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005120:	4b61      	ldr	r3, [pc, #388]	@ (80052a8 <HAL_ETH_Init+0x1e8>)
 8005122:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6812      	ldr	r2, [r2, #0]
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800513a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800513c:	f7fe f968 	bl	8003410 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005142:	e011      	b.n	8005168 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005144:	f7fe f964 	bl	8003410 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005152:	d909      	bls.n	8005168 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2204      	movs	r2, #4
 8005158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	22e0      	movs	r2, #224	@ 0xe0
 8005160:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e098      	b.n	800529a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e4      	bne.n	8005144 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f89e 	bl	80052bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005180:	f003 fb1c 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8005184:	4603      	mov	r3, r0
 8005186:	4a49      	ldr	r2, [pc, #292]	@ (80052ac <HAL_ETH_Init+0x1ec>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	0c9a      	lsrs	r2, r3, #18
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	3a01      	subs	r2, #1
 8005194:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 fa81 	bl	80056a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051aa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051ba:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0303 	and.w	r3, r3, #3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	22e0      	movs	r2, #224	@ 0xe0
 80051d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e05d      	b.n	800529a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80051ea:	4b31      	ldr	r3, [pc, #196]	@ (80052b0 <HAL_ETH_Init+0x1f0>)
 80051ec:	4013      	ands	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6952      	ldr	r2, [r2, #20]
 80051f2:	0051      	lsls	r1, r2, #1
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	430b      	orrs	r3, r1
 80051fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051fe:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fae9 	bl	80057da <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 fb2f 	bl	800586c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	3305      	adds	r3, #5
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	3304      	adds	r3, #4
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	3303      	adds	r3, #3
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	061a      	lsls	r2, r3, #24
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	3302      	adds	r3, #2
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	3301      	adds	r3, #1
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800524c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800525a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800525c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b11      	ldr	r3, [pc, #68]	@ (80052b4 <HAL_ETH_Init+0x1f4>)
 800526e:	430b      	orrs	r3, r1
 8005270:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	4b0d      	ldr	r3, [pc, #52]	@ (80052b8 <HAL_ETH_Init+0x1f8>)
 8005282:	430b      	orrs	r3, r1
 8005284:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2210      	movs	r2, #16
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	58024400 	.word	0x58024400
 80052a8:	58000400 	.word	0x58000400
 80052ac:	431bde83 	.word	0x431bde83
 80052b0:	ffff8001 	.word	0xffff8001
 80052b4:	0c020060 	.word	0x0c020060
 80052b8:	0c20c000 	.word	0x0c20c000

080052bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80052d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80052d6:	f003 fa71 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 80052da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d804      	bhi.n	80052ee <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	e022      	b.n	8005334 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	4a16      	ldr	r2, [pc, #88]	@ (800534c <HAL_ETH_SetMDIOClockRange+0x90>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d204      	bcs.n	8005300 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80052fc:	60fb      	str	r3, [r7, #12]
 80052fe:	e019      	b.n	8005334 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	4a13      	ldr	r2, [pc, #76]	@ (8005350 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d915      	bls.n	8005334 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4a12      	ldr	r2, [pc, #72]	@ (8005354 <HAL_ETH_SetMDIOClockRange+0x98>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d804      	bhi.n	800531a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e00c      	b.n	8005334 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	4a0e      	ldr	r2, [pc, #56]	@ (8005358 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d804      	bhi.n	800532c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e003      	b.n	8005334 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8005332:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	02160ebf 	.word	0x02160ebf
 800534c:	03938700 	.word	0x03938700
 8005350:	05f5e0ff 	.word	0x05f5e0ff
 8005354:	08f0d17f 	.word	0x08f0d17f
 8005358:	0ee6b27f 	.word	0x0ee6b27f

0800535c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800536e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	791b      	ldrb	r3, [r3, #4]
 8005374:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005376:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	7b1b      	ldrb	r3, [r3, #12]
 800537c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800537e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	7b5b      	ldrb	r3, [r3, #13]
 8005384:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005386:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	7b9b      	ldrb	r3, [r3, #14]
 800538c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800538e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	7bdb      	ldrb	r3, [r3, #15]
 8005394:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005396:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	7c12      	ldrb	r2, [r2, #16]
 800539c:	2a00      	cmp	r2, #0
 800539e:	d102      	bne.n	80053a6 <ETH_SetMACConfig+0x4a>
 80053a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80053a4:	e000      	b.n	80053a8 <ETH_SetMACConfig+0x4c>
 80053a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	7c52      	ldrb	r2, [r2, #17]
 80053ae:	2a00      	cmp	r2, #0
 80053b0:	d102      	bne.n	80053b8 <ETH_SetMACConfig+0x5c>
 80053b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053b6:	e000      	b.n	80053ba <ETH_SetMACConfig+0x5e>
 80053b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	7c9b      	ldrb	r3, [r3, #18]
 80053c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053c2:	431a      	orrs	r2, r3
               macconf->Speed |
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80053c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80053ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	7f1b      	ldrb	r3, [r3, #28]
 80053d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80053d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	7f5b      	ldrb	r3, [r3, #29]
 80053dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80053de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053e0:	683a      	ldr	r2, [r7, #0]
 80053e2:	7f92      	ldrb	r2, [r2, #30]
 80053e4:	2a00      	cmp	r2, #0
 80053e6:	d102      	bne.n	80053ee <ETH_SetMACConfig+0x92>
 80053e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053ec:	e000      	b.n	80053f0 <ETH_SetMACConfig+0x94>
 80053ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80053f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	7fdb      	ldrb	r3, [r3, #31]
 80053f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80053f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005400:	2a00      	cmp	r2, #0
 8005402:	d102      	bne.n	800540a <ETH_SetMACConfig+0xae>
 8005404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005408:	e000      	b.n	800540c <ETH_SetMACConfig+0xb0>
 800540a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800540c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005412:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800541a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800541c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	4b56      	ldr	r3, [pc, #344]	@ (8005588 <ETH_SetMACConfig+0x22c>)
 800542e:	4013      	ands	r3, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6812      	ldr	r2, [r2, #0]
 8005434:	68f9      	ldr	r1, [r7, #12]
 8005436:	430b      	orrs	r3, r1
 8005438:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005446:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005448:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005450:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005452:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800545a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800545c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800545e:	683a      	ldr	r2, [r7, #0]
 8005460:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005464:	2a00      	cmp	r2, #0
 8005466:	d102      	bne.n	800546e <ETH_SetMACConfig+0x112>
 8005468:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800546c:	e000      	b.n	8005470 <ETH_SetMACConfig+0x114>
 800546e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005470:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005476:	4313      	orrs	r3, r2
 8005478:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	4b42      	ldr	r3, [pc, #264]	@ (800558c <ETH_SetMACConfig+0x230>)
 8005482:	4013      	ands	r3, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	68f9      	ldr	r1, [r7, #12]
 800548a:	430b      	orrs	r3, r1
 800548c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005494:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005590 <ETH_SetMACConfig+0x234>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6812      	ldr	r2, [r2, #0]
 80054ac:	68f9      	ldr	r1, [r7, #12]
 80054ae:	430b      	orrs	r3, r1
 80054b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80054b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	d101      	bne.n	80054ce <ETH_SetMACConfig+0x172>
 80054ca:	2280      	movs	r2, #128	@ 0x80
 80054cc:	e000      	b.n	80054d0 <ETH_SetMACConfig+0x174>
 80054ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80054d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80054d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80054e2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80054e6:	4013      	ands	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	68f9      	ldr	r1, [r7, #12]
 80054ee:	430b      	orrs	r3, r1
 80054f0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80054f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005500:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800550e:	f023 0103 	bic.w	r1, r3, #3
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	430a      	orrs	r2, r1
 800551a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005526:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005542:	2a00      	cmp	r2, #0
 8005544:	d101      	bne.n	800554a <ETH_SetMACConfig+0x1ee>
 8005546:	2240      	movs	r2, #64	@ 0x40
 8005548:	e000      	b.n	800554c <ETH_SetMACConfig+0x1f0>
 800554a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800554c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005554:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005556:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800555e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005560:	4313      	orrs	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800556c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	430a      	orrs	r2, r1
 8005578:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800557c:	bf00      	nop
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	00048083 	.word	0x00048083
 800558c:	c0f88000 	.word	0xc0f88000
 8005590:	fffffef0 	.word	0xfffffef0

08005594 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	4b38      	ldr	r3, [pc, #224]	@ (800568c <ETH_SetDMAConfig+0xf8>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	791b      	ldrb	r3, [r3, #4]
 80055c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	7b1b      	ldrb	r3, [r3, #12]
 80055cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055da:	685a      	ldr	r2, [r3, #4]
 80055dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <ETH_SetDMAConfig+0xfc>)
 80055de:	4013      	ands	r3, r2
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	6812      	ldr	r2, [r2, #0]
 80055e4:	68f9      	ldr	r1, [r7, #12]
 80055e6:	430b      	orrs	r3, r1
 80055e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	7b5b      	ldrb	r3, [r3, #13]
 80055f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80055f8:	4313      	orrs	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005604:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005608:	4b22      	ldr	r3, [pc, #136]	@ (8005694 <ETH_SetDMAConfig+0x100>)
 800560a:	4013      	ands	r3, r2
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	430b      	orrs	r3, r1
 8005614:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005618:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	7d1b      	ldrb	r3, [r3, #20]
 8005624:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005626:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	7f5b      	ldrb	r3, [r3, #29]
 800562c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800563a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800563e:	4b16      	ldr	r3, [pc, #88]	@ (8005698 <ETH_SetDMAConfig+0x104>)
 8005640:	4013      	ands	r3, r2
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	6812      	ldr	r2, [r2, #0]
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	430b      	orrs	r3, r1
 800564a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800564e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	7f1b      	ldrb	r3, [r3, #28]
 8005656:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005668:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800566c:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <ETH_SetDMAConfig+0x108>)
 800566e:	4013      	ands	r3, r2
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6812      	ldr	r2, [r2, #0]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	430b      	orrs	r3, r1
 8005678:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800567c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	ffff87fd 	.word	0xffff87fd
 8005690:	ffff2ffe 	.word	0xffff2ffe
 8005694:	fffec000 	.word	0xfffec000
 8005698:	ffc0efef 	.word	0xffc0efef
 800569c:	7fc0ffff 	.word	0x7fc0ffff

080056a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b0a4      	sub	sp, #144	@ 0x90
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80056a8:	2301      	movs	r3, #1
 80056aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80056ae:	2300      	movs	r3, #0
 80056b0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80056be:	2301      	movs	r3, #1
 80056c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80056ca:	2301      	movs	r3, #1
 80056cc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80056dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056e0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80056f2:	2300      	movs	r3, #0
 80056f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80056f8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80056fe:	2300      	movs	r3, #0
 8005700:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005704:	2300      	movs	r3, #0
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800570e:	2300      	movs	r3, #0
 8005710:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800571a:	2300      	movs	r3, #0
 800571c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800571e:	2300      	movs	r3, #0
 8005720:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005722:	2300      	movs	r3, #0
 8005724:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800572c:	2300      	movs	r3, #0
 800572e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005738:	2320      	movs	r3, #32
 800573a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800573e:	2301      	movs	r3, #1
 8005740:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005744:	2300      	movs	r3, #0
 8005746:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800574a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800574e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005750:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800575c:	2302      	movs	r3, #2
 800575e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005762:	2300      	movs	r3, #0
 8005764:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005768:	2300      	movs	r3, #0
 800576a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800576e:	2300      	movs	r3, #0
 8005770:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005774:	2301      	movs	r3, #1
 8005776:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800577a:	2300      	movs	r3, #0
 800577c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005784:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005788:	4619      	mov	r1, r3
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fde6 	bl	800535c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005790:	2301      	movs	r3, #1
 8005792:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005794:	2301      	movs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005798:	2300      	movs	r3, #0
 800579a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057a2:	2300      	movs	r3, #0
 80057a4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80057aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80057b0:	2300      	movs	r3, #0
 80057b2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057b4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057b8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80057ba:	2300      	movs	r3, #0
 80057bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80057c0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff fee1 	bl	8005594 <ETH_SetDMAConfig>
}
 80057d2:	bf00      	nop
 80057d4:	3790      	adds	r7, #144	@ 0x90
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80057e2:	2300      	movs	r3, #0
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e01d      	b.n	8005824 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68d9      	ldr	r1, [r3, #12]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	4413      	add	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	440b      	add	r3, r1
 80057f8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2200      	movs	r2, #0
 8005804:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2200      	movs	r2, #0
 800580a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2200      	movs	r2, #0
 8005810:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	3206      	adds	r2, #6
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b03      	cmp	r3, #3
 8005828:	d9de      	bls.n	80057e8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005838:	461a      	mov	r2, r3
 800583a:	2303      	movs	r3, #3
 800583c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800584c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800585c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005860:	bf00      	nop
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005874:	2300      	movs	r3, #0
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	e023      	b.n	80058c2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6919      	ldr	r1, [r3, #16]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	440b      	add	r3, r1
 800588a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	2200      	movs	r2, #0
 80058a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2200      	movs	r2, #0
 80058ae:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	3212      	adds	r2, #18
 80058b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3301      	adds	r3, #1
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d9d8      	bls.n	800587a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ee:	461a      	mov	r2, r3
 80058f0:	2303      	movs	r3, #3
 80058f2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005902:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005916:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
	...

08005928 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b098      	sub	sp, #96	@ 0x60
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005930:	4a84      	ldr	r2, [pc, #528]	@ (8005b44 <HAL_FDCAN_Init+0x21c>)
 8005932:	f107 030c 	add.w	r3, r7, #12
 8005936:	4611      	mov	r1, r2
 8005938:	224c      	movs	r2, #76	@ 0x4c
 800593a:	4618      	mov	r0, r3
 800593c:	f00c f9db 	bl	8011cf6 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e1c6      	b.n	8005cd8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a7e      	ldr	r2, [pc, #504]	@ (8005b48 <HAL_FDCAN_Init+0x220>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d106      	bne.n	8005962 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800595c:	461a      	mov	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fb24 	bl	8000fc4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f022 0210 	bic.w	r2, r2, #16
 800598a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800598c:	f7fd fd40 	bl	8003410 <HAL_GetTick>
 8005990:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005992:	e014      	b.n	80059be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005994:	f7fd fd3c 	bl	8003410 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b0a      	cmp	r3, #10
 80059a0:	d90d      	bls.n	80059be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059a8:	f043 0201 	orr.w	r2, r3, #1
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e18c      	b.n	8005cd8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d0e3      	beq.n	8005994 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699a      	ldr	r2, [r3, #24]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059dc:	f7fd fd18 	bl	8003410 <HAL_GetTick>
 80059e0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80059e2:	e014      	b.n	8005a0e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059e4:	f7fd fd14 	bl	8003410 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	2b0a      	cmp	r3, #10
 80059f0:	d90d      	bls.n	8005a0e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059f8:	f043 0201 	orr.w	r2, r3, #1
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2203      	movs	r2, #3
 8005a06:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e164      	b.n	8005cd8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0e3      	beq.n	80059e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699a      	ldr	r2, [r3, #24]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0202 	orr.w	r2, r2, #2
 8005a2a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7c1b      	ldrb	r3, [r3, #16]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d108      	bne.n	8005a46 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a42:	619a      	str	r2, [r3, #24]
 8005a44:	e007      	b.n	8005a56 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699a      	ldr	r2, [r3, #24]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a54:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	7c5b      	ldrb	r3, [r3, #17]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d108      	bne.n	8005a70 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699a      	ldr	r2, [r3, #24]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a6c:	619a      	str	r2, [r3, #24]
 8005a6e:	e007      	b.n	8005a80 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699a      	ldr	r2, [r3, #24]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a7e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	7c9b      	ldrb	r3, [r3, #18]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d108      	bne.n	8005a9a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005a96:	619a      	str	r2, [r3, #24]
 8005a98:	e007      	b.n	8005aaa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005aa8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699b      	ldr	r3, [r3, #24]
 8005ab0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005ace:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691a      	ldr	r2, [r3, #16]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0210 	bic.w	r2, r2, #16
 8005ade:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d108      	bne.n	8005afa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0204 	orr.w	r2, r2, #4
 8005af6:	619a      	str	r2, [r3, #24]
 8005af8:	e030      	b.n	8005b5c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d02c      	beq.n	8005b5c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d020      	beq.n	8005b4c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b18:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	691a      	ldr	r2, [r3, #16]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0210 	orr.w	r2, r2, #16
 8005b28:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d114      	bne.n	8005b5c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	699a      	ldr	r2, [r3, #24]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0220 	orr.w	r2, r2, #32
 8005b40:	619a      	str	r2, [r3, #24]
 8005b42:	e00b      	b.n	8005b5c <HAL_FDCAN_Init+0x234>
 8005b44:	08013ce8 	.word	0x08013ce8
 8005b48:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	699a      	ldr	r2, [r3, #24]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0220 	orr.w	r2, r2, #32
 8005b5a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	3b01      	subs	r3, #1
 8005b62:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b6c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b74:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005b84:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b86:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b90:	d115      	bne.n	8005bbe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ba0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005baa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bbc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005be4:	4413      	add	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d011      	beq.n	8005c0e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005bf2:	f023 0107 	bic.w	r1, r3, #7
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	3360      	adds	r3, #96	@ 0x60
 8005bfe:	443b      	add	r3, r7
 8005c00:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c1e:	f023 0107 	bic.w	r1, r3, #7
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	3360      	adds	r3, #96	@ 0x60
 8005c2a:	443b      	add	r3, r7
 8005c2c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c4a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	3360      	adds	r3, #96	@ 0x60
 8005c56:	443b      	add	r3, r7
 8005c58:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005c5c:	011a      	lsls	r2, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d012      	beq.n	8005c96 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c78:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	3360      	adds	r3, #96	@ 0x60
 8005c84:	443b      	add	r3, r7
 8005c86:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005c8a:	021a      	lsls	r2, r3, #8
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a11      	ldr	r2, [pc, #68]	@ (8005ce0 <HAL_FDCAN_Init+0x3b8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d107      	bne.n	8005cb0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f022 0203 	bic.w	r2, r2, #3
 8005cae:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f80b 	bl	8005ce4 <FDCAN_CalcultateRamBlockAddresses>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005cd4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3760      	adds	r7, #96	@ 0x60
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}
 8005ce0:	4000a000 	.word	0x4000a000

08005ce4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cf0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005cfa:	4ba7      	ldr	r3, [pc, #668]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	0091      	lsls	r1, r2, #2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6812      	ldr	r2, [r2, #0]
 8005d06:	430b      	orrs	r3, r1
 8005d08:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d14:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1c:	041a      	lsls	r2, r3, #16
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	4413      	add	r3, r2
 8005d30:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d3a:	4b97      	ldr	r3, [pc, #604]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	0091      	lsls	r1, r2, #2
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d54:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d5c:	041a      	lsls	r2, r3, #16
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d6c:	005b      	lsls	r3, r3, #1
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	4413      	add	r3, r2
 8005d72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005d7c:	4b86      	ldr	r3, [pc, #536]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d7e:	4013      	ands	r3, r2
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	0091      	lsls	r1, r2, #2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	430b      	orrs	r3, r1
 8005d8a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d96:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d9e:	041a      	lsls	r2, r3, #16
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005db2:	fb02 f303 	mul.w	r3, r2, r3
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4413      	add	r3, r2
 8005dba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005dc4:	4b74      	ldr	r3, [pc, #464]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	0091      	lsls	r1, r2, #2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	430b      	orrs	r3, r1
 8005dd2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dde:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005de6:	041a      	lsls	r2, r3, #16
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	4413      	add	r3, r2
 8005e02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005e0c:	4b62      	ldr	r3, [pc, #392]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	0091      	lsls	r1, r2, #2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6812      	ldr	r2, [r2, #0]
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e26:	fb02 f303 	mul.w	r3, r2, r3
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005e38:	4b57      	ldr	r3, [pc, #348]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	0091      	lsls	r1, r2, #2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6812      	ldr	r2, [r2, #0]
 8005e44:	430b      	orrs	r3, r1
 8005e46:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e52:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e5a:	041a      	lsls	r2, r3, #16
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6a:	005b      	lsls	r3, r3, #1
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	4413      	add	r3, r2
 8005e70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005e7a:	4b47      	ldr	r3, [pc, #284]	@ (8005f98 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	0091      	lsls	r1, r2, #2
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	6812      	ldr	r2, [r2, #0]
 8005e86:	430b      	orrs	r3, r1
 8005e88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e94:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9c:	041a      	lsls	r2, r3, #16
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005eb0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005eb8:	061a      	lsls	r2, r3, #24
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ec8:	4b34      	ldr	r3, [pc, #208]	@ (8005f9c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005eca:	4413      	add	r3, r2
 8005ecc:	009a      	lsls	r2, r3, #2
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	441a      	add	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	441a      	add	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005efe:	fb01 f303 	mul.w	r3, r1, r3
 8005f02:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f04:	441a      	add	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f12:	6879      	ldr	r1, [r7, #4]
 8005f14:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005f16:	fb01 f303 	mul.w	r3, r1, r3
 8005f1a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f1c:	441a      	add	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005f2e:	fb01 f303 	mul.w	r3, r1, r3
 8005f32:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	441a      	add	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f76:	6879      	ldr	r1, [r7, #4]
 8005f78:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005f80:	441a      	add	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f8e:	4a04      	ldr	r2, [pc, #16]	@ (8005fa0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d915      	bls.n	8005fc0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005f94:	e006      	b.n	8005fa4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005f96:	bf00      	nop
 8005f98:	ffff0003 	.word	0xffff0003
 8005f9c:	10002b00 	.word	0x10002b00
 8005fa0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2203      	movs	r2, #3
 8005fb8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e010      	b.n	8005fe2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc4:	60fb      	str	r3, [r7, #12]
 8005fc6:	e005      	b.n	8005fd4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d3f3      	bcc.n	8005fc8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop

08005ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b089      	sub	sp, #36	@ 0x24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ffe:	4b86      	ldr	r3, [pc, #536]	@ (8006218 <HAL_GPIO_Init+0x228>)
 8006000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006002:	e18c      	b.n	800631e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	2101      	movs	r1, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa01 f303 	lsl.w	r3, r1, r3
 8006010:	4013      	ands	r3, r2
 8006012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 817e 	beq.w	8006318 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d005      	beq.n	8006034 <HAL_GPIO_Init+0x44>
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b02      	cmp	r3, #2
 8006032:	d130      	bne.n	8006096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	005b      	lsls	r3, r3, #1
 800603e:	2203      	movs	r2, #3
 8006040:	fa02 f303 	lsl.w	r3, r2, r3
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4313      	orrs	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69ba      	ldr	r2, [r7, #24]
 8006062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800606a:	2201      	movs	r2, #1
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	fa02 f303 	lsl.w	r3, r2, r3
 8006072:	43db      	mvns	r3, r3
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	4013      	ands	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	091b      	lsrs	r3, r3, #4
 8006080:	f003 0201 	and.w	r2, r3, #1
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	fa02 f303 	lsl.w	r3, r2, r3
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	4313      	orrs	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d017      	beq.n	80060d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2203      	movs	r2, #3
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b02      	cmp	r3, #2
 80060dc:	d123      	bne.n	8006126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	08da      	lsrs	r2, r3, #3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	3208      	adds	r2, #8
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0307 	and.w	r3, r3, #7
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	691a      	ldr	r2, [r3, #16]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	69ba      	ldr	r2, [r7, #24]
 8006114:	4313      	orrs	r3, r2
 8006116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	08da      	lsrs	r2, r3, #3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3208      	adds	r2, #8
 8006120:	69b9      	ldr	r1, [r7, #24]
 8006122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2203      	movs	r2, #3
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f003 0203 	and.w	r2, r3, #3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	005b      	lsls	r3, r3, #1
 800614a:	fa02 f303 	lsl.w	r3, r2, r3
 800614e:	69ba      	ldr	r2, [r7, #24]
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006162:	2b00      	cmp	r3, #0
 8006164:	f000 80d8 	beq.w	8006318 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006168:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <HAL_GPIO_Init+0x22c>)
 800616a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800616e:	4a2b      	ldr	r2, [pc, #172]	@ (800621c <HAL_GPIO_Init+0x22c>)
 8006170:	f043 0302 	orr.w	r3, r3, #2
 8006174:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006178:	4b28      	ldr	r3, [pc, #160]	@ (800621c <HAL_GPIO_Init+0x22c>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006186:	4a26      	ldr	r2, [pc, #152]	@ (8006220 <HAL_GPIO_Init+0x230>)
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	089b      	lsrs	r3, r3, #2
 800618c:	3302      	adds	r3, #2
 800618e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f003 0303 	and.w	r3, r3, #3
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	220f      	movs	r2, #15
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43db      	mvns	r3, r3
 80061a4:	69ba      	ldr	r2, [r7, #24]
 80061a6:	4013      	ands	r3, r2
 80061a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006224 <HAL_GPIO_Init+0x234>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d04a      	beq.n	8006248 <HAL_GPIO_Init+0x258>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006228 <HAL_GPIO_Init+0x238>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d02b      	beq.n	8006212 <HAL_GPIO_Init+0x222>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a1b      	ldr	r2, [pc, #108]	@ (800622c <HAL_GPIO_Init+0x23c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d025      	beq.n	800620e <HAL_GPIO_Init+0x21e>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	@ (8006230 <HAL_GPIO_Init+0x240>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d01f      	beq.n	800620a <HAL_GPIO_Init+0x21a>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a19      	ldr	r2, [pc, #100]	@ (8006234 <HAL_GPIO_Init+0x244>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d019      	beq.n	8006206 <HAL_GPIO_Init+0x216>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a18      	ldr	r2, [pc, #96]	@ (8006238 <HAL_GPIO_Init+0x248>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d013      	beq.n	8006202 <HAL_GPIO_Init+0x212>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a17      	ldr	r2, [pc, #92]	@ (800623c <HAL_GPIO_Init+0x24c>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d00d      	beq.n	80061fe <HAL_GPIO_Init+0x20e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a16      	ldr	r2, [pc, #88]	@ (8006240 <HAL_GPIO_Init+0x250>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_GPIO_Init+0x20a>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a15      	ldr	r2, [pc, #84]	@ (8006244 <HAL_GPIO_Init+0x254>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d101      	bne.n	80061f6 <HAL_GPIO_Init+0x206>
 80061f2:	2309      	movs	r3, #9
 80061f4:	e029      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061f6:	230a      	movs	r3, #10
 80061f8:	e027      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fa:	2307      	movs	r3, #7
 80061fc:	e025      	b.n	800624a <HAL_GPIO_Init+0x25a>
 80061fe:	2306      	movs	r3, #6
 8006200:	e023      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006202:	2305      	movs	r3, #5
 8006204:	e021      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006206:	2304      	movs	r3, #4
 8006208:	e01f      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620a:	2303      	movs	r3, #3
 800620c:	e01d      	b.n	800624a <HAL_GPIO_Init+0x25a>
 800620e:	2302      	movs	r3, #2
 8006210:	e01b      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006212:	2301      	movs	r3, #1
 8006214:	e019      	b.n	800624a <HAL_GPIO_Init+0x25a>
 8006216:	bf00      	nop
 8006218:	58000080 	.word	0x58000080
 800621c:	58024400 	.word	0x58024400
 8006220:	58000400 	.word	0x58000400
 8006224:	58020000 	.word	0x58020000
 8006228:	58020400 	.word	0x58020400
 800622c:	58020800 	.word	0x58020800
 8006230:	58020c00 	.word	0x58020c00
 8006234:	58021000 	.word	0x58021000
 8006238:	58021400 	.word	0x58021400
 800623c:	58021800 	.word	0x58021800
 8006240:	58021c00 	.word	0x58021c00
 8006244:	58022400 	.word	0x58022400
 8006248:	2300      	movs	r3, #0
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	f002 0203 	and.w	r2, r2, #3
 8006250:	0092      	lsls	r2, r2, #2
 8006252:	4093      	lsls	r3, r2
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4313      	orrs	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800625a:	4938      	ldr	r1, [pc, #224]	@ (800633c <HAL_GPIO_Init+0x34c>)
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	089b      	lsrs	r3, r3, #2
 8006260:	3302      	adds	r3, #2
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006268:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	43db      	mvns	r3, r3
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4013      	ands	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800628e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006296:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4013      	ands	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	4013      	ands	r3, r2
 80062d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	43db      	mvns	r3, r3
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	4013      	ands	r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d003      	beq.n	8006312 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	4313      	orrs	r3, r2
 8006310:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	3301      	adds	r3, #1
 800631c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	fa22 f303 	lsr.w	r3, r2, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	f47f ae6b 	bne.w	8006004 <HAL_GPIO_Init+0x14>
  }
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	3724      	adds	r7, #36	@ 0x24
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	58000400 	.word	0x58000400

08006340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	807b      	strh	r3, [r7, #2]
 800634c:	4613      	mov	r3, r2
 800634e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006350:	787b      	ldrb	r3, [r7, #1]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d003      	beq.n	800635e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006356:	887a      	ldrh	r2, [r7, #2]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800635c:	e003      	b.n	8006366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800635e:	887b      	ldrh	r3, [r7, #2]
 8006360:	041a      	lsls	r2, r3, #16
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	619a      	str	r2, [r3, #24]
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
	...

08006374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e08b      	b.n	800649e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fb f9f6 	bl	800178c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2224      	movs	r2, #36	@ 0x24
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 0201 	bic.w	r2, r2, #1
 80063b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80063d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d107      	bne.n	80063ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	e006      	b.n	80063fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	689a      	ldr	r2, [r3, #8]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80063fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b02      	cmp	r3, #2
 8006402:	d108      	bne.n	8006416 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	685a      	ldr	r2, [r3, #4]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	e007      	b.n	8006426 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006424:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	6859      	ldr	r1, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b1d      	ldr	r3, [pc, #116]	@ (80064a8 <HAL_I2C_Init+0x134>)
 8006432:	430b      	orrs	r3, r1
 8006434:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68da      	ldr	r2, [r3, #12]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006444:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	691a      	ldr	r2, [r3, #16]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69d9      	ldr	r1, [r3, #28]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a1a      	ldr	r2, [r3, #32]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	430a      	orrs	r2, r1
 800646e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	02008000 	.word	0x02008000

080064ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b20      	cmp	r3, #32
 80064c0:	d138      	bne.n	8006534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e032      	b.n	8006536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2224      	movs	r2, #36	@ 0x24
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0201 	bic.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f042 0201 	orr.w	r2, r2, #1
 800651e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2220      	movs	r2, #32
 8006524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006542:	b480      	push	{r7}
 8006544:	b085      	sub	sp, #20
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006552:	b2db      	uxtb	r3, r3
 8006554:	2b20      	cmp	r3, #32
 8006556:	d139      	bne.n	80065cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006562:	2302      	movs	r3, #2
 8006564:	e033      	b.n	80065ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2224      	movs	r2, #36	@ 0x24
 8006572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	021b      	lsls	r3, r3, #8
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4313      	orrs	r3, r2
 800659e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	e000      	b.n	80065ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
  }
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3714      	adds	r7, #20
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
	...

080065dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d101      	bne.n	80065ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e0bf      	b.n	800676e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fb f9de 	bl	80019c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2202      	movs	r2, #2
 800660c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699a      	ldr	r2, [r3, #24]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800661e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6999      	ldr	r1, [r3, #24]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006634:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	430a      	orrs	r2, r1
 8006642:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6899      	ldr	r1, [r3, #8]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	4b4a      	ldr	r3, [pc, #296]	@ (8006778 <HAL_LTDC_Init+0x19c>)
 8006650:	400b      	ands	r3, r1
 8006652:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	041b      	lsls	r3, r3, #16
 800665a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6899      	ldr	r1, [r3, #8]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	431a      	orrs	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	430a      	orrs	r2, r1
 8006670:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68d9      	ldr	r1, [r3, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	4b3e      	ldr	r3, [pc, #248]	@ (8006778 <HAL_LTDC_Init+0x19c>)
 800667e:	400b      	ands	r3, r1
 8006680:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	041b      	lsls	r3, r3, #16
 8006688:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68d9      	ldr	r1, [r3, #12]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a1a      	ldr	r2, [r3, #32]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	430a      	orrs	r2, r1
 800669e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b33      	ldr	r3, [pc, #204]	@ (8006778 <HAL_LTDC_Init+0x19c>)
 80066ac:	400b      	ands	r3, r1
 80066ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6919      	ldr	r1, [r3, #16]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6959      	ldr	r1, [r3, #20]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	4b27      	ldr	r3, [pc, #156]	@ (8006778 <HAL_LTDC_Init+0x19c>)
 80066da:	400b      	ands	r3, r1
 80066dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	041b      	lsls	r3, r3, #16
 80066e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6959      	ldr	r1, [r3, #20]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006702:	021b      	lsls	r3, r3, #8
 8006704:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800670c:	041b      	lsls	r3, r3, #16
 800670e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800671e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	4313      	orrs	r3, r2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006732:	431a      	orrs	r2, r3
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f042 0206 	orr.w	r2, r2, #6
 800674a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	f000f800 	.word	0xf000f800

0800677c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800677c:	b5b0      	push	{r4, r5, r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800678e:	2b01      	cmp	r3, #1
 8006790:	d101      	bne.n	8006796 <HAL_LTDC_ConfigLayer+0x1a>
 8006792:	2302      	movs	r3, #2
 8006794:	e02c      	b.n	80067f0 <HAL_LTDC_ConfigLayer+0x74>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2202      	movs	r2, #2
 80067a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2134      	movs	r1, #52	@ 0x34
 80067ac:	fb01 f303 	mul.w	r3, r1, r3
 80067b0:	4413      	add	r3, r2
 80067b2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	68b9      	ldr	r1, [r7, #8]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f811 	bl	80067f8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2201      	movs	r2, #1
 80067dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bdb0      	pop	{r4, r5, r7, pc}

080067f8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b089      	sub	sp, #36	@ 0x24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	0c1b      	lsrs	r3, r3, #16
 8006810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006814:	4413      	add	r3, r2
 8006816:	041b      	lsls	r3, r3, #16
 8006818:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	01db      	lsls	r3, r3, #7
 8006824:	4413      	add	r3, r2
 8006826:	3384      	adds	r3, #132	@ 0x84
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	6812      	ldr	r2, [r2, #0]
 800682e:	4611      	mov	r1, r2
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	01d2      	lsls	r2, r2, #7
 8006834:	440a      	add	r2, r1
 8006836:	3284      	adds	r2, #132	@ 0x84
 8006838:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800683c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800684e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006850:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	440b      	add	r3, r1
 800685e:	3384      	adds	r3, #132	@ 0x84
 8006860:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006866:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	68da      	ldr	r2, [r3, #12]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006876:	4413      	add	r3, r2
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	461a      	mov	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	01db      	lsls	r3, r3, #7
 8006886:	4413      	add	r3, r2
 8006888:	3384      	adds	r3, #132	@ 0x84
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	6812      	ldr	r2, [r2, #0]
 8006890:	4611      	mov	r1, r2
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	01d2      	lsls	r2, r2, #7
 8006896:	440a      	add	r2, r1
 8006898:	3284      	adds	r2, #132	@ 0x84
 800689a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800689e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	689a      	ldr	r2, [r3, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	4413      	add	r3, r2
 80068b0:	1c5a      	adds	r2, r3, #1
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4619      	mov	r1, r3
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	01db      	lsls	r3, r3, #7
 80068bc:	440b      	add	r3, r1
 80068be:	3384      	adds	r3, #132	@ 0x84
 80068c0:	4619      	mov	r1, r3
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	01db      	lsls	r3, r3, #7
 80068d2:	4413      	add	r3, r2
 80068d4:	3384      	adds	r3, #132	@ 0x84
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	4611      	mov	r1, r2
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	01d2      	lsls	r2, r2, #7
 80068e2:	440a      	add	r2, r1
 80068e4:	3284      	adds	r2, #132	@ 0x84
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	461a      	mov	r2, r3
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	01db      	lsls	r3, r3, #7
 80068f6:	4413      	add	r3, r2
 80068f8:	3384      	adds	r3, #132	@ 0x84
 80068fa:	461a      	mov	r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006908:	021b      	lsls	r3, r3, #8
 800690a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006912:	041b      	lsls	r3, r3, #16
 8006914:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	061b      	lsls	r3, r3, #24
 800691c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	01db      	lsls	r3, r3, #7
 8006928:	4413      	add	r3, r2
 800692a:	3384      	adds	r3, #132	@ 0x84
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	461a      	mov	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	01db      	lsls	r3, r3, #7
 8006938:	4413      	add	r3, r2
 800693a:	3384      	adds	r3, #132	@ 0x84
 800693c:	461a      	mov	r2, r3
 800693e:	2300      	movs	r3, #0
 8006940:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006948:	461a      	mov	r2, r3
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	431a      	orrs	r2, r3
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	431a      	orrs	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4619      	mov	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	01db      	lsls	r3, r3, #7
 800695c:	440b      	add	r3, r1
 800695e:	3384      	adds	r3, #132	@ 0x84
 8006960:	4619      	mov	r1, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	01db      	lsls	r3, r3, #7
 8006972:	4413      	add	r3, r2
 8006974:	3384      	adds	r3, #132	@ 0x84
 8006976:	695b      	ldr	r3, [r3, #20]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	4611      	mov	r1, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	01d2      	lsls	r2, r2, #7
 8006982:	440a      	add	r2, r1
 8006984:	3284      	adds	r2, #132	@ 0x84
 8006986:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800698a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	461a      	mov	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	01db      	lsls	r3, r3, #7
 8006996:	4413      	add	r3, r2
 8006998:	3384      	adds	r3, #132	@ 0x84
 800699a:	461a      	mov	r2, r3
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	461a      	mov	r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	01db      	lsls	r3, r3, #7
 80069ac:	4413      	add	r3, r2
 80069ae:	3384      	adds	r3, #132	@ 0x84
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4619      	mov	r1, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	01db      	lsls	r3, r3, #7
 80069bc:	440b      	add	r3, r1
 80069be:	3384      	adds	r3, #132	@ 0x84
 80069c0:	4619      	mov	r1, r3
 80069c2:	4b58      	ldr	r3, [pc, #352]	@ (8006b24 <LTDC_SetConfig+0x32c>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	68f9      	ldr	r1, [r7, #12]
 80069d2:	6809      	ldr	r1, [r1, #0]
 80069d4:	4608      	mov	r0, r1
 80069d6:	6879      	ldr	r1, [r7, #4]
 80069d8:	01c9      	lsls	r1, r1, #7
 80069da:	4401      	add	r1, r0
 80069dc:	3184      	adds	r1, #132	@ 0x84
 80069de:	4313      	orrs	r3, r2
 80069e0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	01db      	lsls	r3, r3, #7
 80069ec:	4413      	add	r3, r2
 80069ee:	3384      	adds	r3, #132	@ 0x84
 80069f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	01db      	lsls	r3, r3, #7
 80069fc:	4413      	add	r3, r2
 80069fe:	3384      	adds	r3, #132	@ 0x84
 8006a00:	461a      	mov	r2, r3
 8006a02:	2300      	movs	r3, #0
 8006a04:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	01db      	lsls	r3, r3, #7
 8006a10:	4413      	add	r3, r2
 8006a12:	3384      	adds	r3, #132	@ 0x84
 8006a14:	461a      	mov	r2, r3
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d102      	bne.n	8006a2a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006a24:	2304      	movs	r3, #4
 8006a26:	61fb      	str	r3, [r7, #28]
 8006a28:	e01b      	b.n	8006a62 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d102      	bne.n	8006a38 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006a32:	2303      	movs	r3, #3
 8006a34:	61fb      	str	r3, [r7, #28]
 8006a36:	e014      	b.n	8006a62 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	2b04      	cmp	r3, #4
 8006a3e:	d00b      	beq.n	8006a58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d007      	beq.n	8006a58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a4c:	2b03      	cmp	r3, #3
 8006a4e:	d003      	beq.n	8006a58 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a54:	2b07      	cmp	r3, #7
 8006a56:	d102      	bne.n	8006a5e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	61fb      	str	r3, [r7, #28]
 8006a5c:	e001      	b.n	8006a62 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	01db      	lsls	r3, r3, #7
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3384      	adds	r3, #132	@ 0x84
 8006a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	6812      	ldr	r2, [r2, #0]
 8006a76:	4611      	mov	r1, r2
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	01d2      	lsls	r2, r2, #7
 8006a7c:	440a      	add	r2, r1
 8006a7e:	3284      	adds	r2, #132	@ 0x84
 8006a80:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006a84:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	fb02 f303 	mul.w	r3, r2, r3
 8006a90:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	6859      	ldr	r1, [r3, #4]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1acb      	subs	r3, r1, r3
 8006a9c:	69f9      	ldr	r1, [r7, #28]
 8006a9e:	fb01 f303 	mul.w	r3, r1, r3
 8006aa2:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006aa4:	68f9      	ldr	r1, [r7, #12]
 8006aa6:	6809      	ldr	r1, [r1, #0]
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	6879      	ldr	r1, [r7, #4]
 8006aac:	01c9      	lsls	r1, r1, #7
 8006aae:	4401      	add	r1, r0
 8006ab0:	3184      	adds	r1, #132	@ 0x84
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	01db      	lsls	r3, r3, #7
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3384      	adds	r3, #132	@ 0x84
 8006ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4619      	mov	r1, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	01db      	lsls	r3, r3, #7
 8006ad0:	440b      	add	r3, r1
 8006ad2:	3384      	adds	r3, #132	@ 0x84
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	4b14      	ldr	r3, [pc, #80]	@ (8006b28 <LTDC_SetConfig+0x330>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	01db      	lsls	r3, r3, #7
 8006ae6:	4413      	add	r3, r2
 8006ae8:	3384      	adds	r3, #132	@ 0x84
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	01db      	lsls	r3, r3, #7
 8006afc:	4413      	add	r3, r2
 8006afe:	3384      	adds	r3, #132	@ 0x84
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	6812      	ldr	r2, [r2, #0]
 8006b06:	4611      	mov	r1, r2
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	01d2      	lsls	r2, r2, #7
 8006b0c:	440a      	add	r2, r1
 8006b0e:	3284      	adds	r2, #132	@ 0x84
 8006b10:	f043 0301 	orr.w	r3, r3, #1
 8006b14:	6013      	str	r3, [r2, #0]
}
 8006b16:	bf00      	nop
 8006b18:	3724      	adds	r7, #36	@ 0x24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	fffff8f8 	.word	0xfffff8f8
 8006b28:	fffff800 	.word	0xfffff800

08006b2c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af02      	add	r7, sp, #8
 8006b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006b38:	f7fc fc6a 	bl	8003410 <HAL_GetTick>
 8006b3c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d102      	bne.n	8006b4a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
 8006b48:	e0a5      	b.n	8006c96 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f040 809e 	bne.w	8006c96 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fb fa90 	bl	8002080 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006b60:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f000 f8dc 	bl	8006d22 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	4b4b      	ldr	r3, [pc, #300]	@ (8006ca0 <HAL_OSPI_Init+0x174>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	68d1      	ldr	r1, [r2, #12]
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6912      	ldr	r2, [r2, #16]
 8006b7c:	3a01      	subs	r2, #1
 8006b7e:	0412      	lsls	r2, r2, #16
 8006b80:	4311      	orrs	r1, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	6952      	ldr	r2, [r2, #20]
 8006b86:	3a01      	subs	r2, #1
 8006b88:	0212      	lsls	r2, r2, #8
 8006b8a:	4311      	orrs	r1, r2
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b90:	4311      	orrs	r1, r2
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	69d2      	ldr	r2, [r2, #28]
 8006b96:	4311      	orrs	r1, r2
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	430b      	orrs	r3, r1
 8006b9e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006bd0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	021a      	lsls	r2, r3, #8
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2120      	movs	r1, #32
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fd89 	bl	8007710 <OSPI_WaitFlagStateUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d146      	bne.n	8006c96 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	68db      	ldr	r3, [r3, #12]
 8006c0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c16:	1e5a      	subs	r2, r3, #1
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689a      	ldr	r2, [r3, #8]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c3e:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 0201 	orr.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d107      	bne.n	8006c7e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	689a      	ldr	r2, [r3, #8]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f042 0202 	orr.w	r2, r2, #2
 8006c7c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c86:	d103      	bne.n	8006c90 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	651a      	str	r2, [r3, #80]	@ 0x50
 8006c8e:	e002      	b.n	8006c96 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	f8e0f8f4 	.word	0xf8e0f8f4

08006ca4 <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b08a      	sub	sp, #40	@ 0x28
 8006ca8:	af02      	add	r7, sp, #8
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006cb0:	f7fc fbae 	bl	8003410 <HAL_GetTick>
 8006cb4:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cba:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d002      	beq.n	8006cc8 <HAL_OSPI_HyperbusCfg+0x24>
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d122      	bne.n	8006d0e <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	2120      	movs	r1, #32
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 fd1c 	bl	8007710 <OSPI_WaitFlagStateUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006cdc:	7ffb      	ldrb	r3, [r7, #31]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d11a      	bne.n	8006d18 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	041a      	lsls	r2, r3, #16
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	ea42 0103 	orr.w	r1, r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2202      	movs	r2, #2
 8006d0a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006d0c:	e004      	b.n	8006d18 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2210      	movs	r2, #16
 8006d16:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006d18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3720      	adds	r7, #32
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	683a      	ldr	r2, [r7, #0]
 8006d30:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b094      	sub	sp, #80	@ 0x50
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006d52:	2300      	movs	r3, #0
 8006d54:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a9d      	ldr	r2, [pc, #628]	@ (8006fd4 <HAL_OSPIM_Config+0x294>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d105      	bne.n	8006d6e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006d6c:	e004      	b.n	8006d78 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006d7e:	e01d      	b.n	8006dbc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006d80:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d84:	3301      	adds	r3, #1
 8006d86:	b2d8      	uxtb	r0, r3
 8006d88:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006d8c:	f107 0114 	add.w	r1, r7, #20
 8006d90:	4613      	mov	r3, r2
 8006d92:	005b      	lsls	r3, r3, #1
 8006d94:	4413      	add	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	440b      	add	r3, r1
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f000 fcf0 	bl	8007780 <OSPIM_GetConfig>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006da6:	2301      	movs	r3, #1
 8006da8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2208      	movs	r2, #8
 8006db0:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006db2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006db6:	3301      	adds	r3, #1
 8006db8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d9dd      	bls.n	8006d80 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006dc4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 8495 	bne.w	80076f8 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006dce:	4b81      	ldr	r3, [pc, #516]	@ (8006fd4 <HAL_OSPIM_Config+0x294>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0301 	and.w	r3, r3, #1
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d00b      	beq.n	8006df2 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006dda:	4b7e      	ldr	r3, [pc, #504]	@ (8006fd4 <HAL_OSPIM_Config+0x294>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a7d      	ldr	r2, [pc, #500]	@ (8006fd4 <HAL_OSPIM_Config+0x294>)
 8006de0:	f023 0301 	bic.w	r3, r3, #1
 8006de4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006de6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006df2:	4b79      	ldr	r3, [pc, #484]	@ (8006fd8 <HAL_OSPIM_Config+0x298>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0301 	and.w	r3, r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00b      	beq.n	8006e16 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006dfe:	4b76      	ldr	r3, [pc, #472]	@ (8006fd8 <HAL_OSPIM_Config+0x298>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a75      	ldr	r2, [pc, #468]	@ (8006fd8 <HAL_OSPIM_Config+0x298>)
 8006e04:	f023 0301 	bic.w	r3, r3, #1
 8006e08:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006e0a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006e0e:	f043 0302 	orr.w	r3, r3, #2
 8006e12:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006e16:	4971      	ldr	r1, [pc, #452]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	4413      	add	r3, r2
 8006e20:	00db      	lsls	r3, r3, #3
 8006e22:	3350      	adds	r3, #80	@ 0x50
 8006e24:	443b      	add	r3, r7
 8006e26:	3b34      	subs	r3, #52	@ 0x34
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	440b      	add	r3, r1
 8006e30:	6859      	ldr	r1, [r3, #4]
 8006e32:	486a      	ldr	r0, [pc, #424]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e36:	4613      	mov	r3, r2
 8006e38:	005b      	lsls	r3, r3, #1
 8006e3a:	4413      	add	r3, r2
 8006e3c:	00db      	lsls	r3, r3, #3
 8006e3e:	3350      	adds	r3, #80	@ 0x50
 8006e40:	443b      	add	r3, r7
 8006e42:	3b34      	subs	r3, #52	@ 0x34
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4403      	add	r3, r0
 8006e50:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006e52:	4b62      	ldr	r3, [pc, #392]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80c0 	beq.w	8006fe0 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006e60:	4b5e      	ldr	r3, [pc, #376]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a5d      	ldr	r2, [pc, #372]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e66:	f023 0301 	bic.w	r3, r3, #1
 8006e6a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006e6c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	f040 8162 	bne.w	800713a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006e76:	4959      	ldr	r1, [pc, #356]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e78:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4413      	add	r3, r2
 8006e82:	00db      	lsls	r3, r3, #3
 8006e84:	3350      	adds	r3, #80	@ 0x50
 8006e86:	443b      	add	r3, r7
 8006e88:	3b3c      	subs	r3, #60	@ 0x3c
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	6859      	ldr	r1, [r3, #4]
 8006e94:	4851      	ldr	r0, [pc, #324]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006e96:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	00db      	lsls	r3, r3, #3
 8006ea2:	3350      	adds	r3, #80	@ 0x50
 8006ea4:	443b      	add	r3, r7
 8006ea6:	3b3c      	subs	r3, #60	@ 0x3c
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	f041 0202 	orr.w	r2, r1, #2
 8006eb0:	009b      	lsls	r3, r3, #2
 8006eb2:	4403      	add	r3, r0
 8006eb4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006eb6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006eba:	4613      	mov	r3, r2
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	4413      	add	r3, r2
 8006ec0:	00db      	lsls	r3, r3, #3
 8006ec2:	3350      	adds	r3, #80	@ 0x50
 8006ec4:	443b      	add	r3, r7
 8006ec6:	3b38      	subs	r3, #56	@ 0x38
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d01f      	beq.n	8006f0e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006ece:	4943      	ldr	r1, [pc, #268]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006ed0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	005b      	lsls	r3, r3, #1
 8006ed8:	4413      	add	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	3350      	adds	r3, #80	@ 0x50
 8006ede:	443b      	add	r3, r7
 8006ee0:	3b38      	subs	r3, #56	@ 0x38
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	440b      	add	r3, r1
 8006eea:	6859      	ldr	r1, [r3, #4]
 8006eec:	483b      	ldr	r0, [pc, #236]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006eee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	3350      	adds	r3, #80	@ 0x50
 8006efc:	443b      	add	r3, r7
 8006efe:	3b38      	subs	r3, #56	@ 0x38
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	3b01      	subs	r3, #1
 8006f04:	f041 0220 	orr.w	r2, r1, #32
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4403      	add	r3, r0
 8006f0c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f0e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f12:	4613      	mov	r3, r2
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4413      	add	r3, r2
 8006f18:	00db      	lsls	r3, r3, #3
 8006f1a:	3350      	adds	r3, #80	@ 0x50
 8006f1c:	443b      	add	r3, r7
 8006f1e:	3b30      	subs	r3, #48	@ 0x30
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d023      	beq.n	8006f6e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006f26:	492d      	ldr	r1, [pc, #180]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006f28:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	4413      	add	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3350      	adds	r3, #80	@ 0x50
 8006f36:	443b      	add	r3, r7
 8006f38:	3b30      	subs	r3, #48	@ 0x30
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	440b      	add	r3, r1
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	4824      	ldr	r0, [pc, #144]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006f4a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	3350      	adds	r3, #80	@ 0x50
 8006f58:	443b      	add	r3, r7
 8006f5a:	3b30      	subs	r3, #48	@ 0x30
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3b01      	subs	r3, #1
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4403      	add	r3, r0
 8006f6c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f6e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	3350      	adds	r3, #80	@ 0x50
 8006f7c:	443b      	add	r3, r7
 8006f7e:	3b2c      	subs	r3, #44	@ 0x2c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f000 80d9 	beq.w	800713a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006f88:	4914      	ldr	r1, [pc, #80]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006f8a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f8e:	4613      	mov	r3, r2
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4413      	add	r3, r2
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	3350      	adds	r3, #80	@ 0x50
 8006f98:	443b      	add	r3, r7
 8006f9a:	3b2c      	subs	r3, #44	@ 0x2c
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	480c      	ldr	r0, [pc, #48]	@ (8006fdc <HAL_OSPIM_Config+0x29c>)
 8006fac:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	4413      	add	r3, r2
 8006fb6:	00db      	lsls	r3, r3, #3
 8006fb8:	3350      	adds	r3, #80	@ 0x50
 8006fba:	443b      	add	r3, r7
 8006fbc:	3b2c      	subs	r3, #44	@ 0x2c
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8006fca:	009b      	lsls	r3, r3, #2
 8006fcc:	4403      	add	r3, r0
 8006fce:	605a      	str	r2, [r3, #4]
 8006fd0:	e0b3      	b.n	800713a <HAL_OSPIM_Config+0x3fa>
 8006fd2:	bf00      	nop
 8006fd4:	52005000 	.word	0x52005000
 8006fd8:	5200a000 	.word	0x5200a000
 8006fdc:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	3350      	adds	r3, #80	@ 0x50
 8006fec:	443b      	add	r3, r7
 8006fee:	3b3c      	subs	r3, #60	@ 0x3c
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f000 80a1 	beq.w	800713a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006ff8:	4993      	ldr	r1, [pc, #588]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 8006ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	4413      	add	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	3350      	adds	r3, #80	@ 0x50
 8007006:	443b      	add	r3, r7
 8007008:	3b3c      	subs	r3, #60	@ 0x3c
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3b01      	subs	r3, #1
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	440b      	add	r3, r1
 8007012:	6859      	ldr	r1, [r3, #4]
 8007014:	488c      	ldr	r0, [pc, #560]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 8007016:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007018:	4613      	mov	r3, r2
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	4413      	add	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	3350      	adds	r3, #80	@ 0x50
 8007022:	443b      	add	r3, r7
 8007024:	3b3c      	subs	r3, #60	@ 0x3c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	f021 0201 	bic.w	r2, r1, #1
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	4403      	add	r3, r0
 8007032:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8007034:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007036:	4613      	mov	r3, r2
 8007038:	005b      	lsls	r3, r3, #1
 800703a:	4413      	add	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	3350      	adds	r3, #80	@ 0x50
 8007040:	443b      	add	r3, r7
 8007042:	3b38      	subs	r3, #56	@ 0x38
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d01d      	beq.n	8007086 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800704a:	497f      	ldr	r1, [pc, #508]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 800704c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800704e:	4613      	mov	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	3350      	adds	r3, #80	@ 0x50
 8007058:	443b      	add	r3, r7
 800705a:	3b38      	subs	r3, #56	@ 0x38
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	3b01      	subs	r3, #1
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	4878      	ldr	r0, [pc, #480]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 8007068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	3350      	adds	r3, #80	@ 0x50
 8007074:	443b      	add	r3, r7
 8007076:	3b38      	subs	r3, #56	@ 0x38
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	3b01      	subs	r3, #1
 800707c:	f021 0210 	bic.w	r2, r1, #16
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4403      	add	r3, r0
 8007084:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007086:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007088:	4613      	mov	r3, r2
 800708a:	005b      	lsls	r3, r3, #1
 800708c:	4413      	add	r3, r2
 800708e:	00db      	lsls	r3, r3, #3
 8007090:	3350      	adds	r3, #80	@ 0x50
 8007092:	443b      	add	r3, r7
 8007094:	3b30      	subs	r3, #48	@ 0x30
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d021      	beq.n	80070e0 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800709c:	496a      	ldr	r1, [pc, #424]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 800709e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a0:	4613      	mov	r3, r2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	4413      	add	r3, r2
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	3350      	adds	r3, #80	@ 0x50
 80070aa:	443b      	add	r3, r7
 80070ac:	3b30      	subs	r3, #48	@ 0x30
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	f003 0301 	and.w	r3, r3, #1
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	6859      	ldr	r1, [r3, #4]
 80070bc:	4862      	ldr	r0, [pc, #392]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 80070be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	3350      	adds	r3, #80	@ 0x50
 80070ca:	443b      	add	r3, r7
 80070cc:	3b30      	subs	r3, #48	@ 0x30
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4403      	add	r3, r0
 80070de:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80070e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070e2:	4613      	mov	r3, r2
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4413      	add	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	3350      	adds	r3, #80	@ 0x50
 80070ec:	443b      	add	r3, r7
 80070ee:	3b2c      	subs	r3, #44	@ 0x2c
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d021      	beq.n	800713a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80070f6:	4954      	ldr	r1, [pc, #336]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 80070f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070fa:	4613      	mov	r3, r2
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4413      	add	r3, r2
 8007100:	00db      	lsls	r3, r3, #3
 8007102:	3350      	adds	r3, #80	@ 0x50
 8007104:	443b      	add	r3, r7
 8007106:	3b2c      	subs	r3, #44	@ 0x2c
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3b01      	subs	r3, #1
 800710c:	f003 0301 	and.w	r3, r3, #1
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	484c      	ldr	r0, [pc, #304]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 8007118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800711a:	4613      	mov	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4413      	add	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	3350      	adds	r3, #80	@ 0x50
 8007124:	443b      	add	r3, r7
 8007126:	3b2c      	subs	r3, #44	@ 0x2c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3b01      	subs	r3, #1
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	4403      	add	r3, r0
 8007138:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6819      	ldr	r1, [r3, #0]
 800713e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007142:	4613      	mov	r3, r2
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	4413      	add	r3, r2
 8007148:	00db      	lsls	r3, r3, #3
 800714a:	3350      	adds	r3, #80	@ 0x50
 800714c:	443b      	add	r3, r7
 800714e:	3b3c      	subs	r3, #60	@ 0x3c
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4299      	cmp	r1, r3
 8007154:	d038      	beq.n	80071c8 <HAL_OSPIM_Config+0x488>
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	6859      	ldr	r1, [r3, #4]
 800715a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800715e:	4613      	mov	r3, r2
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	4413      	add	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	3350      	adds	r3, #80	@ 0x50
 8007168:	443b      	add	r3, r7
 800716a:	3b38      	subs	r3, #56	@ 0x38
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4299      	cmp	r1, r3
 8007170:	d02a      	beq.n	80071c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6899      	ldr	r1, [r3, #8]
 8007176:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	3350      	adds	r3, #80	@ 0x50
 8007184:	443b      	add	r3, r7
 8007186:	3b34      	subs	r3, #52	@ 0x34
 8007188:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800718a:	4299      	cmp	r1, r3
 800718c:	d01c      	beq.n	80071c8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68d9      	ldr	r1, [r3, #12]
 8007192:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	3350      	adds	r3, #80	@ 0x50
 80071a0:	443b      	add	r3, r7
 80071a2:	3b30      	subs	r3, #48	@ 0x30
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d00e      	beq.n	80071c8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6919      	ldr	r1, [r3, #16]
 80071ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	3350      	adds	r3, #80	@ 0x50
 80071bc:	443b      	add	r3, r7
 80071be:	3b2c      	subs	r3, #44	@ 0x2c
 80071c0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80071c2:	4299      	cmp	r1, r3
 80071c4:	f040 810e 	bne.w	80073e4 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6819      	ldr	r1, [r3, #0]
 80071cc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071d0:	4613      	mov	r3, r2
 80071d2:	005b      	lsls	r3, r3, #1
 80071d4:	4413      	add	r3, r2
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	3350      	adds	r3, #80	@ 0x50
 80071da:	443b      	add	r3, r7
 80071dc:	3b3c      	subs	r3, #60	@ 0x3c
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4299      	cmp	r1, r3
 80071e2:	d133      	bne.n	800724c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6859      	ldr	r1, [r3, #4]
 80071e8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071ec:	4613      	mov	r3, r2
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	4413      	add	r3, r2
 80071f2:	00db      	lsls	r3, r3, #3
 80071f4:	3350      	adds	r3, #80	@ 0x50
 80071f6:	443b      	add	r3, r7
 80071f8:	3b38      	subs	r3, #56	@ 0x38
 80071fa:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80071fc:	4299      	cmp	r1, r3
 80071fe:	d125      	bne.n	800724c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	68d9      	ldr	r1, [r3, #12]
 8007204:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007208:	4613      	mov	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	3350      	adds	r3, #80	@ 0x50
 8007212:	443b      	add	r3, r7
 8007214:	3b30      	subs	r3, #48	@ 0x30
 8007216:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007218:	4299      	cmp	r1, r3
 800721a:	d117      	bne.n	800724c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6919      	ldr	r1, [r3, #16]
 8007220:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	3350      	adds	r3, #80	@ 0x50
 800722e:	443b      	add	r3, r7
 8007230:	3b2c      	subs	r3, #44	@ 0x2c
 8007232:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007234:	4299      	cmp	r1, r3
 8007236:	d109      	bne.n	800724c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007238:	4b03      	ldr	r3, [pc, #12]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a02      	ldr	r2, [pc, #8]	@ (8007248 <HAL_OSPIM_Config+0x508>)
 800723e:	f043 0301 	orr.w	r3, r3, #1
 8007242:	6013      	str	r3, [r2, #0]
 8007244:	e0ce      	b.n	80073e4 <HAL_OSPIM_Config+0x6a4>
 8007246:	bf00      	nop
 8007248:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800724c:	49bb      	ldr	r1, [pc, #748]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 800724e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007252:	4613      	mov	r3, r2
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	4413      	add	r3, r2
 8007258:	00db      	lsls	r3, r3, #3
 800725a:	3350      	adds	r3, #80	@ 0x50
 800725c:	443b      	add	r3, r7
 800725e:	3b3c      	subs	r3, #60	@ 0x3c
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3b01      	subs	r3, #1
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	6859      	ldr	r1, [r3, #4]
 800726a:	48b4      	ldr	r0, [pc, #720]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 800726c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007270:	4613      	mov	r3, r2
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	4413      	add	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	3350      	adds	r3, #80	@ 0x50
 800727a:	443b      	add	r3, r7
 800727c:	3b3c      	subs	r3, #60	@ 0x3c
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3b01      	subs	r3, #1
 8007282:	f021 0201 	bic.w	r2, r1, #1
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	4403      	add	r3, r0
 800728a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800728c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007290:	4613      	mov	r3, r2
 8007292:	005b      	lsls	r3, r3, #1
 8007294:	4413      	add	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	3350      	adds	r3, #80	@ 0x50
 800729a:	443b      	add	r3, r7
 800729c:	3b38      	subs	r3, #56	@ 0x38
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01f      	beq.n	80072e4 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80072a4:	49a5      	ldr	r1, [pc, #660]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80072a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072aa:	4613      	mov	r3, r2
 80072ac:	005b      	lsls	r3, r3, #1
 80072ae:	4413      	add	r3, r2
 80072b0:	00db      	lsls	r3, r3, #3
 80072b2:	3350      	adds	r3, #80	@ 0x50
 80072b4:	443b      	add	r3, r7
 80072b6:	3b38      	subs	r3, #56	@ 0x38
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	440b      	add	r3, r1
 80072c0:	6859      	ldr	r1, [r3, #4]
 80072c2:	489e      	ldr	r0, [pc, #632]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80072c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	3350      	adds	r3, #80	@ 0x50
 80072d2:	443b      	add	r3, r7
 80072d4:	3b38      	subs	r3, #56	@ 0x38
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3b01      	subs	r3, #1
 80072da:	f021 0210 	bic.w	r2, r1, #16
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4403      	add	r3, r0
 80072e2:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80072e4:	4995      	ldr	r1, [pc, #596]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80072e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072ea:	4613      	mov	r3, r2
 80072ec:	005b      	lsls	r3, r3, #1
 80072ee:	4413      	add	r3, r2
 80072f0:	00db      	lsls	r3, r3, #3
 80072f2:	3350      	adds	r3, #80	@ 0x50
 80072f4:	443b      	add	r3, r7
 80072f6:	3b34      	subs	r3, #52	@ 0x34
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	6859      	ldr	r1, [r3, #4]
 8007302:	488e      	ldr	r0, [pc, #568]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007304:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007308:	4613      	mov	r3, r2
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	00db      	lsls	r3, r3, #3
 8007310:	3350      	adds	r3, #80	@ 0x50
 8007312:	443b      	add	r3, r7
 8007314:	3b34      	subs	r3, #52	@ 0x34
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	3b01      	subs	r3, #1
 800731a:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4403      	add	r3, r0
 8007322:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007324:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007328:	4613      	mov	r3, r2
 800732a:	005b      	lsls	r3, r3, #1
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	3350      	adds	r3, #80	@ 0x50
 8007332:	443b      	add	r3, r7
 8007334:	3b30      	subs	r3, #48	@ 0x30
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d023      	beq.n	8007384 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800733c:	497f      	ldr	r1, [pc, #508]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 800733e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007342:	4613      	mov	r3, r2
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	4413      	add	r3, r2
 8007348:	00db      	lsls	r3, r3, #3
 800734a:	3350      	adds	r3, #80	@ 0x50
 800734c:	443b      	add	r3, r7
 800734e:	3b30      	subs	r3, #48	@ 0x30
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3b01      	subs	r3, #1
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	6859      	ldr	r1, [r3, #4]
 800735e:	4877      	ldr	r0, [pc, #476]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007360:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007364:	4613      	mov	r3, r2
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	3350      	adds	r3, #80	@ 0x50
 800736e:	443b      	add	r3, r7
 8007370:	3b30      	subs	r3, #48	@ 0x30
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3b01      	subs	r3, #1
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4403      	add	r3, r0
 8007382:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007384:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007388:	4613      	mov	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	4413      	add	r3, r2
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	3350      	adds	r3, #80	@ 0x50
 8007392:	443b      	add	r3, r7
 8007394:	3b2c      	subs	r3, #44	@ 0x2c
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d023      	beq.n	80073e4 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800739c:	4967      	ldr	r1, [pc, #412]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 800739e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073a2:	4613      	mov	r3, r2
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4413      	add	r3, r2
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	3350      	adds	r3, #80	@ 0x50
 80073ac:	443b      	add	r3, r7
 80073ae:	3b2c      	subs	r3, #44	@ 0x2c
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	6859      	ldr	r1, [r3, #4]
 80073be:	485f      	ldr	r0, [pc, #380]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80073c0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073c4:	4613      	mov	r3, r2
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	4413      	add	r3, r2
 80073ca:	00db      	lsls	r3, r3, #3
 80073cc:	3350      	adds	r3, #80	@ 0x50
 80073ce:	443b      	add	r3, r7
 80073d0:	3b2c      	subs	r3, #44	@ 0x2c
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4403      	add	r3, r0
 80073e2:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80073e4:	4a55      	ldr	r2, [pc, #340]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f8:	025b      	lsls	r3, r3, #9
 80073fa:	431a      	orrs	r2, r3
 80073fc:	494f      	ldr	r1, [pc, #316]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	3b01      	subs	r3, #1
 8007404:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	440b      	add	r3, r1
 800740c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	1e5a      	subs	r2, r3, #1
 8007414:	4b49      	ldr	r3, [pc, #292]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	0c1b      	lsrs	r3, r3, #16
 800741a:	b2db      	uxtb	r3, r3
 800741c:	429a      	cmp	r2, r3
 800741e:	d90a      	bls.n	8007436 <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007420:	4b46      	ldr	r3, [pc, #280]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	3b01      	subs	r3, #1
 800742e:	041b      	lsls	r3, r3, #16
 8007430:	4942      	ldr	r1, [pc, #264]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007432:	4313      	orrs	r3, r2
 8007434:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8007436:	4b41      	ldr	r3, [pc, #260]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f003 0301 	and.w	r3, r3, #1
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 809a 	beq.w	8007578 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8007444:	4a3d      	ldr	r2, [pc, #244]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	f023 0203 	bic.w	r2, r3, #3
 8007456:	4939      	ldr	r1, [pc, #228]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3b01      	subs	r3, #1
 800745e:	f042 0201 	orr.w	r2, r2, #1
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d011      	beq.n	8007494 <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8007470:	4a32      	ldr	r2, [pc, #200]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	3b01      	subs	r3, #1
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007482:	492e      	ldr	r1, [pc, #184]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	f042 0210 	orr.w	r2, r2, #16
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d016      	beq.n	80074ce <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074a0:	4a26      	ldr	r2, [pc, #152]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	009b      	lsls	r3, r3, #2
 80074ae:	4413      	add	r3, r2
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80074b6:	4921      	ldr	r1, [pc, #132]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	3b01      	subs	r3, #1
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	605a      	str	r2, [r3, #4]
 80074cc:	e019      	b.n	8007502 <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d015      	beq.n	8007502 <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074d6:	4a19      	ldr	r2, [pc, #100]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	3b01      	subs	r3, #1
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80074ec:	4913      	ldr	r1, [pc, #76]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	3b01      	subs	r3, #1
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	440b      	add	r3, r1
 8007500:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d018      	beq.n	8007540 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800750e:	4a0b      	ldr	r2, [pc, #44]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	3b01      	subs	r3, #1
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007524:	4905      	ldr	r1, [pc, #20]	@ (800753c <HAL_OSPIM_Config+0x7fc>)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	3b01      	subs	r3, #1
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	605a      	str	r2, [r3, #4]
 800753a:	e0c5      	b.n	80076c8 <HAL_OSPIM_Config+0x988>
 800753c:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	691b      	ldr	r3, [r3, #16]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80bf 	beq.w	80076c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800754a:	4a6e      	ldr	r2, [pc, #440]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	3b01      	subs	r3, #1
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	4413      	add	r3, r2
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007560:	4968      	ldr	r1, [pc, #416]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	691b      	ldr	r3, [r3, #16]
 8007566:	3b01      	subs	r3, #1
 8007568:	f003 0301 	and.w	r3, r3, #1
 800756c:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	440b      	add	r3, r1
 8007574:	605a      	str	r2, [r3, #4]
 8007576:	e0a7      	b.n	80076c8 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8007578:	4a62      	ldr	r2, [pc, #392]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f023 0203 	bic.w	r2, r3, #3
 800758a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800758c:	005b      	lsls	r3, r3, #1
 800758e:	431a      	orrs	r2, r3
 8007590:	495c      	ldr	r1, [pc, #368]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	3b01      	subs	r3, #1
 8007598:	f042 0201 	orr.w	r2, r2, #1
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d014      	beq.n	80075d4 <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80075aa:	4a56      	ldr	r2, [pc, #344]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	4413      	add	r3, r2
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075be:	015b      	lsls	r3, r3, #5
 80075c0:	431a      	orrs	r2, r3
 80075c2:	4950      	ldr	r1, [pc, #320]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	3b01      	subs	r3, #1
 80075ca:	f042 0210 	orr.w	r2, r2, #16
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	440b      	add	r3, r1
 80075d2:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d019      	beq.n	8007614 <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80075e0:	4a48      	ldr	r2, [pc, #288]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80075f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f8:	049b      	lsls	r3, r3, #18
 80075fa:	431a      	orrs	r2, r3
 80075fc:	4941      	ldr	r1, [pc, #260]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	3b01      	subs	r3, #1
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	605a      	str	r2, [r3, #4]
 8007612:	e01c      	b.n	800764e <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d018      	beq.n	800764e <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800761c:	4a39      	ldr	r2, [pc, #228]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	3b01      	subs	r3, #1
 8007624:	f003 0301 	and.w	r3, r3, #1
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007632:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007634:	069b      	lsls	r3, r3, #26
 8007636:	431a      	orrs	r2, r3
 8007638:	4932      	ldr	r1, [pc, #200]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	3b01      	subs	r3, #1
 8007640:	f003 0301 	and.w	r3, r3, #1
 8007644:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	440b      	add	r3, r1
 800764c:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d019      	beq.n	800768e <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800765a:	4a2a      	ldr	r2, [pc, #168]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	3b01      	subs	r3, #1
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	4413      	add	r3, r2
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8007670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007672:	049b      	lsls	r3, r3, #18
 8007674:	431a      	orrs	r2, r3
 8007676:	4923      	ldr	r1, [pc, #140]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	3b01      	subs	r3, #1
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	605a      	str	r2, [r3, #4]
 800768c:	e01c      	b.n	80076c8 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d018      	beq.n	80076c8 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007696:	4a1b      	ldr	r2, [pc, #108]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	3b01      	subs	r3, #1
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80076ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076ae:	069b      	lsls	r3, r3, #26
 80076b0:	431a      	orrs	r2, r3
 80076b2:	4914      	ldr	r1, [pc, #80]	@ (8007704 <HAL_OSPIM_Config+0x9c4>)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	3b01      	subs	r3, #1
 80076ba:	f003 0301 	and.w	r3, r3, #1
 80076be:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80076c2:	009b      	lsls	r3, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80076c8:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80076d4:	4b0c      	ldr	r3, [pc, #48]	@ (8007708 <HAL_OSPIM_Config+0x9c8>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a0b      	ldr	r2, [pc, #44]	@ (8007708 <HAL_OSPIM_Config+0x9c8>)
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80076e0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80076e4:	f003 0302 	and.w	r3, r3, #2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80076ec:	4b07      	ldr	r3, [pc, #28]	@ (800770c <HAL_OSPIM_Config+0x9cc>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a06      	ldr	r2, [pc, #24]	@ (800770c <HAL_OSPIM_Config+0x9cc>)
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80076f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3750      	adds	r7, #80	@ 0x50
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	5200b400 	.word	0x5200b400
 8007708:	52005000 	.word	0x52005000
 800770c:	5200a000 	.word	0x5200a000

08007710 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	60f8      	str	r0, [r7, #12]
 8007718:	60b9      	str	r1, [r7, #8]
 800771a:	603b      	str	r3, [r7, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007720:	e01a      	b.n	8007758 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d016      	beq.n	8007758 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772a:	f7fb fe71 	bl	8003410 <HAL_GetTick>
 800772e:	4602      	mov	r2, r0
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	1ad3      	subs	r3, r2, r3
 8007734:	69ba      	ldr	r2, [r7, #24]
 8007736:	429a      	cmp	r2, r3
 8007738:	d302      	bcc.n	8007740 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10b      	bne.n	8007758 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007746:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774c:	f043 0201 	orr.w	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e00e      	b.n	8007776 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	6a1a      	ldr	r2, [r3, #32]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4013      	ands	r3, r2
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	461a      	mov	r2, r3
 800776e:	79fb      	ldrb	r3, [r7, #7]
 8007770:	429a      	cmp	r2, r3
 8007772:	d1d6      	bne.n	8007722 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8007794:	79fb      	ldrb	r3, [r7, #7]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d005      	beq.n	80077a6 <OSPIM_GetConfig+0x26>
 800779a:	79fb      	ldrb	r3, [r7, #7]
 800779c:	2b02      	cmp	r3, #2
 800779e:	d802      	bhi.n	80077a6 <OSPIM_GetConfig+0x26>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
 80077aa:	e098      	b.n	80078de <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	2200      	movs	r2, #0
 80077b6:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	2200      	movs	r2, #0
 80077bc:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2200      	movs	r2, #0
 80077c2:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d10b      	bne.n	80077e8 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 80077d0:	4b46      	ldr	r3, [pc, #280]	@ (80078ec <OSPIM_GetConfig+0x16c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d102      	bne.n	80077e2 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80077dc:	4b44      	ldr	r3, [pc, #272]	@ (80078f0 <OSPIM_GetConfig+0x170>)
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	e002      	b.n	80077e8 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 80077e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077e6:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80077e8:	2300      	movs	r3, #0
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e074      	b.n	80078d8 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 80077ee:	4a3f      	ldr	r2, [pc, #252]	@ (80078ec <OSPIM_GetConfig+0x16c>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	4413      	add	r3, r2
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	f003 0301 	and.w	r3, r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00a      	beq.n	800781a <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	4053      	eors	r3, r2
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	f003 0310 	and.w	r3, r3, #16
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4053      	eors	r3, r2
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d103      	bne.n	800783a <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4053      	eors	r3, r2
 800784a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800784e:	2b00      	cmp	r3, #0
 8007850:	d103      	bne.n	800785a <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d018      	beq.n	8007896 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	693b      	ldr	r3, [r7, #16]
 8007868:	4053      	eors	r3, r2
 800786a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800786e:	2b00      	cmp	r3, #0
 8007870:	d111      	bne.n	8007896 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d106      	bne.n	800788a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	60da      	str	r2, [r3, #12]
 8007888:	e005      	b.n	8007896 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	3301      	adds	r3, #1
 800788e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800789c:	2b00      	cmp	r3, #0
 800789e:	d018      	beq.n	80078d2 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4053      	eors	r3, r2
 80078a6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d111      	bne.n	80078d2 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d106      	bne.n	80078c6 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	3301      	adds	r3, #1
 80078bc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	611a      	str	r2, [r3, #16]
 80078c4:	e005      	b.n	80078d2 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3301      	adds	r3, #1
 80078ca:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3301      	adds	r3, #1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d987      	bls.n	80077ee <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	371c      	adds	r7, #28
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	5200b400 	.word	0x5200b400
 80078f0:	04040222 	.word	0x04040222

080078f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80078fc:	4b29      	ldr	r3, [pc, #164]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0307 	and.w	r3, r3, #7
 8007904:	2b06      	cmp	r3, #6
 8007906:	d00a      	beq.n	800791e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007908:	4b26      	ldr	r3, [pc, #152]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	429a      	cmp	r2, r3
 8007914:	d001      	beq.n	800791a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e03f      	b.n	800799a <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e03d      	b.n	800799a <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800791e:	4b21      	ldr	r3, [pc, #132]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007926:	491f      	ldr	r1, [pc, #124]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4313      	orrs	r3, r2
 800792c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800792e:	f7fb fd6f 	bl	8003410 <HAL_GetTick>
 8007932:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007934:	e009      	b.n	800794a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007936:	f7fb fd6b 	bl	8003410 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007944:	d901      	bls.n	800794a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e027      	b.n	800799a <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800794a:	4b16      	ldr	r3, [pc, #88]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007952:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007956:	d1ee      	bne.n	8007936 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2b1e      	cmp	r3, #30
 800795c:	d008      	beq.n	8007970 <HAL_PWREx_ConfigSupply+0x7c>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2b2e      	cmp	r3, #46	@ 0x2e
 8007962:	d005      	beq.n	8007970 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b1d      	cmp	r3, #29
 8007968:	d002      	beq.n	8007970 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b2d      	cmp	r3, #45	@ 0x2d
 800796e:	d113      	bne.n	8007998 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007970:	f7fb fd4e 	bl	8003410 <HAL_GetTick>
 8007974:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007976:	e009      	b.n	800798c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007978:	f7fb fd4a 	bl	8003410 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007986:	d901      	bls.n	800798c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	e006      	b.n	800799a <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800798c:	4b05      	ldr	r3, [pc, #20]	@ (80079a4 <HAL_PWREx_ConfigSupply+0xb0>)
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0311 	and.w	r3, r3, #17
 8007994:	2b11      	cmp	r3, #17
 8007996:	d1ef      	bne.n	8007978 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	58024800 	.word	0x58024800

080079a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08c      	sub	sp, #48	@ 0x30
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e3c8      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8087 	beq.w	8007ad6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079c8:	4b88      	ldr	r3, [pc, #544]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80079d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80079d2:	4b86      	ldr	r3, [pc, #536]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 80079d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80079d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d007      	beq.n	80079ee <HAL_RCC_OscConfig+0x46>
 80079de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e0:	2b18      	cmp	r3, #24
 80079e2:	d110      	bne.n	8007a06 <HAL_RCC_OscConfig+0x5e>
 80079e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d10b      	bne.n	8007a06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ee:	4b7f      	ldr	r3, [pc, #508]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d06c      	beq.n	8007ad4 <HAL_RCC_OscConfig+0x12c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d168      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e3a2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a0e:	d106      	bne.n	8007a1e <HAL_RCC_OscConfig+0x76>
 8007a10:	4b76      	ldr	r3, [pc, #472]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a75      	ldr	r2, [pc, #468]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	e02e      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d10c      	bne.n	8007a40 <HAL_RCC_OscConfig+0x98>
 8007a26:	4b71      	ldr	r3, [pc, #452]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a70      	ldr	r2, [pc, #448]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a30:	6013      	str	r3, [r2, #0]
 8007a32:	4b6e      	ldr	r3, [pc, #440]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a6d      	ldr	r2, [pc, #436]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a3c:	6013      	str	r3, [r2, #0]
 8007a3e:	e01d      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a48:	d10c      	bne.n	8007a64 <HAL_RCC_OscConfig+0xbc>
 8007a4a:	4b68      	ldr	r3, [pc, #416]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a67      	ldr	r2, [pc, #412]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a54:	6013      	str	r3, [r2, #0]
 8007a56:	4b65      	ldr	r3, [pc, #404]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a64      	ldr	r2, [pc, #400]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e00b      	b.n	8007a7c <HAL_RCC_OscConfig+0xd4>
 8007a64:	4b61      	ldr	r3, [pc, #388]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a60      	ldr	r2, [pc, #384]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	4b5e      	ldr	r3, [pc, #376]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a5d      	ldr	r2, [pc, #372]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007a76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	685b      	ldr	r3, [r3, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fb fcc4 	bl	8003410 <HAL_GetTick>
 8007a88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a8c:	f7fb fcc0 	bl	8003410 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b64      	cmp	r3, #100	@ 0x64
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e356      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a9e:	4b53      	ldr	r3, [pc, #332]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0f0      	beq.n	8007a8c <HAL_RCC_OscConfig+0xe4>
 8007aaa:	e014      	b.n	8007ad6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aac:	f7fb fcb0 	bl	8003410 <HAL_GetTick>
 8007ab0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ab2:	e008      	b.n	8007ac6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab4:	f7fb fcac 	bl	8003410 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	2b64      	cmp	r3, #100	@ 0x64
 8007ac0:	d901      	bls.n	8007ac6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e342      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ac6:	4b49      	ldr	r3, [pc, #292]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1f0      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x10c>
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0302 	and.w	r3, r3, #2
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 808c 	beq.w	8007bfc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ae4:	4b41      	ldr	r3, [pc, #260]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007aee:	4b3f      	ldr	r3, [pc, #252]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007af4:	6a3b      	ldr	r3, [r7, #32]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_RCC_OscConfig+0x162>
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	2b18      	cmp	r3, #24
 8007afe:	d137      	bne.n	8007b70 <HAL_RCC_OscConfig+0x1c8>
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	f003 0303 	and.w	r3, r3, #3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d132      	bne.n	8007b70 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b0a:	4b38      	ldr	r3, [pc, #224]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d005      	beq.n	8007b22 <HAL_RCC_OscConfig+0x17a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	68db      	ldr	r3, [r3, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e314      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b22:	4b32      	ldr	r3, [pc, #200]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f023 0219 	bic.w	r2, r3, #25
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	492f      	ldr	r1, [pc, #188]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fb fc6c 	bl	8003410 <HAL_GetTick>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fb fc68 	bl	8003410 <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e2fe      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b4e:	4b27      	ldr	r3, [pc, #156]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b5a:	4b24      	ldr	r3, [pc, #144]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	061b      	lsls	r3, r3, #24
 8007b68:	4920      	ldr	r1, [pc, #128]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b6e:	e045      	b.n	8007bfc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d026      	beq.n	8007bc6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b78:	4b1c      	ldr	r3, [pc, #112]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 0219 	bic.w	r2, r3, #25
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4919      	ldr	r1, [pc, #100]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8a:	f7fb fc41 	bl	8003410 <HAL_GetTick>
 8007b8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b90:	e008      	b.n	8007ba4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b92:	f7fb fc3d 	bl	8003410 <HAL_GetTick>
 8007b96:	4602      	mov	r2, r0
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	1ad3      	subs	r3, r2, r3
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d901      	bls.n	8007ba4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e2d3      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ba4:	4b11      	ldr	r3, [pc, #68]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0304 	and.w	r3, r3, #4
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d0f0      	beq.n	8007b92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	691b      	ldr	r3, [r3, #16]
 8007bbc:	061b      	lsls	r3, r3, #24
 8007bbe:	490b      	ldr	r1, [pc, #44]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	604b      	str	r3, [r1, #4]
 8007bc4:	e01a      	b.n	8007bfc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bc6:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a08      	ldr	r2, [pc, #32]	@ (8007bec <HAL_RCC_OscConfig+0x244>)
 8007bcc:	f023 0301 	bic.w	r3, r3, #1
 8007bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd2:	f7fb fc1d 	bl	8003410 <HAL_GetTick>
 8007bd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bd8:	e00a      	b.n	8007bf0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bda:	f7fb fc19 	bl	8003410 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d903      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e2af      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
 8007bec:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bf0:	4b96      	ldr	r3, [pc, #600]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d1ee      	bne.n	8007bda <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d06a      	beq.n	8007cde <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c08:	4b90      	ldr	r3, [pc, #576]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c10:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c12:	4b8e      	ldr	r3, [pc, #568]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c16:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d007      	beq.n	8007c2e <HAL_RCC_OscConfig+0x286>
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	2b18      	cmp	r3, #24
 8007c22:	d11b      	bne.n	8007c5c <HAL_RCC_OscConfig+0x2b4>
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f003 0303 	and.w	r3, r3, #3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d116      	bne.n	8007c5c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c2e:	4b87      	ldr	r3, [pc, #540]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d005      	beq.n	8007c46 <HAL_RCC_OscConfig+0x29e>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69db      	ldr	r3, [r3, #28]
 8007c3e:	2b80      	cmp	r3, #128	@ 0x80
 8007c40:	d001      	beq.n	8007c46 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e282      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c46:	4b81      	ldr	r3, [pc, #516]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	061b      	lsls	r3, r3, #24
 8007c54:	497d      	ldr	r1, [pc, #500]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c5a:	e040      	b.n	8007cde <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d023      	beq.n	8007cac <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c64:	4b79      	ldr	r3, [pc, #484]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a78      	ldr	r2, [pc, #480]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c70:	f7fb fbce 	bl	8003410 <HAL_GetTick>
 8007c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c76:	e008      	b.n	8007c8a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c78:	f7fb fbca 	bl	8003410 <HAL_GetTick>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e260      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007c8a:	4b70      	ldr	r3, [pc, #448]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d0f0      	beq.n	8007c78 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c96:	4b6d      	ldr	r3, [pc, #436]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	061b      	lsls	r3, r3, #24
 8007ca4:	4969      	ldr	r1, [pc, #420]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60cb      	str	r3, [r1, #12]
 8007caa:	e018      	b.n	8007cde <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007cac:	4b67      	ldr	r3, [pc, #412]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a66      	ldr	r2, [pc, #408]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb8:	f7fb fbaa 	bl	8003410 <HAL_GetTick>
 8007cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cbe:	e008      	b.n	8007cd2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cc0:	f7fb fba6 	bl	8003410 <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d901      	bls.n	8007cd2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e23c      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cd2:	4b5e      	ldr	r3, [pc, #376]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1f0      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d036      	beq.n	8007d58 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d019      	beq.n	8007d26 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007cf2:	4b56      	ldr	r3, [pc, #344]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf6:	4a55      	ldr	r2, [pc, #340]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007cf8:	f043 0301 	orr.w	r3, r3, #1
 8007cfc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfe:	f7fb fb87 	bl	8003410 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d04:	e008      	b.n	8007d18 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d06:	f7fb fb83 	bl	8003410 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e219      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d18:	4b4c      	ldr	r3, [pc, #304]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0f0      	beq.n	8007d06 <HAL_RCC_OscConfig+0x35e>
 8007d24:	e018      	b.n	8007d58 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d26:	4b49      	ldr	r3, [pc, #292]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2a:	4a48      	ldr	r2, [pc, #288]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d2c:	f023 0301 	bic.w	r3, r3, #1
 8007d30:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d32:	f7fb fb6d 	bl	8003410 <HAL_GetTick>
 8007d36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d38:	e008      	b.n	8007d4c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3a:	f7fb fb69 	bl	8003410 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e1ff      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f0      	bne.n	8007d3a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0320 	and.w	r3, r3, #32
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d036      	beq.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	699b      	ldr	r3, [r3, #24]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d019      	beq.n	8007da0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d6c:	4b37      	ldr	r3, [pc, #220]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a36      	ldr	r2, [pc, #216]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d76:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d78:	f7fb fb4a 	bl	8003410 <HAL_GetTick>
 8007d7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d80:	f7fb fb46 	bl	8003410 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e1dc      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d92:	4b2e      	ldr	r3, [pc, #184]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0x3d8>
 8007d9e:	e018      	b.n	8007dd2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007da0:	4b2a      	ldr	r3, [pc, #168]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a29      	ldr	r2, [pc, #164]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007da6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007daa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007dac:	f7fb fb30 	bl	8003410 <HAL_GetTick>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007db2:	e008      	b.n	8007dc6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007db4:	f7fb fb2c 	bl	8003410 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	1ad3      	subs	r3, r2, r3
 8007dbe:	2b02      	cmp	r3, #2
 8007dc0:	d901      	bls.n	8007dc6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e1c2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dc6:	4b21      	ldr	r3, [pc, #132]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1f0      	bne.n	8007db4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8086 	beq.w	8007eec <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007de0:	4b1b      	ldr	r3, [pc, #108]	@ (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a1a      	ldr	r2, [pc, #104]	@ (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007de6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dec:	f7fb fb10 	bl	8003410 <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007df4:	f7fb fb0c 	bl	8003410 <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b64      	cmp	r3, #100	@ 0x64
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e1a2      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e06:	4b12      	ldr	r3, [pc, #72]	@ (8007e50 <HAL_RCC_OscConfig+0x4a8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d106      	bne.n	8007e28 <HAL_RCC_OscConfig+0x480>
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e20:	f043 0301 	orr.w	r3, r3, #1
 8007e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e26:	e032      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d111      	bne.n	8007e54 <HAL_RCC_OscConfig+0x4ac>
 8007e30:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e34:	4a05      	ldr	r2, [pc, #20]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e36:	f023 0301 	bic.w	r3, r3, #1
 8007e3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e3c:	4b03      	ldr	r3, [pc, #12]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e40:	4a02      	ldr	r2, [pc, #8]	@ (8007e4c <HAL_RCC_OscConfig+0x4a4>)
 8007e42:	f023 0304 	bic.w	r3, r3, #4
 8007e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e48:	e021      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	58024800 	.word	0x58024800
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d10c      	bne.n	8007e76 <HAL_RCC_OscConfig+0x4ce>
 8007e5c:	4b83      	ldr	r3, [pc, #524]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e60:	4a82      	ldr	r2, [pc, #520]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e62:	f043 0304 	orr.w	r3, r3, #4
 8007e66:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e68:	4b80      	ldr	r3, [pc, #512]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6c:	4a7f      	ldr	r2, [pc, #508]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e6e:	f043 0301 	orr.w	r3, r3, #1
 8007e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e74:	e00b      	b.n	8007e8e <HAL_RCC_OscConfig+0x4e6>
 8007e76:	4b7d      	ldr	r3, [pc, #500]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e7a:	4a7c      	ldr	r2, [pc, #496]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e7c:	f023 0301 	bic.w	r3, r3, #1
 8007e80:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e82:	4b7a      	ldr	r3, [pc, #488]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e86:	4a79      	ldr	r2, [pc, #484]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007e88:	f023 0304 	bic.w	r3, r3, #4
 8007e8c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d015      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e96:	f7fb fabb 	bl	8003410 <HAL_GetTick>
 8007e9a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e9c:	e00a      	b.n	8007eb4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e9e:	f7fb fab7 	bl	8003410 <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d901      	bls.n	8007eb4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	e14b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eb4:	4b6d      	ldr	r3, [pc, #436]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d0ee      	beq.n	8007e9e <HAL_RCC_OscConfig+0x4f6>
 8007ec0:	e014      	b.n	8007eec <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fb faa5 	bl	8003410 <HAL_GetTick>
 8007ec6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ec8:	e00a      	b.n	8007ee0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007eca:	f7fb faa1 	bl	8003410 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d901      	bls.n	8007ee0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e135      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ee0:	4b62      	ldr	r3, [pc, #392]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1ee      	bne.n	8007eca <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 812a 	beq.w	800814a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007efe:	2b18      	cmp	r3, #24
 8007f00:	f000 80ba 	beq.w	8008078 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	2b02      	cmp	r3, #2
 8007f0a:	f040 8095 	bne.w	8008038 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0e:	4b57      	ldr	r3, [pc, #348]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a56      	ldr	r2, [pc, #344]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f1a:	f7fb fa79 	bl	8003410 <HAL_GetTick>
 8007f1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f20:	e008      	b.n	8007f34 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f22:	f7fb fa75 	bl	8003410 <HAL_GetTick>
 8007f26:	4602      	mov	r2, r0
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	1ad3      	subs	r3, r2, r3
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d901      	bls.n	8007f34 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007f30:	2303      	movs	r3, #3
 8007f32:	e10b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f34:	4b4d      	ldr	r3, [pc, #308]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1f0      	bne.n	8007f22 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f40:	4b4a      	ldr	r3, [pc, #296]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f44:	4b4a      	ldr	r3, [pc, #296]	@ (8008070 <HAL_RCC_OscConfig+0x6c8>)
 8007f46:	4013      	ands	r3, r2
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f50:	0112      	lsls	r2, r2, #4
 8007f52:	430a      	orrs	r2, r1
 8007f54:	4945      	ldr	r1, [pc, #276]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	025b      	lsls	r3, r3, #9
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	431a      	orrs	r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f74:	3b01      	subs	r3, #1
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f82:	3b01      	subs	r3, #1
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f8a:	4938      	ldr	r1, [pc, #224]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f90:	4b36      	ldr	r3, [pc, #216]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	4a35      	ldr	r2, [pc, #212]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f96:	f023 0301 	bic.w	r3, r3, #1
 8007f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f9c:	4b33      	ldr	r3, [pc, #204]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fa0:	4b34      	ldr	r3, [pc, #208]	@ (8008074 <HAL_RCC_OscConfig+0x6cc>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fa8:	00d2      	lsls	r2, r2, #3
 8007faa:	4930      	ldr	r1, [pc, #192]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fac:	4313      	orrs	r3, r2
 8007fae:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb4:	f023 020c 	bic.w	r2, r3, #12
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fbc:	492b      	ldr	r1, [pc, #172]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc6:	f023 0202 	bic.w	r2, r3, #2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fce:	4927      	ldr	r1, [pc, #156]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fd4:	4b25      	ldr	r3, [pc, #148]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd8:	4a24      	ldr	r2, [pc, #144]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fe0:	4b22      	ldr	r3, [pc, #136]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fe4:	4a21      	ldr	r2, [pc, #132]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007fec:	4b1f      	ldr	r3, [pc, #124]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	4a1e      	ldr	r2, [pc, #120]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ff2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffc:	4a1b      	ldr	r2, [pc, #108]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8007ffe:	f043 0301 	orr.w	r3, r3, #1
 8008002:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008004:	4b19      	ldr	r3, [pc, #100]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a18      	ldr	r2, [pc, #96]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 800800a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800800e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008010:	f7fb f9fe 	bl	8003410 <HAL_GetTick>
 8008014:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008016:	e008      	b.n	800802a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008018:	f7fb f9fa 	bl	8003410 <HAL_GetTick>
 800801c:	4602      	mov	r2, r0
 800801e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008020:	1ad3      	subs	r3, r2, r3
 8008022:	2b02      	cmp	r3, #2
 8008024:	d901      	bls.n	800802a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e090      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800802a:	4b10      	ldr	r3, [pc, #64]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0f0      	beq.n	8008018 <HAL_RCC_OscConfig+0x670>
 8008036:	e088      	b.n	800814a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008038:	4b0c      	ldr	r3, [pc, #48]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a0b      	ldr	r2, [pc, #44]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 800803e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008044:	f7fb f9e4 	bl	8003410 <HAL_GetTick>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800804a:	e008      	b.n	800805e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800804c:	f7fb f9e0 	bl	8003410 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	2b02      	cmp	r3, #2
 8008058:	d901      	bls.n	800805e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800805a:	2303      	movs	r3, #3
 800805c:	e076      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800805e:	4b03      	ldr	r3, [pc, #12]	@ (800806c <HAL_RCC_OscConfig+0x6c4>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1f0      	bne.n	800804c <HAL_RCC_OscConfig+0x6a4>
 800806a:	e06e      	b.n	800814a <HAL_RCC_OscConfig+0x7a2>
 800806c:	58024400 	.word	0x58024400
 8008070:	fffffc0c 	.word	0xfffffc0c
 8008074:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008078:	4b36      	ldr	r3, [pc, #216]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800807a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800807c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800807e:	4b35      	ldr	r3, [pc, #212]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008082:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008088:	2b01      	cmp	r3, #1
 800808a:	d031      	beq.n	80080f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f003 0203 	and.w	r2, r3, #3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008096:	429a      	cmp	r2, r3
 8008098:	d12a      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	091b      	lsrs	r3, r3, #4
 800809e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d122      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d11a      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	0a5b      	lsrs	r3, r3, #9
 80080be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d111      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080da:	429a      	cmp	r2, r3
 80080dc:	d108      	bne.n	80080f0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	0e1b      	lsrs	r3, r3, #24
 80080e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d001      	beq.n	80080f4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e02b      	b.n	800814c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80080f4:	4b17      	ldr	r3, [pc, #92]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 80080f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80080fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	429a      	cmp	r2, r3
 8008108:	d01f      	beq.n	800814a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800810a:	4b12      	ldr	r3, [pc, #72]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800810c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810e:	4a11      	ldr	r2, [pc, #68]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008110:	f023 0301 	bic.w	r3, r3, #1
 8008114:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008116:	f7fb f97b 	bl	8003410 <HAL_GetTick>
 800811a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800811c:	bf00      	nop
 800811e:	f7fb f977 	bl	8003410 <HAL_GetTick>
 8008122:	4602      	mov	r2, r0
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	4293      	cmp	r3, r2
 8008128:	d0f9      	beq.n	800811e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800812a:	4b0a      	ldr	r3, [pc, #40]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800812c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800812e:	4b0a      	ldr	r3, [pc, #40]	@ (8008158 <HAL_RCC_OscConfig+0x7b0>)
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	4906      	ldr	r1, [pc, #24]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 800813a:	4313      	orrs	r3, r2
 800813c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800813e:	4b05      	ldr	r3, [pc, #20]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a04      	ldr	r2, [pc, #16]	@ (8008154 <HAL_RCC_OscConfig+0x7ac>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3730      	adds	r7, #48	@ 0x30
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	58024400 	.word	0x58024400
 8008158:	ffff0007 	.word	0xffff0007

0800815c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d101      	bne.n	8008170 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e19c      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008170:	4b8a      	ldr	r3, [pc, #552]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 030f 	and.w	r3, r3, #15
 8008178:	683a      	ldr	r2, [r7, #0]
 800817a:	429a      	cmp	r2, r3
 800817c:	d910      	bls.n	80081a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800817e:	4b87      	ldr	r3, [pc, #540]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f023 020f 	bic.w	r2, r3, #15
 8008186:	4985      	ldr	r1, [pc, #532]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	4313      	orrs	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800818e:	4b83      	ldr	r3, [pc, #524]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	429a      	cmp	r2, r3
 800819a:	d001      	beq.n	80081a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e184      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0304 	and.w	r3, r3, #4
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d010      	beq.n	80081ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	4b7b      	ldr	r3, [pc, #492]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d908      	bls.n	80081ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081bc:	4b78      	ldr	r3, [pc, #480]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	4975      	ldr	r1, [pc, #468]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0308 	and.w	r3, r3, #8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d010      	beq.n	80081fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	695a      	ldr	r2, [r3, #20]
 80081de:	4b70      	ldr	r3, [pc, #448]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d908      	bls.n	80081fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80081ea:	4b6d      	ldr	r3, [pc, #436]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	695b      	ldr	r3, [r3, #20]
 80081f6:	496a      	ldr	r1, [pc, #424]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0310 	and.w	r3, r3, #16
 8008204:	2b00      	cmp	r3, #0
 8008206:	d010      	beq.n	800822a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	4b64      	ldr	r3, [pc, #400]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008214:	429a      	cmp	r2, r3
 8008216:	d908      	bls.n	800822a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008218:	4b61      	ldr	r3, [pc, #388]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800821a:	69db      	ldr	r3, [r3, #28]
 800821c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	699b      	ldr	r3, [r3, #24]
 8008224:	495e      	ldr	r1, [pc, #376]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008226:	4313      	orrs	r3, r2
 8008228:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0320 	and.w	r3, r3, #32
 8008232:	2b00      	cmp	r3, #0
 8008234:	d010      	beq.n	8008258 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	4b59      	ldr	r3, [pc, #356]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800823c:	6a1b      	ldr	r3, [r3, #32]
 800823e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008242:	429a      	cmp	r2, r3
 8008244:	d908      	bls.n	8008258 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008246:	4b56      	ldr	r3, [pc, #344]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	4953      	ldr	r1, [pc, #332]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008254:	4313      	orrs	r3, r2
 8008256:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0302 	and.w	r3, r3, #2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68da      	ldr	r2, [r3, #12]
 8008268:	4b4d      	ldr	r3, [pc, #308]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f003 030f 	and.w	r3, r3, #15
 8008270:	429a      	cmp	r2, r3
 8008272:	d908      	bls.n	8008286 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008274:	4b4a      	ldr	r3, [pc, #296]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008276:	699b      	ldr	r3, [r3, #24]
 8008278:	f023 020f 	bic.w	r2, r3, #15
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	4947      	ldr	r1, [pc, #284]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008282:	4313      	orrs	r3, r2
 8008284:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d055      	beq.n	800833e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008292:	4b43      	ldr	r3, [pc, #268]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	4940      	ldr	r1, [pc, #256]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082a0:	4313      	orrs	r3, r2
 80082a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d107      	bne.n	80082bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082ac:	4b3c      	ldr	r3, [pc, #240]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d121      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e0f6      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d107      	bne.n	80082d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082c4:	4b36      	ldr	r3, [pc, #216]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d115      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082d0:	2301      	movs	r3, #1
 80082d2:	e0ea      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d107      	bne.n	80082ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082dc:	4b30      	ldr	r3, [pc, #192]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d109      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e0de      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80082ec:	4b2c      	ldr	r3, [pc, #176]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e0d6      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80082fc:	4b28      	ldr	r3, [pc, #160]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	f023 0207 	bic.w	r2, r3, #7
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	4925      	ldr	r1, [pc, #148]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800830a:	4313      	orrs	r3, r2
 800830c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7fb f87f 	bl	8003410 <HAL_GetTick>
 8008312:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008314:	e00a      	b.n	800832c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008316:	f7fb f87b 	bl	8003410 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008324:	4293      	cmp	r3, r2
 8008326:	d901      	bls.n	800832c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008328:	2303      	movs	r3, #3
 800832a:	e0be      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832c:	4b1c      	ldr	r3, [pc, #112]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	429a      	cmp	r2, r3
 800833c:	d1eb      	bne.n	8008316 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d010      	beq.n	800836c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008350:	699b      	ldr	r3, [r3, #24]
 8008352:	f003 030f 	and.w	r3, r3, #15
 8008356:	429a      	cmp	r2, r3
 8008358:	d208      	bcs.n	800836c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800835a:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 800835c:	699b      	ldr	r3, [r3, #24]
 800835e:	f023 020f 	bic.w	r2, r3, #15
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	490e      	ldr	r1, [pc, #56]	@ (80083a0 <HAL_RCC_ClockConfig+0x244>)
 8008368:	4313      	orrs	r3, r2
 800836a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800836c:	4b0b      	ldr	r3, [pc, #44]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	683a      	ldr	r2, [r7, #0]
 8008376:	429a      	cmp	r2, r3
 8008378:	d214      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800837a:	4b08      	ldr	r3, [pc, #32]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f023 020f 	bic.w	r2, r3, #15
 8008382:	4906      	ldr	r1, [pc, #24]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	4313      	orrs	r3, r2
 8008388:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800838a:	4b04      	ldr	r3, [pc, #16]	@ (800839c <HAL_RCC_ClockConfig+0x240>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 030f 	and.w	r3, r3, #15
 8008392:	683a      	ldr	r2, [r7, #0]
 8008394:	429a      	cmp	r2, r3
 8008396:	d005      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e086      	b.n	80084aa <HAL_RCC_ClockConfig+0x34e>
 800839c:	52002000 	.word	0x52002000
 80083a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 0304 	and.w	r3, r3, #4
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d010      	beq.n	80083d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	691a      	ldr	r2, [r3, #16]
 80083b4:	4b3f      	ldr	r3, [pc, #252]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083bc:	429a      	cmp	r2, r3
 80083be:	d208      	bcs.n	80083d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083c0:	4b3c      	ldr	r3, [pc, #240]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083c2:	699b      	ldr	r3, [r3, #24]
 80083c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	4939      	ldr	r1, [pc, #228]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0308 	and.w	r3, r3, #8
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d010      	beq.n	8008400 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	4b34      	ldr	r3, [pc, #208]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d208      	bcs.n	8008400 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083ee:	4b31      	ldr	r3, [pc, #196]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	492e      	ldr	r1, [pc, #184]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0310 	and.w	r3, r3, #16
 8008408:	2b00      	cmp	r3, #0
 800840a:	d010      	beq.n	800842e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	699a      	ldr	r2, [r3, #24]
 8008410:	4b28      	ldr	r3, [pc, #160]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008418:	429a      	cmp	r2, r3
 800841a:	d208      	bcs.n	800842e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800841c:	4b25      	ldr	r3, [pc, #148]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	4922      	ldr	r1, [pc, #136]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800842a:	4313      	orrs	r3, r2
 800842c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d010      	beq.n	800845c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	4b1d      	ldr	r3, [pc, #116]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008446:	429a      	cmp	r2, r3
 8008448:	d208      	bcs.n	800845c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800844a:	4b1a      	ldr	r3, [pc, #104]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	4917      	ldr	r1, [pc, #92]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008458:	4313      	orrs	r3, r2
 800845a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800845c:	f000 f834 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 8008460:	4602      	mov	r2, r0
 8008462:	4b14      	ldr	r3, [pc, #80]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 030f 	and.w	r3, r3, #15
 800846c:	4912      	ldr	r1, [pc, #72]	@ (80084b8 <HAL_RCC_ClockConfig+0x35c>)
 800846e:	5ccb      	ldrb	r3, [r1, r3]
 8008470:	f003 031f 	and.w	r3, r3, #31
 8008474:	fa22 f303 	lsr.w	r3, r2, r3
 8008478:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800847a:	4b0e      	ldr	r3, [pc, #56]	@ (80084b4 <HAL_RCC_ClockConfig+0x358>)
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	4a0d      	ldr	r2, [pc, #52]	@ (80084b8 <HAL_RCC_ClockConfig+0x35c>)
 8008484:	5cd3      	ldrb	r3, [r2, r3]
 8008486:	f003 031f 	and.w	r3, r3, #31
 800848a:	693a      	ldr	r2, [r7, #16]
 800848c:	fa22 f303 	lsr.w	r3, r2, r3
 8008490:	4a0a      	ldr	r2, [pc, #40]	@ (80084bc <HAL_RCC_ClockConfig+0x360>)
 8008492:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008494:	4a0a      	ldr	r2, [pc, #40]	@ (80084c0 <HAL_RCC_ClockConfig+0x364>)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800849a:	4b0a      	ldr	r3, [pc, #40]	@ (80084c4 <HAL_RCC_ClockConfig+0x368>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fa f970 	bl	8002784 <HAL_InitTick>
 80084a4:	4603      	mov	r3, r0
 80084a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3718      	adds	r7, #24
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	58024400 	.word	0x58024400
 80084b8:	08013d94 	.word	0x08013d94
 80084bc:	24000008 	.word	0x24000008
 80084c0:	24000004 	.word	0x24000004
 80084c4:	2400000c 	.word	0x2400000c

080084c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b089      	sub	sp, #36	@ 0x24
 80084cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80084ce:	4bb3      	ldr	r3, [pc, #716]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084d6:	2b18      	cmp	r3, #24
 80084d8:	f200 8155 	bhi.w	8008786 <HAL_RCC_GetSysClockFreq+0x2be>
 80084dc:	a201      	add	r2, pc, #4	@ (adr r2, 80084e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80084de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e2:	bf00      	nop
 80084e4:	08008549 	.word	0x08008549
 80084e8:	08008787 	.word	0x08008787
 80084ec:	08008787 	.word	0x08008787
 80084f0:	08008787 	.word	0x08008787
 80084f4:	08008787 	.word	0x08008787
 80084f8:	08008787 	.word	0x08008787
 80084fc:	08008787 	.word	0x08008787
 8008500:	08008787 	.word	0x08008787
 8008504:	0800856f 	.word	0x0800856f
 8008508:	08008787 	.word	0x08008787
 800850c:	08008787 	.word	0x08008787
 8008510:	08008787 	.word	0x08008787
 8008514:	08008787 	.word	0x08008787
 8008518:	08008787 	.word	0x08008787
 800851c:	08008787 	.word	0x08008787
 8008520:	08008787 	.word	0x08008787
 8008524:	08008575 	.word	0x08008575
 8008528:	08008787 	.word	0x08008787
 800852c:	08008787 	.word	0x08008787
 8008530:	08008787 	.word	0x08008787
 8008534:	08008787 	.word	0x08008787
 8008538:	08008787 	.word	0x08008787
 800853c:	08008787 	.word	0x08008787
 8008540:	08008787 	.word	0x08008787
 8008544:	0800857b 	.word	0x0800857b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008548:	4b94      	ldr	r3, [pc, #592]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0320 	and.w	r3, r3, #32
 8008550:	2b00      	cmp	r3, #0
 8008552:	d009      	beq.n	8008568 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008554:	4b91      	ldr	r3, [pc, #580]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	08db      	lsrs	r3, r3, #3
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	4a90      	ldr	r2, [pc, #576]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008560:	fa22 f303 	lsr.w	r3, r2, r3
 8008564:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008566:	e111      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008568:	4b8d      	ldr	r3, [pc, #564]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800856a:	61bb      	str	r3, [r7, #24]
      break;
 800856c:	e10e      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800856e:	4b8d      	ldr	r3, [pc, #564]	@ (80087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008570:	61bb      	str	r3, [r7, #24]
      break;
 8008572:	e10b      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008574:	4b8c      	ldr	r3, [pc, #560]	@ (80087a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008576:	61bb      	str	r3, [r7, #24]
      break;
 8008578:	e108      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800857a:	4b88      	ldr	r3, [pc, #544]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857e:	f003 0303 	and.w	r3, r3, #3
 8008582:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008584:	4b85      	ldr	r3, [pc, #532]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800858e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008590:	4b82      	ldr	r3, [pc, #520]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800859a:	4b80      	ldr	r3, [pc, #512]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800859c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800859e:	08db      	lsrs	r3, r3, #3
 80085a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	fb02 f303 	mul.w	r3, r2, r3
 80085aa:	ee07 3a90 	vmov	s15, r3
 80085ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 80e1 	beq.w	8008780 <HAL_RCC_GetSysClockFreq+0x2b8>
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	f000 8083 	beq.w	80086cc <HAL_RCC_GetSysClockFreq+0x204>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	f200 80a1 	bhi.w	8008710 <HAL_RCC_GetSysClockFreq+0x248>
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0x114>
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d056      	beq.n	8008688 <HAL_RCC_GetSysClockFreq+0x1c0>
 80085da:	e099      	b.n	8008710 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085dc:	4b6f      	ldr	r3, [pc, #444]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f003 0320 	and.w	r3, r3, #32
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d02d      	beq.n	8008644 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085e8:	4b6c      	ldr	r3, [pc, #432]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	08db      	lsrs	r3, r3, #3
 80085ee:	f003 0303 	and.w	r3, r3, #3
 80085f2:	4a6b      	ldr	r2, [pc, #428]	@ (80087a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085f4:	fa22 f303 	lsr.w	r3, r2, r3
 80085f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	ee07 3a90 	vmov	s15, r3
 8008600:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	ee07 3a90 	vmov	s15, r3
 800860a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800860e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008612:	4b62      	ldr	r3, [pc, #392]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800861a:	ee07 3a90 	vmov	s15, r3
 800861e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008622:	ed97 6a02 	vldr	s12, [r7, #8]
 8008626:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800862a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800862e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008632:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800863a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800863e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008642:	e087      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008644:	693b      	ldr	r3, [r7, #16]
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800864e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80087b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008656:	4b51      	ldr	r3, [pc, #324]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800865a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800865e:	ee07 3a90 	vmov	s15, r3
 8008662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008666:	ed97 6a02 	vldr	s12, [r7, #8]
 800866a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800866e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008676:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800867a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800867e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008686:	e065      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008692:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800869a:	4b40      	ldr	r3, [pc, #256]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800869c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800869e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086a2:	ee07 3a90 	vmov	s15, r3
 80086a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80086b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086ca:	e043      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	ee07 3a90 	vmov	s15, r3
 80086d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80087b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80086da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086de:	4b2f      	ldr	r3, [pc, #188]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086e6:	ee07 3a90 	vmov	s15, r3
 80086ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80086f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80086f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800870a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800870e:	e021      	b.n	8008754 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	ee07 3a90 	vmov	s15, r3
 8008716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800871a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80087b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800871e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008722:	4b1e      	ldr	r3, [pc, #120]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800872a:	ee07 3a90 	vmov	s15, r3
 800872e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008732:	ed97 6a02 	vldr	s12, [r7, #8]
 8008736:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80087ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800873a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800873e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800874a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800874e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008752:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008754:	4b11      	ldr	r3, [pc, #68]	@ (800879c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008758:	0a5b      	lsrs	r3, r3, #9
 800875a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800875e:	3301      	adds	r3, #1
 8008760:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800876c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008778:	ee17 3a90 	vmov	r3, s15
 800877c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800877e:	e005      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	61bb      	str	r3, [r7, #24]
      break;
 8008784:	e002      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008786:	4b07      	ldr	r3, [pc, #28]	@ (80087a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008788:	61bb      	str	r3, [r7, #24]
      break;
 800878a:	bf00      	nop
  }

  return sysclockfreq;
 800878c:	69bb      	ldr	r3, [r7, #24]
}
 800878e:	4618      	mov	r0, r3
 8008790:	3724      	adds	r7, #36	@ 0x24
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	58024400 	.word	0x58024400
 80087a0:	03d09000 	.word	0x03d09000
 80087a4:	003d0900 	.word	0x003d0900
 80087a8:	017d7840 	.word	0x017d7840
 80087ac:	46000000 	.word	0x46000000
 80087b0:	4c742400 	.word	0x4c742400
 80087b4:	4a742400 	.word	0x4a742400
 80087b8:	4bbebc20 	.word	0x4bbebc20

080087bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087c2:	f7ff fe81 	bl	80084c8 <HAL_RCC_GetSysClockFreq>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b10      	ldr	r3, [pc, #64]	@ (800880c <HAL_RCC_GetHCLKFreq+0x50>)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	0a1b      	lsrs	r3, r3, #8
 80087ce:	f003 030f 	and.w	r3, r3, #15
 80087d2:	490f      	ldr	r1, [pc, #60]	@ (8008810 <HAL_RCC_GetHCLKFreq+0x54>)
 80087d4:	5ccb      	ldrb	r3, [r1, r3]
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	fa22 f303 	lsr.w	r3, r2, r3
 80087de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80087e0:	4b0a      	ldr	r3, [pc, #40]	@ (800880c <HAL_RCC_GetHCLKFreq+0x50>)
 80087e2:	699b      	ldr	r3, [r3, #24]
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <HAL_RCC_GetHCLKFreq+0x54>)
 80087ea:	5cd3      	ldrb	r3, [r2, r3]
 80087ec:	f003 031f 	and.w	r3, r3, #31
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	fa22 f303 	lsr.w	r3, r2, r3
 80087f6:	4a07      	ldr	r2, [pc, #28]	@ (8008814 <HAL_RCC_GetHCLKFreq+0x58>)
 80087f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80087fa:	4a07      	ldr	r2, [pc, #28]	@ (8008818 <HAL_RCC_GetHCLKFreq+0x5c>)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008800:	4b04      	ldr	r3, [pc, #16]	@ (8008814 <HAL_RCC_GetHCLKFreq+0x58>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	58024400 	.word	0x58024400
 8008810:	08013d94 	.word	0x08013d94
 8008814:	24000008 	.word	0x24000008
 8008818:	24000004 	.word	0x24000004

0800881c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008820:	f7ff ffcc 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8008824:	4602      	mov	r2, r0
 8008826:	4b06      	ldr	r3, [pc, #24]	@ (8008840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008828:	69db      	ldr	r3, [r3, #28]
 800882a:	091b      	lsrs	r3, r3, #4
 800882c:	f003 0307 	and.w	r3, r3, #7
 8008830:	4904      	ldr	r1, [pc, #16]	@ (8008844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008832:	5ccb      	ldrb	r3, [r1, r3]
 8008834:	f003 031f 	and.w	r3, r3, #31
 8008838:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800883c:	4618      	mov	r0, r3
 800883e:	bd80      	pop	{r7, pc}
 8008840:	58024400 	.word	0x58024400
 8008844:	08013d94 	.word	0x08013d94

08008848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800884c:	f7ff ffb6 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 8008850:	4602      	mov	r2, r0
 8008852:	4b06      	ldr	r3, [pc, #24]	@ (800886c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	4904      	ldr	r1, [pc, #16]	@ (8008870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800885e:	5ccb      	ldrb	r3, [r1, r3]
 8008860:	f003 031f 	and.w	r3, r3, #31
 8008864:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008868:	4618      	mov	r0, r3
 800886a:	bd80      	pop	{r7, pc}
 800886c:	58024400 	.word	0x58024400
 8008870:	08013d94 	.word	0x08013d94

08008874 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	223f      	movs	r2, #63	@ 0x3f
 8008882:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008884:	4b1a      	ldr	r3, [pc, #104]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 8008886:	691b      	ldr	r3, [r3, #16]
 8008888:	f003 0207 	and.w	r2, r3, #7
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8008890:	4b17      	ldr	r3, [pc, #92]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800889c:	4b14      	ldr	r3, [pc, #80]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	f003 020f 	and.w	r2, r3, #15
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80088a8:	4b11      	ldr	r3, [pc, #68]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80088b4:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80088c0:	4b0b      	ldr	r3, [pc, #44]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80088cc:	4b08      	ldr	r3, [pc, #32]	@ (80088f0 <HAL_RCC_GetClockConfig+0x7c>)
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80088d8:	4b06      	ldr	r3, [pc, #24]	@ (80088f4 <HAL_RCC_GetClockConfig+0x80>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f003 020f 	and.w	r2, r3, #15
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	601a      	str	r2, [r3, #0]
}
 80088e4:	bf00      	nop
 80088e6:	370c      	adds	r7, #12
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	58024400 	.word	0x58024400
 80088f4:	52002000 	.word	0x52002000

080088f8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088fc:	b0c6      	sub	sp, #280	@ 0x118
 80088fe:	af00      	add	r7, sp, #0
 8008900:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008904:	2300      	movs	r3, #0
 8008906:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800890a:	2300      	movs	r3, #0
 800890c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008918:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800891c:	2500      	movs	r5, #0
 800891e:	ea54 0305 	orrs.w	r3, r4, r5
 8008922:	d049      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008928:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800892a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800892e:	d02f      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008930:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008934:	d828      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800893a:	d01a      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800893c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008940:	d822      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008946:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800894a:	d007      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800894c:	e01c      	b.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800894e:	4bab      	ldr	r3, [pc, #684]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008952:	4aaa      	ldr	r2, [pc, #680]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800895a:	e01a      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008960:	3308      	adds	r3, #8
 8008962:	2102      	movs	r1, #2
 8008964:	4618      	mov	r0, r3
 8008966:	f002 fa49 	bl	800adfc <RCCEx_PLL2_Config>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008970:	e00f      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008976:	3328      	adds	r3, #40	@ 0x28
 8008978:	2102      	movs	r1, #2
 800897a:	4618      	mov	r0, r3
 800897c:	f002 faf0 	bl	800af60 <RCCEx_PLL3_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008986:	e004      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800898e:	e000      	b.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008992:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10a      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800899a:	4b98      	ldr	r3, [pc, #608]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800899c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800899e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089a8:	4a94      	ldr	r2, [pc, #592]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089aa:	430b      	orrs	r3, r1
 80089ac:	6513      	str	r3, [r2, #80]	@ 0x50
 80089ae:	e003      	b.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80089c4:	f04f 0900 	mov.w	r9, #0
 80089c8:	ea58 0309 	orrs.w	r3, r8, r9
 80089cc:	d047      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80089ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	d82a      	bhi.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80089d8:	a201      	add	r2, pc, #4	@ (adr r2, 80089e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80089da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089de:	bf00      	nop
 80089e0:	080089f5 	.word	0x080089f5
 80089e4:	08008a03 	.word	0x08008a03
 80089e8:	08008a19 	.word	0x08008a19
 80089ec:	08008a37 	.word	0x08008a37
 80089f0:	08008a37 	.word	0x08008a37
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f4:	4b81      	ldr	r3, [pc, #516]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f8:	4a80      	ldr	r2, [pc, #512]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a00:	e01a      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a06:	3308      	adds	r3, #8
 8008a08:	2100      	movs	r1, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f002 f9f6 	bl	800adfc <RCCEx_PLL2_Config>
 8008a10:	4603      	mov	r3, r0
 8008a12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a16:	e00f      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a1c:	3328      	adds	r3, #40	@ 0x28
 8008a1e:	2100      	movs	r1, #0
 8008a20:	4618      	mov	r0, r3
 8008a22:	f002 fa9d 	bl	800af60 <RCCEx_PLL3_Config>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a2c:	e004      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a34:	e000      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10a      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a40:	4b6e      	ldr	r3, [pc, #440]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a44:	f023 0107 	bic.w	r1, r3, #7
 8008a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a50:	430b      	orrs	r3, r1
 8008a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a54:	e003      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a5a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a66:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008a6a:	f04f 0b00 	mov.w	fp, #0
 8008a6e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008a72:	d05b      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008a7c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008a80:	d03b      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008a82:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008a86:	d834      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a8c:	d037      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008a8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a92:	d82e      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008a94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a98:	d033      	beq.n	8008b02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008a9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a9e:	d828      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008aa0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aa4:	d01a      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008aaa:	d822      	bhi.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d003      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008ab0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ab4:	d007      	beq.n	8008ac6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008ab6:	e01c      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ab8:	4b50      	ldr	r3, [pc, #320]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abc:	4a4f      	ldr	r2, [pc, #316]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ac2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac4:	e01e      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aca:	3308      	adds	r3, #8
 8008acc:	2100      	movs	r1, #0
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f002 f994 	bl	800adfc <RCCEx_PLL2_Config>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008ada:	e013      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ae0:	3328      	adds	r3, #40	@ 0x28
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f002 fa3b 	bl	800af60 <RCCEx_PLL3_Config>
 8008aea:	4603      	mov	r3, r0
 8008aec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008af0:	e008      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008af8:	e004      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008afa:	bf00      	nop
 8008afc:	e002      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008afe:	bf00      	nop
 8008b00:	e000      	b.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10b      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b10:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b1c:	4a37      	ldr	r2, [pc, #220]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b22:	e003      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b28:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008b38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b42:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b46:	460b      	mov	r3, r1
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	d05d      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b50:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b54:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b58:	d03b      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008b5a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b5e:	d834      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b64:	d037      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008b66:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b6a:	d82e      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b70:	d033      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008b72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b76:	d828      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b78:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b7c:	d01a      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008b7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b82:	d822      	bhi.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008b88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b8c:	d007      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008b8e:	e01c      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b90:	4b1a      	ldr	r3, [pc, #104]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b94:	4a19      	ldr	r2, [pc, #100]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b9c:	e01e      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ba2:	3308      	adds	r3, #8
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f002 f928 	bl	800adfc <RCCEx_PLL2_Config>
 8008bac:	4603      	mov	r3, r0
 8008bae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008bb2:	e013      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb8:	3328      	adds	r3, #40	@ 0x28
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f002 f9cf 	bl	800af60 <RCCEx_PLL3_Config>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bc8:	e008      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008bd0:	e004      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008bd2:	bf00      	nop
 8008bd4:	e002      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008bd6:	bf00      	nop
 8008bd8:	e000      	b.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d10d      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008be4:	4b05      	ldr	r3, [pc, #20]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008be8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008bf4:	4a01      	ldr	r2, [pc, #4]	@ (8008bfc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bf6:	430b      	orrs	r3, r1
 8008bf8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bfa:	e005      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008bfc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008c14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c18:	2300      	movs	r3, #0
 8008c1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c1e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008c22:	460b      	mov	r3, r1
 8008c24:	4313      	orrs	r3, r2
 8008c26:	d03a      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c2e:	2b30      	cmp	r3, #48	@ 0x30
 8008c30:	d01f      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008c32:	2b30      	cmp	r3, #48	@ 0x30
 8008c34:	d819      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c36:	2b20      	cmp	r3, #32
 8008c38:	d00c      	beq.n	8008c54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008c3a:	2b20      	cmp	r3, #32
 8008c3c:	d815      	bhi.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d019      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c42:	2b10      	cmp	r3, #16
 8008c44:	d111      	bne.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c46:	4baa      	ldr	r3, [pc, #680]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	4aa9      	ldr	r2, [pc, #676]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008c52:	e011      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c58:	3308      	adds	r3, #8
 8008c5a:	2102      	movs	r1, #2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f002 f8cd 	bl	800adfc <RCCEx_PLL2_Config>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008c68:	e006      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c70:	e002      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008c72:	bf00      	nop
 8008c74:	e000      	b.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008c80:	4b9b      	ldr	r3, [pc, #620]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c84:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c8e:	4a98      	ldr	r2, [pc, #608]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c90:	430b      	orrs	r3, r1
 8008c92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c94:	e003      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008caa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008cae:	2300      	movs	r3, #0
 8008cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008cb4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	d051      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cc8:	d035      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008cca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008cce:	d82e      	bhi.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008cd0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cd4:	d031      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008cd6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008cda:	d828      	bhi.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008cdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce0:	d01a      	beq.n	8008d18 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ce6:	d822      	bhi.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d003      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cf0:	d007      	beq.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008cf2:	e01c      	b.n	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf8:	4a7d      	ldr	r2, [pc, #500]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d00:	e01c      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d06:	3308      	adds	r3, #8
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f002 f876 	bl	800adfc <RCCEx_PLL2_Config>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d16:	e011      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d1c:	3328      	adds	r3, #40	@ 0x28
 8008d1e:	2100      	movs	r1, #0
 8008d20:	4618      	mov	r0, r3
 8008d22:	f002 f91d 	bl	800af60 <RCCEx_PLL3_Config>
 8008d26:	4603      	mov	r3, r0
 8008d28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d2c:	e006      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d34:	e002      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d36:	bf00      	nop
 8008d38:	e000      	b.n	8008d3c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d10a      	bne.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d44:	4b6a      	ldr	r3, [pc, #424]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d48:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d52:	4a67      	ldr	r2, [pc, #412]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d54:	430b      	orrs	r3, r1
 8008d56:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d58:	e003      	b.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d72:	2300      	movs	r3, #0
 8008d74:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d78:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	d053      	beq.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d8c:	d033      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008d8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d92:	d82c      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008d94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d98:	d02f      	beq.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d9e:	d826      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008da0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008da4:	d02b      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008daa:	d820      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db0:	d012      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008db6:	d81a      	bhi.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d022      	beq.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008dc0:	d115      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	2101      	movs	r1, #1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f002 f816 	bl	800adfc <RCCEx_PLL2_Config>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dd6:	e015      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ddc:	3328      	adds	r3, #40	@ 0x28
 8008dde:	2101      	movs	r1, #1
 8008de0:	4618      	mov	r0, r3
 8008de2:	f002 f8bd 	bl	800af60 <RCCEx_PLL3_Config>
 8008de6:	4603      	mov	r3, r0
 8008de8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008dec:	e00a      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008df4:	e006      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008df6:	bf00      	nop
 8008df8:	e004      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008dfa:	bf00      	nop
 8008dfc:	e002      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008dfe:	bf00      	nop
 8008e00:	e000      	b.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d10a      	bne.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e0c:	4b38      	ldr	r3, [pc, #224]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e10:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e1a:	4a35      	ldr	r2, [pc, #212]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e1c:	430b      	orrs	r3, r1
 8008e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e20:	e003      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e32:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e44:	460b      	mov	r3, r1
 8008e46:	4313      	orrs	r3, r2
 8008e48:	d058      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e56:	d033      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e5c:	d82c      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e62:	d02f      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008e64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e68:	d826      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008e6a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e6e:	d02b      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008e70:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e74:	d820      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008e76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e7a:	d012      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008e7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e80:	d81a      	bhi.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d022      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008e86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e8a:	d115      	bne.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e90:	3308      	adds	r3, #8
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f001 ffb1 	bl	800adfc <RCCEx_PLL2_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ea0:	e015      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ea6:	3328      	adds	r3, #40	@ 0x28
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f858 	bl	800af60 <RCCEx_PLL3_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e00a      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ebe:	e006      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ec0:	bf00      	nop
 8008ec2:	e004      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ec4:	bf00      	nop
 8008ec6:	e002      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ec8:	bf00      	nop
 8008eca:	e000      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ecc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ece:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d10e      	bne.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008ed6:	4b06      	ldr	r3, [pc, #24]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eda:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ee6:	4a02      	ldr	r2, [pc, #8]	@ (8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	6593      	str	r3, [r2, #88]	@ 0x58
 8008eec:	e006      	b.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008eee:	bf00      	nop
 8008ef0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ef4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ef8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f04:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008f08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f12:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f16:	460b      	mov	r3, r1
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	d037      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f26:	d00e      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f2c:	d816      	bhi.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d018      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f36:	d111      	bne.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f38:	4bc4      	ldr	r3, [pc, #784]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f3c:	4ac3      	ldr	r2, [pc, #780]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f44:	e00f      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f4a:	3308      	adds	r3, #8
 8008f4c:	2101      	movs	r1, #1
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f001 ff54 	bl	800adfc <RCCEx_PLL2_Config>
 8008f54:	4603      	mov	r3, r0
 8008f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f5a:	e004      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f62:	e000      	b.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10a      	bne.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f6e:	4bb7      	ldr	r3, [pc, #732]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f72:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7c:	4ab3      	ldr	r2, [pc, #716]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f7e:	430b      	orrs	r3, r1
 8008f80:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f82:	e003      	b.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f94:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008f98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fa2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d039      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d81c      	bhi.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fbc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008ff9 	.word	0x08008ff9
 8008fc0:	08008fcd 	.word	0x08008fcd
 8008fc4:	08008fdb 	.word	0x08008fdb
 8008fc8:	08008ff9 	.word	0x08008ff9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fcc:	4b9f      	ldr	r3, [pc, #636]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd0:	4a9e      	ldr	r2, [pc, #632]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fd8:	e00f      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fde:	3308      	adds	r3, #8
 8008fe0:	2102      	movs	r1, #2
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f001 ff0a 	bl	800adfc <RCCEx_PLL2_Config>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008fee:	e004      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ff6:	e000      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008ff8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10a      	bne.n	8009018 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009002:	4b92      	ldr	r3, [pc, #584]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009006:	f023 0103 	bic.w	r1, r3, #3
 800900a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800900e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009010:	4a8e      	ldr	r2, [pc, #568]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009012:	430b      	orrs	r3, r1
 8009014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009016:	e003      	b.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009018:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800901c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009028:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800902c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009030:	2300      	movs	r3, #0
 8009032:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009036:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800903a:	460b      	mov	r3, r1
 800903c:	4313      	orrs	r3, r2
 800903e:	f000 8099 	beq.w	8009174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009042:	4b83      	ldr	r3, [pc, #524]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a82      	ldr	r2, [pc, #520]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800904c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800904e:	f7fa f9df 	bl	8003410 <HAL_GetTick>
 8009052:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009056:	e00b      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009058:	f7fa f9da 	bl	8003410 <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009062:	1ad3      	subs	r3, r2, r3
 8009064:	2b64      	cmp	r3, #100	@ 0x64
 8009066:	d903      	bls.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009068:	2303      	movs	r3, #3
 800906a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800906e:	e005      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009070:	4b77      	ldr	r3, [pc, #476]	@ (8009250 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0ed      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800907c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009080:	2b00      	cmp	r3, #0
 8009082:	d173      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009084:	4b71      	ldr	r3, [pc, #452]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009086:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800908c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009090:	4053      	eors	r3, r2
 8009092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009096:	2b00      	cmp	r3, #0
 8009098:	d015      	beq.n	80090c6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800909a:	4b6c      	ldr	r3, [pc, #432]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800909c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800909e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090a2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090a6:	4b69      	ldr	r3, [pc, #420]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090aa:	4a68      	ldr	r2, [pc, #416]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090b2:	4b66      	ldr	r3, [pc, #408]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090b6:	4a65      	ldr	r2, [pc, #404]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090bc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090be:	4a63      	ldr	r2, [pc, #396]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090c4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090d2:	d118      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d4:	f7fa f99c 	bl	8003410 <HAL_GetTick>
 80090d8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090dc:	e00d      	b.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090de:	f7fa f997 	bl	8003410 <HAL_GetTick>
 80090e2:	4602      	mov	r2, r0
 80090e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80090e8:	1ad2      	subs	r2, r2, r3
 80090ea:	f241 3388 	movw	r3, #5000	@ 0x1388
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d903      	bls.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80090f8:	e005      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090fa:	4b54      	ldr	r3, [pc, #336]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d0eb      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009106:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800910a:	2b00      	cmp	r3, #0
 800910c:	d129      	bne.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800910e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009112:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800911a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800911e:	d10e      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009120:	4b4a      	ldr	r3, [pc, #296]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800912c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009130:	091a      	lsrs	r2, r3, #4
 8009132:	4b48      	ldr	r3, [pc, #288]	@ (8009254 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009134:	4013      	ands	r3, r2
 8009136:	4a45      	ldr	r2, [pc, #276]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009138:	430b      	orrs	r3, r1
 800913a:	6113      	str	r3, [r2, #16]
 800913c:	e005      	b.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800913e:	4b43      	ldr	r3, [pc, #268]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	4a42      	ldr	r2, [pc, #264]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009144:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009148:	6113      	str	r3, [r2, #16]
 800914a:	4b40      	ldr	r3, [pc, #256]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800914c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800914e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009152:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800915a:	4a3c      	ldr	r2, [pc, #240]	@ (800924c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800915c:	430b      	orrs	r3, r1
 800915e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009160:	e008      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009162:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009166:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009170:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f002 0301 	and.w	r3, r2, #1
 8009180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800918a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800918e:	460b      	mov	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	f000 808f 	beq.w	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800919a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800919c:	2b28      	cmp	r3, #40	@ 0x28
 800919e:	d871      	bhi.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80091a0:	a201      	add	r2, pc, #4	@ (adr r2, 80091a8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80091a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a6:	bf00      	nop
 80091a8:	0800928d 	.word	0x0800928d
 80091ac:	08009285 	.word	0x08009285
 80091b0:	08009285 	.word	0x08009285
 80091b4:	08009285 	.word	0x08009285
 80091b8:	08009285 	.word	0x08009285
 80091bc:	08009285 	.word	0x08009285
 80091c0:	08009285 	.word	0x08009285
 80091c4:	08009285 	.word	0x08009285
 80091c8:	08009259 	.word	0x08009259
 80091cc:	08009285 	.word	0x08009285
 80091d0:	08009285 	.word	0x08009285
 80091d4:	08009285 	.word	0x08009285
 80091d8:	08009285 	.word	0x08009285
 80091dc:	08009285 	.word	0x08009285
 80091e0:	08009285 	.word	0x08009285
 80091e4:	08009285 	.word	0x08009285
 80091e8:	0800926f 	.word	0x0800926f
 80091ec:	08009285 	.word	0x08009285
 80091f0:	08009285 	.word	0x08009285
 80091f4:	08009285 	.word	0x08009285
 80091f8:	08009285 	.word	0x08009285
 80091fc:	08009285 	.word	0x08009285
 8009200:	08009285 	.word	0x08009285
 8009204:	08009285 	.word	0x08009285
 8009208:	0800928d 	.word	0x0800928d
 800920c:	08009285 	.word	0x08009285
 8009210:	08009285 	.word	0x08009285
 8009214:	08009285 	.word	0x08009285
 8009218:	08009285 	.word	0x08009285
 800921c:	08009285 	.word	0x08009285
 8009220:	08009285 	.word	0x08009285
 8009224:	08009285 	.word	0x08009285
 8009228:	0800928d 	.word	0x0800928d
 800922c:	08009285 	.word	0x08009285
 8009230:	08009285 	.word	0x08009285
 8009234:	08009285 	.word	0x08009285
 8009238:	08009285 	.word	0x08009285
 800923c:	08009285 	.word	0x08009285
 8009240:	08009285 	.word	0x08009285
 8009244:	08009285 	.word	0x08009285
 8009248:	0800928d 	.word	0x0800928d
 800924c:	58024400 	.word	0x58024400
 8009250:	58024800 	.word	0x58024800
 8009254:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800925c:	3308      	adds	r3, #8
 800925e:	2101      	movs	r1, #1
 8009260:	4618      	mov	r0, r3
 8009262:	f001 fdcb 	bl	800adfc <RCCEx_PLL2_Config>
 8009266:	4603      	mov	r3, r0
 8009268:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800926c:	e00f      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800926e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009272:	3328      	adds	r3, #40	@ 0x28
 8009274:	2101      	movs	r1, #1
 8009276:	4618      	mov	r0, r3
 8009278:	f001 fe72 	bl	800af60 <RCCEx_PLL3_Config>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009282:	e004      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800928a:	e000      	b.n	800928e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800928c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800928e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009292:	2b00      	cmp	r3, #0
 8009294:	d10a      	bne.n	80092ac <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009296:	4bbf      	ldr	r3, [pc, #764]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800929a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800929e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092a4:	4abb      	ldr	r2, [pc, #748]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092a6:	430b      	orrs	r3, r1
 80092a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80092aa:	e003      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f002 0302 	and.w	r3, r2, #2
 80092c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092c4:	2300      	movs	r3, #0
 80092c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80092ca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80092ce:	460b      	mov	r3, r1
 80092d0:	4313      	orrs	r3, r2
 80092d2:	d041      	beq.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80092d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092da:	2b05      	cmp	r3, #5
 80092dc:	d824      	bhi.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80092de:	a201      	add	r2, pc, #4	@ (adr r2, 80092e4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80092e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e4:	08009331 	.word	0x08009331
 80092e8:	080092fd 	.word	0x080092fd
 80092ec:	08009313 	.word	0x08009313
 80092f0:	08009331 	.word	0x08009331
 80092f4:	08009331 	.word	0x08009331
 80092f8:	08009331 	.word	0x08009331
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009300:	3308      	adds	r3, #8
 8009302:	2101      	movs	r1, #1
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fd79 	bl	800adfc <RCCEx_PLL2_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009310:	e00f      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009312:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009316:	3328      	adds	r3, #40	@ 0x28
 8009318:	2101      	movs	r1, #1
 800931a:	4618      	mov	r0, r3
 800931c:	f001 fe20 	bl	800af60 <RCCEx_PLL3_Config>
 8009320:	4603      	mov	r3, r0
 8009322:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009326:	e004      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800932e:	e000      	b.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009332:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10a      	bne.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800933a:	4b96      	ldr	r3, [pc, #600]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800933c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800933e:	f023 0107 	bic.w	r1, r3, #7
 8009342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009348:	4a92      	ldr	r2, [pc, #584]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800934a:	430b      	orrs	r3, r1
 800934c:	6553      	str	r3, [r2, #84]	@ 0x54
 800934e:	e003      	b.n	8009358 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009350:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009354:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009358:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	f002 0304 	and.w	r3, r2, #4
 8009364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009368:	2300      	movs	r3, #0
 800936a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800936e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009372:	460b      	mov	r3, r1
 8009374:	4313      	orrs	r3, r2
 8009376:	d044      	beq.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009380:	2b05      	cmp	r3, #5
 8009382:	d825      	bhi.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8009384:	a201      	add	r2, pc, #4	@ (adr r2, 800938c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8009386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938a:	bf00      	nop
 800938c:	080093d9 	.word	0x080093d9
 8009390:	080093a5 	.word	0x080093a5
 8009394:	080093bb 	.word	0x080093bb
 8009398:	080093d9 	.word	0x080093d9
 800939c:	080093d9 	.word	0x080093d9
 80093a0:	080093d9 	.word	0x080093d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a8:	3308      	adds	r3, #8
 80093aa:	2101      	movs	r1, #1
 80093ac:	4618      	mov	r0, r3
 80093ae:	f001 fd25 	bl	800adfc <RCCEx_PLL2_Config>
 80093b2:	4603      	mov	r3, r0
 80093b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093b8:	e00f      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093be:	3328      	adds	r3, #40	@ 0x28
 80093c0:	2101      	movs	r1, #1
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fdcc 	bl	800af60 <RCCEx_PLL3_Config>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093ce:	e004      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093d0:	2301      	movs	r3, #1
 80093d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093d6:	e000      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80093d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10b      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80093e2:	4b6c      	ldr	r3, [pc, #432]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	f023 0107 	bic.w	r1, r3, #7
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	4a68      	ldr	r2, [pc, #416]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80093f8:	e003      	b.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940a:	f002 0320 	and.w	r3, r2, #32
 800940e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009412:	2300      	movs	r3, #0
 8009414:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009418:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800941c:	460b      	mov	r3, r1
 800941e:	4313      	orrs	r3, r2
 8009420:	d055      	beq.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800942a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800942e:	d033      	beq.n	8009498 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009430:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009434:	d82c      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009436:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800943a:	d02f      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800943c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009440:	d826      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009446:	d02b      	beq.n	80094a0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009448:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800944c:	d820      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800944e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009452:	d012      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8009454:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009458:	d81a      	bhi.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800945a:	2b00      	cmp	r3, #0
 800945c:	d022      	beq.n	80094a4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800945e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009462:	d115      	bne.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009468:	3308      	adds	r3, #8
 800946a:	2100      	movs	r1, #0
 800946c:	4618      	mov	r0, r3
 800946e:	f001 fcc5 	bl	800adfc <RCCEx_PLL2_Config>
 8009472:	4603      	mov	r3, r0
 8009474:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009478:	e015      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800947a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800947e:	3328      	adds	r3, #40	@ 0x28
 8009480:	2102      	movs	r1, #2
 8009482:	4618      	mov	r0, r3
 8009484:	f001 fd6c 	bl	800af60 <RCCEx_PLL3_Config>
 8009488:	4603      	mov	r3, r0
 800948a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800948e:	e00a      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009496:	e006      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009498:	bf00      	nop
 800949a:	e004      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800949c:	bf00      	nop
 800949e:	e002      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094a0:	bf00      	nop
 80094a2:	e000      	b.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094a6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10b      	bne.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094ae:	4b39      	ldr	r3, [pc, #228]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80094b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094be:	4a35      	ldr	r2, [pc, #212]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80094c0:	430b      	orrs	r3, r1
 80094c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80094c4:	e003      	b.n	80094ce <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094ca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80094ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80094da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094de:	2300      	movs	r3, #0
 80094e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80094e8:	460b      	mov	r3, r1
 80094ea:	4313      	orrs	r3, r2
 80094ec:	d058      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80094f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094fa:	d033      	beq.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80094fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009500:	d82c      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009506:	d02f      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800950c:	d826      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800950e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009512:	d02b      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8009514:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009518:	d820      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800951a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800951e:	d012      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009520:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009524:	d81a      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d022      	beq.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800952a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800952e:	d115      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009534:	3308      	adds	r3, #8
 8009536:	2100      	movs	r1, #0
 8009538:	4618      	mov	r0, r3
 800953a:	f001 fc5f 	bl	800adfc <RCCEx_PLL2_Config>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009544:	e015      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800954a:	3328      	adds	r3, #40	@ 0x28
 800954c:	2102      	movs	r1, #2
 800954e:	4618      	mov	r0, r3
 8009550:	f001 fd06 	bl	800af60 <RCCEx_PLL3_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800955a:	e00a      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009562:	e006      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009564:	bf00      	nop
 8009566:	e004      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009568:	bf00      	nop
 800956a:	e002      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800956c:	bf00      	nop
 800956e:	e000      	b.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009570:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009572:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009576:	2b00      	cmp	r3, #0
 8009578:	d10e      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800957a:	4b06      	ldr	r3, [pc, #24]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800957c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800958a:	4a02      	ldr	r2, [pc, #8]	@ (8009594 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800958c:	430b      	orrs	r3, r1
 800958e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009590:	e006      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8009592:	bf00      	nop
 8009594:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800959c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80095ac:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095b6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80095ba:	460b      	mov	r3, r1
 80095bc:	4313      	orrs	r3, r2
 80095be:	d055      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80095c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80095cc:	d033      	beq.n	8009636 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80095ce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80095d2:	d82c      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d8:	d02f      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80095da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095de:	d826      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80095e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095e4:	d02b      	beq.n	800963e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80095e6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80095ea:	d820      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80095ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095f0:	d012      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80095f2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095f6:	d81a      	bhi.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d022      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80095fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009600:	d115      	bne.n	800962e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009606:	3308      	adds	r3, #8
 8009608:	2100      	movs	r1, #0
 800960a:	4618      	mov	r0, r3
 800960c:	f001 fbf6 	bl	800adfc <RCCEx_PLL2_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009616:	e015      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961c:	3328      	adds	r3, #40	@ 0x28
 800961e:	2102      	movs	r1, #2
 8009620:	4618      	mov	r0, r3
 8009622:	f001 fc9d 	bl	800af60 <RCCEx_PLL3_Config>
 8009626:	4603      	mov	r3, r0
 8009628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800962c:	e00a      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009634:	e006      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009636:	bf00      	nop
 8009638:	e004      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800963a:	bf00      	nop
 800963c:	e002      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800963e:	bf00      	nop
 8009640:	e000      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009648:	2b00      	cmp	r3, #0
 800964a:	d10b      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800964c:	4ba0      	ldr	r3, [pc, #640]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800964e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009650:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009658:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800965c:	4a9c      	ldr	r2, [pc, #624]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800965e:	430b      	orrs	r3, r1
 8009660:	6593      	str	r3, [r2, #88]	@ 0x58
 8009662:	e003      	b.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009668:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800966c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009674:	f002 0308 	and.w	r3, r2, #8
 8009678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800967c:	2300      	movs	r3, #0
 800967e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009682:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009686:	460b      	mov	r3, r1
 8009688:	4313      	orrs	r3, r2
 800968a:	d01e      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009698:	d10c      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800969a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969e:	3328      	adds	r3, #40	@ 0x28
 80096a0:	2102      	movs	r1, #2
 80096a2:	4618      	mov	r0, r3
 80096a4:	f001 fc5c 	bl	800af60 <RCCEx_PLL3_Config>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80096b4:	4b86      	ldr	r3, [pc, #536]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096c4:	4a82      	ldr	r2, [pc, #520]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096c6:	430b      	orrs	r3, r1
 80096c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80096ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f002 0310 	and.w	r3, r2, #16
 80096d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096da:	2300      	movs	r3, #0
 80096dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096e0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80096e4:	460b      	mov	r3, r1
 80096e6:	4313      	orrs	r3, r2
 80096e8:	d01e      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80096ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80096f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096f6:	d10c      	bne.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fc:	3328      	adds	r3, #40	@ 0x28
 80096fe:	2102      	movs	r1, #2
 8009700:	4618      	mov	r0, r3
 8009702:	f001 fc2d 	bl	800af60 <RCCEx_PLL3_Config>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009712:	4b6f      	ldr	r3, [pc, #444]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009716:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800971a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800971e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009722:	4a6b      	ldr	r2, [pc, #428]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009724:	430b      	orrs	r3, r1
 8009726:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009736:	2300      	movs	r3, #0
 8009738:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800973a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800973e:	460b      	mov	r3, r1
 8009740:	4313      	orrs	r3, r2
 8009742:	d03e      	beq.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800974c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009750:	d022      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8009752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009756:	d81b      	bhi.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009758:	2b00      	cmp	r3, #0
 800975a:	d003      	beq.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800975c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009760:	d00b      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8009762:	e015      	b.n	8009790 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009768:	3308      	adds	r3, #8
 800976a:	2100      	movs	r1, #0
 800976c:	4618      	mov	r0, r3
 800976e:	f001 fb45 	bl	800adfc <RCCEx_PLL2_Config>
 8009772:	4603      	mov	r3, r0
 8009774:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009778:	e00f      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977e:	3328      	adds	r3, #40	@ 0x28
 8009780:	2102      	movs	r1, #2
 8009782:	4618      	mov	r0, r3
 8009784:	f001 fbec 	bl	800af60 <RCCEx_PLL3_Config>
 8009788:	4603      	mov	r3, r0
 800978a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800978e:	e004      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009796:	e000      	b.n	800979a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800979a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d10b      	bne.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097a2:	4b4b      	ldr	r3, [pc, #300]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80097aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097b2:	4a47      	ldr	r2, [pc, #284]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80097b8:	e003      	b.n	80097c2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80097ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80097d0:	2300      	movs	r3, #0
 80097d2:	677b      	str	r3, [r7, #116]	@ 0x74
 80097d4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80097d8:	460b      	mov	r3, r1
 80097da:	4313      	orrs	r3, r2
 80097dc:	d03b      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80097e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097ea:	d01f      	beq.n	800982c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80097ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097f0:	d818      	bhi.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80097f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097f6:	d003      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80097f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097fc:	d007      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80097fe:	e011      	b.n	8009824 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009800:	4b33      	ldr	r3, [pc, #204]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009804:	4a32      	ldr	r2, [pc, #200]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800980a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800980c:	e00f      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800980e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009812:	3328      	adds	r3, #40	@ 0x28
 8009814:	2101      	movs	r1, #1
 8009816:	4618      	mov	r0, r3
 8009818:	f001 fba2 	bl	800af60 <RCCEx_PLL3_Config>
 800981c:	4603      	mov	r3, r0
 800981e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8009822:	e004      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009824:	2301      	movs	r3, #1
 8009826:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800982a:	e000      	b.n	800982e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800982c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800982e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009832:	2b00      	cmp	r3, #0
 8009834:	d10b      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009836:	4b26      	ldr	r3, [pc, #152]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800983e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009846:	4a22      	ldr	r2, [pc, #136]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009848:	430b      	orrs	r3, r1
 800984a:	6553      	str	r3, [r2, #84]	@ 0x54
 800984c:	e003      	b.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800984e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009852:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009862:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009864:	2300      	movs	r3, #0
 8009866:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009868:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800986c:	460b      	mov	r3, r1
 800986e:	4313      	orrs	r3, r2
 8009870:	d034      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800987c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009880:	d007      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8009882:	e011      	b.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009884:	4b12      	ldr	r3, [pc, #72]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	4a11      	ldr	r2, [pc, #68]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800988a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800988e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009890:	e00e      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009896:	3308      	adds	r3, #8
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f001 faae 	bl	800adfc <RCCEx_PLL2_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80098a6:	e003      	b.n	80098b0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d10d      	bne.n	80098d4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098b8:	4b05      	ldr	r3, [pc, #20]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098c6:	4a02      	ldr	r2, [pc, #8]	@ (80098d0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098c8:	430b      	orrs	r3, r1
 80098ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80098cc:	e006      	b.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80098ce:	bf00      	nop
 80098d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80098e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80098ea:	2300      	movs	r3, #0
 80098ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80098ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80098f2:	460b      	mov	r3, r1
 80098f4:	4313      	orrs	r3, r2
 80098f6:	d00c      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fc:	3328      	adds	r3, #40	@ 0x28
 80098fe:	2102      	movs	r1, #2
 8009900:	4618      	mov	r0, r3
 8009902:	f001 fb2d 	bl	800af60 <RCCEx_PLL3_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800991e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009920:	2300      	movs	r3, #0
 8009922:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009924:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009928:	460b      	mov	r3, r1
 800992a:	4313      	orrs	r3, r2
 800992c:	d036      	beq.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800992e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009932:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009934:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009938:	d018      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800993a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800993e:	d811      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009940:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009944:	d014      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8009946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800994a:	d80b      	bhi.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d011      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009954:	d106      	bne.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009956:	4bb7      	ldr	r3, [pc, #732]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800995a:	4ab6      	ldr	r2, [pc, #728]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800995c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009962:	e008      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800996a:	e004      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800996c:	bf00      	nop
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009976:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800997e:	4bad      	ldr	r3, [pc, #692]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800998a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800998c:	4aa9      	ldr	r2, [pc, #676]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800998e:	430b      	orrs	r3, r1
 8009990:	6553      	str	r3, [r2, #84]	@ 0x54
 8009992:	e003      	b.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009994:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009998:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80099a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80099aa:	2300      	movs	r3, #0
 80099ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80099ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80099b2:	460b      	mov	r3, r1
 80099b4:	4313      	orrs	r3, r2
 80099b6:	d009      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099b8:	4b9e      	ldr	r3, [pc, #632]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099c6:	4a9b      	ldr	r2, [pc, #620]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099c8:	430b      	orrs	r3, r1
 80099ca:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80099d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099da:	2300      	movs	r3, #0
 80099dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099de:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80099e2:	460b      	mov	r3, r1
 80099e4:	4313      	orrs	r3, r2
 80099e6:	d009      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099e8:	4b92      	ldr	r3, [pc, #584]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ec:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80099f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099f6:	4a8f      	ldr	r2, [pc, #572]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099f8:	430b      	orrs	r3, r1
 80099fa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a0e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009a12:	460b      	mov	r3, r1
 8009a14:	4313      	orrs	r3, r2
 8009a16:	d00e      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a18:	4b86      	ldr	r3, [pc, #536]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	4a85      	ldr	r2, [pc, #532]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a22:	6113      	str	r3, [r2, #16]
 8009a24:	4b83      	ldr	r3, [pc, #524]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a26:	6919      	ldr	r1, [r3, #16]
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a30:	4a80      	ldr	r2, [pc, #512]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a32:	430b      	orrs	r3, r1
 8009a34:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a44:	2300      	movs	r3, #0
 8009a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a48:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	d009      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a52:	4b78      	ldr	r3, [pc, #480]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a60:	4a74      	ldr	r2, [pc, #464]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a62:	430b      	orrs	r3, r1
 8009a64:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009a72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a74:	2300      	movs	r3, #0
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a78:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	d00a      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a82:	4b6c      	ldr	r3, [pc, #432]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a92:	4a68      	ldr	r2, [pc, #416]	@ (8009c34 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a94:	430b      	orrs	r3, r1
 8009a96:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009aaa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	d011      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ab8:	3308      	adds	r3, #8
 8009aba:	2100      	movs	r1, #0
 8009abc:	4618      	mov	r0, r3
 8009abe:	f001 f99d 	bl	800adfc <RCCEx_PLL2_Config>
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009ad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	2100      	movs	r1, #0
 8009ae2:	6239      	str	r1, [r7, #32]
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009aea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009aee:	460b      	mov	r3, r1
 8009af0:	4313      	orrs	r3, r2
 8009af2:	d011      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af8:	3308      	adds	r3, #8
 8009afa:	2101      	movs	r1, #1
 8009afc:	4618      	mov	r0, r3
 8009afe:	f001 f97d 	bl	800adfc <RCCEx_PLL2_Config>
 8009b02:	4603      	mov	r3, r0
 8009b04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d003      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	2100      	movs	r1, #0
 8009b22:	61b9      	str	r1, [r7, #24]
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	61fb      	str	r3, [r7, #28]
 8009b2a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	4313      	orrs	r3, r2
 8009b32:	d011      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b38:	3308      	adds	r3, #8
 8009b3a:	2102      	movs	r1, #2
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f001 f95d 	bl	800adfc <RCCEx_PLL2_Config>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b54:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b60:	2100      	movs	r1, #0
 8009b62:	6139      	str	r1, [r7, #16]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	617b      	str	r3, [r7, #20]
 8009b6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	4313      	orrs	r3, r2
 8009b72:	d011      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b78:	3328      	adds	r3, #40	@ 0x28
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f001 f9ef 	bl	800af60 <RCCEx_PLL3_Config>
 8009b82:	4603      	mov	r3, r0
 8009b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b94:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009bae:	460b      	mov	r3, r1
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	d011      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb8:	3328      	adds	r3, #40	@ 0x28
 8009bba:	2101      	movs	r1, #1
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f001 f9cf 	bl	800af60 <RCCEx_PLL3_Config>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bd4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	2100      	movs	r1, #0
 8009be2:	6039      	str	r1, [r7, #0]
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	607b      	str	r3, [r7, #4]
 8009bea:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009bee:	460b      	mov	r3, r1
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	d011      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf8:	3328      	adds	r3, #40	@ 0x28
 8009bfa:	2102      	movs	r1, #2
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 f9af 	bl	800af60 <RCCEx_PLL3_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009c18:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d101      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e000      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009c24:	2301      	movs	r3, #1
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c32:	bf00      	nop
 8009c34:	58024400 	.word	0x58024400

08009c38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b090      	sub	sp, #64	@ 0x40
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c46:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	f040 8094 	bne.w	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c50:	4b9b      	ldr	r3, [pc, #620]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c54:	f003 0307 	and.w	r3, r3, #7
 8009c58:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	2b04      	cmp	r3, #4
 8009c5e:	f200 8087 	bhi.w	8009d70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c62:	a201      	add	r2, pc, #4	@ (adr r2, 8009c68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c68:	08009c7d 	.word	0x08009c7d
 8009c6c:	08009ca5 	.word	0x08009ca5
 8009c70:	08009ccd 	.word	0x08009ccd
 8009c74:	08009d69 	.word	0x08009d69
 8009c78:	08009cf5 	.word	0x08009cf5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c7c:	4b90      	ldr	r3, [pc, #576]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c88:	d108      	bne.n	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f000 ff62 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c98:	f000 bc93 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca0:	f000 bc8f 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009ca4:	4b86      	ldr	r3, [pc, #536]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009cac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cb0:	d108      	bne.n	8009cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cb2:	f107 0318 	add.w	r3, r7, #24
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fca6 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cc0:	f000 bc7f 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cc8:	f000 bc7b 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ccc:	4b7c      	ldr	r3, [pc, #496]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cd8:	d108      	bne.n	8009cec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cda:	f107 030c 	add.w	r3, r7, #12
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fde6 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ce8:	f000 bc6b 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cf0:	f000 bc67 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cf4:	4b72      	ldr	r3, [pc, #456]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cf8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cfe:	4b70      	ldr	r3, [pc, #448]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d10c      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d109      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d10:	4b6b      	ldr	r3, [pc, #428]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	08db      	lsrs	r3, r3, #3
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	4a6a      	ldr	r2, [pc, #424]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8009d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d22:	e01f      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d24:	4b66      	ldr	r3, [pc, #408]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d30:	d106      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d38:	d102      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d3a:	4b63      	ldr	r3, [pc, #396]	@ (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d3e:	e011      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d40:	4b5f      	ldr	r3, [pc, #380]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d4c:	d106      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d54:	d102      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d56:	4b5d      	ldr	r3, [pc, #372]	@ (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d5a:	e003      	b.n	8009d64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d60:	f000 bc2f 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d64:	f000 bc2d 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d68:	4b59      	ldr	r3, [pc, #356]	@ (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d6c:	f000 bc29 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d74:	f000 bc25 	b.w	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d7c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009d80:	430b      	orrs	r3, r1
 8009d82:	f040 80a7 	bne.w	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009d86:	4b4e      	ldr	r3, [pc, #312]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d8a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009d8e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d96:	d054      	beq.n	8009e42 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009d9e:	f200 808b 	bhi.w	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009da8:	f000 8083 	beq.w	8009eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009db2:	f200 8081 	bhi.w	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dbc:	d02f      	beq.n	8009e1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dc4:	d878      	bhi.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d004      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dd2:	d012      	beq.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009dd4:	e070      	b.n	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009dd6:	4b3a      	ldr	r3, [pc, #232]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009de2:	d107      	bne.n	8009df4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 feb5 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df2:	e3e6      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009df4:	2300      	movs	r3, #0
 8009df6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009df8:	e3e3      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dfa:	4b31      	ldr	r3, [pc, #196]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e06:	d107      	bne.n	8009e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e08:	f107 0318 	add.w	r3, r7, #24
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 fbfb 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e16:	e3d4      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e1c:	e3d1      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e1e:	4b28      	ldr	r3, [pc, #160]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e2a:	d107      	bne.n	8009e3c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e2c:	f107 030c 	add.w	r3, r7, #12
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 fd3d 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e3a:	e3c2      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e40:	e3bf      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e42:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 0304 	and.w	r3, r3, #4
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d10c      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009e58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d109      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e5e:	4b18      	ldr	r3, [pc, #96]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a16      	ldr	r2, [pc, #88]	@ (8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e70:	e01e      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e72:	4b13      	ldr	r3, [pc, #76]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e7e:	d106      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e88:	4b0f      	ldr	r3, [pc, #60]	@ (8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e8c:	e010      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e9a:	d106      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ea2:	d102      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ea4:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ea8:	e002      	b.n	8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009eae:	e388      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009eb0:	e387      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009eb2:	4b07      	ldr	r3, [pc, #28]	@ (8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eb6:	e384      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ebc:	e381      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ebe:	bf00      	nop
 8009ec0:	58024400 	.word	0x58024400
 8009ec4:	03d09000 	.word	0x03d09000
 8009ec8:	003d0900 	.word	0x003d0900
 8009ecc:	017d7840 	.word	0x017d7840
 8009ed0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ed8:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009edc:	430b      	orrs	r3, r1
 8009ede:	f040 809c 	bne.w	800a01a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ee6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009eea:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009ef2:	d054      	beq.n	8009f9e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009efa:	f200 808b 	bhi.w	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f00:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f04:	f000 8083 	beq.w	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f0e:	f200 8081 	bhi.w	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f18:	d02f      	beq.n	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f20:	d878      	bhi.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d004      	beq.n	8009f32 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f2e:	d012      	beq.n	8009f56 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009f30:	e070      	b.n	800a014 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f32:	4b8a      	ldr	r3, [pc, #552]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f3e:	d107      	bne.n	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f44:	4618      	mov	r0, r3
 8009f46:	f000 fe07 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f4e:	e338      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f50:	2300      	movs	r3, #0
 8009f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f54:	e335      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f56:	4b81      	ldr	r3, [pc, #516]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f62:	d107      	bne.n	8009f74 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f64:	f107 0318 	add.w	r3, r7, #24
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f000 fb4d 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f72:	e326      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f78:	e323      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f7a:	4b78      	ldr	r3, [pc, #480]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f86:	d107      	bne.n	8009f98 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f88:	f107 030c 	add.w	r3, r7, #12
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f000 fc8f 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f96:	e314      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f9c:	e311      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f9e:	4b6f      	ldr	r3, [pc, #444]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fa6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fa8:	4b6c      	ldr	r3, [pc, #432]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b04      	cmp	r3, #4
 8009fb2:	d10c      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d109      	bne.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fba:	4b68      	ldr	r3, [pc, #416]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	08db      	lsrs	r3, r3, #3
 8009fc0:	f003 0303 	and.w	r3, r3, #3
 8009fc4:	4a66      	ldr	r2, [pc, #408]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fcc:	e01e      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fce:	4b63      	ldr	r3, [pc, #396]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fda:	d106      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fe2:	d102      	bne.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fe4:	4b5f      	ldr	r3, [pc, #380]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fe8:	e010      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fea:	4b5c      	ldr	r3, [pc, #368]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ff2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ff6:	d106      	bne.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ffa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ffe:	d102      	bne.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a000:	4b59      	ldr	r3, [pc, #356]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a004:	e002      	b.n	800a00c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a00a:	e2da      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a00c:	e2d9      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a00e:	4b57      	ldr	r3, [pc, #348]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a012:	e2d6      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a014:	2300      	movs	r3, #0
 800a016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a018:	e2d3      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a01e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a022:	430b      	orrs	r3, r1
 800a024:	f040 80a7 	bne.w	800a176 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a028:	4b4c      	ldr	r3, [pc, #304]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a02a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a02c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a030:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a034:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a038:	d055      	beq.n	800a0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a040:	f200 8096 	bhi.w	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a046:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a04a:	f000 8084 	beq.w	800a156 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a04e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a050:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a054:	f200 808c 	bhi.w	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a05a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a05e:	d030      	beq.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a066:	f200 8083 	bhi.w	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d004      	beq.n	800a07a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a076:	d012      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a078:	e07a      	b.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a07a:	4b38      	ldr	r3, [pc, #224]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a086:	d107      	bne.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 fd63 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a096:	e294      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a098:	2300      	movs	r3, #0
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09c:	e291      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a09e:	4b2f      	ldr	r3, [pc, #188]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0aa:	d107      	bne.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0ac:	f107 0318 	add.w	r3, r7, #24
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 faa9 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	e282      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c0:	e27f      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0c2:	4b26      	ldr	r3, [pc, #152]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0ce:	d107      	bne.n	800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0d0:	f107 030c 	add.w	r3, r7, #12
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fbeb 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0de:	e270      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0e4:	e26d      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ea:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ee:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0f0:	4b1a      	ldr	r3, [pc, #104]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0304 	and.w	r3, r3, #4
 800a0f8:	2b04      	cmp	r3, #4
 800a0fa:	d10c      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a102:	4b16      	ldr	r3, [pc, #88]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	08db      	lsrs	r3, r3, #3
 800a108:	f003 0303 	and.w	r3, r3, #3
 800a10c:	4a14      	ldr	r2, [pc, #80]	@ (800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a10e:	fa22 f303 	lsr.w	r3, r2, r3
 800a112:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a114:	e01e      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a116:	4b11      	ldr	r3, [pc, #68]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a11e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a122:	d106      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a126:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a12a:	d102      	bne.n	800a132 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a12c:	4b0d      	ldr	r3, [pc, #52]	@ (800a164 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a130:	e010      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a132:	4b0a      	ldr	r3, [pc, #40]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a13a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a13e:	d106      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a146:	d102      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a148:	4b07      	ldr	r3, [pc, #28]	@ (800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a14c:	e002      	b.n	800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a152:	e236      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a154:	e235      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a156:	4b05      	ldr	r3, [pc, #20]	@ (800a16c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a15a:	e232      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	003d0900 	.word	0x003d0900
 800a168:	017d7840 	.word	0x017d7840
 800a16c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a170:	2300      	movs	r3, #0
 800a172:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a174:	e225      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a17a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a17e:	430b      	orrs	r3, r1
 800a180:	f040 8085 	bne.w	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a184:	4b9c      	ldr	r3, [pc, #624]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a188:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a18c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a18e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a194:	d06b      	beq.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a198:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a19c:	d874      	bhi.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a19e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1a4:	d056      	beq.n	800a254 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1ac:	d86c      	bhi.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1b4:	d03b      	beq.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1bc:	d864      	bhi.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1c4:	d021      	beq.n	800a20a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1cc:	d85c      	bhi.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d004      	beq.n	800a1de <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a1d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1da:	d004      	beq.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a1dc:	e054      	b.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a1de:	f7fe fb1d 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 800a1e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a1e4:	e1ed      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1e6:	4b84      	ldr	r3, [pc, #528]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f2:	d107      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f4:	f107 0318 	add.w	r3, r7, #24
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 fa05 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a202:	e1de      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a208:	e1db      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a20a:	4b7b      	ldr	r3, [pc, #492]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a216:	d107      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a218:	f107 030c 	add.w	r3, r7, #12
 800a21c:	4618      	mov	r0, r3
 800a21e:	f000 fb47 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a226:	e1cc      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22c:	e1c9      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a22e:	4b72      	ldr	r3, [pc, #456]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b04      	cmp	r3, #4
 800a238:	d109      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a23a:	4b6f      	ldr	r3, [pc, #444]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	08db      	lsrs	r3, r3, #3
 800a240:	f003 0303 	and.w	r3, r3, #3
 800a244:	4a6d      	ldr	r2, [pc, #436]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a246:	fa22 f303 	lsr.w	r3, r2, r3
 800a24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a24c:	e1b9      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a252:	e1b6      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a254:	4b68      	ldr	r3, [pc, #416]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a25c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a260:	d102      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a262:	4b67      	ldr	r3, [pc, #412]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a266:	e1ac      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a26c:	e1a9      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a26e:	4b62      	ldr	r3, [pc, #392]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a27a:	d102      	bne.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a27c:	4b61      	ldr	r3, [pc, #388]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a280:	e19f      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a282:	2300      	movs	r3, #0
 800a284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a286:	e19c      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a288:	2300      	movs	r3, #0
 800a28a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28c:	e199      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a28e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a292:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a296:	430b      	orrs	r3, r1
 800a298:	d173      	bne.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a29a:	4b57      	ldr	r3, [pc, #348]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a29e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a2a2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2aa:	d02f      	beq.n	800a30c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2b2:	d863      	bhi.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2c0:	d012      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a2c2:	e05b      	b.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2c4:	4b4c      	ldr	r3, [pc, #304]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2d0:	d107      	bne.n	800a2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2d2:	f107 0318 	add.w	r3, r7, #24
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f996 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2e0:	e16f      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2e6:	e16c      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2e8:	4b43      	ldr	r3, [pc, #268]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2f4:	d107      	bne.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2f6:	f107 030c 	add.w	r3, r7, #12
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f000 fad8 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a304:	e15d      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a306:	2300      	movs	r3, #0
 800a308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a30a:	e15a      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a30c:	4b3a      	ldr	r3, [pc, #232]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a30e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a310:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a314:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a316:	4b38      	ldr	r3, [pc, #224]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0304 	and.w	r3, r3, #4
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d10c      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a324:	2b00      	cmp	r3, #0
 800a326:	d109      	bne.n	800a33c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a328:	4b33      	ldr	r3, [pc, #204]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	08db      	lsrs	r3, r3, #3
 800a32e:	f003 0303 	and.w	r3, r3, #3
 800a332:	4a32      	ldr	r2, [pc, #200]	@ (800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a334:	fa22 f303 	lsr.w	r3, r2, r3
 800a338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a33a:	e01e      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a33c:	4b2e      	ldr	r3, [pc, #184]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a348:	d106      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a34a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a34c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a350:	d102      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a352:	4b2b      	ldr	r3, [pc, #172]	@ (800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a356:	e010      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a358:	4b27      	ldr	r3, [pc, #156]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a360:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a364:	d106      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a36c:	d102      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a36e:	4b25      	ldr	r3, [pc, #148]	@ (800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a372:	e002      	b.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a378:	e123      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a37a:	e122      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a380:	e11f      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a382:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a386:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a38a:	430b      	orrs	r3, r1
 800a38c:	d13c      	bne.n	800a408 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a38e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a392:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a396:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d004      	beq.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a4:	d012      	beq.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a3a6:	e023      	b.n	800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3a8:	4b13      	ldr	r3, [pc, #76]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3b4:	d107      	bne.n	800a3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f000 fbcc 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c4:	e0fd      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ca:	e0fa      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3d8:	d107      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3da:	f107 0318 	add.w	r3, r7, #24
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f000 f912 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a3e4:	6a3b      	ldr	r3, [r7, #32]
 800a3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3e8:	e0eb      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3ee:	e0e8      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3f4:	e0e5      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3f6:	bf00      	nop
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	03d09000 	.word	0x03d09000
 800a400:	003d0900 	.word	0x003d0900
 800a404:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a40c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a410:	430b      	orrs	r3, r1
 800a412:	f040 8085 	bne.w	800a520 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a416:	4b6d      	ldr	r3, [pc, #436]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a41a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a41e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a422:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a426:	d06b      	beq.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a42e:	d874      	bhi.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a436:	d056      	beq.n	800a4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a43e:	d86c      	bhi.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a446:	d03b      	beq.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a44e:	d864      	bhi.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a456:	d021      	beq.n	800a49c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a45e:	d85c      	bhi.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	2b00      	cmp	r3, #0
 800a464:	d004      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a468:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a46c:	d004      	beq.n	800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a46e:	e054      	b.n	800a51a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a470:	f000 f8b4 	bl	800a5dc <HAL_RCCEx_GetD3PCLK1Freq>
 800a474:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a476:	e0a4      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a478:	4b54      	ldr	r3, [pc, #336]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a484:	d107      	bne.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a486:	f107 0318 	add.w	r3, r7, #24
 800a48a:	4618      	mov	r0, r3
 800a48c:	f000 f8bc 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a494:	e095      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a496:	2300      	movs	r3, #0
 800a498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49a:	e092      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a49c:	4b4b      	ldr	r3, [pc, #300]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4a8:	d107      	bne.n	800a4ba <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4aa:	f107 030c 	add.w	r3, r7, #12
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 f9fe 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4b8:	e083      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4be:	e080      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4c0:	4b42      	ldr	r3, [pc, #264]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b04      	cmp	r3, #4
 800a4ca:	d109      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4cc:	4b3f      	ldr	r3, [pc, #252]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	08db      	lsrs	r3, r3, #3
 800a4d2:	f003 0303 	and.w	r3, r3, #3
 800a4d6:	4a3e      	ldr	r2, [pc, #248]	@ (800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4de:	e070      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4e4:	e06d      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a4e6:	4b39      	ldr	r3, [pc, #228]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4f2:	d102      	bne.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a4f4:	4b37      	ldr	r3, [pc, #220]	@ (800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a4f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f8:	e063      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fe:	e060      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a500:	4b32      	ldr	r3, [pc, #200]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a508:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a50c:	d102      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a50e:	4b32      	ldr	r3, [pc, #200]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a512:	e056      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a514:	2300      	movs	r3, #0
 800a516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a518:	e053      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a51a:	2300      	movs	r3, #0
 800a51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51e:	e050      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a520:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a524:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a528:	430b      	orrs	r3, r1
 800a52a:	d148      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a52e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a530:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a534:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a536:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a538:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a53c:	d02a      	beq.n	800a594 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a544:	d838      	bhi.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d004      	beq.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a54c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a54e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a552:	d00d      	beq.n	800a570 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a554:	e030      	b.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a556:	4b1d      	ldr	r3, [pc, #116]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a55e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a562:	d102      	bne.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a564:	4b1c      	ldr	r3, [pc, #112]	@ (800a5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a568:	e02b      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a56a:	2300      	movs	r3, #0
 800a56c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a56e:	e028      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a570:	4b16      	ldr	r3, [pc, #88]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a57c:	d107      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a582:	4618      	mov	r0, r3
 800a584:	f000 fae8 	bl	800ab58 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a58c:	e019      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a592:	e016      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a594:	4b0d      	ldr	r3, [pc, #52]	@ (800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a59c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5a0:	d107      	bne.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5a2:	f107 0318 	add.w	r3, r7, #24
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	f000 f82e 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5ac:	69fb      	ldr	r3, [r7, #28]
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5b0:	e007      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e004      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5bc:	e001      	b.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a5c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3740      	adds	r7, #64	@ 0x40
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}
 800a5cc:	58024400 	.word	0x58024400
 800a5d0:	03d09000 	.word	0x03d09000
 800a5d4:	003d0900 	.word	0x003d0900
 800a5d8:	017d7840 	.word	0x017d7840

0800a5dc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a5e0:	f7fe f8ec 	bl	80087bc <HAL_RCC_GetHCLKFreq>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	4b06      	ldr	r3, [pc, #24]	@ (800a600 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a5e8:	6a1b      	ldr	r3, [r3, #32]
 800a5ea:	091b      	lsrs	r3, r3, #4
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	4904      	ldr	r1, [pc, #16]	@ (800a604 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a5f2:	5ccb      	ldrb	r3, [r1, r3]
 800a5f4:	f003 031f 	and.w	r3, r3, #31
 800a5f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	58024400 	.word	0x58024400
 800a604:	08013d94 	.word	0x08013d94

0800a608 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a608:	b480      	push	{r7}
 800a60a:	b089      	sub	sp, #36	@ 0x24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a610:	4ba1      	ldr	r3, [pc, #644]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a614:	f003 0303 	and.w	r3, r3, #3
 800a618:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a61a:	4b9f      	ldr	r3, [pc, #636]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a61c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a61e:	0b1b      	lsrs	r3, r3, #12
 800a620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a624:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a626:	4b9c      	ldr	r3, [pc, #624]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a632:	4b99      	ldr	r3, [pc, #612]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a636:	08db      	lsrs	r3, r3, #3
 800a638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a63c:	693a      	ldr	r2, [r7, #16]
 800a63e:	fb02 f303 	mul.w	r3, r2, r3
 800a642:	ee07 3a90 	vmov	s15, r3
 800a646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a64e:	697b      	ldr	r3, [r7, #20]
 800a650:	2b00      	cmp	r3, #0
 800a652:	f000 8111 	beq.w	800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	2b02      	cmp	r3, #2
 800a65a:	f000 8083 	beq.w	800a764 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	2b02      	cmp	r3, #2
 800a662:	f200 80a1 	bhi.w	800a7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d003      	beq.n	800a674 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d056      	beq.n	800a720 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a672:	e099      	b.n	800a7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a674:	4b88      	ldr	r3, [pc, #544]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d02d      	beq.n	800a6dc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a680:	4b85      	ldr	r3, [pc, #532]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	08db      	lsrs	r3, r3, #3
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	4a84      	ldr	r2, [pc, #528]	@ (800a89c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
 800a690:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	ee07 3a90 	vmov	s15, r3
 800a698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	ee07 3a90 	vmov	s15, r3
 800a6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6aa:	4b7b      	ldr	r3, [pc, #492]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a6ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a6da:	e087      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a6ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ee:	4b6a      	ldr	r3, [pc, #424]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a702:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a70e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a71e:	e065      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	ee07 3a90 	vmov	s15, r3
 800a726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a72e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a732:	4b59      	ldr	r3, [pc, #356]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73a:	ee07 3a90 	vmov	s15, r3
 800a73e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a742:	ed97 6a03 	vldr	s12, [r7, #12]
 800a746:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a74a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a74e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a75e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a762:	e043      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a76e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a8ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a776:	4b48      	ldr	r3, [pc, #288]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a77a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77e:	ee07 3a90 	vmov	s15, r3
 800a782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a786:	ed97 6a03 	vldr	s12, [r7, #12]
 800a78a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a78e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a79a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a79e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7a6:	e021      	b.n	800a7ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a8a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b37      	ldr	r3, [pc, #220]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a7ec:	4b2a      	ldr	r3, [pc, #168]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a7f6:	ee07 3a90 	vmov	s15, r3
 800a7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a802:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a806:	edd7 6a07 	vldr	s13, [r7, #28]
 800a80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a80e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a812:	ee17 2a90 	vmov	r2, s15
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a81a:	4b1f      	ldr	r3, [pc, #124]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a81c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a81e:	0c1b      	lsrs	r3, r3, #16
 800a820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a824:	ee07 3a90 	vmov	s15, r3
 800a828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a82c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a830:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a834:	edd7 6a07 	vldr	s13, [r7, #28]
 800a838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a83c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a840:	ee17 2a90 	vmov	r2, s15
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a848:	4b13      	ldr	r3, [pc, #76]	@ (800a898 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a84a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a84c:	0e1b      	lsrs	r3, r3, #24
 800a84e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a852:	ee07 3a90 	vmov	s15, r3
 800a856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a85a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a85e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a862:	edd7 6a07 	vldr	s13, [r7, #28]
 800a866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a86a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a86e:	ee17 2a90 	vmov	r2, s15
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a876:	e008      	b.n	800a88a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2200      	movs	r2, #0
 800a87c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	609a      	str	r2, [r3, #8]
}
 800a88a:	bf00      	nop
 800a88c:	3724      	adds	r7, #36	@ 0x24
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	58024400 	.word	0x58024400
 800a89c:	03d09000 	.word	0x03d09000
 800a8a0:	46000000 	.word	0x46000000
 800a8a4:	4c742400 	.word	0x4c742400
 800a8a8:	4a742400 	.word	0x4a742400
 800a8ac:	4bbebc20 	.word	0x4bbebc20

0800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b089      	sub	sp, #36	@ 0x24
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8b8:	4ba1      	ldr	r3, [pc, #644]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8bc:	f003 0303 	and.w	r3, r3, #3
 800a8c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a8c2:	4b9f      	ldr	r3, [pc, #636]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8c6:	0d1b      	lsrs	r3, r3, #20
 800a8c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a8cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a8ce:	4b9c      	ldr	r3, [pc, #624]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	f003 0301 	and.w	r3, r3, #1
 800a8d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a8da:	4b99      	ldr	r3, [pc, #612]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8de:	08db      	lsrs	r3, r3, #3
 800a8e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	fb02 f303 	mul.w	r3, r2, r3
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f000 8111 	beq.w	800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b02      	cmp	r3, #2
 800a902:	f000 8083 	beq.w	800aa0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b02      	cmp	r3, #2
 800a90a:	f200 80a1 	bhi.w	800aa50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d003      	beq.n	800a91c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d056      	beq.n	800a9c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a91a:	e099      	b.n	800aa50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a91c:	4b88      	ldr	r3, [pc, #544]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d02d      	beq.n	800a984 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a928:	4b85      	ldr	r3, [pc, #532]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	08db      	lsrs	r3, r3, #3
 800a92e:	f003 0303 	and.w	r3, r3, #3
 800a932:	4a84      	ldr	r2, [pc, #528]	@ (800ab44 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	ee07 3a90 	vmov	s15, r3
 800a940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	ee07 3a90 	vmov	s15, r3
 800a94a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a952:	4b7b      	ldr	r3, [pc, #492]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a962:	ed97 6a03 	vldr	s12, [r7, #12]
 800a966:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a982:	e087      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab4c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a996:	4b6a      	ldr	r3, [pc, #424]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9c6:	e065      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	ee07 3a90 	vmov	s15, r3
 800a9ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a9d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9da:	4b59      	ldr	r3, [pc, #356]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e2:	ee07 3a90 	vmov	s15, r3
 800a9e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa0a:	e043      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab54 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa1e:	4b48      	ldr	r3, [pc, #288]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa26:	ee07 3a90 	vmov	s15, r3
 800aa2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa4e:	e021      	b.n	800aa94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab50 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa62:	4b37      	ldr	r3, [pc, #220]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6a:	ee07 3a90 	vmov	s15, r3
 800aa6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa72:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aa94:	4b2a      	ldr	r3, [pc, #168]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa98:	0a5b      	lsrs	r3, r3, #9
 800aa9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aaaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aaae:	edd7 6a07 	vldr	s13, [r7, #28]
 800aab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaba:	ee17 2a90 	vmov	r2, s15
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aac2:	4b1f      	ldr	r3, [pc, #124]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac6:	0c1b      	lsrs	r3, r3, #16
 800aac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aacc:	ee07 3a90 	vmov	s15, r3
 800aad0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aad8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aadc:	edd7 6a07 	vldr	s13, [r7, #28]
 800aae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aae4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aae8:	ee17 2a90 	vmov	r2, s15
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aaf0:	4b13      	ldr	r3, [pc, #76]	@ (800ab40 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf4:	0e1b      	lsrs	r3, r3, #24
 800aaf6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aafa:	ee07 3a90 	vmov	s15, r3
 800aafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab16:	ee17 2a90 	vmov	r2, s15
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab1e:	e008      	b.n	800ab32 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	609a      	str	r2, [r3, #8]
}
 800ab32:	bf00      	nop
 800ab34:	3724      	adds	r7, #36	@ 0x24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3c:	4770      	bx	lr
 800ab3e:	bf00      	nop
 800ab40:	58024400 	.word	0x58024400
 800ab44:	03d09000 	.word	0x03d09000
 800ab48:	46000000 	.word	0x46000000
 800ab4c:	4c742400 	.word	0x4c742400
 800ab50:	4a742400 	.word	0x4a742400
 800ab54:	4bbebc20 	.word	0x4bbebc20

0800ab58 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b089      	sub	sp, #36	@ 0x24
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab60:	4ba0      	ldr	r3, [pc, #640]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab64:	f003 0303 	and.w	r3, r3, #3
 800ab68:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ab6a:	4b9e      	ldr	r3, [pc, #632]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6e:	091b      	lsrs	r3, r3, #4
 800ab70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ab74:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ab76:	4b9b      	ldr	r3, [pc, #620]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab7a:	f003 0301 	and.w	r3, r3, #1
 800ab7e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ab80:	4b98      	ldr	r3, [pc, #608]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab84:	08db      	lsrs	r3, r3, #3
 800ab86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	fb02 f303 	mul.w	r3, r2, r3
 800ab90:	ee07 3a90 	vmov	s15, r3
 800ab94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab98:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	f000 8111 	beq.w	800adc6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	f000 8083 	beq.w	800acb2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800abac:	69bb      	ldr	r3, [r7, #24]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	f200 80a1 	bhi.w	800acf6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d056      	beq.n	800ac6e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800abc0:	e099      	b.n	800acf6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abc2:	4b88      	ldr	r3, [pc, #544]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f003 0320 	and.w	r3, r3, #32
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d02d      	beq.n	800ac2a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abce:	4b85      	ldr	r3, [pc, #532]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	08db      	lsrs	r3, r3, #3
 800abd4:	f003 0303 	and.w	r3, r3, #3
 800abd8:	4a83      	ldr	r2, [pc, #524]	@ (800ade8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800abda:	fa22 f303 	lsr.w	r3, r2, r3
 800abde:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	ee07 3a90 	vmov	s15, r3
 800abe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	ee07 3a90 	vmov	s15, r3
 800abf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abf8:	4b7a      	ldr	r3, [pc, #488]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac00:	ee07 3a90 	vmov	s15, r3
 800ac04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac08:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac0c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800adec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac18:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac24:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac28:	e087      	b.n	800ad3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	ee07 3a90 	vmov	s15, r3
 800ac30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac34:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800adf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac3c:	4b69      	ldr	r3, [pc, #420]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac44:	ee07 3a90 	vmov	s15, r3
 800ac48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac4c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac50:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800adec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ac6c:	e065      	b.n	800ad3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac78:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800adf4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ac7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac80:	4b58      	ldr	r3, [pc, #352]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac88:	ee07 3a90 	vmov	s15, r3
 800ac8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac90:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac94:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800adec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aca4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acb0:	e043      	b.n	800ad3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	ee07 3a90 	vmov	s15, r3
 800acb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acbc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800adf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800acc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acc4:	4b47      	ldr	r3, [pc, #284]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800accc:	ee07 3a90 	vmov	s15, r3
 800acd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acd4:	ed97 6a03 	vldr	s12, [r7, #12]
 800acd8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800adec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acdc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ace4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ace8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acf4:	e021      	b.n	800ad3a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	ee07 3a90 	vmov	s15, r3
 800acfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad00:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800adf0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad08:	4b36      	ldr	r3, [pc, #216]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad10:	ee07 3a90 	vmov	s15, r3
 800ad14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad18:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad1c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800adec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad38:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad3a:	4b2a      	ldr	r3, [pc, #168]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3e:	0a5b      	lsrs	r3, r3, #9
 800ad40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad60:	ee17 2a90 	vmov	r2, s15
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ad68:	4b1e      	ldr	r3, [pc, #120]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad6c:	0c1b      	lsrs	r3, r3, #16
 800ad6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad8e:	ee17 2a90 	vmov	r2, s15
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ad96:	4b13      	ldr	r3, [pc, #76]	@ (800ade4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad9a:	0e1b      	lsrs	r3, r3, #24
 800ad9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ada0:	ee07 3a90 	vmov	s15, r3
 800ada4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800adb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adbc:	ee17 2a90 	vmov	r2, s15
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800adc4:	e008      	b.n	800add8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	609a      	str	r2, [r3, #8]
}
 800add8:	bf00      	nop
 800adda:	3724      	adds	r7, #36	@ 0x24
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	58024400 	.word	0x58024400
 800ade8:	03d09000 	.word	0x03d09000
 800adec:	46000000 	.word	0x46000000
 800adf0:	4c742400 	.word	0x4c742400
 800adf4:	4a742400 	.word	0x4a742400
 800adf8:	4bbebc20 	.word	0x4bbebc20

0800adfc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae06:	2300      	movs	r3, #0
 800ae08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae0a:	4b53      	ldr	r3, [pc, #332]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae0e:	f003 0303 	and.w	r3, r3, #3
 800ae12:	2b03      	cmp	r3, #3
 800ae14:	d101      	bne.n	800ae1a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e099      	b.n	800af4e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae1a:	4b4f      	ldr	r3, [pc, #316]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	4a4e      	ldr	r2, [pc, #312]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae20:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae26:	f7f8 faf3 	bl	8003410 <HAL_GetTick>
 800ae2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae2c:	e008      	b.n	800ae40 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae2e:	f7f8 faef 	bl	8003410 <HAL_GetTick>
 800ae32:	4602      	mov	r2, r0
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	1ad3      	subs	r3, r2, r3
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	d901      	bls.n	800ae40 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	e086      	b.n	800af4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae40:	4b45      	ldr	r3, [pc, #276]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f0      	bne.n	800ae2e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae4c:	4b42      	ldr	r3, [pc, #264]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	031b      	lsls	r3, r3, #12
 800ae5a:	493f      	ldr	r1, [pc, #252]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae5c:	4313      	orrs	r3, r2
 800ae5e:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	025b      	lsls	r3, r3, #9
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	431a      	orrs	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	68db      	ldr	r3, [r3, #12]
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae82:	431a      	orrs	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	691b      	ldr	r3, [r3, #16]
 800ae88:	3b01      	subs	r3, #1
 800ae8a:	061b      	lsls	r3, r3, #24
 800ae8c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae90:	4931      	ldr	r1, [pc, #196]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae92:	4313      	orrs	r3, r2
 800ae94:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ae96:	4b30      	ldr	r3, [pc, #192]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800ae98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	695b      	ldr	r3, [r3, #20]
 800aea2:	492d      	ldr	r1, [pc, #180]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aea4:	4313      	orrs	r3, r2
 800aea6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aea8:	4b2b      	ldr	r3, [pc, #172]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aeaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeac:	f023 0220 	bic.w	r2, r3, #32
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	4928      	ldr	r1, [pc, #160]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aeba:	4b27      	ldr	r3, [pc, #156]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebe:	4a26      	ldr	r2, [pc, #152]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aec0:	f023 0310 	bic.w	r3, r3, #16
 800aec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aec6:	4b24      	ldr	r3, [pc, #144]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aec8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aeca:	4b24      	ldr	r3, [pc, #144]	@ (800af5c <RCCEx_PLL2_Config+0x160>)
 800aecc:	4013      	ands	r3, r2
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	69d2      	ldr	r2, [r2, #28]
 800aed2:	00d2      	lsls	r2, r2, #3
 800aed4:	4920      	ldr	r1, [pc, #128]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aed6:	4313      	orrs	r3, r2
 800aed8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800aeda:	4b1f      	ldr	r3, [pc, #124]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	4a1e      	ldr	r2, [pc, #120]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aee0:	f043 0310 	orr.w	r3, r3, #16
 800aee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d106      	bne.n	800aefa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800aeec:	4b1a      	ldr	r3, [pc, #104]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	4a19      	ldr	r2, [pc, #100]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800aef2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aef8:	e00f      	b.n	800af1a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d106      	bne.n	800af0e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af00:	4b15      	ldr	r3, [pc, #84]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af04:	4a14      	ldr	r2, [pc, #80]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af0c:	e005      	b.n	800af1a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af0e:	4b12      	ldr	r3, [pc, #72]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af12:	4a11      	ldr	r2, [pc, #68]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af14:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af18:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af1a:	4b0f      	ldr	r3, [pc, #60]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a0e      	ldr	r2, [pc, #56]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af26:	f7f8 fa73 	bl	8003410 <HAL_GetTick>
 800af2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af2c:	e008      	b.n	800af40 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af2e:	f7f8 fa6f 	bl	8003410 <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	2b02      	cmp	r3, #2
 800af3a:	d901      	bls.n	800af40 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e006      	b.n	800af4e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <RCCEx_PLL2_Config+0x15c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d0f0      	beq.n	800af2e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}
 800af56:	bf00      	nop
 800af58:	58024400 	.word	0x58024400
 800af5c:	ffff0007 	.word	0xffff0007

0800af60 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af6e:	4b53      	ldr	r3, [pc, #332]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800af70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	2b03      	cmp	r3, #3
 800af78:	d101      	bne.n	800af7e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	e099      	b.n	800b0b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800af7e:	4b4f      	ldr	r3, [pc, #316]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a4e      	ldr	r2, [pc, #312]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800af84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af8a:	f7f8 fa41 	bl	8003410 <HAL_GetTick>
 800af8e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800af90:	e008      	b.n	800afa4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af92:	f7f8 fa3d 	bl	8003410 <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d901      	bls.n	800afa4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e086      	b.n	800b0b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afa4:	4b45      	ldr	r3, [pc, #276]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afac:	2b00      	cmp	r3, #0
 800afae:	d1f0      	bne.n	800af92 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800afb0:	4b42      	ldr	r3, [pc, #264]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800afb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	051b      	lsls	r3, r3, #20
 800afbe:	493f      	ldr	r1, [pc, #252]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800afc0:	4313      	orrs	r3, r2
 800afc2:	628b      	str	r3, [r1, #40]	@ 0x28
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	3b01      	subs	r3, #1
 800afca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	025b      	lsls	r3, r3, #9
 800afd6:	b29b      	uxth	r3, r3
 800afd8:	431a      	orrs	r2, r3
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	3b01      	subs	r3, #1
 800afe0:	041b      	lsls	r3, r3, #16
 800afe2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afe6:	431a      	orrs	r2, r3
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	3b01      	subs	r3, #1
 800afee:	061b      	lsls	r3, r3, #24
 800aff0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aff4:	4931      	ldr	r1, [pc, #196]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800affa:	4b30      	ldr	r3, [pc, #192]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800affc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	695b      	ldr	r3, [r3, #20]
 800b006:	492d      	ldr	r1, [pc, #180]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b00c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b010:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	699b      	ldr	r3, [r3, #24]
 800b018:	4928      	ldr	r1, [pc, #160]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b01e:	4b27      	ldr	r3, [pc, #156]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b022:	4a26      	ldr	r2, [pc, #152]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b028:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b02a:	4b24      	ldr	r3, [pc, #144]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b02c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b02e:	4b24      	ldr	r3, [pc, #144]	@ (800b0c0 <RCCEx_PLL3_Config+0x160>)
 800b030:	4013      	ands	r3, r2
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	69d2      	ldr	r2, [r2, #28]
 800b036:	00d2      	lsls	r2, r2, #3
 800b038:	4920      	ldr	r1, [pc, #128]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b03e:	4b1f      	ldr	r3, [pc, #124]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b042:	4a1e      	ldr	r2, [pc, #120]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b048:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d106      	bne.n	800b05e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b050:	4b1a      	ldr	r3, [pc, #104]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b054:	4a19      	ldr	r2, [pc, #100]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b056:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b05a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b05c:	e00f      	b.n	800b07e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d106      	bne.n	800b072 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b064:	4b15      	ldr	r3, [pc, #84]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b068:	4a14      	ldr	r2, [pc, #80]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b06a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b06e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b070:	e005      	b.n	800b07e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b072:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b076:	4a11      	ldr	r2, [pc, #68]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b078:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b07c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b07e:	4b0f      	ldr	r3, [pc, #60]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4a0e      	ldr	r2, [pc, #56]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b08a:	f7f8 f9c1 	bl	8003410 <HAL_GetTick>
 800b08e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b090:	e008      	b.n	800b0a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b092:	f7f8 f9bd 	bl	8003410 <HAL_GetTick>
 800b096:	4602      	mov	r2, r0
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d901      	bls.n	800b0a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	e006      	b.n	800b0b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0a4:	4b05      	ldr	r3, [pc, #20]	@ (800b0bc <RCCEx_PLL3_Config+0x15c>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0f0      	beq.n	800b092 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	3710      	adds	r7, #16
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	ffff0007 	.word	0xffff0007

0800b0c4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08a      	sub	sp, #40	@ 0x28
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d101      	bne.n	800b0d6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e201      	b.n	800b4da <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d113      	bne.n	800b108 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a99      	ldr	r2, [pc, #612]	@ (800b34c <HAL_SAI_Init+0x288>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d004      	beq.n	800b0f4 <HAL_SAI_Init+0x30>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a98      	ldr	r2, [pc, #608]	@ (800b350 <HAL_SAI_Init+0x28c>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d107      	bne.n	800b104 <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d103      	bne.n	800b104 <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b100:	2b00      	cmp	r3, #0
 800b102:	d001      	beq.n	800b108 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800b104:	2301      	movs	r3, #1
 800b106:	e1e8      	b.n	800b4da <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a8f      	ldr	r2, [pc, #572]	@ (800b34c <HAL_SAI_Init+0x288>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d004      	beq.n	800b11c <HAL_SAI_Init+0x58>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a8f      	ldr	r2, [pc, #572]	@ (800b354 <HAL_SAI_Init+0x290>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d102      	bne.n	800b122 <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800b11c:	4b8e      	ldr	r3, [pc, #568]	@ (800b358 <HAL_SAI_Init+0x294>)
 800b11e:	61bb      	str	r3, [r7, #24]
 800b120:	e00e      	b.n	800b140 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a8a      	ldr	r2, [pc, #552]	@ (800b350 <HAL_SAI_Init+0x28c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d004      	beq.n	800b136 <HAL_SAI_Init+0x72>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a8a      	ldr	r2, [pc, #552]	@ (800b35c <HAL_SAI_Init+0x298>)
 800b132:	4293      	cmp	r3, r2
 800b134:	d102      	bne.n	800b13c <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800b136:	4b8a      	ldr	r3, [pc, #552]	@ (800b360 <HAL_SAI_Init+0x29c>)
 800b138:	61bb      	str	r3, [r7, #24]
 800b13a:	e001      	b.n	800b140 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e1cc      	b.n	800b4da <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b146:	b2db      	uxtb	r3, r3
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d106      	bne.n	800b15a <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f7f7 fa53 	bl	8002600 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f9cc 	bl	800b4f8 <SAI_Disable>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e1b7      	b.n	800b4da <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2202      	movs	r2, #2
 800b16e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	68db      	ldr	r3, [r3, #12]
 800b176:	2b02      	cmp	r3, #2
 800b178:	d00c      	beq.n	800b194 <HAL_SAI_Init+0xd0>
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d80d      	bhi.n	800b19a <HAL_SAI_Init+0xd6>
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d002      	beq.n	800b188 <HAL_SAI_Init+0xc4>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d003      	beq.n	800b18e <HAL_SAI_Init+0xca>
 800b186:	e008      	b.n	800b19a <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b188:	2300      	movs	r3, #0
 800b18a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b18c:	e008      	b.n	800b1a0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b18e:	2310      	movs	r3, #16
 800b190:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b192:	e005      	b.n	800b1a0 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b194:	2320      	movs	r3, #32
 800b196:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b198:	e002      	b.n	800b1a0 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b19e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	2b05      	cmp	r3, #5
 800b1a6:	d822      	bhi.n	800b1ee <HAL_SAI_Init+0x12a>
 800b1a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1b0 <HAL_SAI_Init+0xec>)
 800b1aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ae:	bf00      	nop
 800b1b0:	0800b1c9 	.word	0x0800b1c9
 800b1b4:	0800b1cf 	.word	0x0800b1cf
 800b1b8:	0800b1d7 	.word	0x0800b1d7
 800b1bc:	0800b1ef 	.word	0x0800b1ef
 800b1c0:	0800b1ef 	.word	0x0800b1ef
 800b1c4:	0800b1df 	.word	0x0800b1df
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61fb      	str	r3, [r7, #28]
      break;
 800b1cc:	e012      	b.n	800b1f4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1d2:	61fb      	str	r3, [r7, #28]
      break;
 800b1d4:	e00e      	b.n	800b1f4 <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1da:	61fb      	str	r3, [r7, #28]
      break;
 800b1dc:	e00a      	b.n	800b1f4 <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b1de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b1e2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e6:	f043 0303 	orr.w	r3, r3, #3
 800b1ea:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1ec:	e002      	b.n	800b1f4 <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	61fb      	str	r3, [r7, #28]
      break;
 800b1f2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 808a 	beq.w	800b318 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a4f      	ldr	r2, [pc, #316]	@ (800b34c <HAL_SAI_Init+0x288>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d004      	beq.n	800b21c <HAL_SAI_Init+0x158>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a4f      	ldr	r2, [pc, #316]	@ (800b354 <HAL_SAI_Init+0x290>)
 800b218:	4293      	cmp	r3, r2
 800b21a:	d106      	bne.n	800b22a <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b21c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b220:	f04f 0100 	mov.w	r1, #0
 800b224:	f7fe fd08 	bl	8009c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800b228:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a48      	ldr	r2, [pc, #288]	@ (800b350 <HAL_SAI_Init+0x28c>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d106      	bne.n	800b242 <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b234:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b238:	f04f 0100 	mov.w	r1, #0
 800b23c:	f7fe fcfc 	bl	8009c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800b240:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a45      	ldr	r2, [pc, #276]	@ (800b35c <HAL_SAI_Init+0x298>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d106      	bne.n	800b25a <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b24c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b250:	f04f 0100 	mov.w	r1, #0
 800b254:	f7fe fcf0 	bl	8009c38 <HAL_RCCEx_GetPeriphCLKFreq>
 800b258:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b262:	d120      	bne.n	800b2a6 <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d102      	bne.n	800b272 <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b26c:	2340      	movs	r3, #64	@ 0x40
 800b26e:	60fb      	str	r3, [r7, #12]
 800b270:	e00a      	b.n	800b288 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b276:	2b08      	cmp	r3, #8
 800b278:	d103      	bne.n	800b282 <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b27a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	e002      	b.n	800b288 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b286:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b288:	697a      	ldr	r2, [r7, #20]
 800b28a:	4613      	mov	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	4619      	mov	r1, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a1b      	ldr	r3, [r3, #32]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	e017      	b.n	800b2d6 <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2aa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2ae:	d101      	bne.n	800b2b4 <HAL_SAI_Init+0x1f0>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	e000      	b.n	800b2b6 <HAL_SAI_Init+0x1f2>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b2b8:	697a      	ldr	r2, [r7, #20]
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	009b      	lsls	r3, r3, #2
 800b2be:	4413      	add	r3, r2
 800b2c0:	005b      	lsls	r3, r3, #1
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	68ba      	ldr	r2, [r7, #8]
 800b2ca:	fb02 f303 	mul.w	r3, r2, r3
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2d4:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	4a22      	ldr	r2, [pc, #136]	@ (800b364 <HAL_SAI_Init+0x2a0>)
 800b2da:	fba2 2303 	umull	r2, r3, r2, r3
 800b2de:	08da      	lsrs	r2, r3, #3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b2e4:	6939      	ldr	r1, [r7, #16]
 800b2e6:	4b1f      	ldr	r3, [pc, #124]	@ (800b364 <HAL_SAI_Init+0x2a0>)
 800b2e8:	fba3 2301 	umull	r2, r3, r3, r1
 800b2ec:	08da      	lsrs	r2, r3, #3
 800b2ee:	4613      	mov	r3, r2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	1aca      	subs	r2, r1, r3
 800b2f8:	2a08      	cmp	r2, #8
 800b2fa:	d904      	bls.n	800b306 <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b300:	1c5a      	adds	r2, r3, #1
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b30a:	2b04      	cmp	r3, #4
 800b30c:	d104      	bne.n	800b318 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b312:	085a      	lsrs	r2, r3, #1
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <HAL_SAI_Init+0x264>
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	2b02      	cmp	r3, #2
 800b326:	d109      	bne.n	800b33c <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d101      	bne.n	800b334 <HAL_SAI_Init+0x270>
 800b330:	2300      	movs	r3, #0
 800b332:	e001      	b.n	800b338 <HAL_SAI_Init+0x274>
 800b334:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b338:	623b      	str	r3, [r7, #32]
 800b33a:	e017      	b.n	800b36c <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b340:	2b01      	cmp	r3, #1
 800b342:	d111      	bne.n	800b368 <HAL_SAI_Init+0x2a4>
 800b344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b348:	e00f      	b.n	800b36a <HAL_SAI_Init+0x2a6>
 800b34a:	bf00      	nop
 800b34c:	40015804 	.word	0x40015804
 800b350:	58005404 	.word	0x58005404
 800b354:	40015824 	.word	0x40015824
 800b358:	40015800 	.word	0x40015800
 800b35c:	58005424 	.word	0x58005424
 800b360:	58005400 	.word	0x58005400
 800b364:	cccccccd 	.word	0xcccccccd
 800b368:	2300      	movs	r3, #0
 800b36a:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	6819      	ldr	r1, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	4b5b      	ldr	r3, [pc, #364]	@ (800b4e4 <HAL_SAI_Init+0x420>)
 800b378:	400b      	ands	r3, r1
 800b37a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6819      	ldr	r1, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b38a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b390:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b396:	431a      	orrs	r2, r3
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800b3a4:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3b0:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3b6:	051b      	lsls	r3, r3, #20
 800b3b8:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3be:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	430a      	orrs	r2, r1
 800b3cc:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6859      	ldr	r1, [r3, #4]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b43      	ldr	r3, [pc, #268]	@ (800b4e8 <HAL_SAI_Init+0x424>)
 800b3da:	400b      	ands	r3, r1
 800b3dc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	6859      	ldr	r1, [r3, #4]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	69da      	ldr	r2, [r3, #28]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	6899      	ldr	r1, [r3, #8]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	4b39      	ldr	r3, [pc, #228]	@ (800b4ec <HAL_SAI_Init+0x428>)
 800b408:	400b      	ands	r3, r1
 800b40a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	6899      	ldr	r1, [r3, #8]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b416:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b41c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b422:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b428:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b42e:	3b01      	subs	r3, #1
 800b430:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b432:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	430a      	orrs	r2, r1
 800b43a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	68d9      	ldr	r1, [r3, #12]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b44a:	400b      	ands	r3, r1
 800b44c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68d9      	ldr	r1, [r3, #12]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b45c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b462:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b464:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b46a:	3b01      	subs	r3, #1
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	430a      	orrs	r2, r1
 800b476:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a1c      	ldr	r2, [pc, #112]	@ (800b4f0 <HAL_SAI_Init+0x42c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d004      	beq.n	800b48c <HAL_SAI_Init+0x3c8>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a1b      	ldr	r2, [pc, #108]	@ (800b4f4 <HAL_SAI_Init+0x430>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d119      	bne.n	800b4c0 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b490:	f023 0201 	bic.w	r2, r3, #1
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d10e      	bne.n	800b4c0 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4ae:	431a      	orrs	r2, r3
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4b8:	f043 0201 	orr.w	r2, r3, #1
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3728      	adds	r7, #40	@ 0x28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}
 800b4e2:	bf00      	nop
 800b4e4:	f005c010 	.word	0xf005c010
 800b4e8:	ffff1ff0 	.word	0xffff1ff0
 800b4ec:	fff88000 	.word	0xfff88000
 800b4f0:	40015804 	.word	0x40015804
 800b4f4:	58005404 	.word	0x58005404

0800b4f8 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b500:	4b18      	ldr	r3, [pc, #96]	@ (800b564 <SAI_Disable+0x6c>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a18      	ldr	r2, [pc, #96]	@ (800b568 <SAI_Disable+0x70>)
 800b506:	fba2 2303 	umull	r2, r3, r2, r3
 800b50a:	0b1b      	lsrs	r3, r3, #12
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b510:	2300      	movs	r3, #0
 800b512:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b522:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b530:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	72fb      	strb	r3, [r7, #11]
      break;
 800b53e:	e009      	b.n	800b554 <SAI_Disable+0x5c>
    }
    count--;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	3b01      	subs	r3, #1
 800b544:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b550:	2b00      	cmp	r3, #0
 800b552:	d1e7      	bne.n	800b524 <SAI_Disable+0x2c>

  return status;
 800b554:	7afb      	ldrb	r3, [r7, #11]
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	24000004 	.word	0x24000004
 800b568:	95cbec1b 	.word	0x95cbec1b

0800b56c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d101      	bne.n	800b57e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e049      	b.n	800b612 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d106      	bne.n	800b598 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 f841 	bl	800b61a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	3304      	adds	r3, #4
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	4610      	mov	r0, r2
 800b5ac:	f000 fb60 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2201      	movs	r2, #1
 800b5b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2201      	movs	r2, #1
 800b5dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3708      	adds	r7, #8
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b083      	sub	sp, #12
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b622:	bf00      	nop
 800b624:	370c      	adds	r7, #12
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b630:	b480      	push	{r7}
 800b632:	b085      	sub	sp, #20
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b01      	cmp	r3, #1
 800b642:	d001      	beq.n	800b648 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e05e      	b.n	800b706 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2202      	movs	r2, #2
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68da      	ldr	r2, [r3, #12]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f042 0201 	orr.w	r2, r2, #1
 800b65e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a2b      	ldr	r2, [pc, #172]	@ (800b714 <HAL_TIM_Base_Start_IT+0xe4>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d02c      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b672:	d027      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a27      	ldr	r2, [pc, #156]	@ (800b718 <HAL_TIM_Base_Start_IT+0xe8>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d022      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a26      	ldr	r2, [pc, #152]	@ (800b71c <HAL_TIM_Base_Start_IT+0xec>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d01d      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a24      	ldr	r2, [pc, #144]	@ (800b720 <HAL_TIM_Base_Start_IT+0xf0>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d018      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a23      	ldr	r2, [pc, #140]	@ (800b724 <HAL_TIM_Base_Start_IT+0xf4>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d013      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a21      	ldr	r2, [pc, #132]	@ (800b728 <HAL_TIM_Base_Start_IT+0xf8>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00e      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4a20      	ldr	r2, [pc, #128]	@ (800b72c <HAL_TIM_Base_Start_IT+0xfc>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d009      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a1e      	ldr	r2, [pc, #120]	@ (800b730 <HAL_TIM_Base_Start_IT+0x100>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d004      	beq.n	800b6c4 <HAL_TIM_Base_Start_IT+0x94>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a1d      	ldr	r2, [pc, #116]	@ (800b734 <HAL_TIM_Base_Start_IT+0x104>)
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d115      	bne.n	800b6f0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	689a      	ldr	r2, [r3, #8]
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <HAL_TIM_Base_Start_IT+0x108>)
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2b06      	cmp	r3, #6
 800b6d4:	d015      	beq.n	800b702 <HAL_TIM_Base_Start_IT+0xd2>
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6dc:	d011      	beq.n	800b702 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	681a      	ldr	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f042 0201 	orr.w	r2, r2, #1
 800b6ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6ee:	e008      	b.n	800b702 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f042 0201 	orr.w	r2, r2, #1
 800b6fe:	601a      	str	r2, [r3, #0]
 800b700:	e000      	b.n	800b704 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b702:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3714      	adds	r7, #20
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
 800b712:	bf00      	nop
 800b714:	40010000 	.word	0x40010000
 800b718:	40000400 	.word	0x40000400
 800b71c:	40000800 	.word	0x40000800
 800b720:	40000c00 	.word	0x40000c00
 800b724:	40010400 	.word	0x40010400
 800b728:	40001800 	.word	0x40001800
 800b72c:	40014000 	.word	0x40014000
 800b730:	4000e000 	.word	0x4000e000
 800b734:	4000e400 	.word	0x4000e400
 800b738:	00010007 	.word	0x00010007

0800b73c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d101      	bne.n	800b74e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e049      	b.n	800b7e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b00      	cmp	r3, #0
 800b758:	d106      	bne.n	800b768 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f7f7 fb40 	bl	8002de8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681a      	ldr	r2, [r3, #0]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	3304      	adds	r3, #4
 800b778:	4619      	mov	r1, r3
 800b77a:	4610      	mov	r0, r2
 800b77c:	f000 fa78 	bl	800bc70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2201      	movs	r2, #1
 800b784:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2201      	movs	r2, #1
 800b78c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2201      	movs	r2, #1
 800b79c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	68db      	ldr	r3, [r3, #12]
 800b7f8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	691b      	ldr	r3, [r3, #16]
 800b800:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	f003 0302 	and.w	r3, r3, #2
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d020      	beq.n	800b84e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f003 0302 	and.w	r3, r3, #2
 800b812:	2b00      	cmp	r3, #0
 800b814:	d01b      	beq.n	800b84e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f06f 0202 	mvn.w	r2, #2
 800b81e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	f003 0303 	and.w	r3, r3, #3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d003      	beq.n	800b83c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	f000 f9fd 	bl	800bc34 <HAL_TIM_IC_CaptureCallback>
 800b83a:	e005      	b.n	800b848 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f000 f9ef 	bl	800bc20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fa00 	bl	800bc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	f003 0304 	and.w	r3, r3, #4
 800b854:	2b00      	cmp	r3, #0
 800b856:	d020      	beq.n	800b89a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01b      	beq.n	800b89a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f06f 0204 	mvn.w	r2, #4
 800b86a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d003      	beq.n	800b888 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f9d7 	bl	800bc34 <HAL_TIM_IC_CaptureCallback>
 800b886:	e005      	b.n	800b894 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f9c9 	bl	800bc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f9da 	bl	800bc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	f003 0308 	and.w	r3, r3, #8
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d020      	beq.n	800b8e6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f003 0308 	and.w	r3, r3, #8
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d01b      	beq.n	800b8e6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f06f 0208 	mvn.w	r2, #8
 800b8b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2204      	movs	r2, #4
 800b8bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	69db      	ldr	r3, [r3, #28]
 800b8c4:	f003 0303 	and.w	r3, r3, #3
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d003      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f9b1 	bl	800bc34 <HAL_TIM_IC_CaptureCallback>
 800b8d2:	e005      	b.n	800b8e0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 f9a3 	bl	800bc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 f9b4 	bl	800bc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2200      	movs	r2, #0
 800b8e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	f003 0310 	and.w	r3, r3, #16
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d020      	beq.n	800b932 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f003 0310 	and.w	r3, r3, #16
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d01b      	beq.n	800b932 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f06f 0210 	mvn.w	r2, #16
 800b902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2208      	movs	r2, #8
 800b908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	69db      	ldr	r3, [r3, #28]
 800b910:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 f98b 	bl	800bc34 <HAL_TIM_IC_CaptureCallback>
 800b91e:	e005      	b.n	800b92c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f97d 	bl	800bc20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 f98e 	bl	800bc48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	f003 0301 	and.w	r3, r3, #1
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d00c      	beq.n	800b956 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f003 0301 	and.w	r3, r3, #1
 800b942:	2b00      	cmp	r3, #0
 800b944:	d007      	beq.n	800b956 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f06f 0201 	mvn.w	r2, #1
 800b94e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7f6 fa97 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b956:	68bb      	ldr	r3, [r7, #8]
 800b958:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d104      	bne.n	800b96a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00c      	beq.n	800b984 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b970:	2b00      	cmp	r3, #0
 800b972:	d007      	beq.n	800b984 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b97c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 fe30 	bl	800c5e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00c      	beq.n	800b9a8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d007      	beq.n	800b9a8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 fe28 	bl	800c5f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00c      	beq.n	800b9cc <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d007      	beq.n	800b9cc <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f948 	bl	800bc5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d00c      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d007      	beq.n	800b9f0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f06f 0220 	mvn.w	r2, #32
 800b9e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fdf0 	bl	800c5d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b9f0:	bf00      	nop
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba04:	2300      	movs	r3, #0
 800ba06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d101      	bne.n	800ba16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba12:	2302      	movs	r3, #2
 800ba14:	e0ff      	b.n	800bc16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2b14      	cmp	r3, #20
 800ba22:	f200 80f0 	bhi.w	800bc06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba26:	a201      	add	r2, pc, #4	@ (adr r2, 800ba2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba2c:	0800ba81 	.word	0x0800ba81
 800ba30:	0800bc07 	.word	0x0800bc07
 800ba34:	0800bc07 	.word	0x0800bc07
 800ba38:	0800bc07 	.word	0x0800bc07
 800ba3c:	0800bac1 	.word	0x0800bac1
 800ba40:	0800bc07 	.word	0x0800bc07
 800ba44:	0800bc07 	.word	0x0800bc07
 800ba48:	0800bc07 	.word	0x0800bc07
 800ba4c:	0800bb03 	.word	0x0800bb03
 800ba50:	0800bc07 	.word	0x0800bc07
 800ba54:	0800bc07 	.word	0x0800bc07
 800ba58:	0800bc07 	.word	0x0800bc07
 800ba5c:	0800bb43 	.word	0x0800bb43
 800ba60:	0800bc07 	.word	0x0800bc07
 800ba64:	0800bc07 	.word	0x0800bc07
 800ba68:	0800bc07 	.word	0x0800bc07
 800ba6c:	0800bb85 	.word	0x0800bb85
 800ba70:	0800bc07 	.word	0x0800bc07
 800ba74:	0800bc07 	.word	0x0800bc07
 800ba78:	0800bc07 	.word	0x0800bc07
 800ba7c:	0800bbc5 	.word	0x0800bbc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 f9a4 	bl	800bdd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	699a      	ldr	r2, [r3, #24]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0208 	orr.w	r2, r2, #8
 800ba9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	699a      	ldr	r2, [r3, #24]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0204 	bic.w	r2, r2, #4
 800baaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6999      	ldr	r1, [r3, #24]
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	430a      	orrs	r2, r1
 800babc:	619a      	str	r2, [r3, #24]
      break;
 800babe:	e0a5      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68b9      	ldr	r1, [r7, #8]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f000 fa14 	bl	800bef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	699a      	ldr	r2, [r3, #24]
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	699a      	ldr	r2, [r3, #24]
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800baea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	6999      	ldr	r1, [r3, #24]
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	021a      	lsls	r2, r3, #8
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	619a      	str	r2, [r3, #24]
      break;
 800bb00:	e084      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68b9      	ldr	r1, [r7, #8]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f000 fa7d 	bl	800c008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	69da      	ldr	r2, [r3, #28]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f042 0208 	orr.w	r2, r2, #8
 800bb1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	69da      	ldr	r2, [r3, #28]
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f022 0204 	bic.w	r2, r2, #4
 800bb2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69d9      	ldr	r1, [r3, #28]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	691a      	ldr	r2, [r3, #16]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	430a      	orrs	r2, r1
 800bb3e:	61da      	str	r2, [r3, #28]
      break;
 800bb40:	e064      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	4618      	mov	r0, r3
 800bb4a:	f000 fae5 	bl	800c118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69da      	ldr	r2, [r3, #28]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	69da      	ldr	r2, [r3, #28]
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69d9      	ldr	r1, [r3, #28]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	691b      	ldr	r3, [r3, #16]
 800bb78:	021a      	lsls	r2, r3, #8
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	430a      	orrs	r2, r1
 800bb80:	61da      	str	r2, [r3, #28]
      break;
 800bb82:	e043      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fb2e 	bl	800c1ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	f042 0208 	orr.w	r2, r2, #8
 800bb9e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0204 	bic.w	r2, r2, #4
 800bbae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	691a      	ldr	r2, [r3, #16]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbc2:	e023      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68b9      	ldr	r1, [r7, #8]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f000 fb72 	bl	800c2b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbde:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bbee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	021a      	lsls	r2, r3, #8
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	430a      	orrs	r2, r1
 800bc02:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bc04:	e002      	b.n	800bc0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	75fb      	strb	r3, [r7, #23]
      break;
 800bc0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2200      	movs	r2, #0
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc14:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3718      	adds	r7, #24
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop

0800bc20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc28:	bf00      	nop
 800bc2a:	370c      	adds	r7, #12
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc3c:	bf00      	nop
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc5c:	b480      	push	{r7}
 800bc5e:	b083      	sub	sp, #12
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	4a4a      	ldr	r2, [pc, #296]	@ (800bdac <TIM_Base_SetConfig+0x13c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d013      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc8e:	d00f      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a47      	ldr	r2, [pc, #284]	@ (800bdb0 <TIM_Base_SetConfig+0x140>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00b      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a46      	ldr	r2, [pc, #280]	@ (800bdb4 <TIM_Base_SetConfig+0x144>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d007      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a45      	ldr	r2, [pc, #276]	@ (800bdb8 <TIM_Base_SetConfig+0x148>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d003      	beq.n	800bcb0 <TIM_Base_SetConfig+0x40>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a44      	ldr	r2, [pc, #272]	@ (800bdbc <TIM_Base_SetConfig+0x14c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d108      	bne.n	800bcc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	685b      	ldr	r3, [r3, #4]
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	4a39      	ldr	r2, [pc, #228]	@ (800bdac <TIM_Base_SetConfig+0x13c>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	d027      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcd0:	d023      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a36      	ldr	r2, [pc, #216]	@ (800bdb0 <TIM_Base_SetConfig+0x140>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d01f      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a35      	ldr	r2, [pc, #212]	@ (800bdb4 <TIM_Base_SetConfig+0x144>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d01b      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a34      	ldr	r2, [pc, #208]	@ (800bdb8 <TIM_Base_SetConfig+0x148>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d017      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a33      	ldr	r2, [pc, #204]	@ (800bdbc <TIM_Base_SetConfig+0x14c>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d013      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a32      	ldr	r2, [pc, #200]	@ (800bdc0 <TIM_Base_SetConfig+0x150>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d00f      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a31      	ldr	r2, [pc, #196]	@ (800bdc4 <TIM_Base_SetConfig+0x154>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d00b      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a30      	ldr	r2, [pc, #192]	@ (800bdc8 <TIM_Base_SetConfig+0x158>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d007      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2f      	ldr	r2, [pc, #188]	@ (800bdcc <TIM_Base_SetConfig+0x15c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d003      	beq.n	800bd1a <TIM_Base_SetConfig+0xaa>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a2e      	ldr	r2, [pc, #184]	@ (800bdd0 <TIM_Base_SetConfig+0x160>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d108      	bne.n	800bd2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	695b      	ldr	r3, [r3, #20]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68fa      	ldr	r2, [r7, #12]
 800bd3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	689a      	ldr	r2, [r3, #8]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a16      	ldr	r2, [pc, #88]	@ (800bdac <TIM_Base_SetConfig+0x13c>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d00f      	beq.n	800bd78 <TIM_Base_SetConfig+0x108>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	4a18      	ldr	r2, [pc, #96]	@ (800bdbc <TIM_Base_SetConfig+0x14c>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d00b      	beq.n	800bd78 <TIM_Base_SetConfig+0x108>
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	4a17      	ldr	r2, [pc, #92]	@ (800bdc0 <TIM_Base_SetConfig+0x150>)
 800bd64:	4293      	cmp	r3, r2
 800bd66:	d007      	beq.n	800bd78 <TIM_Base_SetConfig+0x108>
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4a16      	ldr	r2, [pc, #88]	@ (800bdc4 <TIM_Base_SetConfig+0x154>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d003      	beq.n	800bd78 <TIM_Base_SetConfig+0x108>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	4a15      	ldr	r2, [pc, #84]	@ (800bdc8 <TIM_Base_SetConfig+0x158>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d103      	bne.n	800bd80 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0301 	and.w	r3, r3, #1
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d105      	bne.n	800bd9e <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f023 0201 	bic.w	r2, r3, #1
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	611a      	str	r2, [r3, #16]
  }
}
 800bd9e:	bf00      	nop
 800bda0:	3714      	adds	r7, #20
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	40010000 	.word	0x40010000
 800bdb0:	40000400 	.word	0x40000400
 800bdb4:	40000800 	.word	0x40000800
 800bdb8:	40000c00 	.word	0x40000c00
 800bdbc:	40010400 	.word	0x40010400
 800bdc0:	40014000 	.word	0x40014000
 800bdc4:	40014400 	.word	0x40014400
 800bdc8:	40014800 	.word	0x40014800
 800bdcc:	4000e000 	.word	0x4000e000
 800bdd0:	4000e400 	.word	0x4000e400

0800bdd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b087      	sub	sp, #28
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a1b      	ldr	r3, [r3, #32]
 800bde8:	f023 0201 	bic.w	r2, r3, #1
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bdfc:	68fa      	ldr	r2, [r7, #12]
 800bdfe:	4b37      	ldr	r3, [pc, #220]	@ (800bedc <TIM_OC1_SetConfig+0x108>)
 800be00:	4013      	ands	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	f023 0303 	bic.w	r3, r3, #3
 800be0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	4313      	orrs	r3, r2
 800be14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f023 0302 	bic.w	r3, r3, #2
 800be1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	4313      	orrs	r3, r2
 800be26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	4a2d      	ldr	r2, [pc, #180]	@ (800bee0 <TIM_OC1_SetConfig+0x10c>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d00f      	beq.n	800be50 <TIM_OC1_SetConfig+0x7c>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	4a2c      	ldr	r2, [pc, #176]	@ (800bee4 <TIM_OC1_SetConfig+0x110>)
 800be34:	4293      	cmp	r3, r2
 800be36:	d00b      	beq.n	800be50 <TIM_OC1_SetConfig+0x7c>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	4a2b      	ldr	r2, [pc, #172]	@ (800bee8 <TIM_OC1_SetConfig+0x114>)
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d007      	beq.n	800be50 <TIM_OC1_SetConfig+0x7c>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	4a2a      	ldr	r2, [pc, #168]	@ (800beec <TIM_OC1_SetConfig+0x118>)
 800be44:	4293      	cmp	r3, r2
 800be46:	d003      	beq.n	800be50 <TIM_OC1_SetConfig+0x7c>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	4a29      	ldr	r2, [pc, #164]	@ (800bef0 <TIM_OC1_SetConfig+0x11c>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d10c      	bne.n	800be6a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f023 0308 	bic.w	r3, r3, #8
 800be56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	68db      	ldr	r3, [r3, #12]
 800be5c:	697a      	ldr	r2, [r7, #20]
 800be5e:	4313      	orrs	r3, r2
 800be60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	f023 0304 	bic.w	r3, r3, #4
 800be68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bee0 <TIM_OC1_SetConfig+0x10c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d00f      	beq.n	800be92 <TIM_OC1_SetConfig+0xbe>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a1b      	ldr	r2, [pc, #108]	@ (800bee4 <TIM_OC1_SetConfig+0x110>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d00b      	beq.n	800be92 <TIM_OC1_SetConfig+0xbe>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a1a      	ldr	r2, [pc, #104]	@ (800bee8 <TIM_OC1_SetConfig+0x114>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d007      	beq.n	800be92 <TIM_OC1_SetConfig+0xbe>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a19      	ldr	r2, [pc, #100]	@ (800beec <TIM_OC1_SetConfig+0x118>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d003      	beq.n	800be92 <TIM_OC1_SetConfig+0xbe>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a18      	ldr	r2, [pc, #96]	@ (800bef0 <TIM_OC1_SetConfig+0x11c>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d111      	bne.n	800beb6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800be98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	695b      	ldr	r3, [r3, #20]
 800bea6:	693a      	ldr	r2, [r7, #16]
 800bea8:	4313      	orrs	r3, r2
 800beaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	685a      	ldr	r2, [r3, #4]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	621a      	str	r2, [r3, #32]
}
 800bed0:	bf00      	nop
 800bed2:	371c      	adds	r7, #28
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr
 800bedc:	fffeff8f 	.word	0xfffeff8f
 800bee0:	40010000 	.word	0x40010000
 800bee4:	40010400 	.word	0x40010400
 800bee8:	40014000 	.word	0x40014000
 800beec:	40014400 	.word	0x40014400
 800bef0:	40014800 	.word	0x40014800

0800bef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b087      	sub	sp, #28
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a1b      	ldr	r3, [r3, #32]
 800bf08:	f023 0210 	bic.w	r2, r3, #16
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	699b      	ldr	r3, [r3, #24]
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf1c:	68fa      	ldr	r2, [r7, #12]
 800bf1e:	4b34      	ldr	r3, [pc, #208]	@ (800bff0 <TIM_OC2_SetConfig+0xfc>)
 800bf20:	4013      	ands	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	021b      	lsls	r3, r3, #8
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	f023 0320 	bic.w	r3, r3, #32
 800bf3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	011b      	lsls	r3, r3, #4
 800bf46:	697a      	ldr	r2, [r7, #20]
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	4a29      	ldr	r2, [pc, #164]	@ (800bff4 <TIM_OC2_SetConfig+0x100>)
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d003      	beq.n	800bf5c <TIM_OC2_SetConfig+0x68>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a28      	ldr	r2, [pc, #160]	@ (800bff8 <TIM_OC2_SetConfig+0x104>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d10d      	bne.n	800bf78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	011b      	lsls	r3, r3, #4
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a1e      	ldr	r2, [pc, #120]	@ (800bff4 <TIM_OC2_SetConfig+0x100>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00f      	beq.n	800bfa0 <TIM_OC2_SetConfig+0xac>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a1d      	ldr	r2, [pc, #116]	@ (800bff8 <TIM_OC2_SetConfig+0x104>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d00b      	beq.n	800bfa0 <TIM_OC2_SetConfig+0xac>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a1c      	ldr	r2, [pc, #112]	@ (800bffc <TIM_OC2_SetConfig+0x108>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d007      	beq.n	800bfa0 <TIM_OC2_SetConfig+0xac>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a1b      	ldr	r2, [pc, #108]	@ (800c000 <TIM_OC2_SetConfig+0x10c>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d003      	beq.n	800bfa0 <TIM_OC2_SetConfig+0xac>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	4a1a      	ldr	r2, [pc, #104]	@ (800c004 <TIM_OC2_SetConfig+0x110>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d113      	bne.n	800bfc8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bfa6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	697a      	ldr	r2, [r7, #20]
 800bfe0:	621a      	str	r2, [r3, #32]
}
 800bfe2:	bf00      	nop
 800bfe4:	371c      	adds	r7, #28
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
 800bfee:	bf00      	nop
 800bff0:	feff8fff 	.word	0xfeff8fff
 800bff4:	40010000 	.word	0x40010000
 800bff8:	40010400 	.word	0x40010400
 800bffc:	40014000 	.word	0x40014000
 800c000:	40014400 	.word	0x40014400
 800c004:	40014800 	.word	0x40014800

0800c008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c008:	b480      	push	{r7}
 800c00a:	b087      	sub	sp, #28
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a1b      	ldr	r3, [r3, #32]
 800c016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6a1b      	ldr	r3, [r3, #32]
 800c01c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	685b      	ldr	r3, [r3, #4]
 800c028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	4b33      	ldr	r3, [pc, #204]	@ (800c100 <TIM_OC3_SetConfig+0xf8>)
 800c034:	4013      	ands	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f023 0303 	bic.w	r3, r3, #3
 800c03e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	4313      	orrs	r3, r2
 800c048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	021b      	lsls	r3, r3, #8
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	4313      	orrs	r3, r2
 800c05c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a28      	ldr	r2, [pc, #160]	@ (800c104 <TIM_OC3_SetConfig+0xfc>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d003      	beq.n	800c06e <TIM_OC3_SetConfig+0x66>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	4a27      	ldr	r2, [pc, #156]	@ (800c108 <TIM_OC3_SetConfig+0x100>)
 800c06a:	4293      	cmp	r3, r2
 800c06c:	d10d      	bne.n	800c08a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	021b      	lsls	r3, r3, #8
 800c07c:	697a      	ldr	r2, [r7, #20]
 800c07e:	4313      	orrs	r3, r2
 800c080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	4a1d      	ldr	r2, [pc, #116]	@ (800c104 <TIM_OC3_SetConfig+0xfc>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d00f      	beq.n	800c0b2 <TIM_OC3_SetConfig+0xaa>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	4a1c      	ldr	r2, [pc, #112]	@ (800c108 <TIM_OC3_SetConfig+0x100>)
 800c096:	4293      	cmp	r3, r2
 800c098:	d00b      	beq.n	800c0b2 <TIM_OC3_SetConfig+0xaa>
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a1b      	ldr	r2, [pc, #108]	@ (800c10c <TIM_OC3_SetConfig+0x104>)
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d007      	beq.n	800c0b2 <TIM_OC3_SetConfig+0xaa>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a1a      	ldr	r2, [pc, #104]	@ (800c110 <TIM_OC3_SetConfig+0x108>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d003      	beq.n	800c0b2 <TIM_OC3_SetConfig+0xaa>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a19      	ldr	r2, [pc, #100]	@ (800c114 <TIM_OC3_SetConfig+0x10c>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d113      	bne.n	800c0da <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c0c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	695b      	ldr	r3, [r3, #20]
 800c0c6:	011b      	lsls	r3, r3, #4
 800c0c8:	693a      	ldr	r2, [r7, #16]
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	699b      	ldr	r3, [r3, #24]
 800c0d2:	011b      	lsls	r3, r3, #4
 800c0d4:	693a      	ldr	r2, [r7, #16]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685a      	ldr	r2, [r3, #4]
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	697a      	ldr	r2, [r7, #20]
 800c0f2:	621a      	str	r2, [r3, #32]
}
 800c0f4:	bf00      	nop
 800c0f6:	371c      	adds	r7, #28
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	fffeff8f 	.word	0xfffeff8f
 800c104:	40010000 	.word	0x40010000
 800c108:	40010400 	.word	0x40010400
 800c10c:	40014000 	.word	0x40014000
 800c110:	40014400 	.word	0x40014400
 800c114:	40014800 	.word	0x40014800

0800c118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c118:	b480      	push	{r7}
 800c11a:	b087      	sub	sp, #28
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6a1b      	ldr	r3, [r3, #32]
 800c126:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6a1b      	ldr	r3, [r3, #32]
 800c12c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	69db      	ldr	r3, [r3, #28]
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4b24      	ldr	r3, [pc, #144]	@ (800c1d4 <TIM_OC4_SetConfig+0xbc>)
 800c144:	4013      	ands	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c14e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	021b      	lsls	r3, r3, #8
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	4313      	orrs	r3, r2
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	031b      	lsls	r3, r3, #12
 800c16a:	693a      	ldr	r2, [r7, #16]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a19      	ldr	r2, [pc, #100]	@ (800c1d8 <TIM_OC4_SetConfig+0xc0>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d00f      	beq.n	800c198 <TIM_OC4_SetConfig+0x80>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a18      	ldr	r2, [pc, #96]	@ (800c1dc <TIM_OC4_SetConfig+0xc4>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d00b      	beq.n	800c198 <TIM_OC4_SetConfig+0x80>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a17      	ldr	r2, [pc, #92]	@ (800c1e0 <TIM_OC4_SetConfig+0xc8>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d007      	beq.n	800c198 <TIM_OC4_SetConfig+0x80>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a16      	ldr	r2, [pc, #88]	@ (800c1e4 <TIM_OC4_SetConfig+0xcc>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d003      	beq.n	800c198 <TIM_OC4_SetConfig+0x80>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4a15      	ldr	r2, [pc, #84]	@ (800c1e8 <TIM_OC4_SetConfig+0xd0>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d109      	bne.n	800c1ac <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c19e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	695b      	ldr	r3, [r3, #20]
 800c1a4:	019b      	lsls	r3, r3, #6
 800c1a6:	697a      	ldr	r2, [r7, #20]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	693a      	ldr	r2, [r7, #16]
 800c1c4:	621a      	str	r2, [r3, #32]
}
 800c1c6:	bf00      	nop
 800c1c8:	371c      	adds	r7, #28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr
 800c1d2:	bf00      	nop
 800c1d4:	feff8fff 	.word	0xfeff8fff
 800c1d8:	40010000 	.word	0x40010000
 800c1dc:	40010400 	.word	0x40010400
 800c1e0:	40014000 	.word	0x40014000
 800c1e4:	40014400 	.word	0x40014400
 800c1e8:	40014800 	.word	0x40014800

0800c1ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6a1b      	ldr	r3, [r3, #32]
 800c1fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a1b      	ldr	r3, [r3, #32]
 800c200:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	685b      	ldr	r3, [r3, #4]
 800c20c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4b21      	ldr	r3, [pc, #132]	@ (800c29c <TIM_OC5_SetConfig+0xb0>)
 800c218:	4013      	ands	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c22c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	041b      	lsls	r3, r3, #16
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	4313      	orrs	r3, r2
 800c238:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a18      	ldr	r2, [pc, #96]	@ (800c2a0 <TIM_OC5_SetConfig+0xb4>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d00f      	beq.n	800c262 <TIM_OC5_SetConfig+0x76>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a17      	ldr	r2, [pc, #92]	@ (800c2a4 <TIM_OC5_SetConfig+0xb8>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d00b      	beq.n	800c262 <TIM_OC5_SetConfig+0x76>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a16      	ldr	r2, [pc, #88]	@ (800c2a8 <TIM_OC5_SetConfig+0xbc>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d007      	beq.n	800c262 <TIM_OC5_SetConfig+0x76>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	4a15      	ldr	r2, [pc, #84]	@ (800c2ac <TIM_OC5_SetConfig+0xc0>)
 800c256:	4293      	cmp	r3, r2
 800c258:	d003      	beq.n	800c262 <TIM_OC5_SetConfig+0x76>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a14      	ldr	r2, [pc, #80]	@ (800c2b0 <TIM_OC5_SetConfig+0xc4>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d109      	bne.n	800c276 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c268:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	021b      	lsls	r3, r3, #8
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	4313      	orrs	r3, r2
 800c274:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	685a      	ldr	r2, [r3, #4]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	621a      	str	r2, [r3, #32]
}
 800c290:	bf00      	nop
 800c292:	371c      	adds	r7, #28
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr
 800c29c:	fffeff8f 	.word	0xfffeff8f
 800c2a0:	40010000 	.word	0x40010000
 800c2a4:	40010400 	.word	0x40010400
 800c2a8:	40014000 	.word	0x40014000
 800c2ac:	40014400 	.word	0x40014400
 800c2b0:	40014800 	.word	0x40014800

0800c2b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b087      	sub	sp, #28
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6a1b      	ldr	r3, [r3, #32]
 800c2c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a1b      	ldr	r3, [r3, #32]
 800c2c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	4b22      	ldr	r3, [pc, #136]	@ (800c368 <TIM_OC6_SetConfig+0xb4>)
 800c2e0:	4013      	ands	r3, r2
 800c2e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	021b      	lsls	r3, r3, #8
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c2f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	051b      	lsls	r3, r3, #20
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	4313      	orrs	r3, r2
 800c302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a19      	ldr	r2, [pc, #100]	@ (800c36c <TIM_OC6_SetConfig+0xb8>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00f      	beq.n	800c32c <TIM_OC6_SetConfig+0x78>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a18      	ldr	r2, [pc, #96]	@ (800c370 <TIM_OC6_SetConfig+0xbc>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d00b      	beq.n	800c32c <TIM_OC6_SetConfig+0x78>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a17      	ldr	r2, [pc, #92]	@ (800c374 <TIM_OC6_SetConfig+0xc0>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d007      	beq.n	800c32c <TIM_OC6_SetConfig+0x78>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a16      	ldr	r2, [pc, #88]	@ (800c378 <TIM_OC6_SetConfig+0xc4>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d003      	beq.n	800c32c <TIM_OC6_SetConfig+0x78>
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	4a15      	ldr	r2, [pc, #84]	@ (800c37c <TIM_OC6_SetConfig+0xc8>)
 800c328:	4293      	cmp	r3, r2
 800c32a:	d109      	bne.n	800c340 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c334:	683b      	ldr	r3, [r7, #0]
 800c336:	695b      	ldr	r3, [r3, #20]
 800c338:	029b      	lsls	r3, r3, #10
 800c33a:	697a      	ldr	r2, [r7, #20]
 800c33c:	4313      	orrs	r3, r2
 800c33e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	697a      	ldr	r2, [r7, #20]
 800c344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	685a      	ldr	r2, [r3, #4]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	693a      	ldr	r2, [r7, #16]
 800c358:	621a      	str	r2, [r3, #32]
}
 800c35a:	bf00      	nop
 800c35c:	371c      	adds	r7, #28
 800c35e:	46bd      	mov	sp, r7
 800c360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c364:	4770      	bx	lr
 800c366:	bf00      	nop
 800c368:	feff8fff 	.word	0xfeff8fff
 800c36c:	40010000 	.word	0x40010000
 800c370:	40010400 	.word	0x40010400
 800c374:	40014000 	.word	0x40014000
 800c378:	40014400 	.word	0x40014400
 800c37c:	40014800 	.word	0x40014800

0800c380 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c380:	b480      	push	{r7}
 800c382:	b085      	sub	sp, #20
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c390:	2b01      	cmp	r3, #1
 800c392:	d101      	bne.n	800c398 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c394:	2302      	movs	r3, #2
 800c396:	e077      	b.n	800c488 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	685b      	ldr	r3, [r3, #4]
 800c3ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	689b      	ldr	r3, [r3, #8]
 800c3b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a35      	ldr	r2, [pc, #212]	@ (800c494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d004      	beq.n	800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a34      	ldr	r2, [pc, #208]	@ (800c498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d108      	bne.n	800c3de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c3d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	68fa      	ldr	r2, [r7, #12]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a25      	ldr	r2, [pc, #148]	@ (800c494 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d02c      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c40a:	d027      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	4a22      	ldr	r2, [pc, #136]	@ (800c49c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d022      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	4a21      	ldr	r2, [pc, #132]	@ (800c4a0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d01d      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a1f      	ldr	r2, [pc, #124]	@ (800c4a4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c426:	4293      	cmp	r3, r2
 800c428:	d018      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a1a      	ldr	r2, [pc, #104]	@ (800c498 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d013      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a1b      	ldr	r2, [pc, #108]	@ (800c4a8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d00e      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a1a      	ldr	r2, [pc, #104]	@ (800c4ac <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d009      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a18      	ldr	r2, [pc, #96]	@ (800c4b0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d004      	beq.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a17      	ldr	r2, [pc, #92]	@ (800c4b4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d10c      	bne.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c462:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2201      	movs	r2, #1
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3714      	adds	r7, #20
 800c48c:	46bd      	mov	sp, r7
 800c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c492:	4770      	bx	lr
 800c494:	40010000 	.word	0x40010000
 800c498:	40010400 	.word	0x40010400
 800c49c:	40000400 	.word	0x40000400
 800c4a0:	40000800 	.word	0x40000800
 800c4a4:	40000c00 	.word	0x40000c00
 800c4a8:	40001800 	.word	0x40001800
 800c4ac:	40014000 	.word	0x40014000
 800c4b0:	4000e000 	.word	0x4000e000
 800c4b4:	4000e400 	.word	0x4000e400

0800c4b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d101      	bne.n	800c4d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	e073      	b.n	800c5bc <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	4313      	orrs	r3, r2
 800c504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4313      	orrs	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	691b      	ldr	r3, [r3, #16]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c53a:	4313      	orrs	r3, r2
 800c53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	699b      	ldr	r3, [r3, #24]
 800c548:	041b      	lsls	r3, r3, #16
 800c54a:	4313      	orrs	r3, r2
 800c54c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	69db      	ldr	r3, [r3, #28]
 800c558:	4313      	orrs	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a19      	ldr	r2, [pc, #100]	@ (800c5c8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d004      	beq.n	800c570 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a18      	ldr	r2, [pc, #96]	@ (800c5cc <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d11c      	bne.n	800c5aa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57a:	051b      	lsls	r3, r3, #20
 800c57c:	4313      	orrs	r3, r2
 800c57e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	6a1b      	ldr	r3, [r3, #32]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c598:	4313      	orrs	r3, r2
 800c59a:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5a6:	4313      	orrs	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c5ba:	2300      	movs	r3, #0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr
 800c5c8:	40010000 	.word	0x40010000
 800c5cc:	40010400 	.word	0x40010400

0800c5d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5ec:	bf00      	nop
 800c5ee:	370c      	adds	r7, #12
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c600:	bf00      	nop
 800c602:	370c      	adds	r7, #12
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d101      	bne.n	800c61e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e042      	b.n	800c6a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c624:	2b00      	cmp	r3, #0
 800c626:	d106      	bne.n	800c636 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7f6 fd71 	bl	8003118 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2224      	movs	r2, #36	@ 0x24
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f022 0201 	bic.w	r2, r2, #1
 800c64c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 ff22 	bl	800d4a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f8b3 	bl	800c7c8 <UART_SetConfig>
 800c662:	4603      	mov	r3, r0
 800c664:	2b01      	cmp	r3, #1
 800c666:	d101      	bne.n	800c66c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c668:	2301      	movs	r3, #1
 800c66a:	e01b      	b.n	800c6a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685a      	ldr	r2, [r3, #4]
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c67a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c68a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f042 0201 	orr.w	r2, r2, #1
 800c69a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 ffa1 	bl	800d5e4 <UART_CheckIdleState>
 800c6a2:	4603      	mov	r3, r0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3708      	adds	r7, #8
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	@ 0x28
 800c6b0:	af02      	add	r7, sp, #8
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	603b      	str	r3, [r7, #0]
 800c6b8:	4613      	mov	r3, r2
 800c6ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6c2:	2b20      	cmp	r3, #32
 800c6c4:	d17b      	bne.n	800c7be <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d002      	beq.n	800c6d2 <HAL_UART_Transmit+0x26>
 800c6cc:	88fb      	ldrh	r3, [r7, #6]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d101      	bne.n	800c6d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e074      	b.n	800c7c0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2200      	movs	r2, #0
 800c6da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	2221      	movs	r2, #33	@ 0x21
 800c6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c6e6:	f7f6 fe93 	bl	8003410 <HAL_GetTick>
 800c6ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	88fa      	ldrh	r2, [r7, #6]
 800c6f0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	88fa      	ldrh	r2, [r7, #6]
 800c6f8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c704:	d108      	bne.n	800c718 <HAL_UART_Transmit+0x6c>
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d104      	bne.n	800c718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c70e:	2300      	movs	r3, #0
 800c710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	61bb      	str	r3, [r7, #24]
 800c716:	e003      	b.n	800c720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c71c:	2300      	movs	r3, #0
 800c71e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c720:	e030      	b.n	800c784 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	9300      	str	r3, [sp, #0]
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	2200      	movs	r2, #0
 800c72a:	2180      	movs	r1, #128	@ 0x80
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f001 f803 	bl	800d738 <UART_WaitOnFlagUntilTimeout>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2220      	movs	r2, #32
 800c73c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c740:	2303      	movs	r3, #3
 800c742:	e03d      	b.n	800c7c0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c744:	69fb      	ldr	r3, [r7, #28]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d10b      	bne.n	800c762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	461a      	mov	r2, r3
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c758:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	3302      	adds	r3, #2
 800c75e:	61bb      	str	r3, [r7, #24]
 800c760:	e007      	b.n	800c772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	781a      	ldrb	r2, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	3301      	adds	r3, #1
 800c770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c778:	b29b      	uxth	r3, r3
 800c77a:	3b01      	subs	r3, #1
 800c77c:	b29a      	uxth	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1c8      	bne.n	800c722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	9300      	str	r3, [sp, #0]
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	2200      	movs	r2, #0
 800c798:	2140      	movs	r1, #64	@ 0x40
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f000 ffcc 	bl	800d738 <UART_WaitOnFlagUntilTimeout>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d005      	beq.n	800c7b2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	2220      	movs	r2, #32
 800c7aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	e006      	b.n	800c7c0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	2220      	movs	r2, #32
 800c7b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e000      	b.n	800c7c0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c7be:	2302      	movs	r3, #2
  }
}
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	3720      	adds	r7, #32
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c7cc:	b092      	sub	sp, #72	@ 0x48
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	689a      	ldr	r2, [r3, #8]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	691b      	ldr	r3, [r3, #16]
 800c7e0:	431a      	orrs	r2, r3
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	695b      	ldr	r3, [r3, #20]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	4bbe      	ldr	r3, [pc, #760]	@ (800caf0 <UART_SetConfig+0x328>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	6812      	ldr	r2, [r2, #0]
 800c7fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c800:	430b      	orrs	r3, r1
 800c802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c80e:	697b      	ldr	r3, [r7, #20]
 800c810:	68da      	ldr	r2, [r3, #12]
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	430a      	orrs	r2, r1
 800c818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	699b      	ldr	r3, [r3, #24]
 800c81e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4ab3      	ldr	r2, [pc, #716]	@ (800caf4 <UART_SetConfig+0x32c>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d004      	beq.n	800c834 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	6a1b      	ldr	r3, [r3, #32]
 800c82e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c830:	4313      	orrs	r3, r2
 800c832:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	689a      	ldr	r2, [r3, #8]
 800c83a:	4baf      	ldr	r3, [pc, #700]	@ (800caf8 <UART_SetConfig+0x330>)
 800c83c:	4013      	ands	r3, r2
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	6812      	ldr	r2, [r2, #0]
 800c842:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c844:	430b      	orrs	r3, r1
 800c846:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c84e:	f023 010f 	bic.w	r1, r3, #15
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	430a      	orrs	r2, r1
 800c85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4aa6      	ldr	r2, [pc, #664]	@ (800cafc <UART_SetConfig+0x334>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d177      	bne.n	800c958 <UART_SetConfig+0x190>
 800c868:	4ba5      	ldr	r3, [pc, #660]	@ (800cb00 <UART_SetConfig+0x338>)
 800c86a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c86c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c870:	2b28      	cmp	r3, #40	@ 0x28
 800c872:	d86d      	bhi.n	800c950 <UART_SetConfig+0x188>
 800c874:	a201      	add	r2, pc, #4	@ (adr r2, 800c87c <UART_SetConfig+0xb4>)
 800c876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c87a:	bf00      	nop
 800c87c:	0800c921 	.word	0x0800c921
 800c880:	0800c951 	.word	0x0800c951
 800c884:	0800c951 	.word	0x0800c951
 800c888:	0800c951 	.word	0x0800c951
 800c88c:	0800c951 	.word	0x0800c951
 800c890:	0800c951 	.word	0x0800c951
 800c894:	0800c951 	.word	0x0800c951
 800c898:	0800c951 	.word	0x0800c951
 800c89c:	0800c929 	.word	0x0800c929
 800c8a0:	0800c951 	.word	0x0800c951
 800c8a4:	0800c951 	.word	0x0800c951
 800c8a8:	0800c951 	.word	0x0800c951
 800c8ac:	0800c951 	.word	0x0800c951
 800c8b0:	0800c951 	.word	0x0800c951
 800c8b4:	0800c951 	.word	0x0800c951
 800c8b8:	0800c951 	.word	0x0800c951
 800c8bc:	0800c931 	.word	0x0800c931
 800c8c0:	0800c951 	.word	0x0800c951
 800c8c4:	0800c951 	.word	0x0800c951
 800c8c8:	0800c951 	.word	0x0800c951
 800c8cc:	0800c951 	.word	0x0800c951
 800c8d0:	0800c951 	.word	0x0800c951
 800c8d4:	0800c951 	.word	0x0800c951
 800c8d8:	0800c951 	.word	0x0800c951
 800c8dc:	0800c939 	.word	0x0800c939
 800c8e0:	0800c951 	.word	0x0800c951
 800c8e4:	0800c951 	.word	0x0800c951
 800c8e8:	0800c951 	.word	0x0800c951
 800c8ec:	0800c951 	.word	0x0800c951
 800c8f0:	0800c951 	.word	0x0800c951
 800c8f4:	0800c951 	.word	0x0800c951
 800c8f8:	0800c951 	.word	0x0800c951
 800c8fc:	0800c941 	.word	0x0800c941
 800c900:	0800c951 	.word	0x0800c951
 800c904:	0800c951 	.word	0x0800c951
 800c908:	0800c951 	.word	0x0800c951
 800c90c:	0800c951 	.word	0x0800c951
 800c910:	0800c951 	.word	0x0800c951
 800c914:	0800c951 	.word	0x0800c951
 800c918:	0800c951 	.word	0x0800c951
 800c91c:	0800c949 	.word	0x0800c949
 800c920:	2301      	movs	r3, #1
 800c922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c926:	e326      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c928:	2304      	movs	r3, #4
 800c92a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c92e:	e322      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c930:	2308      	movs	r3, #8
 800c932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c936:	e31e      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c938:	2310      	movs	r3, #16
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e31a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c940:	2320      	movs	r3, #32
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e316      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c948:	2340      	movs	r3, #64	@ 0x40
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e312      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c950:	2380      	movs	r3, #128	@ 0x80
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e30e      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a69      	ldr	r2, [pc, #420]	@ (800cb04 <UART_SetConfig+0x33c>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d130      	bne.n	800c9c4 <UART_SetConfig+0x1fc>
 800c962:	4b67      	ldr	r3, [pc, #412]	@ (800cb00 <UART_SetConfig+0x338>)
 800c964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c966:	f003 0307 	and.w	r3, r3, #7
 800c96a:	2b05      	cmp	r3, #5
 800c96c:	d826      	bhi.n	800c9bc <UART_SetConfig+0x1f4>
 800c96e:	a201      	add	r2, pc, #4	@ (adr r2, 800c974 <UART_SetConfig+0x1ac>)
 800c970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c974:	0800c98d 	.word	0x0800c98d
 800c978:	0800c995 	.word	0x0800c995
 800c97c:	0800c99d 	.word	0x0800c99d
 800c980:	0800c9a5 	.word	0x0800c9a5
 800c984:	0800c9ad 	.word	0x0800c9ad
 800c988:	0800c9b5 	.word	0x0800c9b5
 800c98c:	2300      	movs	r3, #0
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c992:	e2f0      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c994:	2304      	movs	r3, #4
 800c996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c99a:	e2ec      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c99c:	2308      	movs	r3, #8
 800c99e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9a2:	e2e8      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c9a4:	2310      	movs	r3, #16
 800c9a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9aa:	e2e4      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c9ac:	2320      	movs	r3, #32
 800c9ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9b2:	e2e0      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c9b4:	2340      	movs	r3, #64	@ 0x40
 800c9b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ba:	e2dc      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c9bc:	2380      	movs	r3, #128	@ 0x80
 800c9be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9c2:	e2d8      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4a4f      	ldr	r2, [pc, #316]	@ (800cb08 <UART_SetConfig+0x340>)
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d130      	bne.n	800ca30 <UART_SetConfig+0x268>
 800c9ce:	4b4c      	ldr	r3, [pc, #304]	@ (800cb00 <UART_SetConfig+0x338>)
 800c9d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9d2:	f003 0307 	and.w	r3, r3, #7
 800c9d6:	2b05      	cmp	r3, #5
 800c9d8:	d826      	bhi.n	800ca28 <UART_SetConfig+0x260>
 800c9da:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <UART_SetConfig+0x218>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800c9f9 	.word	0x0800c9f9
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800ca09 	.word	0x0800ca09
 800c9ec:	0800ca11 	.word	0x0800ca11
 800c9f0:	0800ca19 	.word	0x0800ca19
 800c9f4:	0800ca21 	.word	0x0800ca21
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fe:	e2ba      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca06:	e2b6      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca0e:	e2b2      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca16:	e2ae      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca18:	2320      	movs	r3, #32
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca1e:	e2aa      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca20:	2340      	movs	r3, #64	@ 0x40
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca26:	e2a6      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca28:	2380      	movs	r3, #128	@ 0x80
 800ca2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca2e:	e2a2      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a35      	ldr	r2, [pc, #212]	@ (800cb0c <UART_SetConfig+0x344>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d130      	bne.n	800ca9c <UART_SetConfig+0x2d4>
 800ca3a:	4b31      	ldr	r3, [pc, #196]	@ (800cb00 <UART_SetConfig+0x338>)
 800ca3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca3e:	f003 0307 	and.w	r3, r3, #7
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d826      	bhi.n	800ca94 <UART_SetConfig+0x2cc>
 800ca46:	a201      	add	r2, pc, #4	@ (adr r2, 800ca4c <UART_SetConfig+0x284>)
 800ca48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4c:	0800ca65 	.word	0x0800ca65
 800ca50:	0800ca6d 	.word	0x0800ca6d
 800ca54:	0800ca75 	.word	0x0800ca75
 800ca58:	0800ca7d 	.word	0x0800ca7d
 800ca5c:	0800ca85 	.word	0x0800ca85
 800ca60:	0800ca8d 	.word	0x0800ca8d
 800ca64:	2300      	movs	r3, #0
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e284      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca6c:	2304      	movs	r3, #4
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e280      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca74:	2308      	movs	r3, #8
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e27c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca7c:	2310      	movs	r3, #16
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e278      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca84:	2320      	movs	r3, #32
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e274      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca8c:	2340      	movs	r3, #64	@ 0x40
 800ca8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca92:	e270      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca94:	2380      	movs	r3, #128	@ 0x80
 800ca96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca9a:	e26c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb10 <UART_SetConfig+0x348>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d142      	bne.n	800cb2c <UART_SetConfig+0x364>
 800caa6:	4b16      	ldr	r3, [pc, #88]	@ (800cb00 <UART_SetConfig+0x338>)
 800caa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caaa:	f003 0307 	and.w	r3, r3, #7
 800caae:	2b05      	cmp	r3, #5
 800cab0:	d838      	bhi.n	800cb24 <UART_SetConfig+0x35c>
 800cab2:	a201      	add	r2, pc, #4	@ (adr r2, 800cab8 <UART_SetConfig+0x2f0>)
 800cab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cab8:	0800cad1 	.word	0x0800cad1
 800cabc:	0800cad9 	.word	0x0800cad9
 800cac0:	0800cae1 	.word	0x0800cae1
 800cac4:	0800cae9 	.word	0x0800cae9
 800cac8:	0800cb15 	.word	0x0800cb15
 800cacc:	0800cb1d 	.word	0x0800cb1d
 800cad0:	2300      	movs	r3, #0
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e24e      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cad8:	2304      	movs	r3, #4
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e24a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cae0:	2308      	movs	r3, #8
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e246      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cae8:	2310      	movs	r3, #16
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caee:	e242      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800caf0:	cfff69f3 	.word	0xcfff69f3
 800caf4:	58000c00 	.word	0x58000c00
 800caf8:	11fff4ff 	.word	0x11fff4ff
 800cafc:	40011000 	.word	0x40011000
 800cb00:	58024400 	.word	0x58024400
 800cb04:	40004400 	.word	0x40004400
 800cb08:	40004800 	.word	0x40004800
 800cb0c:	40004c00 	.word	0x40004c00
 800cb10:	40005000 	.word	0x40005000
 800cb14:	2320      	movs	r3, #32
 800cb16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1a:	e22c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cb1c:	2340      	movs	r3, #64	@ 0x40
 800cb1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb22:	e228      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cb24:	2380      	movs	r3, #128	@ 0x80
 800cb26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb2a:	e224      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4ab1      	ldr	r2, [pc, #708]	@ (800cdf8 <UART_SetConfig+0x630>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d176      	bne.n	800cc24 <UART_SetConfig+0x45c>
 800cb36:	4bb1      	ldr	r3, [pc, #708]	@ (800cdfc <UART_SetConfig+0x634>)
 800cb38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb3e:	2b28      	cmp	r3, #40	@ 0x28
 800cb40:	d86c      	bhi.n	800cc1c <UART_SetConfig+0x454>
 800cb42:	a201      	add	r2, pc, #4	@ (adr r2, 800cb48 <UART_SetConfig+0x380>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cbed 	.word	0x0800cbed
 800cb4c:	0800cc1d 	.word	0x0800cc1d
 800cb50:	0800cc1d 	.word	0x0800cc1d
 800cb54:	0800cc1d 	.word	0x0800cc1d
 800cb58:	0800cc1d 	.word	0x0800cc1d
 800cb5c:	0800cc1d 	.word	0x0800cc1d
 800cb60:	0800cc1d 	.word	0x0800cc1d
 800cb64:	0800cc1d 	.word	0x0800cc1d
 800cb68:	0800cbf5 	.word	0x0800cbf5
 800cb6c:	0800cc1d 	.word	0x0800cc1d
 800cb70:	0800cc1d 	.word	0x0800cc1d
 800cb74:	0800cc1d 	.word	0x0800cc1d
 800cb78:	0800cc1d 	.word	0x0800cc1d
 800cb7c:	0800cc1d 	.word	0x0800cc1d
 800cb80:	0800cc1d 	.word	0x0800cc1d
 800cb84:	0800cc1d 	.word	0x0800cc1d
 800cb88:	0800cbfd 	.word	0x0800cbfd
 800cb8c:	0800cc1d 	.word	0x0800cc1d
 800cb90:	0800cc1d 	.word	0x0800cc1d
 800cb94:	0800cc1d 	.word	0x0800cc1d
 800cb98:	0800cc1d 	.word	0x0800cc1d
 800cb9c:	0800cc1d 	.word	0x0800cc1d
 800cba0:	0800cc1d 	.word	0x0800cc1d
 800cba4:	0800cc1d 	.word	0x0800cc1d
 800cba8:	0800cc05 	.word	0x0800cc05
 800cbac:	0800cc1d 	.word	0x0800cc1d
 800cbb0:	0800cc1d 	.word	0x0800cc1d
 800cbb4:	0800cc1d 	.word	0x0800cc1d
 800cbb8:	0800cc1d 	.word	0x0800cc1d
 800cbbc:	0800cc1d 	.word	0x0800cc1d
 800cbc0:	0800cc1d 	.word	0x0800cc1d
 800cbc4:	0800cc1d 	.word	0x0800cc1d
 800cbc8:	0800cc0d 	.word	0x0800cc0d
 800cbcc:	0800cc1d 	.word	0x0800cc1d
 800cbd0:	0800cc1d 	.word	0x0800cc1d
 800cbd4:	0800cc1d 	.word	0x0800cc1d
 800cbd8:	0800cc1d 	.word	0x0800cc1d
 800cbdc:	0800cc1d 	.word	0x0800cc1d
 800cbe0:	0800cc1d 	.word	0x0800cc1d
 800cbe4:	0800cc1d 	.word	0x0800cc1d
 800cbe8:	0800cc15 	.word	0x0800cc15
 800cbec:	2301      	movs	r3, #1
 800cbee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbf2:	e1c0      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cbf4:	2304      	movs	r3, #4
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e1bc      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cbfc:	2308      	movs	r3, #8
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e1b8      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc04:	2310      	movs	r3, #16
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e1b4      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc0c:	2320      	movs	r3, #32
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e1b0      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc14:	2340      	movs	r3, #64	@ 0x40
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e1ac      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc1c:	2380      	movs	r3, #128	@ 0x80
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e1a8      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc24:	697b      	ldr	r3, [r7, #20]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a75      	ldr	r2, [pc, #468]	@ (800ce00 <UART_SetConfig+0x638>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d130      	bne.n	800cc90 <UART_SetConfig+0x4c8>
 800cc2e:	4b73      	ldr	r3, [pc, #460]	@ (800cdfc <UART_SetConfig+0x634>)
 800cc30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc32:	f003 0307 	and.w	r3, r3, #7
 800cc36:	2b05      	cmp	r3, #5
 800cc38:	d826      	bhi.n	800cc88 <UART_SetConfig+0x4c0>
 800cc3a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc40 <UART_SetConfig+0x478>)
 800cc3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc40:	0800cc59 	.word	0x0800cc59
 800cc44:	0800cc61 	.word	0x0800cc61
 800cc48:	0800cc69 	.word	0x0800cc69
 800cc4c:	0800cc71 	.word	0x0800cc71
 800cc50:	0800cc79 	.word	0x0800cc79
 800cc54:	0800cc81 	.word	0x0800cc81
 800cc58:	2300      	movs	r3, #0
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e18a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc60:	2304      	movs	r3, #4
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e186      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc68:	2308      	movs	r3, #8
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6e:	e182      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc70:	2310      	movs	r3, #16
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e17e      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc78:	2320      	movs	r3, #32
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e17a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc80:	2340      	movs	r3, #64	@ 0x40
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e176      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc88:	2380      	movs	r3, #128	@ 0x80
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8e:	e172      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4a5b      	ldr	r2, [pc, #364]	@ (800ce04 <UART_SetConfig+0x63c>)
 800cc96:	4293      	cmp	r3, r2
 800cc98:	d130      	bne.n	800ccfc <UART_SetConfig+0x534>
 800cc9a:	4b58      	ldr	r3, [pc, #352]	@ (800cdfc <UART_SetConfig+0x634>)
 800cc9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc9e:	f003 0307 	and.w	r3, r3, #7
 800cca2:	2b05      	cmp	r3, #5
 800cca4:	d826      	bhi.n	800ccf4 <UART_SetConfig+0x52c>
 800cca6:	a201      	add	r2, pc, #4	@ (adr r2, 800ccac <UART_SetConfig+0x4e4>)
 800cca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccac:	0800ccc5 	.word	0x0800ccc5
 800ccb0:	0800cccd 	.word	0x0800cccd
 800ccb4:	0800ccd5 	.word	0x0800ccd5
 800ccb8:	0800ccdd 	.word	0x0800ccdd
 800ccbc:	0800cce5 	.word	0x0800cce5
 800ccc0:	0800cced 	.word	0x0800cced
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccca:	e154      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cccc:	2304      	movs	r3, #4
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e150      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ccd4:	2308      	movs	r3, #8
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e14c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ccdc:	2310      	movs	r3, #16
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e148      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cce4:	2320      	movs	r3, #32
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e144      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ccec:	2340      	movs	r3, #64	@ 0x40
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e140      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ccf4:	2380      	movs	r3, #128	@ 0x80
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e13c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4a41      	ldr	r2, [pc, #260]	@ (800ce08 <UART_SetConfig+0x640>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	f040 8082 	bne.w	800ce0c <UART_SetConfig+0x644>
 800cd08:	4b3c      	ldr	r3, [pc, #240]	@ (800cdfc <UART_SetConfig+0x634>)
 800cd0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd10:	2b28      	cmp	r3, #40	@ 0x28
 800cd12:	d86d      	bhi.n	800cdf0 <UART_SetConfig+0x628>
 800cd14:	a201      	add	r2, pc, #4	@ (adr r2, 800cd1c <UART_SetConfig+0x554>)
 800cd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1a:	bf00      	nop
 800cd1c:	0800cdc1 	.word	0x0800cdc1
 800cd20:	0800cdf1 	.word	0x0800cdf1
 800cd24:	0800cdf1 	.word	0x0800cdf1
 800cd28:	0800cdf1 	.word	0x0800cdf1
 800cd2c:	0800cdf1 	.word	0x0800cdf1
 800cd30:	0800cdf1 	.word	0x0800cdf1
 800cd34:	0800cdf1 	.word	0x0800cdf1
 800cd38:	0800cdf1 	.word	0x0800cdf1
 800cd3c:	0800cdc9 	.word	0x0800cdc9
 800cd40:	0800cdf1 	.word	0x0800cdf1
 800cd44:	0800cdf1 	.word	0x0800cdf1
 800cd48:	0800cdf1 	.word	0x0800cdf1
 800cd4c:	0800cdf1 	.word	0x0800cdf1
 800cd50:	0800cdf1 	.word	0x0800cdf1
 800cd54:	0800cdf1 	.word	0x0800cdf1
 800cd58:	0800cdf1 	.word	0x0800cdf1
 800cd5c:	0800cdd1 	.word	0x0800cdd1
 800cd60:	0800cdf1 	.word	0x0800cdf1
 800cd64:	0800cdf1 	.word	0x0800cdf1
 800cd68:	0800cdf1 	.word	0x0800cdf1
 800cd6c:	0800cdf1 	.word	0x0800cdf1
 800cd70:	0800cdf1 	.word	0x0800cdf1
 800cd74:	0800cdf1 	.word	0x0800cdf1
 800cd78:	0800cdf1 	.word	0x0800cdf1
 800cd7c:	0800cdd9 	.word	0x0800cdd9
 800cd80:	0800cdf1 	.word	0x0800cdf1
 800cd84:	0800cdf1 	.word	0x0800cdf1
 800cd88:	0800cdf1 	.word	0x0800cdf1
 800cd8c:	0800cdf1 	.word	0x0800cdf1
 800cd90:	0800cdf1 	.word	0x0800cdf1
 800cd94:	0800cdf1 	.word	0x0800cdf1
 800cd98:	0800cdf1 	.word	0x0800cdf1
 800cd9c:	0800cde1 	.word	0x0800cde1
 800cda0:	0800cdf1 	.word	0x0800cdf1
 800cda4:	0800cdf1 	.word	0x0800cdf1
 800cda8:	0800cdf1 	.word	0x0800cdf1
 800cdac:	0800cdf1 	.word	0x0800cdf1
 800cdb0:	0800cdf1 	.word	0x0800cdf1
 800cdb4:	0800cdf1 	.word	0x0800cdf1
 800cdb8:	0800cdf1 	.word	0x0800cdf1
 800cdbc:	0800cde9 	.word	0x0800cde9
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc6:	e0d6      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cdc8:	2304      	movs	r3, #4
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdce:	e0d2      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cdd0:	2308      	movs	r3, #8
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd6:	e0ce      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cdd8:	2310      	movs	r3, #16
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdde:	e0ca      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cde0:	2320      	movs	r3, #32
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde6:	e0c6      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cde8:	2340      	movs	r3, #64	@ 0x40
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e0c2      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cdf0:	2380      	movs	r3, #128	@ 0x80
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e0be      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cdf8:	40011400 	.word	0x40011400
 800cdfc:	58024400 	.word	0x58024400
 800ce00:	40007800 	.word	0x40007800
 800ce04:	40007c00 	.word	0x40007c00
 800ce08:	40011800 	.word	0x40011800
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4aad      	ldr	r2, [pc, #692]	@ (800d0c8 <UART_SetConfig+0x900>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d176      	bne.n	800cf04 <UART_SetConfig+0x73c>
 800ce16:	4bad      	ldr	r3, [pc, #692]	@ (800d0cc <UART_SetConfig+0x904>)
 800ce18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce1e:	2b28      	cmp	r3, #40	@ 0x28
 800ce20:	d86c      	bhi.n	800cefc <UART_SetConfig+0x734>
 800ce22:	a201      	add	r2, pc, #4	@ (adr r2, 800ce28 <UART_SetConfig+0x660>)
 800ce24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce28:	0800cecd 	.word	0x0800cecd
 800ce2c:	0800cefd 	.word	0x0800cefd
 800ce30:	0800cefd 	.word	0x0800cefd
 800ce34:	0800cefd 	.word	0x0800cefd
 800ce38:	0800cefd 	.word	0x0800cefd
 800ce3c:	0800cefd 	.word	0x0800cefd
 800ce40:	0800cefd 	.word	0x0800cefd
 800ce44:	0800cefd 	.word	0x0800cefd
 800ce48:	0800ced5 	.word	0x0800ced5
 800ce4c:	0800cefd 	.word	0x0800cefd
 800ce50:	0800cefd 	.word	0x0800cefd
 800ce54:	0800cefd 	.word	0x0800cefd
 800ce58:	0800cefd 	.word	0x0800cefd
 800ce5c:	0800cefd 	.word	0x0800cefd
 800ce60:	0800cefd 	.word	0x0800cefd
 800ce64:	0800cefd 	.word	0x0800cefd
 800ce68:	0800cedd 	.word	0x0800cedd
 800ce6c:	0800cefd 	.word	0x0800cefd
 800ce70:	0800cefd 	.word	0x0800cefd
 800ce74:	0800cefd 	.word	0x0800cefd
 800ce78:	0800cefd 	.word	0x0800cefd
 800ce7c:	0800cefd 	.word	0x0800cefd
 800ce80:	0800cefd 	.word	0x0800cefd
 800ce84:	0800cefd 	.word	0x0800cefd
 800ce88:	0800cee5 	.word	0x0800cee5
 800ce8c:	0800cefd 	.word	0x0800cefd
 800ce90:	0800cefd 	.word	0x0800cefd
 800ce94:	0800cefd 	.word	0x0800cefd
 800ce98:	0800cefd 	.word	0x0800cefd
 800ce9c:	0800cefd 	.word	0x0800cefd
 800cea0:	0800cefd 	.word	0x0800cefd
 800cea4:	0800cefd 	.word	0x0800cefd
 800cea8:	0800ceed 	.word	0x0800ceed
 800ceac:	0800cefd 	.word	0x0800cefd
 800ceb0:	0800cefd 	.word	0x0800cefd
 800ceb4:	0800cefd 	.word	0x0800cefd
 800ceb8:	0800cefd 	.word	0x0800cefd
 800cebc:	0800cefd 	.word	0x0800cefd
 800cec0:	0800cefd 	.word	0x0800cefd
 800cec4:	0800cefd 	.word	0x0800cefd
 800cec8:	0800cef5 	.word	0x0800cef5
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced2:	e050      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ced4:	2304      	movs	r3, #4
 800ced6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceda:	e04c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cedc:	2308      	movs	r3, #8
 800cede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee2:	e048      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cee4:	2310      	movs	r3, #16
 800cee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceea:	e044      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800ceec:	2320      	movs	r3, #32
 800ceee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cef2:	e040      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cef4:	2340      	movs	r3, #64	@ 0x40
 800cef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cefa:	e03c      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cefc:	2380      	movs	r3, #128	@ 0x80
 800cefe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf02:	e038      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a71      	ldr	r2, [pc, #452]	@ (800d0d0 <UART_SetConfig+0x908>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d130      	bne.n	800cf70 <UART_SetConfig+0x7a8>
 800cf0e:	4b6f      	ldr	r3, [pc, #444]	@ (800d0cc <UART_SetConfig+0x904>)
 800cf10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b05      	cmp	r3, #5
 800cf18:	d826      	bhi.n	800cf68 <UART_SetConfig+0x7a0>
 800cf1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf20 <UART_SetConfig+0x758>)
 800cf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf20:	0800cf39 	.word	0x0800cf39
 800cf24:	0800cf41 	.word	0x0800cf41
 800cf28:	0800cf49 	.word	0x0800cf49
 800cf2c:	0800cf51 	.word	0x0800cf51
 800cf30:	0800cf59 	.word	0x0800cf59
 800cf34:	0800cf61 	.word	0x0800cf61
 800cf38:	2302      	movs	r3, #2
 800cf3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3e:	e01a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf40:	2304      	movs	r3, #4
 800cf42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf46:	e016      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf48:	2308      	movs	r3, #8
 800cf4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4e:	e012      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf50:	2310      	movs	r3, #16
 800cf52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf56:	e00e      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf58:	2320      	movs	r3, #32
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5e:	e00a      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf60:	2340      	movs	r3, #64	@ 0x40
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf66:	e006      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf68:	2380      	movs	r3, #128	@ 0x80
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf6e:	e002      	b.n	800cf76 <UART_SetConfig+0x7ae>
 800cf70:	2380      	movs	r3, #128	@ 0x80
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	4a55      	ldr	r2, [pc, #340]	@ (800d0d0 <UART_SetConfig+0x908>)
 800cf7c:	4293      	cmp	r3, r2
 800cf7e:	f040 80f8 	bne.w	800d172 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cf82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cf86:	2b20      	cmp	r3, #32
 800cf88:	dc46      	bgt.n	800d018 <UART_SetConfig+0x850>
 800cf8a:	2b02      	cmp	r3, #2
 800cf8c:	db75      	blt.n	800d07a <UART_SetConfig+0x8b2>
 800cf8e:	3b02      	subs	r3, #2
 800cf90:	2b1e      	cmp	r3, #30
 800cf92:	d872      	bhi.n	800d07a <UART_SetConfig+0x8b2>
 800cf94:	a201      	add	r2, pc, #4	@ (adr r2, 800cf9c <UART_SetConfig+0x7d4>)
 800cf96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf9a:	bf00      	nop
 800cf9c:	0800d01f 	.word	0x0800d01f
 800cfa0:	0800d07b 	.word	0x0800d07b
 800cfa4:	0800d027 	.word	0x0800d027
 800cfa8:	0800d07b 	.word	0x0800d07b
 800cfac:	0800d07b 	.word	0x0800d07b
 800cfb0:	0800d07b 	.word	0x0800d07b
 800cfb4:	0800d037 	.word	0x0800d037
 800cfb8:	0800d07b 	.word	0x0800d07b
 800cfbc:	0800d07b 	.word	0x0800d07b
 800cfc0:	0800d07b 	.word	0x0800d07b
 800cfc4:	0800d07b 	.word	0x0800d07b
 800cfc8:	0800d07b 	.word	0x0800d07b
 800cfcc:	0800d07b 	.word	0x0800d07b
 800cfd0:	0800d07b 	.word	0x0800d07b
 800cfd4:	0800d047 	.word	0x0800d047
 800cfd8:	0800d07b 	.word	0x0800d07b
 800cfdc:	0800d07b 	.word	0x0800d07b
 800cfe0:	0800d07b 	.word	0x0800d07b
 800cfe4:	0800d07b 	.word	0x0800d07b
 800cfe8:	0800d07b 	.word	0x0800d07b
 800cfec:	0800d07b 	.word	0x0800d07b
 800cff0:	0800d07b 	.word	0x0800d07b
 800cff4:	0800d07b 	.word	0x0800d07b
 800cff8:	0800d07b 	.word	0x0800d07b
 800cffc:	0800d07b 	.word	0x0800d07b
 800d000:	0800d07b 	.word	0x0800d07b
 800d004:	0800d07b 	.word	0x0800d07b
 800d008:	0800d07b 	.word	0x0800d07b
 800d00c:	0800d07b 	.word	0x0800d07b
 800d010:	0800d07b 	.word	0x0800d07b
 800d014:	0800d06d 	.word	0x0800d06d
 800d018:	2b40      	cmp	r3, #64	@ 0x40
 800d01a:	d02a      	beq.n	800d072 <UART_SetConfig+0x8aa>
 800d01c:	e02d      	b.n	800d07a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d01e:	f7fd fadd 	bl	800a5dc <HAL_RCCEx_GetD3PCLK1Freq>
 800d022:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d024:	e02f      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d02a:	4618      	mov	r0, r3
 800d02c:	f7fd faec 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d032:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d034:	e027      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d036:	f107 0318 	add.w	r3, r7, #24
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7fd fc38 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d040:	69fb      	ldr	r3, [r7, #28]
 800d042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d044:	e01f      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d046:	4b21      	ldr	r3, [pc, #132]	@ (800d0cc <UART_SetConfig+0x904>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d052:	4b1e      	ldr	r3, [pc, #120]	@ (800d0cc <UART_SetConfig+0x904>)
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	08db      	lsrs	r3, r3, #3
 800d058:	f003 0303 	and.w	r3, r3, #3
 800d05c:	4a1d      	ldr	r2, [pc, #116]	@ (800d0d4 <UART_SetConfig+0x90c>)
 800d05e:	fa22 f303 	lsr.w	r3, r2, r3
 800d062:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d064:	e00f      	b.n	800d086 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d066:	4b1b      	ldr	r3, [pc, #108]	@ (800d0d4 <UART_SetConfig+0x90c>)
 800d068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d06a:	e00c      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d06c:	4b1a      	ldr	r3, [pc, #104]	@ (800d0d8 <UART_SetConfig+0x910>)
 800d06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d070:	e009      	b.n	800d086 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d078:	e005      	b.n	800d086 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d084:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 81ee 	beq.w	800d46a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	4a12      	ldr	r2, [pc, #72]	@ (800d0dc <UART_SetConfig+0x914>)
 800d094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d098:	461a      	mov	r2, r3
 800d09a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	005b      	lsls	r3, r3, #1
 800d0aa:	4413      	add	r3, r2
 800d0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ae:	429a      	cmp	r2, r3
 800d0b0:	d305      	bcc.n	800d0be <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d910      	bls.n	800d0e0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0c4:	e1d1      	b.n	800d46a <UART_SetConfig+0xca2>
 800d0c6:	bf00      	nop
 800d0c8:	40011c00 	.word	0x40011c00
 800d0cc:	58024400 	.word	0x58024400
 800d0d0:	58000c00 	.word	0x58000c00
 800d0d4:	03d09000 	.word	0x03d09000
 800d0d8:	003d0900 	.word	0x003d0900
 800d0dc:	08013da4 	.word	0x08013da4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	60bb      	str	r3, [r7, #8]
 800d0e6:	60fa      	str	r2, [r7, #12]
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ec:	4ac0      	ldr	r2, [pc, #768]	@ (800d3f0 <UART_SetConfig+0xc28>)
 800d0ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	603b      	str	r3, [r7, #0]
 800d0f8:	607a      	str	r2, [r7, #4]
 800d0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d102:	f7f3 f95d 	bl	80003c0 <__aeabi_uldivmod>
 800d106:	4602      	mov	r2, r0
 800d108:	460b      	mov	r3, r1
 800d10a:	4610      	mov	r0, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	f04f 0200 	mov.w	r2, #0
 800d112:	f04f 0300 	mov.w	r3, #0
 800d116:	020b      	lsls	r3, r1, #8
 800d118:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d11c:	0202      	lsls	r2, r0, #8
 800d11e:	6979      	ldr	r1, [r7, #20]
 800d120:	6849      	ldr	r1, [r1, #4]
 800d122:	0849      	lsrs	r1, r1, #1
 800d124:	2000      	movs	r0, #0
 800d126:	460c      	mov	r4, r1
 800d128:	4605      	mov	r5, r0
 800d12a:	eb12 0804 	adds.w	r8, r2, r4
 800d12e:	eb43 0905 	adc.w	r9, r3, r5
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	469a      	mov	sl, r3
 800d13a:	4693      	mov	fp, r2
 800d13c:	4652      	mov	r2, sl
 800d13e:	465b      	mov	r3, fp
 800d140:	4640      	mov	r0, r8
 800d142:	4649      	mov	r1, r9
 800d144:	f7f3 f93c 	bl	80003c0 <__aeabi_uldivmod>
 800d148:	4602      	mov	r2, r0
 800d14a:	460b      	mov	r3, r1
 800d14c:	4613      	mov	r3, r2
 800d14e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d156:	d308      	bcc.n	800d16a <UART_SetConfig+0x9a2>
 800d158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d15a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d15e:	d204      	bcs.n	800d16a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d166:	60da      	str	r2, [r3, #12]
 800d168:	e17f      	b.n	800d46a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d170:	e17b      	b.n	800d46a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	69db      	ldr	r3, [r3, #28]
 800d176:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d17a:	f040 80bd 	bne.w	800d2f8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d17e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d182:	2b20      	cmp	r3, #32
 800d184:	dc48      	bgt.n	800d218 <UART_SetConfig+0xa50>
 800d186:	2b00      	cmp	r3, #0
 800d188:	db7b      	blt.n	800d282 <UART_SetConfig+0xaba>
 800d18a:	2b20      	cmp	r3, #32
 800d18c:	d879      	bhi.n	800d282 <UART_SetConfig+0xaba>
 800d18e:	a201      	add	r2, pc, #4	@ (adr r2, 800d194 <UART_SetConfig+0x9cc>)
 800d190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d194:	0800d21f 	.word	0x0800d21f
 800d198:	0800d227 	.word	0x0800d227
 800d19c:	0800d283 	.word	0x0800d283
 800d1a0:	0800d283 	.word	0x0800d283
 800d1a4:	0800d22f 	.word	0x0800d22f
 800d1a8:	0800d283 	.word	0x0800d283
 800d1ac:	0800d283 	.word	0x0800d283
 800d1b0:	0800d283 	.word	0x0800d283
 800d1b4:	0800d23f 	.word	0x0800d23f
 800d1b8:	0800d283 	.word	0x0800d283
 800d1bc:	0800d283 	.word	0x0800d283
 800d1c0:	0800d283 	.word	0x0800d283
 800d1c4:	0800d283 	.word	0x0800d283
 800d1c8:	0800d283 	.word	0x0800d283
 800d1cc:	0800d283 	.word	0x0800d283
 800d1d0:	0800d283 	.word	0x0800d283
 800d1d4:	0800d24f 	.word	0x0800d24f
 800d1d8:	0800d283 	.word	0x0800d283
 800d1dc:	0800d283 	.word	0x0800d283
 800d1e0:	0800d283 	.word	0x0800d283
 800d1e4:	0800d283 	.word	0x0800d283
 800d1e8:	0800d283 	.word	0x0800d283
 800d1ec:	0800d283 	.word	0x0800d283
 800d1f0:	0800d283 	.word	0x0800d283
 800d1f4:	0800d283 	.word	0x0800d283
 800d1f8:	0800d283 	.word	0x0800d283
 800d1fc:	0800d283 	.word	0x0800d283
 800d200:	0800d283 	.word	0x0800d283
 800d204:	0800d283 	.word	0x0800d283
 800d208:	0800d283 	.word	0x0800d283
 800d20c:	0800d283 	.word	0x0800d283
 800d210:	0800d283 	.word	0x0800d283
 800d214:	0800d275 	.word	0x0800d275
 800d218:	2b40      	cmp	r3, #64	@ 0x40
 800d21a:	d02e      	beq.n	800d27a <UART_SetConfig+0xab2>
 800d21c:	e031      	b.n	800d282 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d21e:	f7fb fafd 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 800d222:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d224:	e033      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d226:	f7fb fb0f 	bl	8008848 <HAL_RCC_GetPCLK2Freq>
 800d22a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d22c:	e02f      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d22e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d232:	4618      	mov	r0, r3
 800d234:	f7fd f9e8 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d23c:	e027      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d23e:	f107 0318 	add.w	r3, r7, #24
 800d242:	4618      	mov	r0, r3
 800d244:	f7fd fb34 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d24c:	e01f      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d24e:	4b69      	ldr	r3, [pc, #420]	@ (800d3f4 <UART_SetConfig+0xc2c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	f003 0320 	and.w	r3, r3, #32
 800d256:	2b00      	cmp	r3, #0
 800d258:	d009      	beq.n	800d26e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d25a:	4b66      	ldr	r3, [pc, #408]	@ (800d3f4 <UART_SetConfig+0xc2c>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	08db      	lsrs	r3, r3, #3
 800d260:	f003 0303 	and.w	r3, r3, #3
 800d264:	4a64      	ldr	r2, [pc, #400]	@ (800d3f8 <UART_SetConfig+0xc30>)
 800d266:	fa22 f303 	lsr.w	r3, r2, r3
 800d26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d26c:	e00f      	b.n	800d28e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d26e:	4b62      	ldr	r3, [pc, #392]	@ (800d3f8 <UART_SetConfig+0xc30>)
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d272:	e00c      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d274:	4b61      	ldr	r3, [pc, #388]	@ (800d3fc <UART_SetConfig+0xc34>)
 800d276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d278:	e009      	b.n	800d28e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d27a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d280:	e005      	b.n	800d28e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d282:	2300      	movs	r3, #0
 800d284:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d286:	2301      	movs	r3, #1
 800d288:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d28c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d28e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 80ea 	beq.w	800d46a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d29a:	4a55      	ldr	r2, [pc, #340]	@ (800d3f0 <UART_SetConfig+0xc28>)
 800d29c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2a8:	005a      	lsls	r2, r3, #1
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	685b      	ldr	r3, [r3, #4]
 800d2ae:	085b      	lsrs	r3, r3, #1
 800d2b0:	441a      	add	r2, r3
 800d2b2:	697b      	ldr	r3, [r7, #20]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2be:	2b0f      	cmp	r3, #15
 800d2c0:	d916      	bls.n	800d2f0 <UART_SetConfig+0xb28>
 800d2c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2c8:	d212      	bcs.n	800d2f0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	f023 030f 	bic.w	r3, r3, #15
 800d2d2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d6:	085b      	lsrs	r3, r3, #1
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	f003 0307 	and.w	r3, r3, #7
 800d2de:	b29a      	uxth	r2, r3
 800d2e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d2ec:	60da      	str	r2, [r3, #12]
 800d2ee:	e0bc      	b.n	800d46a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d2f6:	e0b8      	b.n	800d46a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d2f8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d2fc:	2b20      	cmp	r3, #32
 800d2fe:	dc4b      	bgt.n	800d398 <UART_SetConfig+0xbd0>
 800d300:	2b00      	cmp	r3, #0
 800d302:	f2c0 8087 	blt.w	800d414 <UART_SetConfig+0xc4c>
 800d306:	2b20      	cmp	r3, #32
 800d308:	f200 8084 	bhi.w	800d414 <UART_SetConfig+0xc4c>
 800d30c:	a201      	add	r2, pc, #4	@ (adr r2, 800d314 <UART_SetConfig+0xb4c>)
 800d30e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d312:	bf00      	nop
 800d314:	0800d39f 	.word	0x0800d39f
 800d318:	0800d3a7 	.word	0x0800d3a7
 800d31c:	0800d415 	.word	0x0800d415
 800d320:	0800d415 	.word	0x0800d415
 800d324:	0800d3af 	.word	0x0800d3af
 800d328:	0800d415 	.word	0x0800d415
 800d32c:	0800d415 	.word	0x0800d415
 800d330:	0800d415 	.word	0x0800d415
 800d334:	0800d3bf 	.word	0x0800d3bf
 800d338:	0800d415 	.word	0x0800d415
 800d33c:	0800d415 	.word	0x0800d415
 800d340:	0800d415 	.word	0x0800d415
 800d344:	0800d415 	.word	0x0800d415
 800d348:	0800d415 	.word	0x0800d415
 800d34c:	0800d415 	.word	0x0800d415
 800d350:	0800d415 	.word	0x0800d415
 800d354:	0800d3cf 	.word	0x0800d3cf
 800d358:	0800d415 	.word	0x0800d415
 800d35c:	0800d415 	.word	0x0800d415
 800d360:	0800d415 	.word	0x0800d415
 800d364:	0800d415 	.word	0x0800d415
 800d368:	0800d415 	.word	0x0800d415
 800d36c:	0800d415 	.word	0x0800d415
 800d370:	0800d415 	.word	0x0800d415
 800d374:	0800d415 	.word	0x0800d415
 800d378:	0800d415 	.word	0x0800d415
 800d37c:	0800d415 	.word	0x0800d415
 800d380:	0800d415 	.word	0x0800d415
 800d384:	0800d415 	.word	0x0800d415
 800d388:	0800d415 	.word	0x0800d415
 800d38c:	0800d415 	.word	0x0800d415
 800d390:	0800d415 	.word	0x0800d415
 800d394:	0800d407 	.word	0x0800d407
 800d398:	2b40      	cmp	r3, #64	@ 0x40
 800d39a:	d037      	beq.n	800d40c <UART_SetConfig+0xc44>
 800d39c:	e03a      	b.n	800d414 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d39e:	f7fb fa3d 	bl	800881c <HAL_RCC_GetPCLK1Freq>
 800d3a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3a4:	e03c      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3a6:	f7fb fa4f 	bl	8008848 <HAL_RCC_GetPCLK2Freq>
 800d3aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3ac:	e038      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f7fd f928 	bl	800a608 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3bc:	e030      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3be:	f107 0318 	add.w	r3, r7, #24
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	f7fd fa74 	bl	800a8b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3cc:	e028      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3ce:	4b09      	ldr	r3, [pc, #36]	@ (800d3f4 <UART_SetConfig+0xc2c>)
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f003 0320 	and.w	r3, r3, #32
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d012      	beq.n	800d400 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3da:	4b06      	ldr	r3, [pc, #24]	@ (800d3f4 <UART_SetConfig+0xc2c>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	08db      	lsrs	r3, r3, #3
 800d3e0:	f003 0303 	and.w	r3, r3, #3
 800d3e4:	4a04      	ldr	r2, [pc, #16]	@ (800d3f8 <UART_SetConfig+0xc30>)
 800d3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3ec:	e018      	b.n	800d420 <UART_SetConfig+0xc58>
 800d3ee:	bf00      	nop
 800d3f0:	08013da4 	.word	0x08013da4
 800d3f4:	58024400 	.word	0x58024400
 800d3f8:	03d09000 	.word	0x03d09000
 800d3fc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d400:	4b24      	ldr	r3, [pc, #144]	@ (800d494 <UART_SetConfig+0xccc>)
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d404:	e00c      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d406:	4b24      	ldr	r3, [pc, #144]	@ (800d498 <UART_SetConfig+0xcd0>)
 800d408:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40a:	e009      	b.n	800d420 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d40c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d412:	e005      	b.n	800d420 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d414:	2300      	movs	r3, #0
 800d416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d41e:	bf00      	nop
    }

    if (pclk != 0U)
 800d420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d422:	2b00      	cmp	r3, #0
 800d424:	d021      	beq.n	800d46a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d42a:	4a1c      	ldr	r2, [pc, #112]	@ (800d49c <UART_SetConfig+0xcd4>)
 800d42c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d430:	461a      	mov	r2, r3
 800d432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d434:	fbb3 f2f2 	udiv	r2, r3, r2
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	685b      	ldr	r3, [r3, #4]
 800d43c:	085b      	lsrs	r3, r3, #1
 800d43e:	441a      	add	r2, r3
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	fbb2 f3f3 	udiv	r3, r2, r3
 800d448:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d44a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d44c:	2b0f      	cmp	r3, #15
 800d44e:	d909      	bls.n	800d464 <UART_SetConfig+0xc9c>
 800d450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d452:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d456:	d205      	bcs.n	800d464 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	60da      	str	r2, [r3, #12]
 800d462:	e002      	b.n	800d46a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d464:	2301      	movs	r3, #1
 800d466:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	2201      	movs	r2, #1
 800d46e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	2201      	movs	r2, #1
 800d476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2200      	movs	r2, #0
 800d47e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2200      	movs	r2, #0
 800d484:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d486:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3748      	adds	r7, #72	@ 0x48
 800d48e:	46bd      	mov	sp, r7
 800d490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d494:	03d09000 	.word	0x03d09000
 800d498:	003d0900 	.word	0x003d0900
 800d49c:	08013da4 	.word	0x08013da4

0800d4a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ac:	f003 0308 	and.w	r3, r3, #8
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00a      	beq.n	800d4ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00a      	beq.n	800d50e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d512:	f003 0304 	and.w	r3, r3, #4
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	430a      	orrs	r2, r1
 800d52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00a      	beq.n	800d574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	430a      	orrs	r2, r1
 800d572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01a      	beq.n	800d5b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	430a      	orrs	r2, r1
 800d594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d59a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d59e:	d10a      	bne.n	800d5b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	605a      	str	r2, [r3, #4]
  }
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b098      	sub	sp, #96	@ 0x60
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5f4:	f7f5 ff0c 	bl	8003410 <HAL_GetTick>
 800d5f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b08      	cmp	r3, #8
 800d606:	d12f      	bne.n	800d668 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d608:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d610:	2200      	movs	r2, #0
 800d612:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f88e 	bl	800d738 <UART_WaitOnFlagUntilTimeout>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d022      	beq.n	800d668 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d636:	653b      	str	r3, [r7, #80]	@ 0x50
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d640:	647b      	str	r3, [r7, #68]	@ 0x44
 800d642:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d64e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e6      	bne.n	800d622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2220      	movs	r2, #32
 800d658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2200      	movs	r2, #0
 800d660:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d664:	2303      	movs	r3, #3
 800d666:	e063      	b.n	800d730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f003 0304 	and.w	r3, r3, #4
 800d672:	2b04      	cmp	r3, #4
 800d674:	d149      	bne.n	800d70a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d676:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d67e:	2200      	movs	r2, #0
 800d680:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f857 	bl	800d738 <UART_WaitOnFlagUntilTimeout>
 800d68a:	4603      	mov	r3, r0
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d03c      	beq.n	800d70a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d698:	e853 3f00 	ldrex	r3, [r3]
 800d69c:	623b      	str	r3, [r7, #32]
   return(result);
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	461a      	mov	r2, r3
 800d6ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b6:	e841 2300 	strex	r3, r2, [r1]
 800d6ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1e6      	bne.n	800d690 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3308      	adds	r3, #8
 800d6c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	e853 3f00 	ldrex	r3, [r3]
 800d6d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	f023 0301 	bic.w	r3, r3, #1
 800d6d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	3308      	adds	r3, #8
 800d6e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6e2:	61fa      	str	r2, [r7, #28]
 800d6e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6e6:	69b9      	ldr	r1, [r7, #24]
 800d6e8:	69fa      	ldr	r2, [r7, #28]
 800d6ea:	e841 2300 	strex	r3, r2, [r1]
 800d6ee:	617b      	str	r3, [r7, #20]
   return(result);
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d1e5      	bne.n	800d6c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2220      	movs	r2, #32
 800d6fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d706:	2303      	movs	r3, #3
 800d708:	e012      	b.n	800d730 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2220      	movs	r2, #32
 800d70e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2220      	movs	r2, #32
 800d716:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2200      	movs	r2, #0
 800d724:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	2200      	movs	r2, #0
 800d72a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d72e:	2300      	movs	r3, #0
}
 800d730:	4618      	mov	r0, r3
 800d732:	3758      	adds	r7, #88	@ 0x58
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	603b      	str	r3, [r7, #0]
 800d744:	4613      	mov	r3, r2
 800d746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d748:	e04f      	b.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d750:	d04b      	beq.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d752:	f7f5 fe5d 	bl	8003410 <HAL_GetTick>
 800d756:	4602      	mov	r2, r0
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	1ad3      	subs	r3, r2, r3
 800d75c:	69ba      	ldr	r2, [r7, #24]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d302      	bcc.n	800d768 <UART_WaitOnFlagUntilTimeout+0x30>
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d768:	2303      	movs	r3, #3
 800d76a:	e04e      	b.n	800d80a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 0304 	and.w	r3, r3, #4
 800d776:	2b00      	cmp	r3, #0
 800d778:	d037      	beq.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b80      	cmp	r3, #128	@ 0x80
 800d77e:	d034      	beq.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b40      	cmp	r3, #64	@ 0x40
 800d784:	d031      	beq.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	69db      	ldr	r3, [r3, #28]
 800d78c:	f003 0308 	and.w	r3, r3, #8
 800d790:	2b08      	cmp	r3, #8
 800d792:	d110      	bne.n	800d7b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	2208      	movs	r2, #8
 800d79a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d79c:	68f8      	ldr	r0, [r7, #12]
 800d79e:	f000 f839 	bl	800d814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2208      	movs	r2, #8
 800d7a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e029      	b.n	800d80a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	69db      	ldr	r3, [r3, #28]
 800d7bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7c4:	d111      	bne.n	800d7ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d7ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7d0:	68f8      	ldr	r0, [r7, #12]
 800d7d2:	f000 f81f 	bl	800d814 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	2220      	movs	r2, #32
 800d7da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e00f      	b.n	800d80a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	69da      	ldr	r2, [r3, #28]
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	68ba      	ldr	r2, [r7, #8]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	bf0c      	ite	eq
 800d7fa:	2301      	moveq	r3, #1
 800d7fc:	2300      	movne	r3, #0
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	461a      	mov	r2, r3
 800d802:	79fb      	ldrb	r3, [r7, #7]
 800d804:	429a      	cmp	r2, r3
 800d806:	d0a0      	beq.n	800d74a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3710      	adds	r7, #16
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d814:	b480      	push	{r7}
 800d816:	b095      	sub	sp, #84	@ 0x54
 800d818:	af00      	add	r7, sp, #0
 800d81a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d824:	e853 3f00 	ldrex	r3, [r3]
 800d828:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d830:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d83a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d83c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d83e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d840:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d842:	e841 2300 	strex	r3, r2, [r1]
 800d846:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1e6      	bne.n	800d81c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	3308      	adds	r3, #8
 800d854:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	e853 3f00 	ldrex	r3, [r3]
 800d85c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d85e:	69fa      	ldr	r2, [r7, #28]
 800d860:	4b1e      	ldr	r3, [pc, #120]	@ (800d8dc <UART_EndRxTransfer+0xc8>)
 800d862:	4013      	ands	r3, r2
 800d864:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	3308      	adds	r3, #8
 800d86c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d86e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d870:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d872:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d876:	e841 2300 	strex	r3, r2, [r1]
 800d87a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d87c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1e5      	bne.n	800d84e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d886:	2b01      	cmp	r3, #1
 800d888:	d118      	bne.n	800d8bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	e853 3f00 	ldrex	r3, [r3]
 800d896:	60bb      	str	r3, [r7, #8]
   return(result);
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	f023 0310 	bic.w	r3, r3, #16
 800d89e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	461a      	mov	r2, r3
 800d8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8a8:	61bb      	str	r3, [r7, #24]
 800d8aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ac:	6979      	ldr	r1, [r7, #20]
 800d8ae:	69ba      	ldr	r2, [r7, #24]
 800d8b0:	e841 2300 	strex	r3, r2, [r1]
 800d8b4:	613b      	str	r3, [r7, #16]
   return(result);
 800d8b6:	693b      	ldr	r3, [r7, #16]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d1e6      	bne.n	800d88a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2220      	movs	r2, #32
 800d8c0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d8d0:	bf00      	nop
 800d8d2:	3754      	adds	r7, #84	@ 0x54
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8da:	4770      	bx	lr
 800d8dc:	effffffe 	.word	0xeffffffe

0800d8e0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d101      	bne.n	800d8f6 <HAL_UARTEx_DisableFifoMode+0x16>
 800d8f2:	2302      	movs	r3, #2
 800d8f4:	e027      	b.n	800d946 <HAL_UARTEx_DisableFifoMode+0x66>
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2224      	movs	r2, #36	@ 0x24
 800d902:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	681a      	ldr	r2, [r3, #0]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	f022 0201 	bic.w	r2, r2, #1
 800d91c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d924:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	68fa      	ldr	r2, [r7, #12]
 800d932:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2220      	movs	r2, #32
 800d938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d944:	2300      	movs	r3, #0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr

0800d952 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b084      	sub	sp, #16
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
 800d95a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d962:	2b01      	cmp	r3, #1
 800d964:	d101      	bne.n	800d96a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d966:	2302      	movs	r3, #2
 800d968:	e02d      	b.n	800d9c6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2201      	movs	r2, #1
 800d96e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2224      	movs	r2, #36	@ 0x24
 800d976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f022 0201 	bic.w	r2, r2, #1
 800d990:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	689b      	ldr	r3, [r3, #8]
 800d998:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	683a      	ldr	r2, [r7, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f850 	bl	800da4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68fa      	ldr	r2, [r7, #12]
 800d9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2220      	movs	r2, #32
 800d9b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	2200      	movs	r2, #0
 800d9c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3710      	adds	r7, #16
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	bd80      	pop	{r7, pc}

0800d9ce <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d9ce:	b580      	push	{r7, lr}
 800d9d0:	b084      	sub	sp, #16
 800d9d2:	af00      	add	r7, sp, #0
 800d9d4:	6078      	str	r0, [r7, #4]
 800d9d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d101      	bne.n	800d9e6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d9e2:	2302      	movs	r3, #2
 800d9e4:	e02d      	b.n	800da42 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2224      	movs	r2, #36	@ 0x24
 800d9f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681a      	ldr	r2, [r3, #0]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f022 0201 	bic.w	r2, r2, #1
 800da0c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	683a      	ldr	r2, [r7, #0]
 800da1e:	430a      	orrs	r2, r1
 800da20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f812 	bl	800da4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2220      	movs	r2, #32
 800da34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da40:	2300      	movs	r3, #0
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
	...

0800da4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b085      	sub	sp, #20
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d108      	bne.n	800da6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	2201      	movs	r2, #1
 800da60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800da6c:	e031      	b.n	800dad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800da6e:	2310      	movs	r3, #16
 800da70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800da72:	2310      	movs	r3, #16
 800da74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	0e5b      	lsrs	r3, r3, #25
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	f003 0307 	and.w	r3, r3, #7
 800da84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	689b      	ldr	r3, [r3, #8]
 800da8c:	0f5b      	lsrs	r3, r3, #29
 800da8e:	b2db      	uxtb	r3, r3
 800da90:	f003 0307 	and.w	r3, r3, #7
 800da94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	7b3a      	ldrb	r2, [r7, #12]
 800da9a:	4911      	ldr	r1, [pc, #68]	@ (800dae0 <UARTEx_SetNbDataToProcess+0x94>)
 800da9c:	5c8a      	ldrb	r2, [r1, r2]
 800da9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800daa2:	7b3a      	ldrb	r2, [r7, #12]
 800daa4:	490f      	ldr	r1, [pc, #60]	@ (800dae4 <UARTEx_SetNbDataToProcess+0x98>)
 800daa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800daa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800daac:	b29a      	uxth	r2, r3
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dab4:	7bfb      	ldrb	r3, [r7, #15]
 800dab6:	7b7a      	ldrb	r2, [r7, #13]
 800dab8:	4909      	ldr	r1, [pc, #36]	@ (800dae0 <UARTEx_SetNbDataToProcess+0x94>)
 800daba:	5c8a      	ldrb	r2, [r1, r2]
 800dabc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dac0:	7b7a      	ldrb	r2, [r7, #13]
 800dac2:	4908      	ldr	r1, [pc, #32]	@ (800dae4 <UARTEx_SetNbDataToProcess+0x98>)
 800dac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dac6:	fb93 f3f2 	sdiv	r3, r3, r2
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dad2:	bf00      	nop
 800dad4:	3714      	adds	r7, #20
 800dad6:	46bd      	mov	sp, r7
 800dad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	08013dbc 	.word	0x08013dbc
 800dae4:	08013dc4 	.word	0x08013dc4

0800dae8 <__NVIC_SetPriority>:
{
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	4603      	mov	r3, r0
 800daf0:	6039      	str	r1, [r7, #0]
 800daf2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800daf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	db0a      	blt.n	800db12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	b2da      	uxtb	r2, r3
 800db00:	490c      	ldr	r1, [pc, #48]	@ (800db34 <__NVIC_SetPriority+0x4c>)
 800db02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db06:	0112      	lsls	r2, r2, #4
 800db08:	b2d2      	uxtb	r2, r2
 800db0a:	440b      	add	r3, r1
 800db0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800db10:	e00a      	b.n	800db28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	b2da      	uxtb	r2, r3
 800db16:	4908      	ldr	r1, [pc, #32]	@ (800db38 <__NVIC_SetPriority+0x50>)
 800db18:	88fb      	ldrh	r3, [r7, #6]
 800db1a:	f003 030f 	and.w	r3, r3, #15
 800db1e:	3b04      	subs	r3, #4
 800db20:	0112      	lsls	r2, r2, #4
 800db22:	b2d2      	uxtb	r2, r2
 800db24:	440b      	add	r3, r1
 800db26:	761a      	strb	r2, [r3, #24]
}
 800db28:	bf00      	nop
 800db2a:	370c      	adds	r7, #12
 800db2c:	46bd      	mov	sp, r7
 800db2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db32:	4770      	bx	lr
 800db34:	e000e100 	.word	0xe000e100
 800db38:	e000ed00 	.word	0xe000ed00

0800db3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db3c:	b580      	push	{r7, lr}
 800db3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db40:	4b05      	ldr	r3, [pc, #20]	@ (800db58 <SysTick_Handler+0x1c>)
 800db42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db44:	f002 f916 	bl	800fd74 <xTaskGetSchedulerState>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d001      	beq.n	800db52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db4e:	f003 f80b 	bl	8010b68 <xPortSysTickHandler>
  }
}
 800db52:	bf00      	nop
 800db54:	bd80      	pop	{r7, pc}
 800db56:	bf00      	nop
 800db58:	e000e010 	.word	0xe000e010

0800db5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800db5c:	b580      	push	{r7, lr}
 800db5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800db60:	2100      	movs	r1, #0
 800db62:	f06f 0004 	mvn.w	r0, #4
 800db66:	f7ff ffbf 	bl	800dae8 <__NVIC_SetPriority>
#endif
}
 800db6a:	bf00      	nop
 800db6c:	bd80      	pop	{r7, pc}
	...

0800db70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db76:	f3ef 8305 	mrs	r3, IPSR
 800db7a:	603b      	str	r3, [r7, #0]
  return(result);
 800db7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d003      	beq.n	800db8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800db82:	f06f 0305 	mvn.w	r3, #5
 800db86:	607b      	str	r3, [r7, #4]
 800db88:	e00c      	b.n	800dba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800db8a:	4b0a      	ldr	r3, [pc, #40]	@ (800dbb4 <osKernelInitialize+0x44>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d105      	bne.n	800db9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800db92:	4b08      	ldr	r3, [pc, #32]	@ (800dbb4 <osKernelInitialize+0x44>)
 800db94:	2201      	movs	r2, #1
 800db96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800db98:	2300      	movs	r3, #0
 800db9a:	607b      	str	r3, [r7, #4]
 800db9c:	e002      	b.n	800dba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800db9e:	f04f 33ff 	mov.w	r3, #4294967295
 800dba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dba4:	687b      	ldr	r3, [r7, #4]
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	370c      	adds	r7, #12
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	24000bbc 	.word	0x24000bbc

0800dbb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b082      	sub	sp, #8
 800dbbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbbe:	f3ef 8305 	mrs	r3, IPSR
 800dbc2:	603b      	str	r3, [r7, #0]
  return(result);
 800dbc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d003      	beq.n	800dbd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800dbca:	f06f 0305 	mvn.w	r3, #5
 800dbce:	607b      	str	r3, [r7, #4]
 800dbd0:	e010      	b.n	800dbf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dbd2:	4b0b      	ldr	r3, [pc, #44]	@ (800dc00 <osKernelStart+0x48>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d109      	bne.n	800dbee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dbda:	f7ff ffbf 	bl	800db5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dbde:	4b08      	ldr	r3, [pc, #32]	@ (800dc00 <osKernelStart+0x48>)
 800dbe0:	2202      	movs	r2, #2
 800dbe2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dbe4:	f001 fc52 	bl	800f48c <vTaskStartScheduler>
      stat = osOK;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	607b      	str	r3, [r7, #4]
 800dbec:	e002      	b.n	800dbf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dbee:	f04f 33ff 	mov.w	r3, #4294967295
 800dbf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbf4:	687b      	ldr	r3, [r7, #4]
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3708      	adds	r7, #8
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}
 800dbfe:	bf00      	nop
 800dc00:	24000bbc 	.word	0x24000bbc

0800dc04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08e      	sub	sp, #56	@ 0x38
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc10:	2300      	movs	r3, #0
 800dc12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc14:	f3ef 8305 	mrs	r3, IPSR
 800dc18:	617b      	str	r3, [r7, #20]
  return(result);
 800dc1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d17e      	bne.n	800dd1e <osThreadNew+0x11a>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d07b      	beq.n	800dd1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc26:	2380      	movs	r3, #128	@ 0x80
 800dc28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc2a:	2318      	movs	r3, #24
 800dc2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800dc32:	f04f 33ff 	mov.w	r3, #4294967295
 800dc36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d045      	beq.n	800dcca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d002      	beq.n	800dc4c <osThreadNew+0x48>
        name = attr->name;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	699b      	ldr	r3, [r3, #24]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d002      	beq.n	800dc5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	699b      	ldr	r3, [r3, #24]
 800dc58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d008      	beq.n	800dc72 <osThreadNew+0x6e>
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	2b38      	cmp	r3, #56	@ 0x38
 800dc64:	d805      	bhi.n	800dc72 <osThreadNew+0x6e>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d001      	beq.n	800dc76 <osThreadNew+0x72>
        return (NULL);
 800dc72:	2300      	movs	r3, #0
 800dc74:	e054      	b.n	800dd20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	695b      	ldr	r3, [r3, #20]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d003      	beq.n	800dc86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	695b      	ldr	r3, [r3, #20]
 800dc82:	089b      	lsrs	r3, r3, #2
 800dc84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00e      	beq.n	800dcac <osThreadNew+0xa8>
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	2ba7      	cmp	r3, #167	@ 0xa7
 800dc94:	d90a      	bls.n	800dcac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d006      	beq.n	800dcac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d002      	beq.n	800dcac <osThreadNew+0xa8>
        mem = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	61bb      	str	r3, [r7, #24]
 800dcaa:	e010      	b.n	800dcce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d10c      	bne.n	800dcce <osThreadNew+0xca>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d108      	bne.n	800dcce <osThreadNew+0xca>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d104      	bne.n	800dcce <osThreadNew+0xca>
          mem = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	61bb      	str	r3, [r7, #24]
 800dcc8:	e001      	b.n	800dcce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dcca:	2300      	movs	r3, #0
 800dccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d110      	bne.n	800dcf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dcd8:	687a      	ldr	r2, [r7, #4]
 800dcda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dcdc:	9202      	str	r2, [sp, #8]
 800dcde:	9301      	str	r3, [sp, #4]
 800dce0:	69fb      	ldr	r3, [r7, #28]
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	68bb      	ldr	r3, [r7, #8]
 800dce6:	6a3a      	ldr	r2, [r7, #32]
 800dce8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f001 f964 	bl	800efb8 <xTaskCreateStatic>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	613b      	str	r3, [r7, #16]
 800dcf4:	e013      	b.n	800dd1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d110      	bne.n	800dd1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dcfc:	6a3b      	ldr	r3, [r7, #32]
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	f107 0310 	add.w	r3, r7, #16
 800dd04:	9301      	str	r3, [sp, #4]
 800dd06:	69fb      	ldr	r3, [r7, #28]
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd0e:	68f8      	ldr	r0, [r7, #12]
 800dd10:	f001 f9b2 	bl	800f078 <xTaskCreate>
 800dd14:	4603      	mov	r3, r0
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d001      	beq.n	800dd1e <osThreadNew+0x11a>
            hTask = NULL;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd1e:	693b      	ldr	r3, [r7, #16]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3728      	adds	r7, #40	@ 0x28
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b086      	sub	sp, #24
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd34:	f3ef 8305 	mrs	r3, IPSR
 800dd38:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d003      	beq.n	800dd48 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800dd40:	f06f 0305 	mvn.w	r3, #5
 800dd44:	617b      	str	r3, [r7, #20]
 800dd46:	e00b      	b.n	800dd60 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d103      	bne.n	800dd56 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800dd4e:	f06f 0303 	mvn.w	r3, #3
 800dd52:	617b      	str	r3, [r7, #20]
 800dd54:	e004      	b.n	800dd60 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800dd56:	2300      	movs	r3, #0
 800dd58:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800dd5a:	6938      	ldr	r0, [r7, #16]
 800dd5c:	f001 fb20 	bl	800f3a0 <vTaskSuspend>
  }

  return (stat);
 800dd60:	697b      	ldr	r3, [r7, #20]
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b084      	sub	sp, #16
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd72:	f3ef 8305 	mrs	r3, IPSR
 800dd76:	60bb      	str	r3, [r7, #8]
  return(result);
 800dd78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <osDelay+0x1c>
    stat = osErrorISR;
 800dd7e:	f06f 0305 	mvn.w	r3, #5
 800dd82:	60fb      	str	r3, [r7, #12]
 800dd84:	e007      	b.n	800dd96 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d002      	beq.n	800dd96 <osDelay+0x2c>
      vTaskDelay(ticks);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f001 facf 	bl	800f334 <vTaskDelay>
    }
  }

  return (stat);
 800dd96:	68fb      	ldr	r3, [r7, #12]
}
 800dd98:	4618      	mov	r0, r3
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddac:	f3ef 8305 	mrs	r3, IPSR
 800ddb0:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddb2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d174      	bne.n	800dea2 <osMutexNew+0x102>
    if (attr != NULL) {
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d003      	beq.n	800ddc6 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685b      	ldr	r3, [r3, #4]
 800ddc2:	61bb      	str	r3, [r7, #24]
 800ddc4:	e001      	b.n	800ddca <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	f003 0301 	and.w	r3, r3, #1
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d002      	beq.n	800ddda <osMutexNew+0x3a>
      rmtx = 1U;
 800ddd4:	2301      	movs	r3, #1
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e001      	b.n	800ddde <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ddda:	2300      	movs	r3, #0
 800dddc:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	f003 0308 	and.w	r3, r3, #8
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d15c      	bne.n	800dea2 <osMutexNew+0x102>
      mem = -1;
 800dde8:	f04f 33ff 	mov.w	r3, #4294967295
 800ddec:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d015      	beq.n	800de20 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d006      	beq.n	800de0a <osMutexNew+0x6a>
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	68db      	ldr	r3, [r3, #12]
 800de00:	2b4f      	cmp	r3, #79	@ 0x4f
 800de02:	d902      	bls.n	800de0a <osMutexNew+0x6a>
          mem = 1;
 800de04:	2301      	movs	r3, #1
 800de06:	613b      	str	r3, [r7, #16]
 800de08:	e00c      	b.n	800de24 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d108      	bne.n	800de24 <osMutexNew+0x84>
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d104      	bne.n	800de24 <osMutexNew+0x84>
            mem = 0;
 800de1a:	2300      	movs	r3, #0
 800de1c:	613b      	str	r3, [r7, #16]
 800de1e:	e001      	b.n	800de24 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800de20:	2300      	movs	r3, #0
 800de22:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800de24:	693b      	ldr	r3, [r7, #16]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d112      	bne.n	800de50 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d007      	beq.n	800de40 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	689b      	ldr	r3, [r3, #8]
 800de34:	4619      	mov	r1, r3
 800de36:	2004      	movs	r0, #4
 800de38:	f000 fb1f 	bl	800e47a <xQueueCreateMutexStatic>
 800de3c:	61f8      	str	r0, [r7, #28]
 800de3e:	e016      	b.n	800de6e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	4619      	mov	r1, r3
 800de46:	2001      	movs	r0, #1
 800de48:	f000 fb17 	bl	800e47a <xQueueCreateMutexStatic>
 800de4c:	61f8      	str	r0, [r7, #28]
 800de4e:	e00e      	b.n	800de6e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d10b      	bne.n	800de6e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d004      	beq.n	800de66 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800de5c:	2004      	movs	r0, #4
 800de5e:	f000 faf4 	bl	800e44a <xQueueCreateMutex>
 800de62:	61f8      	str	r0, [r7, #28]
 800de64:	e003      	b.n	800de6e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800de66:	2001      	movs	r0, #1
 800de68:	f000 faef 	bl	800e44a <xQueueCreateMutex>
 800de6c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00c      	beq.n	800de8e <osMutexNew+0xee>
        if (attr != NULL) {
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d003      	beq.n	800de82 <osMutexNew+0xe2>
          name = attr->name;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]
 800de80:	e001      	b.n	800de86 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800de82:	2300      	movs	r3, #0
 800de84:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800de86:	68f9      	ldr	r1, [r7, #12]
 800de88:	69f8      	ldr	r0, [r7, #28]
 800de8a:	f001 f837 	bl	800eefc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d006      	beq.n	800dea2 <osMutexNew+0x102>
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d003      	beq.n	800dea2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	f043 0301 	orr.w	r3, r3, #1
 800dea0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800dea2:	69fb      	ldr	r3, [r7, #28]
}
 800dea4:	4618      	mov	r0, r3
 800dea6:	3720      	adds	r7, #32
 800dea8:	46bd      	mov	sp, r7
 800deaa:	bd80      	pop	{r7, pc}

0800deac <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800deac:	b580      	push	{r7, lr}
 800deae:	b086      	sub	sp, #24
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
 800deb4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f023 0301 	bic.w	r3, r3, #1
 800debc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800deca:	f3ef 8305 	mrs	r3, IPSR
 800dece:	60bb      	str	r3, [r7, #8]
  return(result);
 800ded0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ded6:	f06f 0305 	mvn.w	r3, #5
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	e02c      	b.n	800df38 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d103      	bne.n	800deec <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800dee4:	f06f 0303 	mvn.w	r3, #3
 800dee8:	617b      	str	r3, [r7, #20]
 800deea:	e025      	b.n	800df38 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d011      	beq.n	800df16 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6938      	ldr	r0, [r7, #16]
 800def6:	f000 fb10 	bl	800e51a <xQueueTakeMutexRecursive>
 800defa:	4603      	mov	r3, r0
 800defc:	2b01      	cmp	r3, #1
 800defe:	d01b      	beq.n	800df38 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d003      	beq.n	800df0e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800df06:	f06f 0301 	mvn.w	r3, #1
 800df0a:	617b      	str	r3, [r7, #20]
 800df0c:	e014      	b.n	800df38 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800df0e:	f06f 0302 	mvn.w	r3, #2
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e010      	b.n	800df38 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6938      	ldr	r0, [r7, #16]
 800df1a:	f000 fdb7 	bl	800ea8c <xQueueSemaphoreTake>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b01      	cmp	r3, #1
 800df22:	d009      	beq.n	800df38 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d003      	beq.n	800df32 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800df2a:	f06f 0301 	mvn.w	r3, #1
 800df2e:	617b      	str	r3, [r7, #20]
 800df30:	e002      	b.n	800df38 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800df32:	f06f 0302 	mvn.w	r3, #2
 800df36:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800df38:	697b      	ldr	r3, [r7, #20]
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800df42:	b580      	push	{r7, lr}
 800df44:	b086      	sub	sp, #24
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f023 0301 	bic.w	r3, r3, #1
 800df50:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df5e:	f3ef 8305 	mrs	r3, IPSR
 800df62:	60bb      	str	r3, [r7, #8]
  return(result);
 800df64:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800df66:	2b00      	cmp	r3, #0
 800df68:	d003      	beq.n	800df72 <osMutexRelease+0x30>
    stat = osErrorISR;
 800df6a:	f06f 0305 	mvn.w	r3, #5
 800df6e:	617b      	str	r3, [r7, #20]
 800df70:	e01f      	b.n	800dfb2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d103      	bne.n	800df80 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800df78:	f06f 0303 	mvn.w	r3, #3
 800df7c:	617b      	str	r3, [r7, #20]
 800df7e:	e018      	b.n	800dfb2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d009      	beq.n	800df9a <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800df86:	6938      	ldr	r0, [r7, #16]
 800df88:	f000 fa92 	bl	800e4b0 <xQueueGiveMutexRecursive>
 800df8c:	4603      	mov	r3, r0
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d00f      	beq.n	800dfb2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800df92:	f06f 0302 	mvn.w	r3, #2
 800df96:	617b      	str	r3, [r7, #20]
 800df98:	e00b      	b.n	800dfb2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800df9a:	2300      	movs	r3, #0
 800df9c:	2200      	movs	r2, #0
 800df9e:	2100      	movs	r1, #0
 800dfa0:	6938      	ldr	r0, [r7, #16]
 800dfa2:	f000 faf1 	bl	800e588 <xQueueGenericSend>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b01      	cmp	r3, #1
 800dfaa:	d002      	beq.n	800dfb2 <osMutexRelease+0x70>
        stat = osErrorResource;
 800dfac:	f06f 0302 	mvn.w	r3, #2
 800dfb0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dfb2:	697b      	ldr	r3, [r7, #20]
}
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	3718      	adds	r7, #24
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	bd80      	pop	{r7, pc}

0800dfbc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dfbc:	b480      	push	{r7}
 800dfbe:	b085      	sub	sp, #20
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	4a07      	ldr	r2, [pc, #28]	@ (800dfe8 <vApplicationGetIdleTaskMemory+0x2c>)
 800dfcc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	4a06      	ldr	r2, [pc, #24]	@ (800dfec <vApplicationGetIdleTaskMemory+0x30>)
 800dfd2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2280      	movs	r2, #128	@ 0x80
 800dfd8:	601a      	str	r2, [r3, #0]
}
 800dfda:	bf00      	nop
 800dfdc:	3714      	adds	r7, #20
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe4:	4770      	bx	lr
 800dfe6:	bf00      	nop
 800dfe8:	24000bc0 	.word	0x24000bc0
 800dfec:	24000c68 	.word	0x24000c68

0800dff0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dff0:	b480      	push	{r7}
 800dff2:	b085      	sub	sp, #20
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4a07      	ldr	r2, [pc, #28]	@ (800e01c <vApplicationGetTimerTaskMemory+0x2c>)
 800e000:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	4a06      	ldr	r2, [pc, #24]	@ (800e020 <vApplicationGetTimerTaskMemory+0x30>)
 800e006:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e00e:	601a      	str	r2, [r3, #0]
}
 800e010:	bf00      	nop
 800e012:	3714      	adds	r7, #20
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr
 800e01c:	24000e68 	.word	0x24000e68
 800e020:	24000f10 	.word	0x24000f10

0800e024 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f103 0208 	add.w	r2, r3, #8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f04f 32ff 	mov.w	r2, #4294967295
 800e03c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f103 0208 	add.w	r2, r3, #8
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f103 0208 	add.w	r2, r3, #8
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e058:	bf00      	nop
 800e05a:	370c      	adds	r7, #12
 800e05c:	46bd      	mov	sp, r7
 800e05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e062:	4770      	bx	lr

0800e064 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e064:	b480      	push	{r7}
 800e066:	b083      	sub	sp, #12
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e072:	bf00      	nop
 800e074:	370c      	adds	r7, #12
 800e076:	46bd      	mov	sp, r7
 800e078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07c:	4770      	bx	lr

0800e07e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e07e:	b480      	push	{r7}
 800e080:	b085      	sub	sp, #20
 800e082:	af00      	add	r7, sp, #0
 800e084:	6078      	str	r0, [r7, #4]
 800e086:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	68fa      	ldr	r2, [r7, #12]
 800e092:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	689a      	ldr	r2, [r3, #8]
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	683a      	ldr	r2, [r7, #0]
 800e0a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	683a      	ldr	r2, [r7, #0]
 800e0a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	1c5a      	adds	r2, r3, #1
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	601a      	str	r2, [r3, #0]
}
 800e0ba:	bf00      	nop
 800e0bc:	3714      	adds	r7, #20
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c4:	4770      	bx	lr

0800e0c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e0d6:	68bb      	ldr	r3, [r7, #8]
 800e0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0dc:	d103      	bne.n	800e0e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	691b      	ldr	r3, [r3, #16]
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	e00c      	b.n	800e100 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	3308      	adds	r3, #8
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	e002      	b.n	800e0f4 <vListInsert+0x2e>
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	60fb      	str	r3, [r7, #12]
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d2f6      	bcs.n	800e0ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	685a      	ldr	r2, [r3, #4]
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	68fa      	ldr	r2, [r7, #12]
 800e114:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	683a      	ldr	r2, [r7, #0]
 800e11a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	687a      	ldr	r2, [r7, #4]
 800e120:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	1c5a      	adds	r2, r3, #1
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	601a      	str	r2, [r3, #0]
}
 800e12c:	bf00      	nop
 800e12e:	3714      	adds	r7, #20
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e138:	b480      	push	{r7}
 800e13a:	b085      	sub	sp, #20
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	691b      	ldr	r3, [r3, #16]
 800e144:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	6892      	ldr	r2, [r2, #8]
 800e14e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	687a      	ldr	r2, [r7, #4]
 800e156:	6852      	ldr	r2, [r2, #4]
 800e158:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	429a      	cmp	r2, r3
 800e162:	d103      	bne.n	800e16c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	689a      	ldr	r2, [r3, #8]
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2200      	movs	r2, #0
 800e170:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	1e5a      	subs	r2, r3, #1
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr

0800e18c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b084      	sub	sp, #16
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d10b      	bne.n	800e1b8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1a4:	f383 8811 	msr	BASEPRI, r3
 800e1a8:	f3bf 8f6f 	isb	sy
 800e1ac:	f3bf 8f4f 	dsb	sy
 800e1b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e1b2:	bf00      	nop
 800e1b4:	bf00      	nop
 800e1b6:	e7fd      	b.n	800e1b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e1b8:	f002 fc46 	bl	8010a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1c4:	68f9      	ldr	r1, [r7, #12]
 800e1c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1c8:	fb01 f303 	mul.w	r3, r1, r3
 800e1cc:	441a      	add	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	681a      	ldr	r2, [r3, #0]
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e8:	3b01      	subs	r3, #1
 800e1ea:	68f9      	ldr	r1, [r7, #12]
 800e1ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e1ee:	fb01 f303 	mul.w	r3, r1, r3
 800e1f2:	441a      	add	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	22ff      	movs	r2, #255	@ 0xff
 800e1fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	22ff      	movs	r2, #255	@ 0xff
 800e204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d114      	bne.n	800e238 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	691b      	ldr	r3, [r3, #16]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d01a      	beq.n	800e24c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	3310      	adds	r3, #16
 800e21a:	4618      	mov	r0, r3
 800e21c:	f001 fbd4 	bl	800f9c8 <xTaskRemoveFromEventList>
 800e220:	4603      	mov	r3, r0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d012      	beq.n	800e24c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e226:	4b0d      	ldr	r3, [pc, #52]	@ (800e25c <xQueueGenericReset+0xd0>)
 800e228:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	f3bf 8f4f 	dsb	sy
 800e232:	f3bf 8f6f 	isb	sy
 800e236:	e009      	b.n	800e24c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3310      	adds	r3, #16
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7ff fef1 	bl	800e024 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	3324      	adds	r3, #36	@ 0x24
 800e246:	4618      	mov	r0, r3
 800e248:	f7ff feec 	bl	800e024 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e24c:	f002 fc2e 	bl	8010aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e250:	2301      	movs	r3, #1
}
 800e252:	4618      	mov	r0, r3
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}
 800e25a:	bf00      	nop
 800e25c:	e000ed04 	.word	0xe000ed04

0800e260 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e260:	b580      	push	{r7, lr}
 800e262:	b08e      	sub	sp, #56	@ 0x38
 800e264:	af02      	add	r7, sp, #8
 800e266:	60f8      	str	r0, [r7, #12]
 800e268:	60b9      	str	r1, [r7, #8]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10b      	bne.n	800e28c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e278:	f383 8811 	msr	BASEPRI, r3
 800e27c:	f3bf 8f6f 	isb	sy
 800e280:	f3bf 8f4f 	dsb	sy
 800e284:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e286:	bf00      	nop
 800e288:	bf00      	nop
 800e28a:	e7fd      	b.n	800e288 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10b      	bne.n	800e2aa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e296:	f383 8811 	msr	BASEPRI, r3
 800e29a:	f3bf 8f6f 	isb	sy
 800e29e:	f3bf 8f4f 	dsb	sy
 800e2a2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e2a4:	bf00      	nop
 800e2a6:	bf00      	nop
 800e2a8:	e7fd      	b.n	800e2a6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d002      	beq.n	800e2b6 <xQueueGenericCreateStatic+0x56>
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d001      	beq.n	800e2ba <xQueueGenericCreateStatic+0x5a>
 800e2b6:	2301      	movs	r3, #1
 800e2b8:	e000      	b.n	800e2bc <xQueueGenericCreateStatic+0x5c>
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d10b      	bne.n	800e2d8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2c4:	f383 8811 	msr	BASEPRI, r3
 800e2c8:	f3bf 8f6f 	isb	sy
 800e2cc:	f3bf 8f4f 	dsb	sy
 800e2d0:	623b      	str	r3, [r7, #32]
}
 800e2d2:	bf00      	nop
 800e2d4:	bf00      	nop
 800e2d6:	e7fd      	b.n	800e2d4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d102      	bne.n	800e2e4 <xQueueGenericCreateStatic+0x84>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d101      	bne.n	800e2e8 <xQueueGenericCreateStatic+0x88>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <xQueueGenericCreateStatic+0x8a>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d10b      	bne.n	800e306 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e2ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2f2:	f383 8811 	msr	BASEPRI, r3
 800e2f6:	f3bf 8f6f 	isb	sy
 800e2fa:	f3bf 8f4f 	dsb	sy
 800e2fe:	61fb      	str	r3, [r7, #28]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e306:	2350      	movs	r3, #80	@ 0x50
 800e308:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2b50      	cmp	r3, #80	@ 0x50
 800e30e:	d00b      	beq.n	800e328 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	61bb      	str	r3, [r7, #24]
}
 800e322:	bf00      	nop
 800e324:	bf00      	nop
 800e326:	e7fd      	b.n	800e324 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e328:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d00d      	beq.n	800e350 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	2201      	movs	r2, #1
 800e338:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e33c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e342:	9300      	str	r3, [sp, #0]
 800e344:	4613      	mov	r3, r2
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	68b9      	ldr	r1, [r7, #8]
 800e34a:	68f8      	ldr	r0, [r7, #12]
 800e34c:	f000 f840 	bl	800e3d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e352:	4618      	mov	r0, r3
 800e354:	3730      	adds	r7, #48	@ 0x30
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b08a      	sub	sp, #40	@ 0x28
 800e35e:	af02      	add	r7, sp, #8
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	60b9      	str	r1, [r7, #8]
 800e364:	4613      	mov	r3, r2
 800e366:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d10b      	bne.n	800e386 <xQueueGenericCreate+0x2c>
	__asm volatile
 800e36e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e372:	f383 8811 	msr	BASEPRI, r3
 800e376:	f3bf 8f6f 	isb	sy
 800e37a:	f3bf 8f4f 	dsb	sy
 800e37e:	613b      	str	r3, [r7, #16]
}
 800e380:	bf00      	nop
 800e382:	bf00      	nop
 800e384:	e7fd      	b.n	800e382 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	fb02 f303 	mul.w	r3, r2, r3
 800e38e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	3350      	adds	r3, #80	@ 0x50
 800e394:	4618      	mov	r0, r3
 800e396:	f002 fc79 	bl	8010c8c <pvPortMalloc>
 800e39a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e39c:	69bb      	ldr	r3, [r7, #24]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d011      	beq.n	800e3c6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e3a2:	69bb      	ldr	r3, [r7, #24]
 800e3a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	3350      	adds	r3, #80	@ 0x50
 800e3aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	2200      	movs	r2, #0
 800e3b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3b4:	79fa      	ldrb	r2, [r7, #7]
 800e3b6:	69bb      	ldr	r3, [r7, #24]
 800e3b8:	9300      	str	r3, [sp, #0]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	697a      	ldr	r2, [r7, #20]
 800e3be:	68b9      	ldr	r1, [r7, #8]
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f000 f805 	bl	800e3d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3c6:	69bb      	ldr	r3, [r7, #24]
	}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3720      	adds	r7, #32
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
 800e3dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d103      	bne.n	800e3ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	687a      	ldr	r2, [r7, #4]
 800e3f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	68fa      	ldr	r2, [r7, #12]
 800e3f6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e3f8:	69bb      	ldr	r3, [r7, #24]
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e3fe:	2101      	movs	r1, #1
 800e400:	69b8      	ldr	r0, [r7, #24]
 800e402:	f7ff fec3 	bl	800e18c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	78fa      	ldrb	r2, [r7, #3]
 800e40a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e40e:	bf00      	nop
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00e      	beq.n	800e442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2200      	movs	r2, #0
 800e428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2200      	movs	r2, #0
 800e42e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2200      	movs	r2, #0
 800e434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e436:	2300      	movs	r3, #0
 800e438:	2200      	movs	r2, #0
 800e43a:	2100      	movs	r1, #0
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 f8a3 	bl	800e588 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	4603      	mov	r3, r0
 800e452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e454:	2301      	movs	r3, #1
 800e456:	617b      	str	r3, [r7, #20]
 800e458:	2300      	movs	r3, #0
 800e45a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e45c:	79fb      	ldrb	r3, [r7, #7]
 800e45e:	461a      	mov	r2, r3
 800e460:	6939      	ldr	r1, [r7, #16]
 800e462:	6978      	ldr	r0, [r7, #20]
 800e464:	f7ff ff79 	bl	800e35a <xQueueGenericCreate>
 800e468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff ffd3 	bl	800e416 <prvInitialiseMutex>

		return xNewQueue;
 800e470:	68fb      	ldr	r3, [r7, #12]
	}
 800e472:	4618      	mov	r0, r3
 800e474:	3718      	adds	r7, #24
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}

0800e47a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e47a:	b580      	push	{r7, lr}
 800e47c:	b088      	sub	sp, #32
 800e47e:	af02      	add	r7, sp, #8
 800e480:	4603      	mov	r3, r0
 800e482:	6039      	str	r1, [r7, #0]
 800e484:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e486:	2301      	movs	r3, #1
 800e488:	617b      	str	r3, [r7, #20]
 800e48a:	2300      	movs	r3, #0
 800e48c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e48e:	79fb      	ldrb	r3, [r7, #7]
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	2200      	movs	r2, #0
 800e496:	6939      	ldr	r1, [r7, #16]
 800e498:	6978      	ldr	r0, [r7, #20]
 800e49a:	f7ff fee1 	bl	800e260 <xQueueGenericCreateStatic>
 800e49e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e4a0:	68f8      	ldr	r0, [r7, #12]
 800e4a2:	f7ff ffb8 	bl	800e416 <prvInitialiseMutex>

		return xNewQueue;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
	}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3718      	adds	r7, #24
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}

0800e4b0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e4b0:	b590      	push	{r4, r7, lr}
 800e4b2:	b087      	sub	sp, #28
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d10b      	bne.n	800e4da <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c6:	f383 8811 	msr	BASEPRI, r3
 800e4ca:	f3bf 8f6f 	isb	sy
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	60fb      	str	r3, [r7, #12]
}
 800e4d4:	bf00      	nop
 800e4d6:	bf00      	nop
 800e4d8:	e7fd      	b.n	800e4d6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	689c      	ldr	r4, [r3, #8]
 800e4de:	f001 fc39 	bl	800fd54 <xTaskGetCurrentTaskHandle>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	429c      	cmp	r4, r3
 800e4e6:	d111      	bne.n	800e50c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	68db      	ldr	r3, [r3, #12]
 800e4ec:	1e5a      	subs	r2, r3, #1
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d105      	bne.n	800e506 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2100      	movs	r1, #0
 800e500:	6938      	ldr	r0, [r7, #16]
 800e502:	f000 f841 	bl	800e588 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e506:	2301      	movs	r3, #1
 800e508:	617b      	str	r3, [r7, #20]
 800e50a:	e001      	b.n	800e510 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e50c:	2300      	movs	r3, #0
 800e50e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e510:	697b      	ldr	r3, [r7, #20]
	}
 800e512:	4618      	mov	r0, r3
 800e514:	371c      	adds	r7, #28
 800e516:	46bd      	mov	sp, r7
 800e518:	bd90      	pop	{r4, r7, pc}

0800e51a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e51a:	b590      	push	{r4, r7, lr}
 800e51c:	b087      	sub	sp, #28
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e528:	693b      	ldr	r3, [r7, #16]
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10b      	bne.n	800e546 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	60fb      	str	r3, [r7, #12]
}
 800e540:	bf00      	nop
 800e542:	bf00      	nop
 800e544:	e7fd      	b.n	800e542 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	689c      	ldr	r4, [r3, #8]
 800e54a:	f001 fc03 	bl	800fd54 <xTaskGetCurrentTaskHandle>
 800e54e:	4603      	mov	r3, r0
 800e550:	429c      	cmp	r4, r3
 800e552:	d107      	bne.n	800e564 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	68db      	ldr	r3, [r3, #12]
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e55e:	2301      	movs	r3, #1
 800e560:	617b      	str	r3, [r7, #20]
 800e562:	e00c      	b.n	800e57e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e564:	6839      	ldr	r1, [r7, #0]
 800e566:	6938      	ldr	r0, [r7, #16]
 800e568:	f000 fa90 	bl	800ea8c <xQueueSemaphoreTake>
 800e56c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d004      	beq.n	800e57e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	68db      	ldr	r3, [r3, #12]
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e57e:	697b      	ldr	r3, [r7, #20]
	}
 800e580:	4618      	mov	r0, r3
 800e582:	371c      	adds	r7, #28
 800e584:	46bd      	mov	sp, r7
 800e586:	bd90      	pop	{r4, r7, pc}

0800e588 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b08e      	sub	sp, #56	@ 0x38
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
 800e594:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e596:	2300      	movs	r3, #0
 800e598:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d10b      	bne.n	800e5bc <xQueueGenericSend+0x34>
	__asm volatile
 800e5a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5a8:	f383 8811 	msr	BASEPRI, r3
 800e5ac:	f3bf 8f6f 	isb	sy
 800e5b0:	f3bf 8f4f 	dsb	sy
 800e5b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e5b6:	bf00      	nop
 800e5b8:	bf00      	nop
 800e5ba:	e7fd      	b.n	800e5b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <xQueueGenericSend+0x42>
 800e5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d101      	bne.n	800e5ce <xQueueGenericSend+0x46>
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <xQueueGenericSend+0x48>
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d10b      	bne.n	800e5ec <xQueueGenericSend+0x64>
	__asm volatile
 800e5d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5d8:	f383 8811 	msr	BASEPRI, r3
 800e5dc:	f3bf 8f6f 	isb	sy
 800e5e0:	f3bf 8f4f 	dsb	sy
 800e5e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e5e6:	bf00      	nop
 800e5e8:	bf00      	nop
 800e5ea:	e7fd      	b.n	800e5e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d103      	bne.n	800e5fa <xQueueGenericSend+0x72>
 800e5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5f6:	2b01      	cmp	r3, #1
 800e5f8:	d101      	bne.n	800e5fe <xQueueGenericSend+0x76>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e000      	b.n	800e600 <xQueueGenericSend+0x78>
 800e5fe:	2300      	movs	r3, #0
 800e600:	2b00      	cmp	r3, #0
 800e602:	d10b      	bne.n	800e61c <xQueueGenericSend+0x94>
	__asm volatile
 800e604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e608:	f383 8811 	msr	BASEPRI, r3
 800e60c:	f3bf 8f6f 	isb	sy
 800e610:	f3bf 8f4f 	dsb	sy
 800e614:	623b      	str	r3, [r7, #32]
}
 800e616:	bf00      	nop
 800e618:	bf00      	nop
 800e61a:	e7fd      	b.n	800e618 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e61c:	f001 fbaa 	bl	800fd74 <xTaskGetSchedulerState>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d102      	bne.n	800e62c <xQueueGenericSend+0xa4>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d101      	bne.n	800e630 <xQueueGenericSend+0xa8>
 800e62c:	2301      	movs	r3, #1
 800e62e:	e000      	b.n	800e632 <xQueueGenericSend+0xaa>
 800e630:	2300      	movs	r3, #0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d10b      	bne.n	800e64e <xQueueGenericSend+0xc6>
	__asm volatile
 800e636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	61fb      	str	r3, [r7, #28]
}
 800e648:	bf00      	nop
 800e64a:	bf00      	nop
 800e64c:	e7fd      	b.n	800e64a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e64e:	f002 f9fb 	bl	8010a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d302      	bcc.n	800e664 <xQueueGenericSend+0xdc>
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	2b02      	cmp	r3, #2
 800e662:	d129      	bne.n	800e6b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e664:	683a      	ldr	r2, [r7, #0]
 800e666:	68b9      	ldr	r1, [r7, #8]
 800e668:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e66a:	f000 fb37 	bl	800ecdc <prvCopyDataToQueue>
 800e66e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e674:	2b00      	cmp	r3, #0
 800e676:	d010      	beq.n	800e69a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e67a:	3324      	adds	r3, #36	@ 0x24
 800e67c:	4618      	mov	r0, r3
 800e67e:	f001 f9a3 	bl	800f9c8 <xTaskRemoveFromEventList>
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d013      	beq.n	800e6b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e688:	4b3f      	ldr	r3, [pc, #252]	@ (800e788 <xQueueGenericSend+0x200>)
 800e68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e68e:	601a      	str	r2, [r3, #0]
 800e690:	f3bf 8f4f 	dsb	sy
 800e694:	f3bf 8f6f 	isb	sy
 800e698:	e00a      	b.n	800e6b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d007      	beq.n	800e6b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e6a0:	4b39      	ldr	r3, [pc, #228]	@ (800e788 <xQueueGenericSend+0x200>)
 800e6a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6a6:	601a      	str	r2, [r3, #0]
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e6b0:	f002 f9fc 	bl	8010aac <vPortExitCritical>
				return pdPASS;
 800e6b4:	2301      	movs	r3, #1
 800e6b6:	e063      	b.n	800e780 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d103      	bne.n	800e6c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6be:	f002 f9f5 	bl	8010aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	e05c      	b.n	800e780 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d106      	bne.n	800e6da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e6cc:	f107 0314 	add.w	r3, r7, #20
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f001 f9dd 	bl	800fa90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e6d6:	2301      	movs	r3, #1
 800e6d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e6da:	f002 f9e7 	bl	8010aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e6de:	f000 ff45 	bl	800f56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e6e2:	f002 f9b1 	bl	8010a48 <vPortEnterCritical>
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e6ec:	b25b      	sxtb	r3, r3
 800e6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6f2:	d103      	bne.n	800e6fc <xQueueGenericSend+0x174>
 800e6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e702:	b25b      	sxtb	r3, r3
 800e704:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e708:	d103      	bne.n	800e712 <xQueueGenericSend+0x18a>
 800e70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70c:	2200      	movs	r2, #0
 800e70e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e712:	f002 f9cb 	bl	8010aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e716:	1d3a      	adds	r2, r7, #4
 800e718:	f107 0314 	add.w	r3, r7, #20
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f001 f9cc 	bl	800fabc <xTaskCheckForTimeOut>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d124      	bne.n	800e774 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e72a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e72c:	f000 fbce 	bl	800eecc <prvIsQueueFull>
 800e730:	4603      	mov	r3, r0
 800e732:	2b00      	cmp	r3, #0
 800e734:	d018      	beq.n	800e768 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e738:	3310      	adds	r3, #16
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	4611      	mov	r1, r2
 800e73e:	4618      	mov	r0, r3
 800e740:	f001 f8f0 	bl	800f924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e744:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e746:	f000 fb59 	bl	800edfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e74a:	f000 ff1d 	bl	800f588 <xTaskResumeAll>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	f47f af7c 	bne.w	800e64e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e756:	4b0c      	ldr	r3, [pc, #48]	@ (800e788 <xQueueGenericSend+0x200>)
 800e758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e75c:	601a      	str	r2, [r3, #0]
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	f3bf 8f6f 	isb	sy
 800e766:	e772      	b.n	800e64e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e768:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e76a:	f000 fb47 	bl	800edfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e76e:	f000 ff0b 	bl	800f588 <xTaskResumeAll>
 800e772:	e76c      	b.n	800e64e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e774:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e776:	f000 fb41 	bl	800edfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e77a:	f000 ff05 	bl	800f588 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e77e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e780:	4618      	mov	r0, r3
 800e782:	3738      	adds	r7, #56	@ 0x38
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	e000ed04 	.word	0xe000ed04

0800e78c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b090      	sub	sp, #64	@ 0x40
 800e790:	af00      	add	r7, sp, #0
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d10b      	bne.n	800e7bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a8:	f383 8811 	msr	BASEPRI, r3
 800e7ac:	f3bf 8f6f 	isb	sy
 800e7b0:	f3bf 8f4f 	dsb	sy
 800e7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e7b6:	bf00      	nop
 800e7b8:	bf00      	nop
 800e7ba:	e7fd      	b.n	800e7b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d103      	bne.n	800e7ca <xQueueGenericSendFromISR+0x3e>
 800e7c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d101      	bne.n	800e7ce <xQueueGenericSendFromISR+0x42>
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	e000      	b.n	800e7d0 <xQueueGenericSendFromISR+0x44>
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d10b      	bne.n	800e7ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e7d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7d8:	f383 8811 	msr	BASEPRI, r3
 800e7dc:	f3bf 8f6f 	isb	sy
 800e7e0:	f3bf 8f4f 	dsb	sy
 800e7e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e7e6:	bf00      	nop
 800e7e8:	bf00      	nop
 800e7ea:	e7fd      	b.n	800e7e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d103      	bne.n	800e7fa <xQueueGenericSendFromISR+0x6e>
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d101      	bne.n	800e7fe <xQueueGenericSendFromISR+0x72>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	e000      	b.n	800e800 <xQueueGenericSendFromISR+0x74>
 800e7fe:	2300      	movs	r3, #0
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10b      	bne.n	800e81c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	623b      	str	r3, [r7, #32]
}
 800e816:	bf00      	nop
 800e818:	bf00      	nop
 800e81a:	e7fd      	b.n	800e818 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e81c:	f002 f9f4 	bl	8010c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e820:	f3ef 8211 	mrs	r2, BASEPRI
 800e824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e828:	f383 8811 	msr	BASEPRI, r3
 800e82c:	f3bf 8f6f 	isb	sy
 800e830:	f3bf 8f4f 	dsb	sy
 800e834:	61fa      	str	r2, [r7, #28]
 800e836:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e838:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e83a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e83e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e844:	429a      	cmp	r2, r3
 800e846:	d302      	bcc.n	800e84e <xQueueGenericSendFromISR+0xc2>
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b02      	cmp	r3, #2
 800e84c:	d12f      	bne.n	800e8ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e850:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e854:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e85a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	68b9      	ldr	r1, [r7, #8]
 800e862:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e864:	f000 fa3a 	bl	800ecdc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e868:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e86c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e870:	d112      	bne.n	800e898 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e876:	2b00      	cmp	r3, #0
 800e878:	d016      	beq.n	800e8a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e87c:	3324      	adds	r3, #36	@ 0x24
 800e87e:	4618      	mov	r0, r3
 800e880:	f001 f8a2 	bl	800f9c8 <xTaskRemoveFromEventList>
 800e884:	4603      	mov	r3, r0
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00e      	beq.n	800e8a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00b      	beq.n	800e8a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	601a      	str	r2, [r3, #0]
 800e896:	e007      	b.n	800e8a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e898:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e89c:	3301      	adds	r3, #1
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	b25a      	sxtb	r2, r3
 800e8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e8a8:	2301      	movs	r3, #1
 800e8aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e8ac:	e001      	b.n	800e8b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e8bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	3740      	adds	r7, #64	@ 0x40
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}

0800e8c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e8c8:	b580      	push	{r7, lr}
 800e8ca:	b08c      	sub	sp, #48	@ 0x30
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	60f8      	str	r0, [r7, #12]
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d10b      	bne.n	800e8fa <xQueueReceive+0x32>
	__asm volatile
 800e8e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8e6:	f383 8811 	msr	BASEPRI, r3
 800e8ea:	f3bf 8f6f 	isb	sy
 800e8ee:	f3bf 8f4f 	dsb	sy
 800e8f2:	623b      	str	r3, [r7, #32]
}
 800e8f4:	bf00      	nop
 800e8f6:	bf00      	nop
 800e8f8:	e7fd      	b.n	800e8f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d103      	bne.n	800e908 <xQueueReceive+0x40>
 800e900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e904:	2b00      	cmp	r3, #0
 800e906:	d101      	bne.n	800e90c <xQueueReceive+0x44>
 800e908:	2301      	movs	r3, #1
 800e90a:	e000      	b.n	800e90e <xQueueReceive+0x46>
 800e90c:	2300      	movs	r3, #0
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d10b      	bne.n	800e92a <xQueueReceive+0x62>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	61fb      	str	r3, [r7, #28]
}
 800e924:	bf00      	nop
 800e926:	bf00      	nop
 800e928:	e7fd      	b.n	800e926 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e92a:	f001 fa23 	bl	800fd74 <xTaskGetSchedulerState>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d102      	bne.n	800e93a <xQueueReceive+0x72>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d101      	bne.n	800e93e <xQueueReceive+0x76>
 800e93a:	2301      	movs	r3, #1
 800e93c:	e000      	b.n	800e940 <xQueueReceive+0x78>
 800e93e:	2300      	movs	r3, #0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10b      	bne.n	800e95c <xQueueReceive+0x94>
	__asm volatile
 800e944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e948:	f383 8811 	msr	BASEPRI, r3
 800e94c:	f3bf 8f6f 	isb	sy
 800e950:	f3bf 8f4f 	dsb	sy
 800e954:	61bb      	str	r3, [r7, #24]
}
 800e956:	bf00      	nop
 800e958:	bf00      	nop
 800e95a:	e7fd      	b.n	800e958 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e95c:	f002 f874 	bl	8010a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e964:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d01f      	beq.n	800e9ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e96c:	68b9      	ldr	r1, [r7, #8]
 800e96e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e970:	f000 fa1e 	bl	800edb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e976:	1e5a      	subs	r2, r3, #1
 800e978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97e:	691b      	ldr	r3, [r3, #16]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d00f      	beq.n	800e9a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e986:	3310      	adds	r3, #16
 800e988:	4618      	mov	r0, r3
 800e98a:	f001 f81d 	bl	800f9c8 <xTaskRemoveFromEventList>
 800e98e:	4603      	mov	r3, r0
 800e990:	2b00      	cmp	r3, #0
 800e992:	d007      	beq.n	800e9a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e994:	4b3c      	ldr	r3, [pc, #240]	@ (800ea88 <xQueueReceive+0x1c0>)
 800e996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e99a:	601a      	str	r2, [r3, #0]
 800e99c:	f3bf 8f4f 	dsb	sy
 800e9a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9a4:	f002 f882 	bl	8010aac <vPortExitCritical>
				return pdPASS;
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	e069      	b.n	800ea80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d103      	bne.n	800e9ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9b2:	f002 f87b 	bl	8010aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	e062      	b.n	800ea80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d106      	bne.n	800e9ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9c0:	f107 0310 	add.w	r3, r7, #16
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f001 f863 	bl	800fa90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9ce:	f002 f86d 	bl	8010aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9d2:	f000 fdcb 	bl	800f56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9d6:	f002 f837 	bl	8010a48 <vPortEnterCritical>
 800e9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e9e0:	b25b      	sxtb	r3, r3
 800e9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e6:	d103      	bne.n	800e9f0 <xQueueReceive+0x128>
 800e9e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9f6:	b25b      	sxtb	r3, r3
 800e9f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fc:	d103      	bne.n	800ea06 <xQueueReceive+0x13e>
 800e9fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea00:	2200      	movs	r2, #0
 800ea02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea06:	f002 f851 	bl	8010aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea0a:	1d3a      	adds	r2, r7, #4
 800ea0c:	f107 0310 	add.w	r3, r7, #16
 800ea10:	4611      	mov	r1, r2
 800ea12:	4618      	mov	r0, r3
 800ea14:	f001 f852 	bl	800fabc <xTaskCheckForTimeOut>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d123      	bne.n	800ea66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea20:	f000 fa3e 	bl	800eea0 <prvIsQueueEmpty>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d017      	beq.n	800ea5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2c:	3324      	adds	r3, #36	@ 0x24
 800ea2e:	687a      	ldr	r2, [r7, #4]
 800ea30:	4611      	mov	r1, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 ff76 	bl	800f924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea3a:	f000 f9df 	bl	800edfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea3e:	f000 fda3 	bl	800f588 <xTaskResumeAll>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d189      	bne.n	800e95c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ea48:	4b0f      	ldr	r3, [pc, #60]	@ (800ea88 <xQueueReceive+0x1c0>)
 800ea4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	f3bf 8f6f 	isb	sy
 800ea58:	e780      	b.n	800e95c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea5c:	f000 f9ce 	bl	800edfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea60:	f000 fd92 	bl	800f588 <xTaskResumeAll>
 800ea64:	e77a      	b.n	800e95c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea68:	f000 f9c8 	bl	800edfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea6c:	f000 fd8c 	bl	800f588 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea72:	f000 fa15 	bl	800eea0 <prvIsQueueEmpty>
 800ea76:	4603      	mov	r3, r0
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f43f af6f 	beq.w	800e95c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3730      	adds	r7, #48	@ 0x30
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}
 800ea88:	e000ed04 	.word	0xe000ed04

0800ea8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b08e      	sub	sp, #56	@ 0x38
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
 800ea94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea96:	2300      	movs	r3, #0
 800ea98:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea9e:	2300      	movs	r3, #0
 800eaa0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d10b      	bne.n	800eac0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800eaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaac:	f383 8811 	msr	BASEPRI, r3
 800eab0:	f3bf 8f6f 	isb	sy
 800eab4:	f3bf 8f4f 	dsb	sy
 800eab8:	623b      	str	r3, [r7, #32]
}
 800eaba:	bf00      	nop
 800eabc:	bf00      	nop
 800eabe:	e7fd      	b.n	800eabc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d00b      	beq.n	800eae0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800eac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	61fb      	str	r3, [r7, #28]
}
 800eada:	bf00      	nop
 800eadc:	bf00      	nop
 800eade:	e7fd      	b.n	800eadc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eae0:	f001 f948 	bl	800fd74 <xTaskGetSchedulerState>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d102      	bne.n	800eaf0 <xQueueSemaphoreTake+0x64>
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d101      	bne.n	800eaf4 <xQueueSemaphoreTake+0x68>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	e000      	b.n	800eaf6 <xQueueSemaphoreTake+0x6a>
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d10b      	bne.n	800eb12 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800eafa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eafe:	f383 8811 	msr	BASEPRI, r3
 800eb02:	f3bf 8f6f 	isb	sy
 800eb06:	f3bf 8f4f 	dsb	sy
 800eb0a:	61bb      	str	r3, [r7, #24]
}
 800eb0c:	bf00      	nop
 800eb0e:	bf00      	nop
 800eb10:	e7fd      	b.n	800eb0e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb12:	f001 ff99 	bl	8010a48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eb16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb1a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d024      	beq.n	800eb6c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb24:	1e5a      	subs	r2, r3, #1
 800eb26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb28:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d104      	bne.n	800eb3c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb32:	f001 fa99 	bl	8010068 <pvTaskIncrementMutexHeldCount>
 800eb36:	4602      	mov	r2, r0
 800eb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb3e:	691b      	ldr	r3, [r3, #16]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d00f      	beq.n	800eb64 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb46:	3310      	adds	r3, #16
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f000 ff3d 	bl	800f9c8 <xTaskRemoveFromEventList>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d007      	beq.n	800eb64 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb54:	4b54      	ldr	r3, [pc, #336]	@ (800eca8 <xQueueSemaphoreTake+0x21c>)
 800eb56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb5a:	601a      	str	r2, [r3, #0]
 800eb5c:	f3bf 8f4f 	dsb	sy
 800eb60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb64:	f001 ffa2 	bl	8010aac <vPortExitCritical>
				return pdPASS;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e098      	b.n	800ec9e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d112      	bne.n	800eb98 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d00b      	beq.n	800eb90 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800eb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb7c:	f383 8811 	msr	BASEPRI, r3
 800eb80:	f3bf 8f6f 	isb	sy
 800eb84:	f3bf 8f4f 	dsb	sy
 800eb88:	617b      	str	r3, [r7, #20]
}
 800eb8a:	bf00      	nop
 800eb8c:	bf00      	nop
 800eb8e:	e7fd      	b.n	800eb8c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb90:	f001 ff8c 	bl	8010aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb94:	2300      	movs	r3, #0
 800eb96:	e082      	b.n	800ec9e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d106      	bne.n	800ebac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb9e:	f107 030c 	add.w	r3, r7, #12
 800eba2:	4618      	mov	r0, r3
 800eba4:	f000 ff74 	bl	800fa90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebac:	f001 ff7e 	bl	8010aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebb0:	f000 fcdc 	bl	800f56c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebb4:	f001 ff48 	bl	8010a48 <vPortEnterCritical>
 800ebb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebbe:	b25b      	sxtb	r3, r3
 800ebc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc4:	d103      	bne.n	800ebce <xQueueSemaphoreTake+0x142>
 800ebc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc8:	2200      	movs	r2, #0
 800ebca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebd4:	b25b      	sxtb	r3, r3
 800ebd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebda:	d103      	bne.n	800ebe4 <xQueueSemaphoreTake+0x158>
 800ebdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebde:	2200      	movs	r2, #0
 800ebe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebe4:	f001 ff62 	bl	8010aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebe8:	463a      	mov	r2, r7
 800ebea:	f107 030c 	add.w	r3, r7, #12
 800ebee:	4611      	mov	r1, r2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f000 ff63 	bl	800fabc <xTaskCheckForTimeOut>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d132      	bne.n	800ec62 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebfe:	f000 f94f 	bl	800eea0 <prvIsQueueEmpty>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d026      	beq.n	800ec56 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d109      	bne.n	800ec24 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ec10:	f001 ff1a 	bl	8010a48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec16:	689b      	ldr	r3, [r3, #8]
 800ec18:	4618      	mov	r0, r3
 800ec1a:	f001 f8c9 	bl	800fdb0 <xTaskPriorityInherit>
 800ec1e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ec20:	f001 ff44 	bl	8010aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec26:	3324      	adds	r3, #36	@ 0x24
 800ec28:	683a      	ldr	r2, [r7, #0]
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f000 fe79 	bl	800f924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec34:	f000 f8e2 	bl	800edfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec38:	f000 fca6 	bl	800f588 <xTaskResumeAll>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	f47f af67 	bne.w	800eb12 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ec44:	4b18      	ldr	r3, [pc, #96]	@ (800eca8 <xQueueSemaphoreTake+0x21c>)
 800ec46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec4a:	601a      	str	r2, [r3, #0]
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	e75d      	b.n	800eb12 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec58:	f000 f8d0 	bl	800edfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec5c:	f000 fc94 	bl	800f588 <xTaskResumeAll>
 800ec60:	e757      	b.n	800eb12 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec64:	f000 f8ca 	bl	800edfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec68:	f000 fc8e 	bl	800f588 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec6e:	f000 f917 	bl	800eea0 <prvIsQueueEmpty>
 800ec72:	4603      	mov	r3, r0
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	f43f af4c 	beq.w	800eb12 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d00d      	beq.n	800ec9c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ec80:	f001 fee2 	bl	8010a48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec86:	f000 f811 	bl	800ecac <prvGetDisinheritPriorityAfterTimeout>
 800ec8a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec8e:	689b      	ldr	r3, [r3, #8]
 800ec90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec92:	4618      	mov	r0, r3
 800ec94:	f001 f964 	bl	800ff60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec98:	f001 ff08 	bl	8010aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3738      	adds	r7, #56	@ 0x38
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}
 800eca6:	bf00      	nop
 800eca8:	e000ed04 	.word	0xe000ed04

0800ecac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ecac:	b480      	push	{r7}
 800ecae:	b085      	sub	sp, #20
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d006      	beq.n	800ecca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ecc6:	60fb      	str	r3, [r7, #12]
 800ecc8:	e001      	b.n	800ecce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ecca:	2300      	movs	r3, #0
 800eccc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ecce:	68fb      	ldr	r3, [r7, #12]
	}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3714      	adds	r7, #20
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecda:	4770      	bx	lr

0800ecdc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b086      	sub	sp, #24
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ece8:	2300      	movs	r3, #0
 800ecea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecf0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10d      	bne.n	800ed16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d14d      	bne.n	800ed9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f001 f8ba 	bl	800fe80 <xTaskPriorityDisinherit>
 800ed0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2200      	movs	r2, #0
 800ed12:	609a      	str	r2, [r3, #8]
 800ed14:	e043      	b.n	800ed9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d119      	bne.n	800ed50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	6858      	ldr	r0, [r3, #4]
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed24:	461a      	mov	r2, r3
 800ed26:	68b9      	ldr	r1, [r7, #8]
 800ed28:	f002 ffe5 	bl	8011cf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	685a      	ldr	r2, [r3, #4]
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed34:	441a      	add	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	689b      	ldr	r3, [r3, #8]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d32b      	bcc.n	800ed9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	605a      	str	r2, [r3, #4]
 800ed4e:	e026      	b.n	800ed9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	68d8      	ldr	r0, [r3, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed58:	461a      	mov	r2, r3
 800ed5a:	68b9      	ldr	r1, [r7, #8]
 800ed5c:	f002 ffcb 	bl	8011cf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	68da      	ldr	r2, [r3, #12]
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed68:	425b      	negs	r3, r3
 800ed6a:	441a      	add	r2, r3
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	68da      	ldr	r2, [r3, #12]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d207      	bcs.n	800ed8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	689a      	ldr	r2, [r3, #8]
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed84:	425b      	negs	r3, r3
 800ed86:	441a      	add	r2, r3
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b02      	cmp	r3, #2
 800ed90:	d105      	bne.n	800ed9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3b01      	subs	r3, #1
 800ed9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	1c5a      	adds	r2, r3, #1
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800eda6:	697b      	ldr	r3, [r7, #20]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3718      	adds	r7, #24
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d018      	beq.n	800edf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	68da      	ldr	r2, [r3, #12]
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edca:	441a      	add	r2, r3
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	68da      	ldr	r2, [r3, #12]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	689b      	ldr	r3, [r3, #8]
 800edd8:	429a      	cmp	r2, r3
 800edda:	d303      	bcc.n	800ede4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681a      	ldr	r2, [r3, #0]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	68d9      	ldr	r1, [r3, #12]
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edec:	461a      	mov	r2, r3
 800edee:	6838      	ldr	r0, [r7, #0]
 800edf0:	f002 ff81 	bl	8011cf6 <memcpy>
	}
}
 800edf4:	bf00      	nop
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b084      	sub	sp, #16
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee04:	f001 fe20 	bl	8010a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee10:	e011      	b.n	800ee36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d012      	beq.n	800ee40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3324      	adds	r3, #36	@ 0x24
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f000 fdd2 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ee24:	4603      	mov	r3, r0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d001      	beq.n	800ee2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee2a:	f000 feab 	bl	800fb84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee2e:	7bfb      	ldrb	r3, [r7, #15]
 800ee30:	3b01      	subs	r3, #1
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	dce9      	bgt.n	800ee12 <prvUnlockQueue+0x16>
 800ee3e:	e000      	b.n	800ee42 <prvUnlockQueue+0x46>
					break;
 800ee40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	22ff      	movs	r2, #255	@ 0xff
 800ee46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee4a:	f001 fe2f 	bl	8010aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee4e:	f001 fdfb 	bl	8010a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee5a:	e011      	b.n	800ee80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	691b      	ldr	r3, [r3, #16]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d012      	beq.n	800ee8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	3310      	adds	r3, #16
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f000 fdad 	bl	800f9c8 <xTaskRemoveFromEventList>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d001      	beq.n	800ee78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ee74:	f000 fe86 	bl	800fb84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ee78:	7bbb      	ldrb	r3, [r7, #14]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	b2db      	uxtb	r3, r3
 800ee7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dce9      	bgt.n	800ee5c <prvUnlockQueue+0x60>
 800ee88:	e000      	b.n	800ee8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ee8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	22ff      	movs	r2, #255	@ 0xff
 800ee90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ee94:	f001 fe0a 	bl	8010aac <vPortExitCritical>
}
 800ee98:	bf00      	nop
 800ee9a:	3710      	adds	r7, #16
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	bd80      	pop	{r7, pc}

0800eea0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eea8:	f001 fdce 	bl	8010a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d102      	bne.n	800eeba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	60fb      	str	r3, [r7, #12]
 800eeb8:	e001      	b.n	800eebe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eeba:	2300      	movs	r3, #0
 800eebc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eebe:	f001 fdf5 	bl	8010aac <vPortExitCritical>

	return xReturn;
 800eec2:	68fb      	ldr	r3, [r7, #12]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3710      	adds	r7, #16
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eed4:	f001 fdb8 	bl	8010a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d102      	bne.n	800eeea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eee4:	2301      	movs	r3, #1
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	e001      	b.n	800eeee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eeee:	f001 fddd 	bl	8010aac <vPortExitCritical>

	return xReturn;
 800eef2:	68fb      	ldr	r3, [r7, #12]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}

0800eefc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eefc:	b480      	push	{r7}
 800eefe:	b085      	sub	sp, #20
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	6078      	str	r0, [r7, #4]
 800ef04:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef06:	2300      	movs	r3, #0
 800ef08:	60fb      	str	r3, [r7, #12]
 800ef0a:	e014      	b.n	800ef36 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef0c:	4a0f      	ldr	r2, [pc, #60]	@ (800ef4c <vQueueAddToRegistry+0x50>)
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d10b      	bne.n	800ef30 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ef18:	490c      	ldr	r1, [pc, #48]	@ (800ef4c <vQueueAddToRegistry+0x50>)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef22:	4a0a      	ldr	r2, [pc, #40]	@ (800ef4c <vQueueAddToRegistry+0x50>)
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	00db      	lsls	r3, r3, #3
 800ef28:	4413      	add	r3, r2
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef2e:	e006      	b.n	800ef3e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	3301      	adds	r3, #1
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	2b07      	cmp	r3, #7
 800ef3a:	d9e7      	bls.n	800ef0c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef3c:	bf00      	nop
 800ef3e:	bf00      	nop
 800ef40:	3714      	adds	r7, #20
 800ef42:	46bd      	mov	sp, r7
 800ef44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef48:	4770      	bx	lr
 800ef4a:	bf00      	nop
 800ef4c:	24001310 	.word	0x24001310

0800ef50 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b086      	sub	sp, #24
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	60f8      	str	r0, [r7, #12]
 800ef58:	60b9      	str	r1, [r7, #8]
 800ef5a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef60:	f001 fd72 	bl	8010a48 <vPortEnterCritical>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ef6a:	b25b      	sxtb	r3, r3
 800ef6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef70:	d103      	bne.n	800ef7a <vQueueWaitForMessageRestricted+0x2a>
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ef80:	b25b      	sxtb	r3, r3
 800ef82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef86:	d103      	bne.n	800ef90 <vQueueWaitForMessageRestricted+0x40>
 800ef88:	697b      	ldr	r3, [r7, #20]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ef90:	f001 fd8c 	bl	8010aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d106      	bne.n	800efaa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	3324      	adds	r3, #36	@ 0x24
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	4618      	mov	r0, r3
 800efa6:	f000 fce3 	bl	800f970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efaa:	6978      	ldr	r0, [r7, #20]
 800efac:	f7ff ff26 	bl	800edfc <prvUnlockQueue>
	}
 800efb0:	bf00      	nop
 800efb2:	3718      	adds	r7, #24
 800efb4:	46bd      	mov	sp, r7
 800efb6:	bd80      	pop	{r7, pc}

0800efb8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b08e      	sub	sp, #56	@ 0x38
 800efbc:	af04      	add	r7, sp, #16
 800efbe:	60f8      	str	r0, [r7, #12]
 800efc0:	60b9      	str	r1, [r7, #8]
 800efc2:	607a      	str	r2, [r7, #4]
 800efc4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800efc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d10b      	bne.n	800efe4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800efcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efd0:	f383 8811 	msr	BASEPRI, r3
 800efd4:	f3bf 8f6f 	isb	sy
 800efd8:	f3bf 8f4f 	dsb	sy
 800efdc:	623b      	str	r3, [r7, #32]
}
 800efde:	bf00      	nop
 800efe0:	bf00      	nop
 800efe2:	e7fd      	b.n	800efe0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800efe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d10b      	bne.n	800f002 <xTaskCreateStatic+0x4a>
	__asm volatile
 800efea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efee:	f383 8811 	msr	BASEPRI, r3
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	f3bf 8f4f 	dsb	sy
 800effa:	61fb      	str	r3, [r7, #28]
}
 800effc:	bf00      	nop
 800effe:	bf00      	nop
 800f000:	e7fd      	b.n	800effe <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f002:	23a8      	movs	r3, #168	@ 0xa8
 800f004:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	2ba8      	cmp	r3, #168	@ 0xa8
 800f00a:	d00b      	beq.n	800f024 <xTaskCreateStatic+0x6c>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	61bb      	str	r3, [r7, #24]
}
 800f01e:	bf00      	nop
 800f020:	bf00      	nop
 800f022:	e7fd      	b.n	800f020 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f024:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d01e      	beq.n	800f06a <xTaskCreateStatic+0xb2>
 800f02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01b      	beq.n	800f06a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f032:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f034:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f038:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f03a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f03e:	2202      	movs	r2, #2
 800f040:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f044:	2300      	movs	r3, #0
 800f046:	9303      	str	r3, [sp, #12]
 800f048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f04a:	9302      	str	r3, [sp, #8]
 800f04c:	f107 0314 	add.w	r3, r7, #20
 800f050:	9301      	str	r3, [sp, #4]
 800f052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f054:	9300      	str	r3, [sp, #0]
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	68b9      	ldr	r1, [r7, #8]
 800f05c:	68f8      	ldr	r0, [r7, #12]
 800f05e:	f000 f851 	bl	800f104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f062:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f064:	f000 f8f6 	bl	800f254 <prvAddNewTaskToReadyList>
 800f068:	e001      	b.n	800f06e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f06e:	697b      	ldr	r3, [r7, #20]
	}
 800f070:	4618      	mov	r0, r3
 800f072:	3728      	adds	r7, #40	@ 0x28
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08c      	sub	sp, #48	@ 0x30
 800f07c:	af04      	add	r7, sp, #16
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	603b      	str	r3, [r7, #0]
 800f084:	4613      	mov	r3, r2
 800f086:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f088:	88fb      	ldrh	r3, [r7, #6]
 800f08a:	009b      	lsls	r3, r3, #2
 800f08c:	4618      	mov	r0, r3
 800f08e:	f001 fdfd 	bl	8010c8c <pvPortMalloc>
 800f092:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d00e      	beq.n	800f0b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f09a:	20a8      	movs	r0, #168	@ 0xa8
 800f09c:	f001 fdf6 	bl	8010c8c <pvPortMalloc>
 800f0a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d003      	beq.n	800f0b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0ae:	e005      	b.n	800f0bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0b0:	6978      	ldr	r0, [r7, #20]
 800f0b2:	f001 feb9 	bl	8010e28 <vPortFree>
 800f0b6:	e001      	b.n	800f0bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d017      	beq.n	800f0f2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0c2:	69fb      	ldr	r3, [r7, #28]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0ca:	88fa      	ldrh	r2, [r7, #6]
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	9303      	str	r3, [sp, #12]
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	9302      	str	r3, [sp, #8]
 800f0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f0d6:	9301      	str	r3, [sp, #4]
 800f0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f0da:	9300      	str	r3, [sp, #0]
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	68b9      	ldr	r1, [r7, #8]
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f80f 	bl	800f104 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0e6:	69f8      	ldr	r0, [r7, #28]
 800f0e8:	f000 f8b4 	bl	800f254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	61bb      	str	r3, [r7, #24]
 800f0f0:	e002      	b.n	800f0f8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f0f8:	69bb      	ldr	r3, [r7, #24]
	}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3720      	adds	r7, #32
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f104:	b580      	push	{r7, lr}
 800f106:	b088      	sub	sp, #32
 800f108:	af00      	add	r7, sp, #0
 800f10a:	60f8      	str	r0, [r7, #12]
 800f10c:	60b9      	str	r1, [r7, #8]
 800f10e:	607a      	str	r2, [r7, #4]
 800f110:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f114:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	461a      	mov	r2, r3
 800f11c:	21a5      	movs	r1, #165	@ 0xa5
 800f11e:	f002 fd14 	bl	8011b4a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f124:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f126:	6879      	ldr	r1, [r7, #4]
 800f128:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f12c:	440b      	add	r3, r1
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	4413      	add	r3, r2
 800f132:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	f023 0307 	bic.w	r3, r3, #7
 800f13a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f13c:	69bb      	ldr	r3, [r7, #24]
 800f13e:	f003 0307 	and.w	r3, r3, #7
 800f142:	2b00      	cmp	r3, #0
 800f144:	d00b      	beq.n	800f15e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	617b      	str	r3, [r7, #20]
}
 800f158:	bf00      	nop
 800f15a:	bf00      	nop
 800f15c:	e7fd      	b.n	800f15a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01f      	beq.n	800f1a4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f164:	2300      	movs	r3, #0
 800f166:	61fb      	str	r3, [r7, #28]
 800f168:	e012      	b.n	800f190 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f16a:	68ba      	ldr	r2, [r7, #8]
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	4413      	add	r3, r2
 800f170:	7819      	ldrb	r1, [r3, #0]
 800f172:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f174:	69fb      	ldr	r3, [r7, #28]
 800f176:	4413      	add	r3, r2
 800f178:	3334      	adds	r3, #52	@ 0x34
 800f17a:	460a      	mov	r2, r1
 800f17c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f17e:	68ba      	ldr	r2, [r7, #8]
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	4413      	add	r3, r2
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d006      	beq.n	800f198 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f18a:	69fb      	ldr	r3, [r7, #28]
 800f18c:	3301      	adds	r3, #1
 800f18e:	61fb      	str	r3, [r7, #28]
 800f190:	69fb      	ldr	r3, [r7, #28]
 800f192:	2b0f      	cmp	r3, #15
 800f194:	d9e9      	bls.n	800f16a <prvInitialiseNewTask+0x66>
 800f196:	e000      	b.n	800f19a <prvInitialiseNewTask+0x96>
			{
				break;
 800f198:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f19c:	2200      	movs	r2, #0
 800f19e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f1a2:	e003      	b.n	800f1ac <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1a6:	2200      	movs	r2, #0
 800f1a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1ae:	2b37      	cmp	r3, #55	@ 0x37
 800f1b0:	d901      	bls.n	800f1b6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1b2:	2337      	movs	r3, #55	@ 0x37
 800f1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1c0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f7fe ff49 	bl	800e064 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d4:	3318      	adds	r3, #24
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7fe ff44 	bl	800e064 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1e0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ea:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1f0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f204:	3354      	adds	r3, #84	@ 0x54
 800f206:	224c      	movs	r2, #76	@ 0x4c
 800f208:	2100      	movs	r1, #0
 800f20a:	4618      	mov	r0, r3
 800f20c:	f002 fc9d 	bl	8011b4a <memset>
 800f210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f212:	4a0d      	ldr	r2, [pc, #52]	@ (800f248 <prvInitialiseNewTask+0x144>)
 800f214:	659a      	str	r2, [r3, #88]	@ 0x58
 800f216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f218:	4a0c      	ldr	r2, [pc, #48]	@ (800f24c <prvInitialiseNewTask+0x148>)
 800f21a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f21e:	4a0c      	ldr	r2, [pc, #48]	@ (800f250 <prvInitialiseNewTask+0x14c>)
 800f220:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f222:	683a      	ldr	r2, [r7, #0]
 800f224:	68f9      	ldr	r1, [r7, #12]
 800f226:	69b8      	ldr	r0, [r7, #24]
 800f228:	f001 fae0 	bl	80107ec <pxPortInitialiseStack>
 800f22c:	4602      	mov	r2, r0
 800f22e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f230:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f23a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f23c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f23e:	bf00      	nop
 800f240:	3720      	adds	r7, #32
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	240055a4 	.word	0x240055a4
 800f24c:	2400560c 	.word	0x2400560c
 800f250:	24005674 	.word	0x24005674

0800f254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f25c:	f001 fbf4 	bl	8010a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f260:	4b2d      	ldr	r3, [pc, #180]	@ (800f318 <prvAddNewTaskToReadyList+0xc4>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	3301      	adds	r3, #1
 800f266:	4a2c      	ldr	r2, [pc, #176]	@ (800f318 <prvAddNewTaskToReadyList+0xc4>)
 800f268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f26a:	4b2c      	ldr	r3, [pc, #176]	@ (800f31c <prvAddNewTaskToReadyList+0xc8>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d109      	bne.n	800f286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f272:	4a2a      	ldr	r2, [pc, #168]	@ (800f31c <prvAddNewTaskToReadyList+0xc8>)
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f278:	4b27      	ldr	r3, [pc, #156]	@ (800f318 <prvAddNewTaskToReadyList+0xc4>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d110      	bne.n	800f2a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f280:	f000 fca4 	bl	800fbcc <prvInitialiseTaskLists>
 800f284:	e00d      	b.n	800f2a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f286:	4b26      	ldr	r3, [pc, #152]	@ (800f320 <prvAddNewTaskToReadyList+0xcc>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d109      	bne.n	800f2a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f28e:	4b23      	ldr	r3, [pc, #140]	@ (800f31c <prvAddNewTaskToReadyList+0xc8>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f298:	429a      	cmp	r2, r3
 800f29a:	d802      	bhi.n	800f2a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f29c:	4a1f      	ldr	r2, [pc, #124]	@ (800f31c <prvAddNewTaskToReadyList+0xc8>)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2a2:	4b20      	ldr	r3, [pc, #128]	@ (800f324 <prvAddNewTaskToReadyList+0xd0>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	4a1e      	ldr	r2, [pc, #120]	@ (800f324 <prvAddNewTaskToReadyList+0xd0>)
 800f2aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f324 <prvAddNewTaskToReadyList+0xd0>)
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2b8:	4b1b      	ldr	r3, [pc, #108]	@ (800f328 <prvAddNewTaskToReadyList+0xd4>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d903      	bls.n	800f2c8 <prvAddNewTaskToReadyList+0x74>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2c4:	4a18      	ldr	r2, [pc, #96]	@ (800f328 <prvAddNewTaskToReadyList+0xd4>)
 800f2c6:	6013      	str	r3, [r2, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	4413      	add	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4a15      	ldr	r2, [pc, #84]	@ (800f32c <prvAddNewTaskToReadyList+0xd8>)
 800f2d6:	441a      	add	r2, r3
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	3304      	adds	r3, #4
 800f2dc:	4619      	mov	r1, r3
 800f2de:	4610      	mov	r0, r2
 800f2e0:	f7fe fecd 	bl	800e07e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f2e4:	f001 fbe2 	bl	8010aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f2e8:	4b0d      	ldr	r3, [pc, #52]	@ (800f320 <prvAddNewTaskToReadyList+0xcc>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d00e      	beq.n	800f30e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f2f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f31c <prvAddNewTaskToReadyList+0xc8>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d207      	bcs.n	800f30e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800f330 <prvAddNewTaskToReadyList+0xdc>)
 800f300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f304:	601a      	str	r2, [r3, #0]
 800f306:	f3bf 8f4f 	dsb	sy
 800f30a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f30e:	bf00      	nop
 800f310:	3708      	adds	r7, #8
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	24001824 	.word	0x24001824
 800f31c:	24001350 	.word	0x24001350
 800f320:	24001830 	.word	0x24001830
 800f324:	24001840 	.word	0x24001840
 800f328:	2400182c 	.word	0x2400182c
 800f32c:	24001354 	.word	0x24001354
 800f330:	e000ed04 	.word	0xe000ed04

0800f334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f334:	b580      	push	{r7, lr}
 800f336:	b084      	sub	sp, #16
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f33c:	2300      	movs	r3, #0
 800f33e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d018      	beq.n	800f378 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f346:	4b14      	ldr	r3, [pc, #80]	@ (800f398 <vTaskDelay+0x64>)
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d00b      	beq.n	800f366 <vTaskDelay+0x32>
	__asm volatile
 800f34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f352:	f383 8811 	msr	BASEPRI, r3
 800f356:	f3bf 8f6f 	isb	sy
 800f35a:	f3bf 8f4f 	dsb	sy
 800f35e:	60bb      	str	r3, [r7, #8]
}
 800f360:	bf00      	nop
 800f362:	bf00      	nop
 800f364:	e7fd      	b.n	800f362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f366:	f000 f901 	bl	800f56c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f36a:	2100      	movs	r1, #0
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 fe8f 	bl	8010090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f372:	f000 f909 	bl	800f588 <xTaskResumeAll>
 800f376:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d107      	bne.n	800f38e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f37e:	4b07      	ldr	r3, [pc, #28]	@ (800f39c <vTaskDelay+0x68>)
 800f380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f384:	601a      	str	r2, [r3, #0]
 800f386:	f3bf 8f4f 	dsb	sy
 800f38a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f38e:	bf00      	nop
 800f390:	3710      	adds	r7, #16
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	2400184c 	.word	0x2400184c
 800f39c:	e000ed04 	.word	0xe000ed04

0800f3a0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f3a8:	f001 fb4e 	bl	8010a48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <vTaskSuspend+0x18>
 800f3b2:	4b30      	ldr	r3, [pc, #192]	@ (800f474 <vTaskSuspend+0xd4>)
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	e000      	b.n	800f3ba <vTaskSuspend+0x1a>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	3304      	adds	r3, #4
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7fe feb9 	bl	800e138 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d004      	beq.n	800f3d8 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	3318      	adds	r3, #24
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fe feb0 	bl	800e138 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4619      	mov	r1, r3
 800f3de:	4826      	ldr	r0, [pc, #152]	@ (800f478 <vTaskSuspend+0xd8>)
 800f3e0:	f7fe fe4d 	bl	800e07e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d103      	bne.n	800f3f8 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f3f8:	f001 fb58 	bl	8010aac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f3fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f47c <vTaskSuspend+0xdc>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d005      	beq.n	800f410 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f404:	f001 fb20 	bl	8010a48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f408:	f000 fc84 	bl	800fd14 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f40c:	f001 fb4e 	bl	8010aac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f410:	4b18      	ldr	r3, [pc, #96]	@ (800f474 <vTaskSuspend+0xd4>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68fa      	ldr	r2, [r7, #12]
 800f416:	429a      	cmp	r2, r3
 800f418:	d128      	bne.n	800f46c <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800f41a:	4b18      	ldr	r3, [pc, #96]	@ (800f47c <vTaskSuspend+0xdc>)
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d018      	beq.n	800f454 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f422:	4b17      	ldr	r3, [pc, #92]	@ (800f480 <vTaskSuspend+0xe0>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00b      	beq.n	800f442 <vTaskSuspend+0xa2>
	__asm volatile
 800f42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f42e:	f383 8811 	msr	BASEPRI, r3
 800f432:	f3bf 8f6f 	isb	sy
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	60bb      	str	r3, [r7, #8]
}
 800f43c:	bf00      	nop
 800f43e:	bf00      	nop
 800f440:	e7fd      	b.n	800f43e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800f442:	4b10      	ldr	r3, [pc, #64]	@ (800f484 <vTaskSuspend+0xe4>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f452:	e00b      	b.n	800f46c <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800f454:	4b08      	ldr	r3, [pc, #32]	@ (800f478 <vTaskSuspend+0xd8>)
 800f456:	681a      	ldr	r2, [r3, #0]
 800f458:	4b0b      	ldr	r3, [pc, #44]	@ (800f488 <vTaskSuspend+0xe8>)
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	429a      	cmp	r2, r3
 800f45e:	d103      	bne.n	800f468 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800f460:	4b04      	ldr	r3, [pc, #16]	@ (800f474 <vTaskSuspend+0xd4>)
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
	}
 800f466:	e001      	b.n	800f46c <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800f468:	f000 f9f6 	bl	800f858 <vTaskSwitchContext>
	}
 800f46c:	bf00      	nop
 800f46e:	3710      	adds	r7, #16
 800f470:	46bd      	mov	sp, r7
 800f472:	bd80      	pop	{r7, pc}
 800f474:	24001350 	.word	0x24001350
 800f478:	24001810 	.word	0x24001810
 800f47c:	24001830 	.word	0x24001830
 800f480:	2400184c 	.word	0x2400184c
 800f484:	e000ed04 	.word	0xe000ed04
 800f488:	24001824 	.word	0x24001824

0800f48c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b08a      	sub	sp, #40	@ 0x28
 800f490:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f492:	2300      	movs	r3, #0
 800f494:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f496:	2300      	movs	r3, #0
 800f498:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f49a:	463a      	mov	r2, r7
 800f49c:	1d39      	adds	r1, r7, #4
 800f49e:	f107 0308 	add.w	r3, r7, #8
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	f7fe fd8a 	bl	800dfbc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	9202      	str	r2, [sp, #8]
 800f4b0:	9301      	str	r3, [sp, #4]
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	9300      	str	r3, [sp, #0]
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	460a      	mov	r2, r1
 800f4ba:	4924      	ldr	r1, [pc, #144]	@ (800f54c <vTaskStartScheduler+0xc0>)
 800f4bc:	4824      	ldr	r0, [pc, #144]	@ (800f550 <vTaskStartScheduler+0xc4>)
 800f4be:	f7ff fd7b 	bl	800efb8 <xTaskCreateStatic>
 800f4c2:	4603      	mov	r3, r0
 800f4c4:	4a23      	ldr	r2, [pc, #140]	@ (800f554 <vTaskStartScheduler+0xc8>)
 800f4c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f4c8:	4b22      	ldr	r3, [pc, #136]	@ (800f554 <vTaskStartScheduler+0xc8>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d002      	beq.n	800f4d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	617b      	str	r3, [r7, #20]
 800f4d4:	e001      	b.n	800f4da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d102      	bne.n	800f4e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f4e0:	f000 fe2a 	bl	8010138 <xTimerCreateTimerTask>
 800f4e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d11b      	bne.n	800f524 <vTaskStartScheduler+0x98>
	__asm volatile
 800f4ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4f0:	f383 8811 	msr	BASEPRI, r3
 800f4f4:	f3bf 8f6f 	isb	sy
 800f4f8:	f3bf 8f4f 	dsb	sy
 800f4fc:	613b      	str	r3, [r7, #16]
}
 800f4fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f500:	4b15      	ldr	r3, [pc, #84]	@ (800f558 <vTaskStartScheduler+0xcc>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	3354      	adds	r3, #84	@ 0x54
 800f506:	4a15      	ldr	r2, [pc, #84]	@ (800f55c <vTaskStartScheduler+0xd0>)
 800f508:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f50a:	4b15      	ldr	r3, [pc, #84]	@ (800f560 <vTaskStartScheduler+0xd4>)
 800f50c:	f04f 32ff 	mov.w	r2, #4294967295
 800f510:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f512:	4b14      	ldr	r3, [pc, #80]	@ (800f564 <vTaskStartScheduler+0xd8>)
 800f514:	2201      	movs	r2, #1
 800f516:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f518:	4b13      	ldr	r3, [pc, #76]	@ (800f568 <vTaskStartScheduler+0xdc>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f51e:	f001 f9ef 	bl	8010900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f522:	e00f      	b.n	800f544 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f524:	697b      	ldr	r3, [r7, #20]
 800f526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52a:	d10b      	bne.n	800f544 <vTaskStartScheduler+0xb8>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f530:	f383 8811 	msr	BASEPRI, r3
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	60fb      	str	r3, [r7, #12]
}
 800f53e:	bf00      	nop
 800f540:	bf00      	nop
 800f542:	e7fd      	b.n	800f540 <vTaskStartScheduler+0xb4>
}
 800f544:	bf00      	nop
 800f546:	3718      	adds	r7, #24
 800f548:	46bd      	mov	sp, r7
 800f54a:	bd80      	pop	{r7, pc}
 800f54c:	08013d34 	.word	0x08013d34
 800f550:	0800fb9d 	.word	0x0800fb9d
 800f554:	24001848 	.word	0x24001848
 800f558:	24001350 	.word	0x24001350
 800f55c:	24000024 	.word	0x24000024
 800f560:	24001844 	.word	0x24001844
 800f564:	24001830 	.word	0x24001830
 800f568:	24001828 	.word	0x24001828

0800f56c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f56c:	b480      	push	{r7}
 800f56e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f570:	4b04      	ldr	r3, [pc, #16]	@ (800f584 <vTaskSuspendAll+0x18>)
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3301      	adds	r3, #1
 800f576:	4a03      	ldr	r2, [pc, #12]	@ (800f584 <vTaskSuspendAll+0x18>)
 800f578:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f57a:	bf00      	nop
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr
 800f584:	2400184c 	.word	0x2400184c

0800f588 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b084      	sub	sp, #16
 800f58c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f58e:	2300      	movs	r3, #0
 800f590:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f592:	2300      	movs	r3, #0
 800f594:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f596:	4b42      	ldr	r3, [pc, #264]	@ (800f6a0 <xTaskResumeAll+0x118>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10b      	bne.n	800f5b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	603b      	str	r3, [r7, #0]
}
 800f5b0:	bf00      	nop
 800f5b2:	bf00      	nop
 800f5b4:	e7fd      	b.n	800f5b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f5b6:	f001 fa47 	bl	8010a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f5ba:	4b39      	ldr	r3, [pc, #228]	@ (800f6a0 <xTaskResumeAll+0x118>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	3b01      	subs	r3, #1
 800f5c0:	4a37      	ldr	r2, [pc, #220]	@ (800f6a0 <xTaskResumeAll+0x118>)
 800f5c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5c4:	4b36      	ldr	r3, [pc, #216]	@ (800f6a0 <xTaskResumeAll+0x118>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d162      	bne.n	800f692 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f5cc:	4b35      	ldr	r3, [pc, #212]	@ (800f6a4 <xTaskResumeAll+0x11c>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d05e      	beq.n	800f692 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f5d4:	e02f      	b.n	800f636 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f5d6:	4b34      	ldr	r3, [pc, #208]	@ (800f6a8 <xTaskResumeAll+0x120>)
 800f5d8:	68db      	ldr	r3, [r3, #12]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	3318      	adds	r3, #24
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7fe fda8 	bl	800e138 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	3304      	adds	r3, #4
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fe fda3 	bl	800e138 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f5f6:	4b2d      	ldr	r3, [pc, #180]	@ (800f6ac <xTaskResumeAll+0x124>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d903      	bls.n	800f606 <xTaskResumeAll+0x7e>
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f602:	4a2a      	ldr	r2, [pc, #168]	@ (800f6ac <xTaskResumeAll+0x124>)
 800f604:	6013      	str	r3, [r2, #0]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f60a:	4613      	mov	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	4413      	add	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4a27      	ldr	r2, [pc, #156]	@ (800f6b0 <xTaskResumeAll+0x128>)
 800f614:	441a      	add	r2, r3
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3304      	adds	r3, #4
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7fe fd2e 	bl	800e07e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f626:	4b23      	ldr	r3, [pc, #140]	@ (800f6b4 <xTaskResumeAll+0x12c>)
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f62c:	429a      	cmp	r2, r3
 800f62e:	d302      	bcc.n	800f636 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f630:	4b21      	ldr	r3, [pc, #132]	@ (800f6b8 <xTaskResumeAll+0x130>)
 800f632:	2201      	movs	r2, #1
 800f634:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f636:	4b1c      	ldr	r3, [pc, #112]	@ (800f6a8 <xTaskResumeAll+0x120>)
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1cb      	bne.n	800f5d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f644:	f000 fb66 	bl	800fd14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f648:	4b1c      	ldr	r3, [pc, #112]	@ (800f6bc <xTaskResumeAll+0x134>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d010      	beq.n	800f676 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f654:	f000 f846 	bl	800f6e4 <xTaskIncrementTick>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d002      	beq.n	800f664 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f65e:	4b16      	ldr	r3, [pc, #88]	@ (800f6b8 <xTaskResumeAll+0x130>)
 800f660:	2201      	movs	r2, #1
 800f662:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	3b01      	subs	r3, #1
 800f668:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d1f1      	bne.n	800f654 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f670:	4b12      	ldr	r3, [pc, #72]	@ (800f6bc <xTaskResumeAll+0x134>)
 800f672:	2200      	movs	r2, #0
 800f674:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f676:	4b10      	ldr	r3, [pc, #64]	@ (800f6b8 <xTaskResumeAll+0x130>)
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d009      	beq.n	800f692 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f67e:	2301      	movs	r3, #1
 800f680:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f682:	4b0f      	ldr	r3, [pc, #60]	@ (800f6c0 <xTaskResumeAll+0x138>)
 800f684:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	f3bf 8f4f 	dsb	sy
 800f68e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f692:	f001 fa0b 	bl	8010aac <vPortExitCritical>

	return xAlreadyYielded;
 800f696:	68bb      	ldr	r3, [r7, #8]
}
 800f698:	4618      	mov	r0, r3
 800f69a:	3710      	adds	r7, #16
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	2400184c 	.word	0x2400184c
 800f6a4:	24001824 	.word	0x24001824
 800f6a8:	240017e4 	.word	0x240017e4
 800f6ac:	2400182c 	.word	0x2400182c
 800f6b0:	24001354 	.word	0x24001354
 800f6b4:	24001350 	.word	0x24001350
 800f6b8:	24001838 	.word	0x24001838
 800f6bc:	24001834 	.word	0x24001834
 800f6c0:	e000ed04 	.word	0xe000ed04

0800f6c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f6c4:	b480      	push	{r7}
 800f6c6:	b083      	sub	sp, #12
 800f6c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f6ca:	4b05      	ldr	r3, [pc, #20]	@ (800f6e0 <xTaskGetTickCount+0x1c>)
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f6d0:	687b      	ldr	r3, [r7, #4]
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	370c      	adds	r7, #12
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	24001828 	.word	0x24001828

0800f6e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f6e4:	b580      	push	{r7, lr}
 800f6e6:	b086      	sub	sp, #24
 800f6e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6ee:	4b4f      	ldr	r3, [pc, #316]	@ (800f82c <xTaskIncrementTick+0x148>)
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	f040 8090 	bne.w	800f818 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f6f8:	4b4d      	ldr	r3, [pc, #308]	@ (800f830 <xTaskIncrementTick+0x14c>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	3301      	adds	r3, #1
 800f6fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f700:	4a4b      	ldr	r2, [pc, #300]	@ (800f830 <xTaskIncrementTick+0x14c>)
 800f702:	693b      	ldr	r3, [r7, #16]
 800f704:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d121      	bne.n	800f750 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f70c:	4b49      	ldr	r3, [pc, #292]	@ (800f834 <xTaskIncrementTick+0x150>)
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d00b      	beq.n	800f72e <xTaskIncrementTick+0x4a>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f71a:	f383 8811 	msr	BASEPRI, r3
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	603b      	str	r3, [r7, #0]
}
 800f728:	bf00      	nop
 800f72a:	bf00      	nop
 800f72c:	e7fd      	b.n	800f72a <xTaskIncrementTick+0x46>
 800f72e:	4b41      	ldr	r3, [pc, #260]	@ (800f834 <xTaskIncrementTick+0x150>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	60fb      	str	r3, [r7, #12]
 800f734:	4b40      	ldr	r3, [pc, #256]	@ (800f838 <xTaskIncrementTick+0x154>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a3e      	ldr	r2, [pc, #248]	@ (800f834 <xTaskIncrementTick+0x150>)
 800f73a:	6013      	str	r3, [r2, #0]
 800f73c:	4a3e      	ldr	r2, [pc, #248]	@ (800f838 <xTaskIncrementTick+0x154>)
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6013      	str	r3, [r2, #0]
 800f742:	4b3e      	ldr	r3, [pc, #248]	@ (800f83c <xTaskIncrementTick+0x158>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	3301      	adds	r3, #1
 800f748:	4a3c      	ldr	r2, [pc, #240]	@ (800f83c <xTaskIncrementTick+0x158>)
 800f74a:	6013      	str	r3, [r2, #0]
 800f74c:	f000 fae2 	bl	800fd14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f750:	4b3b      	ldr	r3, [pc, #236]	@ (800f840 <xTaskIncrementTick+0x15c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	429a      	cmp	r2, r3
 800f758:	d349      	bcc.n	800f7ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f75a:	4b36      	ldr	r3, [pc, #216]	@ (800f834 <xTaskIncrementTick+0x150>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d104      	bne.n	800f76e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f764:	4b36      	ldr	r3, [pc, #216]	@ (800f840 <xTaskIncrementTick+0x15c>)
 800f766:	f04f 32ff 	mov.w	r2, #4294967295
 800f76a:	601a      	str	r2, [r3, #0]
					break;
 800f76c:	e03f      	b.n	800f7ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f76e:	4b31      	ldr	r3, [pc, #196]	@ (800f834 <xTaskIncrementTick+0x150>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	68db      	ldr	r3, [r3, #12]
 800f774:	68db      	ldr	r3, [r3, #12]
 800f776:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f778:	68bb      	ldr	r3, [r7, #8]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	429a      	cmp	r2, r3
 800f784:	d203      	bcs.n	800f78e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f786:	4a2e      	ldr	r2, [pc, #184]	@ (800f840 <xTaskIncrementTick+0x15c>)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f78c:	e02f      	b.n	800f7ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f78e:	68bb      	ldr	r3, [r7, #8]
 800f790:	3304      	adds	r3, #4
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe fcd0 	bl	800e138 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d004      	beq.n	800f7aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	3318      	adds	r3, #24
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7fe fcc7 	bl	800e138 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7ae:	4b25      	ldr	r3, [pc, #148]	@ (800f844 <xTaskIncrementTick+0x160>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d903      	bls.n	800f7be <xTaskIncrementTick+0xda>
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7ba:	4a22      	ldr	r2, [pc, #136]	@ (800f844 <xTaskIncrementTick+0x160>)
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7c2:	4613      	mov	r3, r2
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	4a1f      	ldr	r2, [pc, #124]	@ (800f848 <xTaskIncrementTick+0x164>)
 800f7cc:	441a      	add	r2, r3
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	3304      	adds	r3, #4
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7fe fc52 	bl	800e07e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7de:	4b1b      	ldr	r3, [pc, #108]	@ (800f84c <xTaskIncrementTick+0x168>)
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	d3b8      	bcc.n	800f75a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f7ec:	e7b5      	b.n	800f75a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f7ee:	4b17      	ldr	r3, [pc, #92]	@ (800f84c <xTaskIncrementTick+0x168>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7f4:	4914      	ldr	r1, [pc, #80]	@ (800f848 <xTaskIncrementTick+0x164>)
 800f7f6:	4613      	mov	r3, r2
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	440b      	add	r3, r1
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	2b01      	cmp	r3, #1
 800f804:	d901      	bls.n	800f80a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f806:	2301      	movs	r3, #1
 800f808:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f80a:	4b11      	ldr	r3, [pc, #68]	@ (800f850 <xTaskIncrementTick+0x16c>)
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d007      	beq.n	800f822 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f812:	2301      	movs	r3, #1
 800f814:	617b      	str	r3, [r7, #20]
 800f816:	e004      	b.n	800f822 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f818:	4b0e      	ldr	r3, [pc, #56]	@ (800f854 <xTaskIncrementTick+0x170>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	3301      	adds	r3, #1
 800f81e:	4a0d      	ldr	r2, [pc, #52]	@ (800f854 <xTaskIncrementTick+0x170>)
 800f820:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f822:	697b      	ldr	r3, [r7, #20]
}
 800f824:	4618      	mov	r0, r3
 800f826:	3718      	adds	r7, #24
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}
 800f82c:	2400184c 	.word	0x2400184c
 800f830:	24001828 	.word	0x24001828
 800f834:	240017dc 	.word	0x240017dc
 800f838:	240017e0 	.word	0x240017e0
 800f83c:	2400183c 	.word	0x2400183c
 800f840:	24001844 	.word	0x24001844
 800f844:	2400182c 	.word	0x2400182c
 800f848:	24001354 	.word	0x24001354
 800f84c:	24001350 	.word	0x24001350
 800f850:	24001838 	.word	0x24001838
 800f854:	24001834 	.word	0x24001834

0800f858 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f858:	b480      	push	{r7}
 800f85a:	b085      	sub	sp, #20
 800f85c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f85e:	4b2b      	ldr	r3, [pc, #172]	@ (800f90c <vTaskSwitchContext+0xb4>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d003      	beq.n	800f86e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f866:	4b2a      	ldr	r3, [pc, #168]	@ (800f910 <vTaskSwitchContext+0xb8>)
 800f868:	2201      	movs	r2, #1
 800f86a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f86c:	e047      	b.n	800f8fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f86e:	4b28      	ldr	r3, [pc, #160]	@ (800f910 <vTaskSwitchContext+0xb8>)
 800f870:	2200      	movs	r2, #0
 800f872:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f874:	4b27      	ldr	r3, [pc, #156]	@ (800f914 <vTaskSwitchContext+0xbc>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	60fb      	str	r3, [r7, #12]
 800f87a:	e011      	b.n	800f8a0 <vTaskSwitchContext+0x48>
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10b      	bne.n	800f89a <vTaskSwitchContext+0x42>
	__asm volatile
 800f882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f886:	f383 8811 	msr	BASEPRI, r3
 800f88a:	f3bf 8f6f 	isb	sy
 800f88e:	f3bf 8f4f 	dsb	sy
 800f892:	607b      	str	r3, [r7, #4]
}
 800f894:	bf00      	nop
 800f896:	bf00      	nop
 800f898:	e7fd      	b.n	800f896 <vTaskSwitchContext+0x3e>
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	3b01      	subs	r3, #1
 800f89e:	60fb      	str	r3, [r7, #12]
 800f8a0:	491d      	ldr	r1, [pc, #116]	@ (800f918 <vTaskSwitchContext+0xc0>)
 800f8a2:	68fa      	ldr	r2, [r7, #12]
 800f8a4:	4613      	mov	r3, r2
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4413      	add	r3, r2
 800f8aa:	009b      	lsls	r3, r3, #2
 800f8ac:	440b      	add	r3, r1
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d0e3      	beq.n	800f87c <vTaskSwitchContext+0x24>
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	4613      	mov	r3, r2
 800f8b8:	009b      	lsls	r3, r3, #2
 800f8ba:	4413      	add	r3, r2
 800f8bc:	009b      	lsls	r3, r3, #2
 800f8be:	4a16      	ldr	r2, [pc, #88]	@ (800f918 <vTaskSwitchContext+0xc0>)
 800f8c0:	4413      	add	r3, r2
 800f8c2:	60bb      	str	r3, [r7, #8]
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	685a      	ldr	r2, [r3, #4]
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	605a      	str	r2, [r3, #4]
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	3308      	adds	r3, #8
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d104      	bne.n	800f8e4 <vTaskSwitchContext+0x8c>
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	685a      	ldr	r2, [r3, #4]
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	605a      	str	r2, [r3, #4]
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	68db      	ldr	r3, [r3, #12]
 800f8ea:	4a0c      	ldr	r2, [pc, #48]	@ (800f91c <vTaskSwitchContext+0xc4>)
 800f8ec:	6013      	str	r3, [r2, #0]
 800f8ee:	4a09      	ldr	r2, [pc, #36]	@ (800f914 <vTaskSwitchContext+0xbc>)
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f8f4:	4b09      	ldr	r3, [pc, #36]	@ (800f91c <vTaskSwitchContext+0xc4>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	3354      	adds	r3, #84	@ 0x54
 800f8fa:	4a09      	ldr	r2, [pc, #36]	@ (800f920 <vTaskSwitchContext+0xc8>)
 800f8fc:	6013      	str	r3, [r2, #0]
}
 800f8fe:	bf00      	nop
 800f900:	3714      	adds	r7, #20
 800f902:	46bd      	mov	sp, r7
 800f904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f908:	4770      	bx	lr
 800f90a:	bf00      	nop
 800f90c:	2400184c 	.word	0x2400184c
 800f910:	24001838 	.word	0x24001838
 800f914:	2400182c 	.word	0x2400182c
 800f918:	24001354 	.word	0x24001354
 800f91c:	24001350 	.word	0x24001350
 800f920:	24000024 	.word	0x24000024

0800f924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
 800f92c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d10b      	bne.n	800f94c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f938:	f383 8811 	msr	BASEPRI, r3
 800f93c:	f3bf 8f6f 	isb	sy
 800f940:	f3bf 8f4f 	dsb	sy
 800f944:	60fb      	str	r3, [r7, #12]
}
 800f946:	bf00      	nop
 800f948:	bf00      	nop
 800f94a:	e7fd      	b.n	800f948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f94c:	4b07      	ldr	r3, [pc, #28]	@ (800f96c <vTaskPlaceOnEventList+0x48>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	3318      	adds	r3, #24
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f7fe fbb6 	bl	800e0c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f95a:	2101      	movs	r1, #1
 800f95c:	6838      	ldr	r0, [r7, #0]
 800f95e:	f000 fb97 	bl	8010090 <prvAddCurrentTaskToDelayedList>
}
 800f962:	bf00      	nop
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	24001350 	.word	0x24001350

0800f970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d10b      	bne.n	800f99a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f986:	f383 8811 	msr	BASEPRI, r3
 800f98a:	f3bf 8f6f 	isb	sy
 800f98e:	f3bf 8f4f 	dsb	sy
 800f992:	617b      	str	r3, [r7, #20]
}
 800f994:	bf00      	nop
 800f996:	bf00      	nop
 800f998:	e7fd      	b.n	800f996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f99a:	4b0a      	ldr	r3, [pc, #40]	@ (800f9c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3318      	adds	r3, #24
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7fe fb6b 	bl	800e07e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d002      	beq.n	800f9b4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f9ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f9b2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f9b4:	6879      	ldr	r1, [r7, #4]
 800f9b6:	68b8      	ldr	r0, [r7, #8]
 800f9b8:	f000 fb6a 	bl	8010090 <prvAddCurrentTaskToDelayedList>
	}
 800f9bc:	bf00      	nop
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}
 800f9c4:	24001350 	.word	0x24001350

0800f9c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b086      	sub	sp, #24
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	68db      	ldr	r3, [r3, #12]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d10b      	bne.n	800f9f6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	60fb      	str	r3, [r7, #12]
}
 800f9f0:	bf00      	nop
 800f9f2:	bf00      	nop
 800f9f4:	e7fd      	b.n	800f9f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	3318      	adds	r3, #24
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f7fe fb9c 	bl	800e138 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa00:	4b1d      	ldr	r3, [pc, #116]	@ (800fa78 <xTaskRemoveFromEventList+0xb0>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d11d      	bne.n	800fa44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	3304      	adds	r3, #4
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fe fb93 	bl	800e138 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa16:	4b19      	ldr	r3, [pc, #100]	@ (800fa7c <xTaskRemoveFromEventList+0xb4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d903      	bls.n	800fa26 <xTaskRemoveFromEventList+0x5e>
 800fa1e:	693b      	ldr	r3, [r7, #16]
 800fa20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa22:	4a16      	ldr	r2, [pc, #88]	@ (800fa7c <xTaskRemoveFromEventList+0xb4>)
 800fa24:	6013      	str	r3, [r2, #0]
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa2a:	4613      	mov	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	009b      	lsls	r3, r3, #2
 800fa32:	4a13      	ldr	r2, [pc, #76]	@ (800fa80 <xTaskRemoveFromEventList+0xb8>)
 800fa34:	441a      	add	r2, r3
 800fa36:	693b      	ldr	r3, [r7, #16]
 800fa38:	3304      	adds	r3, #4
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4610      	mov	r0, r2
 800fa3e:	f7fe fb1e 	bl	800e07e <vListInsertEnd>
 800fa42:	e005      	b.n	800fa50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa44:	693b      	ldr	r3, [r7, #16]
 800fa46:	3318      	adds	r3, #24
 800fa48:	4619      	mov	r1, r3
 800fa4a:	480e      	ldr	r0, [pc, #56]	@ (800fa84 <xTaskRemoveFromEventList+0xbc>)
 800fa4c:	f7fe fb17 	bl	800e07e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa54:	4b0c      	ldr	r3, [pc, #48]	@ (800fa88 <xTaskRemoveFromEventList+0xc0>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d905      	bls.n	800fa6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fa62:	4b0a      	ldr	r3, [pc, #40]	@ (800fa8c <xTaskRemoveFromEventList+0xc4>)
 800fa64:	2201      	movs	r2, #1
 800fa66:	601a      	str	r2, [r3, #0]
 800fa68:	e001      	b.n	800fa6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fa6e:	697b      	ldr	r3, [r7, #20]
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	3718      	adds	r7, #24
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	2400184c 	.word	0x2400184c
 800fa7c:	2400182c 	.word	0x2400182c
 800fa80:	24001354 	.word	0x24001354
 800fa84:	240017e4 	.word	0x240017e4
 800fa88:	24001350 	.word	0x24001350
 800fa8c:	24001838 	.word	0x24001838

0800fa90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fa98:	4b06      	ldr	r3, [pc, #24]	@ (800fab4 <vTaskInternalSetTimeOutState+0x24>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800faa0:	4b05      	ldr	r3, [pc, #20]	@ (800fab8 <vTaskInternalSetTimeOutState+0x28>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	605a      	str	r2, [r3, #4]
}
 800faa8:	bf00      	nop
 800faaa:	370c      	adds	r7, #12
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr
 800fab4:	2400183c 	.word	0x2400183c
 800fab8:	24001828 	.word	0x24001828

0800fabc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b088      	sub	sp, #32
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10b      	bne.n	800fae4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad0:	f383 8811 	msr	BASEPRI, r3
 800fad4:	f3bf 8f6f 	isb	sy
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	613b      	str	r3, [r7, #16]
}
 800fade:	bf00      	nop
 800fae0:	bf00      	nop
 800fae2:	e7fd      	b.n	800fae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10b      	bne.n	800fb02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800faea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faee:	f383 8811 	msr	BASEPRI, r3
 800faf2:	f3bf 8f6f 	isb	sy
 800faf6:	f3bf 8f4f 	dsb	sy
 800fafa:	60fb      	str	r3, [r7, #12]
}
 800fafc:	bf00      	nop
 800fafe:	bf00      	nop
 800fb00:	e7fd      	b.n	800fafe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fb02:	f000 ffa1 	bl	8010a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb06:	4b1d      	ldr	r3, [pc, #116]	@ (800fb7c <xTaskCheckForTimeOut+0xc0>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	69ba      	ldr	r2, [r7, #24]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb1e:	d102      	bne.n	800fb26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb20:	2300      	movs	r3, #0
 800fb22:	61fb      	str	r3, [r7, #28]
 800fb24:	e023      	b.n	800fb6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	681a      	ldr	r2, [r3, #0]
 800fb2a:	4b15      	ldr	r3, [pc, #84]	@ (800fb80 <xTaskCheckForTimeOut+0xc4>)
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d007      	beq.n	800fb42 <xTaskCheckForTimeOut+0x86>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	69ba      	ldr	r2, [r7, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d302      	bcc.n	800fb42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	61fb      	str	r3, [r7, #28]
 800fb40:	e015      	b.n	800fb6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	697a      	ldr	r2, [r7, #20]
 800fb48:	429a      	cmp	r2, r3
 800fb4a:	d20b      	bcs.n	800fb64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	681a      	ldr	r2, [r3, #0]
 800fb50:	697b      	ldr	r3, [r7, #20]
 800fb52:	1ad2      	subs	r2, r2, r3
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f7ff ff99 	bl	800fa90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	61fb      	str	r3, [r7, #28]
 800fb62:	e004      	b.n	800fb6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	2200      	movs	r2, #0
 800fb68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fb6e:	f000 ff9d 	bl	8010aac <vPortExitCritical>

	return xReturn;
 800fb72:	69fb      	ldr	r3, [r7, #28]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3720      	adds	r7, #32
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	24001828 	.word	0x24001828
 800fb80:	2400183c 	.word	0x2400183c

0800fb84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fb84:	b480      	push	{r7}
 800fb86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fb88:	4b03      	ldr	r3, [pc, #12]	@ (800fb98 <vTaskMissedYield+0x14>)
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	601a      	str	r2, [r3, #0]
}
 800fb8e:	bf00      	nop
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr
 800fb98:	24001838 	.word	0x24001838

0800fb9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fba4:	f000 f852 	bl	800fc4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fba8:	4b06      	ldr	r3, [pc, #24]	@ (800fbc4 <prvIdleTask+0x28>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d9f9      	bls.n	800fba4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fbb0:	4b05      	ldr	r3, [pc, #20]	@ (800fbc8 <prvIdleTask+0x2c>)
 800fbb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbb6:	601a      	str	r2, [r3, #0]
 800fbb8:	f3bf 8f4f 	dsb	sy
 800fbbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fbc0:	e7f0      	b.n	800fba4 <prvIdleTask+0x8>
 800fbc2:	bf00      	nop
 800fbc4:	24001354 	.word	0x24001354
 800fbc8:	e000ed04 	.word	0xe000ed04

0800fbcc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	607b      	str	r3, [r7, #4]
 800fbd6:	e00c      	b.n	800fbf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fbd8:	687a      	ldr	r2, [r7, #4]
 800fbda:	4613      	mov	r3, r2
 800fbdc:	009b      	lsls	r3, r3, #2
 800fbde:	4413      	add	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	4a12      	ldr	r2, [pc, #72]	@ (800fc2c <prvInitialiseTaskLists+0x60>)
 800fbe4:	4413      	add	r3, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7fe fa1c 	bl	800e024 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	607b      	str	r3, [r7, #4]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2b37      	cmp	r3, #55	@ 0x37
 800fbf6:	d9ef      	bls.n	800fbd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fbf8:	480d      	ldr	r0, [pc, #52]	@ (800fc30 <prvInitialiseTaskLists+0x64>)
 800fbfa:	f7fe fa13 	bl	800e024 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fbfe:	480d      	ldr	r0, [pc, #52]	@ (800fc34 <prvInitialiseTaskLists+0x68>)
 800fc00:	f7fe fa10 	bl	800e024 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc04:	480c      	ldr	r0, [pc, #48]	@ (800fc38 <prvInitialiseTaskLists+0x6c>)
 800fc06:	f7fe fa0d 	bl	800e024 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc0a:	480c      	ldr	r0, [pc, #48]	@ (800fc3c <prvInitialiseTaskLists+0x70>)
 800fc0c:	f7fe fa0a 	bl	800e024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc10:	480b      	ldr	r0, [pc, #44]	@ (800fc40 <prvInitialiseTaskLists+0x74>)
 800fc12:	f7fe fa07 	bl	800e024 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc16:	4b0b      	ldr	r3, [pc, #44]	@ (800fc44 <prvInitialiseTaskLists+0x78>)
 800fc18:	4a05      	ldr	r2, [pc, #20]	@ (800fc30 <prvInitialiseTaskLists+0x64>)
 800fc1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fc48 <prvInitialiseTaskLists+0x7c>)
 800fc1e:	4a05      	ldr	r2, [pc, #20]	@ (800fc34 <prvInitialiseTaskLists+0x68>)
 800fc20:	601a      	str	r2, [r3, #0]
}
 800fc22:	bf00      	nop
 800fc24:	3708      	adds	r7, #8
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	24001354 	.word	0x24001354
 800fc30:	240017b4 	.word	0x240017b4
 800fc34:	240017c8 	.word	0x240017c8
 800fc38:	240017e4 	.word	0x240017e4
 800fc3c:	240017f8 	.word	0x240017f8
 800fc40:	24001810 	.word	0x24001810
 800fc44:	240017dc 	.word	0x240017dc
 800fc48:	240017e0 	.word	0x240017e0

0800fc4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc52:	e019      	b.n	800fc88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc54:	f000 fef8 	bl	8010a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc58:	4b10      	ldr	r3, [pc, #64]	@ (800fc9c <prvCheckTasksWaitingTermination+0x50>)
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	68db      	ldr	r3, [r3, #12]
 800fc5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	3304      	adds	r3, #4
 800fc64:	4618      	mov	r0, r3
 800fc66:	f7fe fa67 	bl	800e138 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800fca0 <prvCheckTasksWaitingTermination+0x54>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	4a0b      	ldr	r2, [pc, #44]	@ (800fca0 <prvCheckTasksWaitingTermination+0x54>)
 800fc72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fc74:	4b0b      	ldr	r3, [pc, #44]	@ (800fca4 <prvCheckTasksWaitingTermination+0x58>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	3b01      	subs	r3, #1
 800fc7a:	4a0a      	ldr	r2, [pc, #40]	@ (800fca4 <prvCheckTasksWaitingTermination+0x58>)
 800fc7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fc7e:	f000 ff15 	bl	8010aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f810 	bl	800fca8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc88:	4b06      	ldr	r3, [pc, #24]	@ (800fca4 <prvCheckTasksWaitingTermination+0x58>)
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d1e1      	bne.n	800fc54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	3708      	adds	r7, #8
 800fc96:	46bd      	mov	sp, r7
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	bf00      	nop
 800fc9c:	240017f8 	.word	0x240017f8
 800fca0:	24001824 	.word	0x24001824
 800fca4:	2400180c 	.word	0x2400180c

0800fca8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b084      	sub	sp, #16
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	3354      	adds	r3, #84	@ 0x54
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	f001 ff65 	bl	8011b84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d108      	bne.n	800fcd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f001 f8ad 	bl	8010e28 <vPortFree>
				vPortFree( pxTCB );
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f001 f8aa 	bl	8010e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fcd4:	e019      	b.n	800fd0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d103      	bne.n	800fce8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f001 f8a1 	bl	8010e28 <vPortFree>
	}
 800fce6:	e010      	b.n	800fd0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fcee:	2b02      	cmp	r3, #2
 800fcf0:	d00b      	beq.n	800fd0a <prvDeleteTCB+0x62>
	__asm volatile
 800fcf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fcf6:	f383 8811 	msr	BASEPRI, r3
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	f3bf 8f4f 	dsb	sy
 800fd02:	60fb      	str	r3, [r7, #12]
}
 800fd04:	bf00      	nop
 800fd06:	bf00      	nop
 800fd08:	e7fd      	b.n	800fd06 <prvDeleteTCB+0x5e>
	}
 800fd0a:	bf00      	nop
 800fd0c:	3710      	adds	r7, #16
 800fd0e:	46bd      	mov	sp, r7
 800fd10:	bd80      	pop	{r7, pc}
	...

0800fd14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd1a:	4b0c      	ldr	r3, [pc, #48]	@ (800fd4c <prvResetNextTaskUnblockTime+0x38>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d104      	bne.n	800fd2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd24:	4b0a      	ldr	r3, [pc, #40]	@ (800fd50 <prvResetNextTaskUnblockTime+0x3c>)
 800fd26:	f04f 32ff 	mov.w	r2, #4294967295
 800fd2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fd2c:	e008      	b.n	800fd40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd2e:	4b07      	ldr	r3, [pc, #28]	@ (800fd4c <prvResetNextTaskUnblockTime+0x38>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	685b      	ldr	r3, [r3, #4]
 800fd3c:	4a04      	ldr	r2, [pc, #16]	@ (800fd50 <prvResetNextTaskUnblockTime+0x3c>)
 800fd3e:	6013      	str	r3, [r2, #0]
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	240017dc 	.word	0x240017dc
 800fd50:	24001844 	.word	0x24001844

0800fd54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fd5a:	4b05      	ldr	r3, [pc, #20]	@ (800fd70 <xTaskGetCurrentTaskHandle+0x1c>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fd60:	687b      	ldr	r3, [r7, #4]
	}
 800fd62:	4618      	mov	r0, r3
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr
 800fd6e:	bf00      	nop
 800fd70:	24001350 	.word	0x24001350

0800fd74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800fda8 <xTaskGetSchedulerState+0x34>)
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fd82:	2301      	movs	r3, #1
 800fd84:	607b      	str	r3, [r7, #4]
 800fd86:	e008      	b.n	800fd9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd88:	4b08      	ldr	r3, [pc, #32]	@ (800fdac <xTaskGetSchedulerState+0x38>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d102      	bne.n	800fd96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fd90:	2302      	movs	r3, #2
 800fd92:	607b      	str	r3, [r7, #4]
 800fd94:	e001      	b.n	800fd9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fd96:	2300      	movs	r3, #0
 800fd98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fd9a:	687b      	ldr	r3, [r7, #4]
	}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr
 800fda8:	24001830 	.word	0x24001830
 800fdac:	2400184c 	.word	0x2400184c

0800fdb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d051      	beq.n	800fe6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdca:	4b2a      	ldr	r3, [pc, #168]	@ (800fe74 <xTaskPriorityInherit+0xc4>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d241      	bcs.n	800fe58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	699b      	ldr	r3, [r3, #24]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	db06      	blt.n	800fdea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fddc:	4b25      	ldr	r3, [pc, #148]	@ (800fe74 <xTaskPriorityInherit+0xc4>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fde2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	6959      	ldr	r1, [r3, #20]
 800fdee:	68bb      	ldr	r3, [r7, #8]
 800fdf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fdf2:	4613      	mov	r3, r2
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	4413      	add	r3, r2
 800fdf8:	009b      	lsls	r3, r3, #2
 800fdfa:	4a1f      	ldr	r2, [pc, #124]	@ (800fe78 <xTaskPriorityInherit+0xc8>)
 800fdfc:	4413      	add	r3, r2
 800fdfe:	4299      	cmp	r1, r3
 800fe00:	d122      	bne.n	800fe48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	3304      	adds	r3, #4
 800fe06:	4618      	mov	r0, r3
 800fe08:	f7fe f996 	bl	800e138 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe0c:	4b19      	ldr	r3, [pc, #100]	@ (800fe74 <xTaskPriorityInherit+0xc4>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe1a:	4b18      	ldr	r3, [pc, #96]	@ (800fe7c <xTaskPriorityInherit+0xcc>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	429a      	cmp	r2, r3
 800fe20:	d903      	bls.n	800fe2a <xTaskPriorityInherit+0x7a>
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe26:	4a15      	ldr	r2, [pc, #84]	@ (800fe7c <xTaskPriorityInherit+0xcc>)
 800fe28:	6013      	str	r3, [r2, #0]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	4a10      	ldr	r2, [pc, #64]	@ (800fe78 <xTaskPriorityInherit+0xc8>)
 800fe38:	441a      	add	r2, r3
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	3304      	adds	r3, #4
 800fe3e:	4619      	mov	r1, r3
 800fe40:	4610      	mov	r0, r2
 800fe42:	f7fe f91c 	bl	800e07e <vListInsertEnd>
 800fe46:	e004      	b.n	800fe52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe48:	4b0a      	ldr	r3, [pc, #40]	@ (800fe74 <xTaskPriorityInherit+0xc4>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fe52:	2301      	movs	r3, #1
 800fe54:	60fb      	str	r3, [r7, #12]
 800fe56:	e008      	b.n	800fe6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe5c:	4b05      	ldr	r3, [pc, #20]	@ (800fe74 <xTaskPriorityInherit+0xc4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d201      	bcs.n	800fe6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fe66:	2301      	movs	r3, #1
 800fe68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
	}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3710      	adds	r7, #16
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	24001350 	.word	0x24001350
 800fe78:	24001354 	.word	0x24001354
 800fe7c:	2400182c 	.word	0x2400182c

0800fe80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b086      	sub	sp, #24
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d058      	beq.n	800ff48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fe96:	4b2f      	ldr	r3, [pc, #188]	@ (800ff54 <xTaskPriorityDisinherit+0xd4>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d00b      	beq.n	800feb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea4:	f383 8811 	msr	BASEPRI, r3
 800fea8:	f3bf 8f6f 	isb	sy
 800feac:	f3bf 8f4f 	dsb	sy
 800feb0:	60fb      	str	r3, [r7, #12]
}
 800feb2:	bf00      	nop
 800feb4:	bf00      	nop
 800feb6:	e7fd      	b.n	800feb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800feb8:	693b      	ldr	r3, [r7, #16]
 800feba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800febc:	2b00      	cmp	r3, #0
 800febe:	d10b      	bne.n	800fed8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fec4:	f383 8811 	msr	BASEPRI, r3
 800fec8:	f3bf 8f6f 	isb	sy
 800fecc:	f3bf 8f4f 	dsb	sy
 800fed0:	60bb      	str	r3, [r7, #8]
}
 800fed2:	bf00      	nop
 800fed4:	bf00      	nop
 800fed6:	e7fd      	b.n	800fed4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800fed8:	693b      	ldr	r3, [r7, #16]
 800feda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fedc:	1e5a      	subs	r2, r3, #1
 800fede:	693b      	ldr	r3, [r7, #16]
 800fee0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800feea:	429a      	cmp	r2, r3
 800feec:	d02c      	beq.n	800ff48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800feee:	693b      	ldr	r3, [r7, #16]
 800fef0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d128      	bne.n	800ff48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fef6:	693b      	ldr	r3, [r7, #16]
 800fef8:	3304      	adds	r3, #4
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fe f91c 	bl	800e138 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff08:	693b      	ldr	r3, [r7, #16]
 800ff0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff18:	4b0f      	ldr	r3, [pc, #60]	@ (800ff58 <xTaskPriorityDisinherit+0xd8>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d903      	bls.n	800ff28 <xTaskPriorityDisinherit+0xa8>
 800ff20:	693b      	ldr	r3, [r7, #16]
 800ff22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff24:	4a0c      	ldr	r2, [pc, #48]	@ (800ff58 <xTaskPriorityDisinherit+0xd8>)
 800ff26:	6013      	str	r3, [r2, #0]
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff2c:	4613      	mov	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	4413      	add	r3, r2
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	4a09      	ldr	r2, [pc, #36]	@ (800ff5c <xTaskPriorityDisinherit+0xdc>)
 800ff36:	441a      	add	r2, r3
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	3304      	adds	r3, #4
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	4610      	mov	r0, r2
 800ff40:	f7fe f89d 	bl	800e07e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff44:	2301      	movs	r3, #1
 800ff46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff48:	697b      	ldr	r3, [r7, #20]
	}
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	3718      	adds	r7, #24
 800ff4e:	46bd      	mov	sp, r7
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	bf00      	nop
 800ff54:	24001350 	.word	0x24001350
 800ff58:	2400182c 	.word	0x2400182c
 800ff5c:	24001354 	.word	0x24001354

0800ff60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b088      	sub	sp, #32
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
 800ff68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d06c      	beq.n	8010052 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ff78:	69bb      	ldr	r3, [r7, #24]
 800ff7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d10b      	bne.n	800ff98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ff80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff84:	f383 8811 	msr	BASEPRI, r3
 800ff88:	f3bf 8f6f 	isb	sy
 800ff8c:	f3bf 8f4f 	dsb	sy
 800ff90:	60fb      	str	r3, [r7, #12]
}
 800ff92:	bf00      	nop
 800ff94:	bf00      	nop
 800ff96:	e7fd      	b.n	800ff94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ff98:	69bb      	ldr	r3, [r7, #24]
 800ff9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff9c:	683a      	ldr	r2, [r7, #0]
 800ff9e:	429a      	cmp	r2, r3
 800ffa0:	d902      	bls.n	800ffa8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ffa2:	683b      	ldr	r3, [r7, #0]
 800ffa4:	61fb      	str	r3, [r7, #28]
 800ffa6:	e002      	b.n	800ffae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ffa8:	69bb      	ldr	r3, [r7, #24]
 800ffaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffb2:	69fa      	ldr	r2, [r7, #28]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d04c      	beq.n	8010052 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ffb8:	69bb      	ldr	r3, [r7, #24]
 800ffba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d147      	bne.n	8010052 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ffc2:	4b26      	ldr	r3, [pc, #152]	@ (801005c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	69ba      	ldr	r2, [r7, #24]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d10b      	bne.n	800ffe4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ffcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffd0:	f383 8811 	msr	BASEPRI, r3
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	f3bf 8f4f 	dsb	sy
 800ffdc:	60bb      	str	r3, [r7, #8]
}
 800ffde:	bf00      	nop
 800ffe0:	bf00      	nop
 800ffe2:	e7fd      	b.n	800ffe0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffe8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ffea:	69bb      	ldr	r3, [r7, #24]
 800ffec:	69fa      	ldr	r2, [r7, #28]
 800ffee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	db04      	blt.n	8010002 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fffe:	69bb      	ldr	r3, [r7, #24]
 8010000:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	6959      	ldr	r1, [r3, #20]
 8010006:	693a      	ldr	r2, [r7, #16]
 8010008:	4613      	mov	r3, r2
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	009b      	lsls	r3, r3, #2
 8010010:	4a13      	ldr	r2, [pc, #76]	@ (8010060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010012:	4413      	add	r3, r2
 8010014:	4299      	cmp	r1, r3
 8010016:	d11c      	bne.n	8010052 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010018:	69bb      	ldr	r3, [r7, #24]
 801001a:	3304      	adds	r3, #4
 801001c:	4618      	mov	r0, r3
 801001e:	f7fe f88b 	bl	800e138 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010026:	4b0f      	ldr	r3, [pc, #60]	@ (8010064 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	429a      	cmp	r2, r3
 801002c:	d903      	bls.n	8010036 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 801002e:	69bb      	ldr	r3, [r7, #24]
 8010030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010032:	4a0c      	ldr	r2, [pc, #48]	@ (8010064 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010034:	6013      	str	r3, [r2, #0]
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801003a:	4613      	mov	r3, r2
 801003c:	009b      	lsls	r3, r3, #2
 801003e:	4413      	add	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	4a07      	ldr	r2, [pc, #28]	@ (8010060 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010044:	441a      	add	r2, r3
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	3304      	adds	r3, #4
 801004a:	4619      	mov	r1, r3
 801004c:	4610      	mov	r0, r2
 801004e:	f7fe f816 	bl	800e07e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010052:	bf00      	nop
 8010054:	3720      	adds	r7, #32
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	24001350 	.word	0x24001350
 8010060:	24001354 	.word	0x24001354
 8010064:	2400182c 	.word	0x2400182c

08010068 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010068:	b480      	push	{r7}
 801006a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801006c:	4b07      	ldr	r3, [pc, #28]	@ (801008c <pvTaskIncrementMutexHeldCount+0x24>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d004      	beq.n	801007e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010074:	4b05      	ldr	r3, [pc, #20]	@ (801008c <pvTaskIncrementMutexHeldCount+0x24>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801007a:	3201      	adds	r2, #1
 801007c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801007e:	4b03      	ldr	r3, [pc, #12]	@ (801008c <pvTaskIncrementMutexHeldCount+0x24>)
 8010080:	681b      	ldr	r3, [r3, #0]
	}
 8010082:	4618      	mov	r0, r3
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr
 801008c:	24001350 	.word	0x24001350

08010090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801009a:	4b21      	ldr	r3, [pc, #132]	@ (8010120 <prvAddCurrentTaskToDelayedList+0x90>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100a0:	4b20      	ldr	r3, [pc, #128]	@ (8010124 <prvAddCurrentTaskToDelayedList+0x94>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3304      	adds	r3, #4
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe f846 	bl	800e138 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100b2:	d10a      	bne.n	80100ca <prvAddCurrentTaskToDelayedList+0x3a>
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d007      	beq.n	80100ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100ba:	4b1a      	ldr	r3, [pc, #104]	@ (8010124 <prvAddCurrentTaskToDelayedList+0x94>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	3304      	adds	r3, #4
 80100c0:	4619      	mov	r1, r3
 80100c2:	4819      	ldr	r0, [pc, #100]	@ (8010128 <prvAddCurrentTaskToDelayedList+0x98>)
 80100c4:	f7fd ffdb 	bl	800e07e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80100c8:	e026      	b.n	8010118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	4413      	add	r3, r2
 80100d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80100d2:	4b14      	ldr	r3, [pc, #80]	@ (8010124 <prvAddCurrentTaskToDelayedList+0x94>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	68ba      	ldr	r2, [r7, #8]
 80100d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80100da:	68ba      	ldr	r2, [r7, #8]
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d209      	bcs.n	80100f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100e2:	4b12      	ldr	r3, [pc, #72]	@ (801012c <prvAddCurrentTaskToDelayedList+0x9c>)
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	4b0f      	ldr	r3, [pc, #60]	@ (8010124 <prvAddCurrentTaskToDelayedList+0x94>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	3304      	adds	r3, #4
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fd ffe9 	bl	800e0c6 <vListInsert>
}
 80100f4:	e010      	b.n	8010118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80100f8:	681a      	ldr	r2, [r3, #0]
 80100fa:	4b0a      	ldr	r3, [pc, #40]	@ (8010124 <prvAddCurrentTaskToDelayedList+0x94>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	3304      	adds	r3, #4
 8010100:	4619      	mov	r1, r3
 8010102:	4610      	mov	r0, r2
 8010104:	f7fd ffdf 	bl	800e0c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010108:	4b0a      	ldr	r3, [pc, #40]	@ (8010134 <prvAddCurrentTaskToDelayedList+0xa4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	429a      	cmp	r2, r3
 8010110:	d202      	bcs.n	8010118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010112:	4a08      	ldr	r2, [pc, #32]	@ (8010134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	6013      	str	r3, [r2, #0]
}
 8010118:	bf00      	nop
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	24001828 	.word	0x24001828
 8010124:	24001350 	.word	0x24001350
 8010128:	24001810 	.word	0x24001810
 801012c:	240017e0 	.word	0x240017e0
 8010130:	240017dc 	.word	0x240017dc
 8010134:	24001844 	.word	0x24001844

08010138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b08a      	sub	sp, #40	@ 0x28
 801013c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801013e:	2300      	movs	r3, #0
 8010140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010142:	f000 fb13 	bl	801076c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010146:	4b1d      	ldr	r3, [pc, #116]	@ (80101bc <xTimerCreateTimerTask+0x84>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d021      	beq.n	8010192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801014e:	2300      	movs	r3, #0
 8010150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010152:	2300      	movs	r3, #0
 8010154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010156:	1d3a      	adds	r2, r7, #4
 8010158:	f107 0108 	add.w	r1, r7, #8
 801015c:	f107 030c 	add.w	r3, r7, #12
 8010160:	4618      	mov	r0, r3
 8010162:	f7fd ff45 	bl	800dff0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010166:	6879      	ldr	r1, [r7, #4]
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	9202      	str	r2, [sp, #8]
 801016e:	9301      	str	r3, [sp, #4]
 8010170:	2302      	movs	r3, #2
 8010172:	9300      	str	r3, [sp, #0]
 8010174:	2300      	movs	r3, #0
 8010176:	460a      	mov	r2, r1
 8010178:	4911      	ldr	r1, [pc, #68]	@ (80101c0 <xTimerCreateTimerTask+0x88>)
 801017a:	4812      	ldr	r0, [pc, #72]	@ (80101c4 <xTimerCreateTimerTask+0x8c>)
 801017c:	f7fe ff1c 	bl	800efb8 <xTaskCreateStatic>
 8010180:	4603      	mov	r3, r0
 8010182:	4a11      	ldr	r2, [pc, #68]	@ (80101c8 <xTimerCreateTimerTask+0x90>)
 8010184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010186:	4b10      	ldr	r3, [pc, #64]	@ (80101c8 <xTimerCreateTimerTask+0x90>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d001      	beq.n	8010192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801018e:	2301      	movs	r3, #1
 8010190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10b      	bne.n	80101b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8010198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801019c:	f383 8811 	msr	BASEPRI, r3
 80101a0:	f3bf 8f6f 	isb	sy
 80101a4:	f3bf 8f4f 	dsb	sy
 80101a8:	613b      	str	r3, [r7, #16]
}
 80101aa:	bf00      	nop
 80101ac:	bf00      	nop
 80101ae:	e7fd      	b.n	80101ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80101b0:	697b      	ldr	r3, [r7, #20]
}
 80101b2:	4618      	mov	r0, r3
 80101b4:	3718      	adds	r7, #24
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}
 80101ba:	bf00      	nop
 80101bc:	24001880 	.word	0x24001880
 80101c0:	08013d3c 	.word	0x08013d3c
 80101c4:	08010305 	.word	0x08010305
 80101c8:	24001884 	.word	0x24001884

080101cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b08a      	sub	sp, #40	@ 0x28
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	60f8      	str	r0, [r7, #12]
 80101d4:	60b9      	str	r1, [r7, #8]
 80101d6:	607a      	str	r2, [r7, #4]
 80101d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80101da:	2300      	movs	r3, #0
 80101dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10b      	bne.n	80101fc <xTimerGenericCommand+0x30>
	__asm volatile
 80101e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101e8:	f383 8811 	msr	BASEPRI, r3
 80101ec:	f3bf 8f6f 	isb	sy
 80101f0:	f3bf 8f4f 	dsb	sy
 80101f4:	623b      	str	r3, [r7, #32]
}
 80101f6:	bf00      	nop
 80101f8:	bf00      	nop
 80101fa:	e7fd      	b.n	80101f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80101fc:	4b19      	ldr	r3, [pc, #100]	@ (8010264 <xTimerGenericCommand+0x98>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d02a      	beq.n	801025a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010204:	68bb      	ldr	r3, [r7, #8]
 8010206:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	2b05      	cmp	r3, #5
 8010214:	dc18      	bgt.n	8010248 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010216:	f7ff fdad 	bl	800fd74 <xTaskGetSchedulerState>
 801021a:	4603      	mov	r3, r0
 801021c:	2b02      	cmp	r3, #2
 801021e:	d109      	bne.n	8010234 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010220:	4b10      	ldr	r3, [pc, #64]	@ (8010264 <xTimerGenericCommand+0x98>)
 8010222:	6818      	ldr	r0, [r3, #0]
 8010224:	f107 0110 	add.w	r1, r7, #16
 8010228:	2300      	movs	r3, #0
 801022a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801022c:	f7fe f9ac 	bl	800e588 <xQueueGenericSend>
 8010230:	6278      	str	r0, [r7, #36]	@ 0x24
 8010232:	e012      	b.n	801025a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010234:	4b0b      	ldr	r3, [pc, #44]	@ (8010264 <xTimerGenericCommand+0x98>)
 8010236:	6818      	ldr	r0, [r3, #0]
 8010238:	f107 0110 	add.w	r1, r7, #16
 801023c:	2300      	movs	r3, #0
 801023e:	2200      	movs	r2, #0
 8010240:	f7fe f9a2 	bl	800e588 <xQueueGenericSend>
 8010244:	6278      	str	r0, [r7, #36]	@ 0x24
 8010246:	e008      	b.n	801025a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010248:	4b06      	ldr	r3, [pc, #24]	@ (8010264 <xTimerGenericCommand+0x98>)
 801024a:	6818      	ldr	r0, [r3, #0]
 801024c:	f107 0110 	add.w	r1, r7, #16
 8010250:	2300      	movs	r3, #0
 8010252:	683a      	ldr	r2, [r7, #0]
 8010254:	f7fe fa9a 	bl	800e78c <xQueueGenericSendFromISR>
 8010258:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801025a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801025c:	4618      	mov	r0, r3
 801025e:	3728      	adds	r7, #40	@ 0x28
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	24001880 	.word	0x24001880

08010268 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b088      	sub	sp, #32
 801026c:	af02      	add	r7, sp, #8
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010272:	4b23      	ldr	r3, [pc, #140]	@ (8010300 <prvProcessExpiredTimer+0x98>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801027c:	697b      	ldr	r3, [r7, #20]
 801027e:	3304      	adds	r3, #4
 8010280:	4618      	mov	r0, r3
 8010282:	f7fd ff59 	bl	800e138 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010286:	697b      	ldr	r3, [r7, #20]
 8010288:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801028c:	f003 0304 	and.w	r3, r3, #4
 8010290:	2b00      	cmp	r3, #0
 8010292:	d023      	beq.n	80102dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	699a      	ldr	r2, [r3, #24]
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	18d1      	adds	r1, r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	683a      	ldr	r2, [r7, #0]
 80102a0:	6978      	ldr	r0, [r7, #20]
 80102a2:	f000 f8d5 	bl	8010450 <prvInsertTimerInActiveList>
 80102a6:	4603      	mov	r3, r0
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d020      	beq.n	80102ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102ac:	2300      	movs	r3, #0
 80102ae:	9300      	str	r3, [sp, #0]
 80102b0:	2300      	movs	r3, #0
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	2100      	movs	r1, #0
 80102b6:	6978      	ldr	r0, [r7, #20]
 80102b8:	f7ff ff88 	bl	80101cc <xTimerGenericCommand>
 80102bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d114      	bne.n	80102ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80102c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	60fb      	str	r3, [r7, #12]
}
 80102d6:	bf00      	nop
 80102d8:	bf00      	nop
 80102da:	e7fd      	b.n	80102d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80102dc:	697b      	ldr	r3, [r7, #20]
 80102de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102e2:	f023 0301 	bic.w	r3, r3, #1
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102ee:	697b      	ldr	r3, [r7, #20]
 80102f0:	6a1b      	ldr	r3, [r3, #32]
 80102f2:	6978      	ldr	r0, [r7, #20]
 80102f4:	4798      	blx	r3
}
 80102f6:	bf00      	nop
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	24001878 	.word	0x24001878

08010304 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b084      	sub	sp, #16
 8010308:	af00      	add	r7, sp, #0
 801030a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801030c:	f107 0308 	add.w	r3, r7, #8
 8010310:	4618      	mov	r0, r3
 8010312:	f000 f859 	bl	80103c8 <prvGetNextExpireTime>
 8010316:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	4619      	mov	r1, r3
 801031c:	68f8      	ldr	r0, [r7, #12]
 801031e:	f000 f805 	bl	801032c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010322:	f000 f8d7 	bl	80104d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010326:	bf00      	nop
 8010328:	e7f0      	b.n	801030c <prvTimerTask+0x8>
	...

0801032c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b084      	sub	sp, #16
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010336:	f7ff f919 	bl	800f56c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801033a:	f107 0308 	add.w	r3, r7, #8
 801033e:	4618      	mov	r0, r3
 8010340:	f000 f866 	bl	8010410 <prvSampleTimeNow>
 8010344:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d130      	bne.n	80103ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801034c:	683b      	ldr	r3, [r7, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10a      	bne.n	8010368 <prvProcessTimerOrBlockTask+0x3c>
 8010352:	687a      	ldr	r2, [r7, #4]
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d806      	bhi.n	8010368 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801035a:	f7ff f915 	bl	800f588 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801035e:	68f9      	ldr	r1, [r7, #12]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f7ff ff81 	bl	8010268 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010366:	e024      	b.n	80103b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d008      	beq.n	8010380 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801036e:	4b13      	ldr	r3, [pc, #76]	@ (80103bc <prvProcessTimerOrBlockTask+0x90>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <prvProcessTimerOrBlockTask+0x50>
 8010378:	2301      	movs	r3, #1
 801037a:	e000      	b.n	801037e <prvProcessTimerOrBlockTask+0x52>
 801037c:	2300      	movs	r3, #0
 801037e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010380:	4b0f      	ldr	r3, [pc, #60]	@ (80103c0 <prvProcessTimerOrBlockTask+0x94>)
 8010382:	6818      	ldr	r0, [r3, #0]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	1ad3      	subs	r3, r2, r3
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	4619      	mov	r1, r3
 801038e:	f7fe fddf 	bl	800ef50 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010392:	f7ff f8f9 	bl	800f588 <xTaskResumeAll>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d10a      	bne.n	80103b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801039c:	4b09      	ldr	r3, [pc, #36]	@ (80103c4 <prvProcessTimerOrBlockTask+0x98>)
 801039e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103a2:	601a      	str	r2, [r3, #0]
 80103a4:	f3bf 8f4f 	dsb	sy
 80103a8:	f3bf 8f6f 	isb	sy
}
 80103ac:	e001      	b.n	80103b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80103ae:	f7ff f8eb 	bl	800f588 <xTaskResumeAll>
}
 80103b2:	bf00      	nop
 80103b4:	3710      	adds	r7, #16
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}
 80103ba:	bf00      	nop
 80103bc:	2400187c 	.word	0x2400187c
 80103c0:	24001880 	.word	0x24001880
 80103c4:	e000ed04 	.word	0xe000ed04

080103c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80103d0:	4b0e      	ldr	r3, [pc, #56]	@ (801040c <prvGetNextExpireTime+0x44>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d101      	bne.n	80103de <prvGetNextExpireTime+0x16>
 80103da:	2201      	movs	r2, #1
 80103dc:	e000      	b.n	80103e0 <prvGetNextExpireTime+0x18>
 80103de:	2200      	movs	r2, #0
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d105      	bne.n	80103f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103ec:	4b07      	ldr	r3, [pc, #28]	@ (801040c <prvGetNextExpireTime+0x44>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	60fb      	str	r3, [r7, #12]
 80103f6:	e001      	b.n	80103fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80103fc:	68fb      	ldr	r3, [r7, #12]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3714      	adds	r7, #20
 8010402:	46bd      	mov	sp, r7
 8010404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010408:	4770      	bx	lr
 801040a:	bf00      	nop
 801040c:	24001878 	.word	0x24001878

08010410 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010410:	b580      	push	{r7, lr}
 8010412:	b084      	sub	sp, #16
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010418:	f7ff f954 	bl	800f6c4 <xTaskGetTickCount>
 801041c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801041e:	4b0b      	ldr	r3, [pc, #44]	@ (801044c <prvSampleTimeNow+0x3c>)
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	429a      	cmp	r2, r3
 8010426:	d205      	bcs.n	8010434 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010428:	f000 f93a 	bl	80106a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2201      	movs	r2, #1
 8010430:	601a      	str	r2, [r3, #0]
 8010432:	e002      	b.n	801043a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	2200      	movs	r2, #0
 8010438:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801043a:	4a04      	ldr	r2, [pc, #16]	@ (801044c <prvSampleTimeNow+0x3c>)
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010440:	68fb      	ldr	r3, [r7, #12]
}
 8010442:	4618      	mov	r0, r3
 8010444:	3710      	adds	r7, #16
 8010446:	46bd      	mov	sp, r7
 8010448:	bd80      	pop	{r7, pc}
 801044a:	bf00      	nop
 801044c:	24001888 	.word	0x24001888

08010450 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b086      	sub	sp, #24
 8010454:	af00      	add	r7, sp, #0
 8010456:	60f8      	str	r0, [r7, #12]
 8010458:	60b9      	str	r1, [r7, #8]
 801045a:	607a      	str	r2, [r7, #4]
 801045c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801045e:	2300      	movs	r3, #0
 8010460:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	68fa      	ldr	r2, [r7, #12]
 801046c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801046e:	68ba      	ldr	r2, [r7, #8]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	429a      	cmp	r2, r3
 8010474:	d812      	bhi.n	801049c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	683b      	ldr	r3, [r7, #0]
 801047a:	1ad2      	subs	r2, r2, r3
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	699b      	ldr	r3, [r3, #24]
 8010480:	429a      	cmp	r2, r3
 8010482:	d302      	bcc.n	801048a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010484:	2301      	movs	r3, #1
 8010486:	617b      	str	r3, [r7, #20]
 8010488:	e01b      	b.n	80104c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801048a:	4b10      	ldr	r3, [pc, #64]	@ (80104cc <prvInsertTimerInActiveList+0x7c>)
 801048c:	681a      	ldr	r2, [r3, #0]
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	3304      	adds	r3, #4
 8010492:	4619      	mov	r1, r3
 8010494:	4610      	mov	r0, r2
 8010496:	f7fd fe16 	bl	800e0c6 <vListInsert>
 801049a:	e012      	b.n	80104c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d206      	bcs.n	80104b2 <prvInsertTimerInActiveList+0x62>
 80104a4:	68ba      	ldr	r2, [r7, #8]
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d302      	bcc.n	80104b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80104ac:	2301      	movs	r3, #1
 80104ae:	617b      	str	r3, [r7, #20]
 80104b0:	e007      	b.n	80104c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104b2:	4b07      	ldr	r3, [pc, #28]	@ (80104d0 <prvInsertTimerInActiveList+0x80>)
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	3304      	adds	r3, #4
 80104ba:	4619      	mov	r1, r3
 80104bc:	4610      	mov	r0, r2
 80104be:	f7fd fe02 	bl	800e0c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104c2:	697b      	ldr	r3, [r7, #20]
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	3718      	adds	r7, #24
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bd80      	pop	{r7, pc}
 80104cc:	2400187c 	.word	0x2400187c
 80104d0:	24001878 	.word	0x24001878

080104d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b08e      	sub	sp, #56	@ 0x38
 80104d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80104da:	e0ce      	b.n	801067a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	da19      	bge.n	8010516 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80104e2:	1d3b      	adds	r3, r7, #4
 80104e4:	3304      	adds	r3, #4
 80104e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80104e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d10b      	bne.n	8010506 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	61fb      	str	r3, [r7, #28]
}
 8010500:	bf00      	nop
 8010502:	bf00      	nop
 8010504:	e7fd      	b.n	8010502 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801050c:	6850      	ldr	r0, [r2, #4]
 801050e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010510:	6892      	ldr	r2, [r2, #8]
 8010512:	4611      	mov	r1, r2
 8010514:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2b00      	cmp	r3, #0
 801051a:	f2c0 80ae 	blt.w	801067a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010524:	695b      	ldr	r3, [r3, #20]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d004      	beq.n	8010534 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801052c:	3304      	adds	r3, #4
 801052e:	4618      	mov	r0, r3
 8010530:	f7fd fe02 	bl	800e138 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010534:	463b      	mov	r3, r7
 8010536:	4618      	mov	r0, r3
 8010538:	f7ff ff6a 	bl	8010410 <prvSampleTimeNow>
 801053c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2b09      	cmp	r3, #9
 8010542:	f200 8097 	bhi.w	8010674 <prvProcessReceivedCommands+0x1a0>
 8010546:	a201      	add	r2, pc, #4	@ (adr r2, 801054c <prvProcessReceivedCommands+0x78>)
 8010548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801054c:	08010575 	.word	0x08010575
 8010550:	08010575 	.word	0x08010575
 8010554:	08010575 	.word	0x08010575
 8010558:	080105eb 	.word	0x080105eb
 801055c:	080105ff 	.word	0x080105ff
 8010560:	0801064b 	.word	0x0801064b
 8010564:	08010575 	.word	0x08010575
 8010568:	08010575 	.word	0x08010575
 801056c:	080105eb 	.word	0x080105eb
 8010570:	080105ff 	.word	0x080105ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801057a:	f043 0301 	orr.w	r3, r3, #1
 801057e:	b2da      	uxtb	r2, r3
 8010580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801058a:	699b      	ldr	r3, [r3, #24]
 801058c:	18d1      	adds	r1, r2, r3
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010594:	f7ff ff5c 	bl	8010450 <prvInsertTimerInActiveList>
 8010598:	4603      	mov	r3, r0
 801059a:	2b00      	cmp	r3, #0
 801059c:	d06c      	beq.n	8010678 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801059e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a0:	6a1b      	ldr	r3, [r3, #32]
 80105a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105ac:	f003 0304 	and.w	r3, r3, #4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d061      	beq.n	8010678 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105b4:	68ba      	ldr	r2, [r7, #8]
 80105b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105b8:	699b      	ldr	r3, [r3, #24]
 80105ba:	441a      	add	r2, r3
 80105bc:	2300      	movs	r3, #0
 80105be:	9300      	str	r3, [sp, #0]
 80105c0:	2300      	movs	r3, #0
 80105c2:	2100      	movs	r1, #0
 80105c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105c6:	f7ff fe01 	bl	80101cc <xTimerGenericCommand>
 80105ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d152      	bne.n	8010678 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80105d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105d6:	f383 8811 	msr	BASEPRI, r3
 80105da:	f3bf 8f6f 	isb	sy
 80105de:	f3bf 8f4f 	dsb	sy
 80105e2:	61bb      	str	r3, [r7, #24]
}
 80105e4:	bf00      	nop
 80105e6:	bf00      	nop
 80105e8:	e7fd      	b.n	80105e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105f0:	f023 0301 	bic.w	r3, r3, #1
 80105f4:	b2da      	uxtb	r2, r3
 80105f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80105fc:	e03d      	b.n	801067a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010604:	f043 0301 	orr.w	r3, r3, #1
 8010608:	b2da      	uxtb	r2, r3
 801060a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801060c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010610:	68ba      	ldr	r2, [r7, #8]
 8010612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010614:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010618:	699b      	ldr	r3, [r3, #24]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10b      	bne.n	8010636 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801061e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010622:	f383 8811 	msr	BASEPRI, r3
 8010626:	f3bf 8f6f 	isb	sy
 801062a:	f3bf 8f4f 	dsb	sy
 801062e:	617b      	str	r3, [r7, #20]
}
 8010630:	bf00      	nop
 8010632:	bf00      	nop
 8010634:	e7fd      	b.n	8010632 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010638:	699a      	ldr	r2, [r3, #24]
 801063a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801063c:	18d1      	adds	r1, r2, r3
 801063e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010642:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010644:	f7ff ff04 	bl	8010450 <prvInsertTimerInActiveList>
					break;
 8010648:	e017      	b.n	801067a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801064a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801064c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010650:	f003 0302 	and.w	r3, r3, #2
 8010654:	2b00      	cmp	r3, #0
 8010656:	d103      	bne.n	8010660 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010658:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801065a:	f000 fbe5 	bl	8010e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801065e:	e00c      	b.n	801067a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010662:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010666:	f023 0301 	bic.w	r3, r3, #1
 801066a:	b2da      	uxtb	r2, r3
 801066c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801066e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010672:	e002      	b.n	801067a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8010674:	bf00      	nop
 8010676:	e000      	b.n	801067a <prvProcessReceivedCommands+0x1a6>
					break;
 8010678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801067a:	4b08      	ldr	r3, [pc, #32]	@ (801069c <prvProcessReceivedCommands+0x1c8>)
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	1d39      	adds	r1, r7, #4
 8010680:	2200      	movs	r2, #0
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe f920 	bl	800e8c8 <xQueueReceive>
 8010688:	4603      	mov	r3, r0
 801068a:	2b00      	cmp	r3, #0
 801068c:	f47f af26 	bne.w	80104dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010690:	bf00      	nop
 8010692:	bf00      	nop
 8010694:	3730      	adds	r7, #48	@ 0x30
 8010696:	46bd      	mov	sp, r7
 8010698:	bd80      	pop	{r7, pc}
 801069a:	bf00      	nop
 801069c:	24001880 	.word	0x24001880

080106a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106a6:	e049      	b.n	801073c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106a8:	4b2e      	ldr	r3, [pc, #184]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106b2:	4b2c      	ldr	r3, [pc, #176]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	68db      	ldr	r3, [r3, #12]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	3304      	adds	r3, #4
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7fd fd39 	bl	800e138 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	68f8      	ldr	r0, [r7, #12]
 80106cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80106d4:	f003 0304 	and.w	r3, r3, #4
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d02f      	beq.n	801073c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	699b      	ldr	r3, [r3, #24]
 80106e0:	693a      	ldr	r2, [r7, #16]
 80106e2:	4413      	add	r3, r2
 80106e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80106e6:	68ba      	ldr	r2, [r7, #8]
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d90e      	bls.n	801070c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	68ba      	ldr	r2, [r7, #8]
 80106f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	68fa      	ldr	r2, [r7, #12]
 80106f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80106fa:	4b1a      	ldr	r3, [pc, #104]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 80106fc:	681a      	ldr	r2, [r3, #0]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3304      	adds	r3, #4
 8010702:	4619      	mov	r1, r3
 8010704:	4610      	mov	r0, r2
 8010706:	f7fd fcde 	bl	800e0c6 <vListInsert>
 801070a:	e017      	b.n	801073c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801070c:	2300      	movs	r3, #0
 801070e:	9300      	str	r3, [sp, #0]
 8010710:	2300      	movs	r3, #0
 8010712:	693a      	ldr	r2, [r7, #16]
 8010714:	2100      	movs	r1, #0
 8010716:	68f8      	ldr	r0, [r7, #12]
 8010718:	f7ff fd58 	bl	80101cc <xTimerGenericCommand>
 801071c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d10b      	bne.n	801073c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8010724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010728:	f383 8811 	msr	BASEPRI, r3
 801072c:	f3bf 8f6f 	isb	sy
 8010730:	f3bf 8f4f 	dsb	sy
 8010734:	603b      	str	r3, [r7, #0]
}
 8010736:	bf00      	nop
 8010738:	bf00      	nop
 801073a:	e7fd      	b.n	8010738 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801073c:	4b09      	ldr	r3, [pc, #36]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1b0      	bne.n	80106a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010746:	4b07      	ldr	r3, [pc, #28]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801074c:	4b06      	ldr	r3, [pc, #24]	@ (8010768 <prvSwitchTimerLists+0xc8>)
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	4a04      	ldr	r2, [pc, #16]	@ (8010764 <prvSwitchTimerLists+0xc4>)
 8010752:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010754:	4a04      	ldr	r2, [pc, #16]	@ (8010768 <prvSwitchTimerLists+0xc8>)
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	6013      	str	r3, [r2, #0]
}
 801075a:	bf00      	nop
 801075c:	3718      	adds	r7, #24
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	24001878 	.word	0x24001878
 8010768:	2400187c 	.word	0x2400187c

0801076c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010772:	f000 f969 	bl	8010a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010776:	4b15      	ldr	r3, [pc, #84]	@ (80107cc <prvCheckForValidListAndQueue+0x60>)
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d120      	bne.n	80107c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801077e:	4814      	ldr	r0, [pc, #80]	@ (80107d0 <prvCheckForValidListAndQueue+0x64>)
 8010780:	f7fd fc50 	bl	800e024 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010784:	4813      	ldr	r0, [pc, #76]	@ (80107d4 <prvCheckForValidListAndQueue+0x68>)
 8010786:	f7fd fc4d 	bl	800e024 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801078a:	4b13      	ldr	r3, [pc, #76]	@ (80107d8 <prvCheckForValidListAndQueue+0x6c>)
 801078c:	4a10      	ldr	r2, [pc, #64]	@ (80107d0 <prvCheckForValidListAndQueue+0x64>)
 801078e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010790:	4b12      	ldr	r3, [pc, #72]	@ (80107dc <prvCheckForValidListAndQueue+0x70>)
 8010792:	4a10      	ldr	r2, [pc, #64]	@ (80107d4 <prvCheckForValidListAndQueue+0x68>)
 8010794:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010796:	2300      	movs	r3, #0
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	4b11      	ldr	r3, [pc, #68]	@ (80107e0 <prvCheckForValidListAndQueue+0x74>)
 801079c:	4a11      	ldr	r2, [pc, #68]	@ (80107e4 <prvCheckForValidListAndQueue+0x78>)
 801079e:	2110      	movs	r1, #16
 80107a0:	200a      	movs	r0, #10
 80107a2:	f7fd fd5d 	bl	800e260 <xQueueGenericCreateStatic>
 80107a6:	4603      	mov	r3, r0
 80107a8:	4a08      	ldr	r2, [pc, #32]	@ (80107cc <prvCheckForValidListAndQueue+0x60>)
 80107aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107ac:	4b07      	ldr	r3, [pc, #28]	@ (80107cc <prvCheckForValidListAndQueue+0x60>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d005      	beq.n	80107c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107b4:	4b05      	ldr	r3, [pc, #20]	@ (80107cc <prvCheckForValidListAndQueue+0x60>)
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	490b      	ldr	r1, [pc, #44]	@ (80107e8 <prvCheckForValidListAndQueue+0x7c>)
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fe fb9e 	bl	800eefc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107c0:	f000 f974 	bl	8010aac <vPortExitCritical>
}
 80107c4:	bf00      	nop
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	24001880 	.word	0x24001880
 80107d0:	24001850 	.word	0x24001850
 80107d4:	24001864 	.word	0x24001864
 80107d8:	24001878 	.word	0x24001878
 80107dc:	2400187c 	.word	0x2400187c
 80107e0:	2400192c 	.word	0x2400192c
 80107e4:	2400188c 	.word	0x2400188c
 80107e8:	08013d44 	.word	0x08013d44

080107ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80107ec:	b480      	push	{r7}
 80107ee:	b085      	sub	sp, #20
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	60f8      	str	r0, [r7, #12]
 80107f4:	60b9      	str	r1, [r7, #8]
 80107f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	3b04      	subs	r3, #4
 80107fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	3b04      	subs	r3, #4
 801080a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	f023 0201 	bic.w	r2, r3, #1
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	3b04      	subs	r3, #4
 801081a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801081c:	4a0c      	ldr	r2, [pc, #48]	@ (8010850 <pxPortInitialiseStack+0x64>)
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	3b14      	subs	r3, #20
 8010826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010828:	687a      	ldr	r2, [r7, #4]
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3b04      	subs	r3, #4
 8010832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	f06f 0202 	mvn.w	r2, #2
 801083a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	3b20      	subs	r3, #32
 8010840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010842:	68fb      	ldr	r3, [r7, #12]
}
 8010844:	4618      	mov	r0, r3
 8010846:	3714      	adds	r7, #20
 8010848:	46bd      	mov	sp, r7
 801084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084e:	4770      	bx	lr
 8010850:	08010855 	.word	0x08010855

08010854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801085e:	4b13      	ldr	r3, [pc, #76]	@ (80108ac <prvTaskExitError+0x58>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010866:	d00b      	beq.n	8010880 <prvTaskExitError+0x2c>
	__asm volatile
 8010868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801086c:	f383 8811 	msr	BASEPRI, r3
 8010870:	f3bf 8f6f 	isb	sy
 8010874:	f3bf 8f4f 	dsb	sy
 8010878:	60fb      	str	r3, [r7, #12]
}
 801087a:	bf00      	nop
 801087c:	bf00      	nop
 801087e:	e7fd      	b.n	801087c <prvTaskExitError+0x28>
	__asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010884:	f383 8811 	msr	BASEPRI, r3
 8010888:	f3bf 8f6f 	isb	sy
 801088c:	f3bf 8f4f 	dsb	sy
 8010890:	60bb      	str	r3, [r7, #8]
}
 8010892:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010894:	bf00      	nop
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d0fc      	beq.n	8010896 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801089c:	bf00      	nop
 801089e:	bf00      	nop
 80108a0:	3714      	adds	r7, #20
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop
 80108ac:	24000014 	.word	0x24000014

080108b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80108b0:	4b07      	ldr	r3, [pc, #28]	@ (80108d0 <pxCurrentTCBConst2>)
 80108b2:	6819      	ldr	r1, [r3, #0]
 80108b4:	6808      	ldr	r0, [r1, #0]
 80108b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ba:	f380 8809 	msr	PSP, r0
 80108be:	f3bf 8f6f 	isb	sy
 80108c2:	f04f 0000 	mov.w	r0, #0
 80108c6:	f380 8811 	msr	BASEPRI, r0
 80108ca:	4770      	bx	lr
 80108cc:	f3af 8000 	nop.w

080108d0 <pxCurrentTCBConst2>:
 80108d0:	24001350 	.word	0x24001350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop

080108d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80108d8:	4808      	ldr	r0, [pc, #32]	@ (80108fc <prvPortStartFirstTask+0x24>)
 80108da:	6800      	ldr	r0, [r0, #0]
 80108dc:	6800      	ldr	r0, [r0, #0]
 80108de:	f380 8808 	msr	MSP, r0
 80108e2:	f04f 0000 	mov.w	r0, #0
 80108e6:	f380 8814 	msr	CONTROL, r0
 80108ea:	b662      	cpsie	i
 80108ec:	b661      	cpsie	f
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	f3bf 8f6f 	isb	sy
 80108f6:	df00      	svc	0
 80108f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80108fa:	bf00      	nop
 80108fc:	e000ed08 	.word	0xe000ed08

08010900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b086      	sub	sp, #24
 8010904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010906:	4b47      	ldr	r3, [pc, #284]	@ (8010a24 <xPortStartScheduler+0x124>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	4a47      	ldr	r2, [pc, #284]	@ (8010a28 <xPortStartScheduler+0x128>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d10b      	bne.n	8010928 <xPortStartScheduler+0x28>
	__asm volatile
 8010910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010914:	f383 8811 	msr	BASEPRI, r3
 8010918:	f3bf 8f6f 	isb	sy
 801091c:	f3bf 8f4f 	dsb	sy
 8010920:	613b      	str	r3, [r7, #16]
}
 8010922:	bf00      	nop
 8010924:	bf00      	nop
 8010926:	e7fd      	b.n	8010924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010928:	4b3e      	ldr	r3, [pc, #248]	@ (8010a24 <xPortStartScheduler+0x124>)
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	4a3f      	ldr	r2, [pc, #252]	@ (8010a2c <xPortStartScheduler+0x12c>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d10b      	bne.n	801094a <xPortStartScheduler+0x4a>
	__asm volatile
 8010932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010936:	f383 8811 	msr	BASEPRI, r3
 801093a:	f3bf 8f6f 	isb	sy
 801093e:	f3bf 8f4f 	dsb	sy
 8010942:	60fb      	str	r3, [r7, #12]
}
 8010944:	bf00      	nop
 8010946:	bf00      	nop
 8010948:	e7fd      	b.n	8010946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801094a:	4b39      	ldr	r3, [pc, #228]	@ (8010a30 <xPortStartScheduler+0x130>)
 801094c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801094e:	697b      	ldr	r3, [r7, #20]
 8010950:	781b      	ldrb	r3, [r3, #0]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	22ff      	movs	r2, #255	@ 0xff
 801095a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	b2db      	uxtb	r3, r3
 8010962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010964:	78fb      	ldrb	r3, [r7, #3]
 8010966:	b2db      	uxtb	r3, r3
 8010968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801096c:	b2da      	uxtb	r2, r3
 801096e:	4b31      	ldr	r3, [pc, #196]	@ (8010a34 <xPortStartScheduler+0x134>)
 8010970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010972:	4b31      	ldr	r3, [pc, #196]	@ (8010a38 <xPortStartScheduler+0x138>)
 8010974:	2207      	movs	r2, #7
 8010976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010978:	e009      	b.n	801098e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801097a:	4b2f      	ldr	r3, [pc, #188]	@ (8010a38 <xPortStartScheduler+0x138>)
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	3b01      	subs	r3, #1
 8010980:	4a2d      	ldr	r2, [pc, #180]	@ (8010a38 <xPortStartScheduler+0x138>)
 8010982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010984:	78fb      	ldrb	r3, [r7, #3]
 8010986:	b2db      	uxtb	r3, r3
 8010988:	005b      	lsls	r3, r3, #1
 801098a:	b2db      	uxtb	r3, r3
 801098c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801098e:	78fb      	ldrb	r3, [r7, #3]
 8010990:	b2db      	uxtb	r3, r3
 8010992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010996:	2b80      	cmp	r3, #128	@ 0x80
 8010998:	d0ef      	beq.n	801097a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801099a:	4b27      	ldr	r3, [pc, #156]	@ (8010a38 <xPortStartScheduler+0x138>)
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	f1c3 0307 	rsb	r3, r3, #7
 80109a2:	2b04      	cmp	r3, #4
 80109a4:	d00b      	beq.n	80109be <xPortStartScheduler+0xbe>
	__asm volatile
 80109a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109aa:	f383 8811 	msr	BASEPRI, r3
 80109ae:	f3bf 8f6f 	isb	sy
 80109b2:	f3bf 8f4f 	dsb	sy
 80109b6:	60bb      	str	r3, [r7, #8]
}
 80109b8:	bf00      	nop
 80109ba:	bf00      	nop
 80109bc:	e7fd      	b.n	80109ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80109be:	4b1e      	ldr	r3, [pc, #120]	@ (8010a38 <xPortStartScheduler+0x138>)
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	021b      	lsls	r3, r3, #8
 80109c4:	4a1c      	ldr	r2, [pc, #112]	@ (8010a38 <xPortStartScheduler+0x138>)
 80109c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80109c8:	4b1b      	ldr	r3, [pc, #108]	@ (8010a38 <xPortStartScheduler+0x138>)
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80109d0:	4a19      	ldr	r2, [pc, #100]	@ (8010a38 <xPortStartScheduler+0x138>)
 80109d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	b2da      	uxtb	r2, r3
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80109dc:	4b17      	ldr	r3, [pc, #92]	@ (8010a3c <xPortStartScheduler+0x13c>)
 80109de:	681b      	ldr	r3, [r3, #0]
 80109e0:	4a16      	ldr	r2, [pc, #88]	@ (8010a3c <xPortStartScheduler+0x13c>)
 80109e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80109e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80109e8:	4b14      	ldr	r3, [pc, #80]	@ (8010a3c <xPortStartScheduler+0x13c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	4a13      	ldr	r2, [pc, #76]	@ (8010a3c <xPortStartScheduler+0x13c>)
 80109ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80109f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80109f4:	f000 f8da 	bl	8010bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80109f8:	4b11      	ldr	r3, [pc, #68]	@ (8010a40 <xPortStartScheduler+0x140>)
 80109fa:	2200      	movs	r2, #0
 80109fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80109fe:	f000 f8f9 	bl	8010bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a02:	4b10      	ldr	r3, [pc, #64]	@ (8010a44 <xPortStartScheduler+0x144>)
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	4a0f      	ldr	r2, [pc, #60]	@ (8010a44 <xPortStartScheduler+0x144>)
 8010a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a0e:	f7ff ff63 	bl	80108d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a12:	f7fe ff21 	bl	800f858 <vTaskSwitchContext>
	prvTaskExitError();
 8010a16:	f7ff ff1d 	bl	8010854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a1a:	2300      	movs	r3, #0
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3718      	adds	r7, #24
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	e000ed00 	.word	0xe000ed00
 8010a28:	410fc271 	.word	0x410fc271
 8010a2c:	410fc270 	.word	0x410fc270
 8010a30:	e000e400 	.word	0xe000e400
 8010a34:	2400197c 	.word	0x2400197c
 8010a38:	24001980 	.word	0x24001980
 8010a3c:	e000ed20 	.word	0xe000ed20
 8010a40:	24000014 	.word	0x24000014
 8010a44:	e000ef34 	.word	0xe000ef34

08010a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	607b      	str	r3, [r7, #4]
}
 8010a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010a62:	4b10      	ldr	r3, [pc, #64]	@ (8010aa4 <vPortEnterCritical+0x5c>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	3301      	adds	r3, #1
 8010a68:	4a0e      	ldr	r2, [pc, #56]	@ (8010aa4 <vPortEnterCritical+0x5c>)
 8010a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8010aa4 <vPortEnterCritical+0x5c>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d110      	bne.n	8010a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010a74:	4b0c      	ldr	r3, [pc, #48]	@ (8010aa8 <vPortEnterCritical+0x60>)
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d00b      	beq.n	8010a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8010a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a82:	f383 8811 	msr	BASEPRI, r3
 8010a86:	f3bf 8f6f 	isb	sy
 8010a8a:	f3bf 8f4f 	dsb	sy
 8010a8e:	603b      	str	r3, [r7, #0]
}
 8010a90:	bf00      	nop
 8010a92:	bf00      	nop
 8010a94:	e7fd      	b.n	8010a92 <vPortEnterCritical+0x4a>
	}
}
 8010a96:	bf00      	nop
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop
 8010aa4:	24000014 	.word	0x24000014
 8010aa8:	e000ed04 	.word	0xe000ed04

08010aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b083      	sub	sp, #12
 8010ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010ab2:	4b12      	ldr	r3, [pc, #72]	@ (8010afc <vPortExitCritical+0x50>)
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d10b      	bne.n	8010ad2 <vPortExitCritical+0x26>
	__asm volatile
 8010aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010abe:	f383 8811 	msr	BASEPRI, r3
 8010ac2:	f3bf 8f6f 	isb	sy
 8010ac6:	f3bf 8f4f 	dsb	sy
 8010aca:	607b      	str	r3, [r7, #4]
}
 8010acc:	bf00      	nop
 8010ace:	bf00      	nop
 8010ad0:	e7fd      	b.n	8010ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8010afc <vPortExitCritical+0x50>)
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	3b01      	subs	r3, #1
 8010ad8:	4a08      	ldr	r2, [pc, #32]	@ (8010afc <vPortExitCritical+0x50>)
 8010ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010adc:	4b07      	ldr	r3, [pc, #28]	@ (8010afc <vPortExitCritical+0x50>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d105      	bne.n	8010af0 <vPortExitCritical+0x44>
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	f383 8811 	msr	BASEPRI, r3
}
 8010aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010af0:	bf00      	nop
 8010af2:	370c      	adds	r7, #12
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr
 8010afc:	24000014 	.word	0x24000014

08010b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b00:	f3ef 8009 	mrs	r0, PSP
 8010b04:	f3bf 8f6f 	isb	sy
 8010b08:	4b15      	ldr	r3, [pc, #84]	@ (8010b60 <pxCurrentTCBConst>)
 8010b0a:	681a      	ldr	r2, [r3, #0]
 8010b0c:	f01e 0f10 	tst.w	lr, #16
 8010b10:	bf08      	it	eq
 8010b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b1a:	6010      	str	r0, [r2, #0]
 8010b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010b24:	f380 8811 	msr	BASEPRI, r0
 8010b28:	f3bf 8f4f 	dsb	sy
 8010b2c:	f3bf 8f6f 	isb	sy
 8010b30:	f7fe fe92 	bl	800f858 <vTaskSwitchContext>
 8010b34:	f04f 0000 	mov.w	r0, #0
 8010b38:	f380 8811 	msr	BASEPRI, r0
 8010b3c:	bc09      	pop	{r0, r3}
 8010b3e:	6819      	ldr	r1, [r3, #0]
 8010b40:	6808      	ldr	r0, [r1, #0]
 8010b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b46:	f01e 0f10 	tst.w	lr, #16
 8010b4a:	bf08      	it	eq
 8010b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b50:	f380 8809 	msr	PSP, r0
 8010b54:	f3bf 8f6f 	isb	sy
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	f3af 8000 	nop.w

08010b60 <pxCurrentTCBConst>:
 8010b60:	24001350 	.word	0x24001350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010b64:	bf00      	nop
 8010b66:	bf00      	nop

08010b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	607b      	str	r3, [r7, #4]
}
 8010b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010b82:	f7fe fdaf 	bl	800f6e4 <xTaskIncrementTick>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d003      	beq.n	8010b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010b8c:	4b06      	ldr	r3, [pc, #24]	@ (8010ba8 <xPortSysTickHandler+0x40>)
 8010b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b92:	601a      	str	r2, [r3, #0]
 8010b94:	2300      	movs	r3, #0
 8010b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	f383 8811 	msr	BASEPRI, r3
}
 8010b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010ba0:	bf00      	nop
 8010ba2:	3708      	adds	r7, #8
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}
 8010ba8:	e000ed04 	.word	0xe000ed04

08010bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010bac:	b480      	push	{r7}
 8010bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8010be0 <vPortSetupTimerInterrupt+0x34>)
 8010bb2:	2200      	movs	r2, #0
 8010bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8010be4 <vPortSetupTimerInterrupt+0x38>)
 8010bb8:	2200      	movs	r2, #0
 8010bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8010be8 <vPortSetupTimerInterrupt+0x3c>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8010bec <vPortSetupTimerInterrupt+0x40>)
 8010bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc6:	099b      	lsrs	r3, r3, #6
 8010bc8:	4a09      	ldr	r2, [pc, #36]	@ (8010bf0 <vPortSetupTimerInterrupt+0x44>)
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010bce:	4b04      	ldr	r3, [pc, #16]	@ (8010be0 <vPortSetupTimerInterrupt+0x34>)
 8010bd0:	2207      	movs	r2, #7
 8010bd2:	601a      	str	r2, [r3, #0]
}
 8010bd4:	bf00      	nop
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bdc:	4770      	bx	lr
 8010bde:	bf00      	nop
 8010be0:	e000e010 	.word	0xe000e010
 8010be4:	e000e018 	.word	0xe000e018
 8010be8:	24000004 	.word	0x24000004
 8010bec:	10624dd3 	.word	0x10624dd3
 8010bf0:	e000e014 	.word	0xe000e014

08010bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c04 <vPortEnableVFP+0x10>
 8010bf8:	6801      	ldr	r1, [r0, #0]
 8010bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010bfe:	6001      	str	r1, [r0, #0]
 8010c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c02:	bf00      	nop
 8010c04:	e000ed88 	.word	0xe000ed88

08010c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c08:	b480      	push	{r7}
 8010c0a:	b085      	sub	sp, #20
 8010c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c0e:	f3ef 8305 	mrs	r3, IPSR
 8010c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b0f      	cmp	r3, #15
 8010c18:	d915      	bls.n	8010c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c1a:	4a18      	ldr	r2, [pc, #96]	@ (8010c7c <vPortValidateInterruptPriority+0x74>)
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	4413      	add	r3, r2
 8010c20:	781b      	ldrb	r3, [r3, #0]
 8010c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c24:	4b16      	ldr	r3, [pc, #88]	@ (8010c80 <vPortValidateInterruptPriority+0x78>)
 8010c26:	781b      	ldrb	r3, [r3, #0]
 8010c28:	7afa      	ldrb	r2, [r7, #11]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d20b      	bcs.n	8010c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	607b      	str	r3, [r7, #4]
}
 8010c40:	bf00      	nop
 8010c42:	bf00      	nop
 8010c44:	e7fd      	b.n	8010c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010c46:	4b0f      	ldr	r3, [pc, #60]	@ (8010c84 <vPortValidateInterruptPriority+0x7c>)
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8010c88 <vPortValidateInterruptPriority+0x80>)
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	429a      	cmp	r2, r3
 8010c54:	d90b      	bls.n	8010c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c5a:	f383 8811 	msr	BASEPRI, r3
 8010c5e:	f3bf 8f6f 	isb	sy
 8010c62:	f3bf 8f4f 	dsb	sy
 8010c66:	603b      	str	r3, [r7, #0]
}
 8010c68:	bf00      	nop
 8010c6a:	bf00      	nop
 8010c6c:	e7fd      	b.n	8010c6a <vPortValidateInterruptPriority+0x62>
	}
 8010c6e:	bf00      	nop
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	e000e3f0 	.word	0xe000e3f0
 8010c80:	2400197c 	.word	0x2400197c
 8010c84:	e000ed0c 	.word	0xe000ed0c
 8010c88:	24001980 	.word	0x24001980

08010c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b08a      	sub	sp, #40	@ 0x28
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010c94:	2300      	movs	r3, #0
 8010c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010c98:	f7fe fc68 	bl	800f56c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8010e10 <pvPortMalloc+0x184>)
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d101      	bne.n	8010ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010ca4:	f000 f924 	bl	8010ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8010e14 <pvPortMalloc+0x188>)
 8010caa:	681a      	ldr	r2, [r3, #0]
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	4013      	ands	r3, r2
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	f040 8095 	bne.w	8010de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d01e      	beq.n	8010cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010cbc:	2208      	movs	r2, #8
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f003 0307 	and.w	r3, r3, #7
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d015      	beq.n	8010cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f023 0307 	bic.w	r3, r3, #7
 8010cd4:	3308      	adds	r3, #8
 8010cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f003 0307 	and.w	r3, r3, #7
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d00b      	beq.n	8010cfa <pvPortMalloc+0x6e>
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	617b      	str	r3, [r7, #20]
}
 8010cf4:	bf00      	nop
 8010cf6:	bf00      	nop
 8010cf8:	e7fd      	b.n	8010cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d06f      	beq.n	8010de0 <pvPortMalloc+0x154>
 8010d00:	4b45      	ldr	r3, [pc, #276]	@ (8010e18 <pvPortMalloc+0x18c>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	687a      	ldr	r2, [r7, #4]
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d86a      	bhi.n	8010de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d0a:	4b44      	ldr	r3, [pc, #272]	@ (8010e1c <pvPortMalloc+0x190>)
 8010d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d0e:	4b43      	ldr	r3, [pc, #268]	@ (8010e1c <pvPortMalloc+0x190>)
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d14:	e004      	b.n	8010d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	687a      	ldr	r2, [r7, #4]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d903      	bls.n	8010d32 <pvPortMalloc+0xa6>
 8010d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d1f1      	bne.n	8010d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d32:	4b37      	ldr	r3, [pc, #220]	@ (8010e10 <pvPortMalloc+0x184>)
 8010d34:	681b      	ldr	r3, [r3, #0]
 8010d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d051      	beq.n	8010de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	2208      	movs	r2, #8
 8010d42:	4413      	add	r3, r2
 8010d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	6a3b      	ldr	r3, [r7, #32]
 8010d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d50:	685a      	ldr	r2, [r3, #4]
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	1ad2      	subs	r2, r2, r3
 8010d56:	2308      	movs	r3, #8
 8010d58:	005b      	lsls	r3, r3, #1
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d920      	bls.n	8010da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4413      	add	r3, r2
 8010d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d66:	69bb      	ldr	r3, [r7, #24]
 8010d68:	f003 0307 	and.w	r3, r3, #7
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00b      	beq.n	8010d88 <pvPortMalloc+0xfc>
	__asm volatile
 8010d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d74:	f383 8811 	msr	BASEPRI, r3
 8010d78:	f3bf 8f6f 	isb	sy
 8010d7c:	f3bf 8f4f 	dsb	sy
 8010d80:	613b      	str	r3, [r7, #16]
}
 8010d82:	bf00      	nop
 8010d84:	bf00      	nop
 8010d86:	e7fd      	b.n	8010d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d8a:	685a      	ldr	r2, [r3, #4]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	1ad2      	subs	r2, r2, r3
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010d9a:	69b8      	ldr	r0, [r7, #24]
 8010d9c:	f000 f90a 	bl	8010fb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010da0:	4b1d      	ldr	r3, [pc, #116]	@ (8010e18 <pvPortMalloc+0x18c>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010da6:	685b      	ldr	r3, [r3, #4]
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	4a1b      	ldr	r2, [pc, #108]	@ (8010e18 <pvPortMalloc+0x18c>)
 8010dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010dae:	4b1a      	ldr	r3, [pc, #104]	@ (8010e18 <pvPortMalloc+0x18c>)
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	4b1b      	ldr	r3, [pc, #108]	@ (8010e20 <pvPortMalloc+0x194>)
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	429a      	cmp	r2, r3
 8010db8:	d203      	bcs.n	8010dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010dba:	4b17      	ldr	r3, [pc, #92]	@ (8010e18 <pvPortMalloc+0x18c>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	4a18      	ldr	r2, [pc, #96]	@ (8010e20 <pvPortMalloc+0x194>)
 8010dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dc4:	685a      	ldr	r2, [r3, #4]
 8010dc6:	4b13      	ldr	r3, [pc, #76]	@ (8010e14 <pvPortMalloc+0x188>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	431a      	orrs	r2, r3
 8010dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010dd6:	4b13      	ldr	r3, [pc, #76]	@ (8010e24 <pvPortMalloc+0x198>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	3301      	adds	r3, #1
 8010ddc:	4a11      	ldr	r2, [pc, #68]	@ (8010e24 <pvPortMalloc+0x198>)
 8010dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010de0:	f7fe fbd2 	bl	800f588 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010de4:	69fb      	ldr	r3, [r7, #28]
 8010de6:	f003 0307 	and.w	r3, r3, #7
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d00b      	beq.n	8010e06 <pvPortMalloc+0x17a>
	__asm volatile
 8010dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010df2:	f383 8811 	msr	BASEPRI, r3
 8010df6:	f3bf 8f6f 	isb	sy
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	60fb      	str	r3, [r7, #12]
}
 8010e00:	bf00      	nop
 8010e02:	bf00      	nop
 8010e04:	e7fd      	b.n	8010e02 <pvPortMalloc+0x176>
	return pvReturn;
 8010e06:	69fb      	ldr	r3, [r7, #28]
}
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3728      	adds	r7, #40	@ 0x28
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	2400558c 	.word	0x2400558c
 8010e14:	240055a0 	.word	0x240055a0
 8010e18:	24005590 	.word	0x24005590
 8010e1c:	24005584 	.word	0x24005584
 8010e20:	24005594 	.word	0x24005594
 8010e24:	24005598 	.word	0x24005598

08010e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b086      	sub	sp, #24
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d04f      	beq.n	8010eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e3a:	2308      	movs	r3, #8
 8010e3c:	425b      	negs	r3, r3
 8010e3e:	697a      	ldr	r2, [r7, #20]
 8010e40:	4413      	add	r3, r2
 8010e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e48:	693b      	ldr	r3, [r7, #16]
 8010e4a:	685a      	ldr	r2, [r3, #4]
 8010e4c:	4b25      	ldr	r3, [pc, #148]	@ (8010ee4 <vPortFree+0xbc>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4013      	ands	r3, r2
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d10b      	bne.n	8010e6e <vPortFree+0x46>
	__asm volatile
 8010e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e5a:	f383 8811 	msr	BASEPRI, r3
 8010e5e:	f3bf 8f6f 	isb	sy
 8010e62:	f3bf 8f4f 	dsb	sy
 8010e66:	60fb      	str	r3, [r7, #12]
}
 8010e68:	bf00      	nop
 8010e6a:	bf00      	nop
 8010e6c:	e7fd      	b.n	8010e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00b      	beq.n	8010e8e <vPortFree+0x66>
	__asm volatile
 8010e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e7a:	f383 8811 	msr	BASEPRI, r3
 8010e7e:	f3bf 8f6f 	isb	sy
 8010e82:	f3bf 8f4f 	dsb	sy
 8010e86:	60bb      	str	r3, [r7, #8]
}
 8010e88:	bf00      	nop
 8010e8a:	bf00      	nop
 8010e8c:	e7fd      	b.n	8010e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010e8e:	693b      	ldr	r3, [r7, #16]
 8010e90:	685a      	ldr	r2, [r3, #4]
 8010e92:	4b14      	ldr	r3, [pc, #80]	@ (8010ee4 <vPortFree+0xbc>)
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4013      	ands	r3, r2
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d01e      	beq.n	8010eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d11a      	bne.n	8010eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ea4:	693b      	ldr	r3, [r7, #16]
 8010ea6:	685a      	ldr	r2, [r3, #4]
 8010ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8010ee4 <vPortFree+0xbc>)
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	43db      	mvns	r3, r3
 8010eae:	401a      	ands	r2, r3
 8010eb0:	693b      	ldr	r3, [r7, #16]
 8010eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010eb4:	f7fe fb5a 	bl	800f56c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010eb8:	693b      	ldr	r3, [r7, #16]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8010ee8 <vPortFree+0xc0>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	4a09      	ldr	r2, [pc, #36]	@ (8010ee8 <vPortFree+0xc0>)
 8010ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010ec6:	6938      	ldr	r0, [r7, #16]
 8010ec8:	f000 f874 	bl	8010fb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010ecc:	4b07      	ldr	r3, [pc, #28]	@ (8010eec <vPortFree+0xc4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	4a06      	ldr	r2, [pc, #24]	@ (8010eec <vPortFree+0xc4>)
 8010ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010ed6:	f7fe fb57 	bl	800f588 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010eda:	bf00      	nop
 8010edc:	3718      	adds	r7, #24
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	240055a0 	.word	0x240055a0
 8010ee8:	24005590 	.word	0x24005590
 8010eec:	2400559c 	.word	0x2400559c

08010ef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b085      	sub	sp, #20
 8010ef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010ef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010efa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010efc:	4b27      	ldr	r3, [pc, #156]	@ (8010f9c <prvHeapInit+0xac>)
 8010efe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	f003 0307 	and.w	r3, r3, #7
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d00c      	beq.n	8010f24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	3307      	adds	r3, #7
 8010f0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f023 0307 	bic.w	r3, r3, #7
 8010f16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f18:	68ba      	ldr	r2, [r7, #8]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	1ad3      	subs	r3, r2, r3
 8010f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8010f9c <prvHeapInit+0xac>)
 8010f20:	4413      	add	r3, r2
 8010f22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f28:	4a1d      	ldr	r2, [pc, #116]	@ (8010fa0 <prvHeapInit+0xb0>)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8010fa0 <prvHeapInit+0xb0>)
 8010f30:	2200      	movs	r2, #0
 8010f32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	68ba      	ldr	r2, [r7, #8]
 8010f38:	4413      	add	r3, r2
 8010f3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f3c:	2208      	movs	r2, #8
 8010f3e:	68fb      	ldr	r3, [r7, #12]
 8010f40:	1a9b      	subs	r3, r3, r2
 8010f42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f023 0307 	bic.w	r3, r3, #7
 8010f4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	4a15      	ldr	r2, [pc, #84]	@ (8010fa4 <prvHeapInit+0xb4>)
 8010f50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f52:	4b14      	ldr	r3, [pc, #80]	@ (8010fa4 <prvHeapInit+0xb4>)
 8010f54:	681b      	ldr	r3, [r3, #0]
 8010f56:	2200      	movs	r2, #0
 8010f58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f5a:	4b12      	ldr	r3, [pc, #72]	@ (8010fa4 <prvHeapInit+0xb4>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	2200      	movs	r2, #0
 8010f60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010f66:	683b      	ldr	r3, [r7, #0]
 8010f68:	68fa      	ldr	r2, [r7, #12]
 8010f6a:	1ad2      	subs	r2, r2, r3
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010f70:	4b0c      	ldr	r3, [pc, #48]	@ (8010fa4 <prvHeapInit+0xb4>)
 8010f72:	681a      	ldr	r2, [r3, #0]
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	685b      	ldr	r3, [r3, #4]
 8010f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8010fa8 <prvHeapInit+0xb8>)
 8010f7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	4a09      	ldr	r2, [pc, #36]	@ (8010fac <prvHeapInit+0xbc>)
 8010f86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010f88:	4b09      	ldr	r3, [pc, #36]	@ (8010fb0 <prvHeapInit+0xc0>)
 8010f8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010f8e:	601a      	str	r2, [r3, #0]
}
 8010f90:	bf00      	nop
 8010f92:	3714      	adds	r7, #20
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr
 8010f9c:	24001984 	.word	0x24001984
 8010fa0:	24005584 	.word	0x24005584
 8010fa4:	2400558c 	.word	0x2400558c
 8010fa8:	24005594 	.word	0x24005594
 8010fac:	24005590 	.word	0x24005590
 8010fb0:	240055a0 	.word	0x240055a0

08010fb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b085      	sub	sp, #20
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010fbc:	4b28      	ldr	r3, [pc, #160]	@ (8011060 <prvInsertBlockIntoFreeList+0xac>)
 8010fbe:	60fb      	str	r3, [r7, #12]
 8010fc0:	e002      	b.n	8010fc8 <prvInsertBlockIntoFreeList+0x14>
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	60fb      	str	r3, [r7, #12]
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	687a      	ldr	r2, [r7, #4]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d8f7      	bhi.n	8010fc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	68ba      	ldr	r2, [r7, #8]
 8010fdc:	4413      	add	r3, r2
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d108      	bne.n	8010ff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	441a      	add	r2, r3
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68ba      	ldr	r2, [r7, #8]
 8011000:	441a      	add	r2, r3
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	429a      	cmp	r2, r3
 8011008:	d118      	bne.n	801103c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801100a:	68fb      	ldr	r3, [r7, #12]
 801100c:	681a      	ldr	r2, [r3, #0]
 801100e:	4b15      	ldr	r3, [pc, #84]	@ (8011064 <prvInsertBlockIntoFreeList+0xb0>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	429a      	cmp	r2, r3
 8011014:	d00d      	beq.n	8011032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	685a      	ldr	r2, [r3, #4]
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	441a      	add	r2, r3
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	681a      	ldr	r2, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	601a      	str	r2, [r3, #0]
 8011030:	e008      	b.n	8011044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011032:	4b0c      	ldr	r3, [pc, #48]	@ (8011064 <prvInsertBlockIntoFreeList+0xb0>)
 8011034:	681a      	ldr	r2, [r3, #0]
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	601a      	str	r2, [r3, #0]
 801103a:	e003      	b.n	8011044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011044:	68fa      	ldr	r2, [r7, #12]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	429a      	cmp	r2, r3
 801104a:	d002      	beq.n	8011052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	687a      	ldr	r2, [r7, #4]
 8011050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011052:	bf00      	nop
 8011054:	3714      	adds	r7, #20
 8011056:	46bd      	mov	sp, r7
 8011058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop
 8011060:	24005584 	.word	0x24005584
 8011064:	2400558c 	.word	0x2400558c

08011068 <__cvt>:
 8011068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801106a:	ed2d 8b02 	vpush	{d8}
 801106e:	eeb0 8b40 	vmov.f64	d8, d0
 8011072:	b085      	sub	sp, #20
 8011074:	4617      	mov	r7, r2
 8011076:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011078:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801107a:	ee18 2a90 	vmov	r2, s17
 801107e:	f025 0520 	bic.w	r5, r5, #32
 8011082:	2a00      	cmp	r2, #0
 8011084:	bfb6      	itet	lt
 8011086:	222d      	movlt	r2, #45	@ 0x2d
 8011088:	2200      	movge	r2, #0
 801108a:	eeb1 8b40 	vneglt.f64	d8, d0
 801108e:	2d46      	cmp	r5, #70	@ 0x46
 8011090:	460c      	mov	r4, r1
 8011092:	701a      	strb	r2, [r3, #0]
 8011094:	d004      	beq.n	80110a0 <__cvt+0x38>
 8011096:	2d45      	cmp	r5, #69	@ 0x45
 8011098:	d100      	bne.n	801109c <__cvt+0x34>
 801109a:	3401      	adds	r4, #1
 801109c:	2102      	movs	r1, #2
 801109e:	e000      	b.n	80110a2 <__cvt+0x3a>
 80110a0:	2103      	movs	r1, #3
 80110a2:	ab03      	add	r3, sp, #12
 80110a4:	9301      	str	r3, [sp, #4]
 80110a6:	ab02      	add	r3, sp, #8
 80110a8:	9300      	str	r3, [sp, #0]
 80110aa:	4622      	mov	r2, r4
 80110ac:	4633      	mov	r3, r6
 80110ae:	eeb0 0b48 	vmov.f64	d0, d8
 80110b2:	f000 feb9 	bl	8011e28 <_dtoa_r>
 80110b6:	2d47      	cmp	r5, #71	@ 0x47
 80110b8:	d114      	bne.n	80110e4 <__cvt+0x7c>
 80110ba:	07fb      	lsls	r3, r7, #31
 80110bc:	d50a      	bpl.n	80110d4 <__cvt+0x6c>
 80110be:	1902      	adds	r2, r0, r4
 80110c0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80110c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c8:	bf08      	it	eq
 80110ca:	9203      	streq	r2, [sp, #12]
 80110cc:	2130      	movs	r1, #48	@ 0x30
 80110ce:	9b03      	ldr	r3, [sp, #12]
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d319      	bcc.n	8011108 <__cvt+0xa0>
 80110d4:	9b03      	ldr	r3, [sp, #12]
 80110d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80110d8:	1a1b      	subs	r3, r3, r0
 80110da:	6013      	str	r3, [r2, #0]
 80110dc:	b005      	add	sp, #20
 80110de:	ecbd 8b02 	vpop	{d8}
 80110e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e4:	2d46      	cmp	r5, #70	@ 0x46
 80110e6:	eb00 0204 	add.w	r2, r0, r4
 80110ea:	d1e9      	bne.n	80110c0 <__cvt+0x58>
 80110ec:	7803      	ldrb	r3, [r0, #0]
 80110ee:	2b30      	cmp	r3, #48	@ 0x30
 80110f0:	d107      	bne.n	8011102 <__cvt+0x9a>
 80110f2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80110f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110fa:	bf1c      	itt	ne
 80110fc:	f1c4 0401 	rsbne	r4, r4, #1
 8011100:	6034      	strne	r4, [r6, #0]
 8011102:	6833      	ldr	r3, [r6, #0]
 8011104:	441a      	add	r2, r3
 8011106:	e7db      	b.n	80110c0 <__cvt+0x58>
 8011108:	1c5c      	adds	r4, r3, #1
 801110a:	9403      	str	r4, [sp, #12]
 801110c:	7019      	strb	r1, [r3, #0]
 801110e:	e7de      	b.n	80110ce <__cvt+0x66>

08011110 <__exponent>:
 8011110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011112:	2900      	cmp	r1, #0
 8011114:	bfba      	itte	lt
 8011116:	4249      	neglt	r1, r1
 8011118:	232d      	movlt	r3, #45	@ 0x2d
 801111a:	232b      	movge	r3, #43	@ 0x2b
 801111c:	2909      	cmp	r1, #9
 801111e:	7002      	strb	r2, [r0, #0]
 8011120:	7043      	strb	r3, [r0, #1]
 8011122:	dd29      	ble.n	8011178 <__exponent+0x68>
 8011124:	f10d 0307 	add.w	r3, sp, #7
 8011128:	461d      	mov	r5, r3
 801112a:	270a      	movs	r7, #10
 801112c:	461a      	mov	r2, r3
 801112e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011132:	fb07 1416 	mls	r4, r7, r6, r1
 8011136:	3430      	adds	r4, #48	@ 0x30
 8011138:	f802 4c01 	strb.w	r4, [r2, #-1]
 801113c:	460c      	mov	r4, r1
 801113e:	2c63      	cmp	r4, #99	@ 0x63
 8011140:	f103 33ff 	add.w	r3, r3, #4294967295
 8011144:	4631      	mov	r1, r6
 8011146:	dcf1      	bgt.n	801112c <__exponent+0x1c>
 8011148:	3130      	adds	r1, #48	@ 0x30
 801114a:	1e94      	subs	r4, r2, #2
 801114c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011150:	1c41      	adds	r1, r0, #1
 8011152:	4623      	mov	r3, r4
 8011154:	42ab      	cmp	r3, r5
 8011156:	d30a      	bcc.n	801116e <__exponent+0x5e>
 8011158:	f10d 0309 	add.w	r3, sp, #9
 801115c:	1a9b      	subs	r3, r3, r2
 801115e:	42ac      	cmp	r4, r5
 8011160:	bf88      	it	hi
 8011162:	2300      	movhi	r3, #0
 8011164:	3302      	adds	r3, #2
 8011166:	4403      	add	r3, r0
 8011168:	1a18      	subs	r0, r3, r0
 801116a:	b003      	add	sp, #12
 801116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801116e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011172:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011176:	e7ed      	b.n	8011154 <__exponent+0x44>
 8011178:	2330      	movs	r3, #48	@ 0x30
 801117a:	3130      	adds	r1, #48	@ 0x30
 801117c:	7083      	strb	r3, [r0, #2]
 801117e:	70c1      	strb	r1, [r0, #3]
 8011180:	1d03      	adds	r3, r0, #4
 8011182:	e7f1      	b.n	8011168 <__exponent+0x58>
 8011184:	0000      	movs	r0, r0
	...

08011188 <_printf_float>:
 8011188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801118c:	b08d      	sub	sp, #52	@ 0x34
 801118e:	460c      	mov	r4, r1
 8011190:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011194:	4616      	mov	r6, r2
 8011196:	461f      	mov	r7, r3
 8011198:	4605      	mov	r5, r0
 801119a:	f000 fcdf 	bl	8011b5c <_localeconv_r>
 801119e:	f8d0 b000 	ldr.w	fp, [r0]
 80111a2:	4658      	mov	r0, fp
 80111a4:	f7ef f904 	bl	80003b0 <strlen>
 80111a8:	2300      	movs	r3, #0
 80111aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80111ac:	f8d8 3000 	ldr.w	r3, [r8]
 80111b0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80111b4:	6822      	ldr	r2, [r4, #0]
 80111b6:	9005      	str	r0, [sp, #20]
 80111b8:	3307      	adds	r3, #7
 80111ba:	f023 0307 	bic.w	r3, r3, #7
 80111be:	f103 0108 	add.w	r1, r3, #8
 80111c2:	f8c8 1000 	str.w	r1, [r8]
 80111c6:	ed93 0b00 	vldr	d0, [r3]
 80111ca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011428 <_printf_float+0x2a0>
 80111ce:	eeb0 7bc0 	vabs.f64	d7, d0
 80111d2:	eeb4 7b46 	vcmp.f64	d7, d6
 80111d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111da:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80111de:	dd24      	ble.n	801122a <_printf_float+0xa2>
 80111e0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80111e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111e8:	d502      	bpl.n	80111f0 <_printf_float+0x68>
 80111ea:	232d      	movs	r3, #45	@ 0x2d
 80111ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111f0:	498f      	ldr	r1, [pc, #572]	@ (8011430 <_printf_float+0x2a8>)
 80111f2:	4b90      	ldr	r3, [pc, #576]	@ (8011434 <_printf_float+0x2ac>)
 80111f4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80111f8:	bf94      	ite	ls
 80111fa:	4688      	movls	r8, r1
 80111fc:	4698      	movhi	r8, r3
 80111fe:	f022 0204 	bic.w	r2, r2, #4
 8011202:	2303      	movs	r3, #3
 8011204:	6123      	str	r3, [r4, #16]
 8011206:	6022      	str	r2, [r4, #0]
 8011208:	f04f 0a00 	mov.w	sl, #0
 801120c:	9700      	str	r7, [sp, #0]
 801120e:	4633      	mov	r3, r6
 8011210:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011212:	4621      	mov	r1, r4
 8011214:	4628      	mov	r0, r5
 8011216:	f000 f9d1 	bl	80115bc <_printf_common>
 801121a:	3001      	adds	r0, #1
 801121c:	f040 8089 	bne.w	8011332 <_printf_float+0x1aa>
 8011220:	f04f 30ff 	mov.w	r0, #4294967295
 8011224:	b00d      	add	sp, #52	@ 0x34
 8011226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801122a:	eeb4 0b40 	vcmp.f64	d0, d0
 801122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011232:	d709      	bvc.n	8011248 <_printf_float+0xc0>
 8011234:	ee10 3a90 	vmov	r3, s1
 8011238:	2b00      	cmp	r3, #0
 801123a:	bfbc      	itt	lt
 801123c:	232d      	movlt	r3, #45	@ 0x2d
 801123e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011242:	497d      	ldr	r1, [pc, #500]	@ (8011438 <_printf_float+0x2b0>)
 8011244:	4b7d      	ldr	r3, [pc, #500]	@ (801143c <_printf_float+0x2b4>)
 8011246:	e7d5      	b.n	80111f4 <_printf_float+0x6c>
 8011248:	6863      	ldr	r3, [r4, #4]
 801124a:	1c59      	adds	r1, r3, #1
 801124c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011250:	d139      	bne.n	80112c6 <_printf_float+0x13e>
 8011252:	2306      	movs	r3, #6
 8011254:	6063      	str	r3, [r4, #4]
 8011256:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801125a:	2300      	movs	r3, #0
 801125c:	6022      	str	r2, [r4, #0]
 801125e:	9303      	str	r3, [sp, #12]
 8011260:	ab0a      	add	r3, sp, #40	@ 0x28
 8011262:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011266:	ab09      	add	r3, sp, #36	@ 0x24
 8011268:	9300      	str	r3, [sp, #0]
 801126a:	6861      	ldr	r1, [r4, #4]
 801126c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011270:	4628      	mov	r0, r5
 8011272:	f7ff fef9 	bl	8011068 <__cvt>
 8011276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801127a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801127c:	4680      	mov	r8, r0
 801127e:	d129      	bne.n	80112d4 <_printf_float+0x14c>
 8011280:	1cc8      	adds	r0, r1, #3
 8011282:	db02      	blt.n	801128a <_printf_float+0x102>
 8011284:	6863      	ldr	r3, [r4, #4]
 8011286:	4299      	cmp	r1, r3
 8011288:	dd41      	ble.n	801130e <_printf_float+0x186>
 801128a:	f1a9 0902 	sub.w	r9, r9, #2
 801128e:	fa5f f989 	uxtb.w	r9, r9
 8011292:	3901      	subs	r1, #1
 8011294:	464a      	mov	r2, r9
 8011296:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801129a:	9109      	str	r1, [sp, #36]	@ 0x24
 801129c:	f7ff ff38 	bl	8011110 <__exponent>
 80112a0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112a2:	1813      	adds	r3, r2, r0
 80112a4:	2a01      	cmp	r2, #1
 80112a6:	4682      	mov	sl, r0
 80112a8:	6123      	str	r3, [r4, #16]
 80112aa:	dc02      	bgt.n	80112b2 <_printf_float+0x12a>
 80112ac:	6822      	ldr	r2, [r4, #0]
 80112ae:	07d2      	lsls	r2, r2, #31
 80112b0:	d501      	bpl.n	80112b6 <_printf_float+0x12e>
 80112b2:	3301      	adds	r3, #1
 80112b4:	6123      	str	r3, [r4, #16]
 80112b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	d0a6      	beq.n	801120c <_printf_float+0x84>
 80112be:	232d      	movs	r3, #45	@ 0x2d
 80112c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80112c4:	e7a2      	b.n	801120c <_printf_float+0x84>
 80112c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80112ca:	d1c4      	bne.n	8011256 <_printf_float+0xce>
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d1c2      	bne.n	8011256 <_printf_float+0xce>
 80112d0:	2301      	movs	r3, #1
 80112d2:	e7bf      	b.n	8011254 <_printf_float+0xcc>
 80112d4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80112d8:	d9db      	bls.n	8011292 <_printf_float+0x10a>
 80112da:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80112de:	d118      	bne.n	8011312 <_printf_float+0x18a>
 80112e0:	2900      	cmp	r1, #0
 80112e2:	6863      	ldr	r3, [r4, #4]
 80112e4:	dd0b      	ble.n	80112fe <_printf_float+0x176>
 80112e6:	6121      	str	r1, [r4, #16]
 80112e8:	b913      	cbnz	r3, 80112f0 <_printf_float+0x168>
 80112ea:	6822      	ldr	r2, [r4, #0]
 80112ec:	07d0      	lsls	r0, r2, #31
 80112ee:	d502      	bpl.n	80112f6 <_printf_float+0x16e>
 80112f0:	3301      	adds	r3, #1
 80112f2:	440b      	add	r3, r1
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80112f8:	f04f 0a00 	mov.w	sl, #0
 80112fc:	e7db      	b.n	80112b6 <_printf_float+0x12e>
 80112fe:	b913      	cbnz	r3, 8011306 <_printf_float+0x17e>
 8011300:	6822      	ldr	r2, [r4, #0]
 8011302:	07d2      	lsls	r2, r2, #31
 8011304:	d501      	bpl.n	801130a <_printf_float+0x182>
 8011306:	3302      	adds	r3, #2
 8011308:	e7f4      	b.n	80112f4 <_printf_float+0x16c>
 801130a:	2301      	movs	r3, #1
 801130c:	e7f2      	b.n	80112f4 <_printf_float+0x16c>
 801130e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011312:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011314:	4299      	cmp	r1, r3
 8011316:	db05      	blt.n	8011324 <_printf_float+0x19c>
 8011318:	6823      	ldr	r3, [r4, #0]
 801131a:	6121      	str	r1, [r4, #16]
 801131c:	07d8      	lsls	r0, r3, #31
 801131e:	d5ea      	bpl.n	80112f6 <_printf_float+0x16e>
 8011320:	1c4b      	adds	r3, r1, #1
 8011322:	e7e7      	b.n	80112f4 <_printf_float+0x16c>
 8011324:	2900      	cmp	r1, #0
 8011326:	bfd4      	ite	le
 8011328:	f1c1 0202 	rsble	r2, r1, #2
 801132c:	2201      	movgt	r2, #1
 801132e:	4413      	add	r3, r2
 8011330:	e7e0      	b.n	80112f4 <_printf_float+0x16c>
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	055a      	lsls	r2, r3, #21
 8011336:	d407      	bmi.n	8011348 <_printf_float+0x1c0>
 8011338:	6923      	ldr	r3, [r4, #16]
 801133a:	4642      	mov	r2, r8
 801133c:	4631      	mov	r1, r6
 801133e:	4628      	mov	r0, r5
 8011340:	47b8      	blx	r7
 8011342:	3001      	adds	r0, #1
 8011344:	d12a      	bne.n	801139c <_printf_float+0x214>
 8011346:	e76b      	b.n	8011220 <_printf_float+0x98>
 8011348:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801134c:	f240 80e0 	bls.w	8011510 <_printf_float+0x388>
 8011350:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011354:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801135c:	d133      	bne.n	80113c6 <_printf_float+0x23e>
 801135e:	4a38      	ldr	r2, [pc, #224]	@ (8011440 <_printf_float+0x2b8>)
 8011360:	2301      	movs	r3, #1
 8011362:	4631      	mov	r1, r6
 8011364:	4628      	mov	r0, r5
 8011366:	47b8      	blx	r7
 8011368:	3001      	adds	r0, #1
 801136a:	f43f af59 	beq.w	8011220 <_printf_float+0x98>
 801136e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011372:	4543      	cmp	r3, r8
 8011374:	db02      	blt.n	801137c <_printf_float+0x1f4>
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	07d8      	lsls	r0, r3, #31
 801137a:	d50f      	bpl.n	801139c <_printf_float+0x214>
 801137c:	9b05      	ldr	r3, [sp, #20]
 801137e:	465a      	mov	r2, fp
 8011380:	4631      	mov	r1, r6
 8011382:	4628      	mov	r0, r5
 8011384:	47b8      	blx	r7
 8011386:	3001      	adds	r0, #1
 8011388:	f43f af4a 	beq.w	8011220 <_printf_float+0x98>
 801138c:	f04f 0900 	mov.w	r9, #0
 8011390:	f108 38ff 	add.w	r8, r8, #4294967295
 8011394:	f104 0a1a 	add.w	sl, r4, #26
 8011398:	45c8      	cmp	r8, r9
 801139a:	dc09      	bgt.n	80113b0 <_printf_float+0x228>
 801139c:	6823      	ldr	r3, [r4, #0]
 801139e:	079b      	lsls	r3, r3, #30
 80113a0:	f100 8107 	bmi.w	80115b2 <_printf_float+0x42a>
 80113a4:	68e0      	ldr	r0, [r4, #12]
 80113a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113a8:	4298      	cmp	r0, r3
 80113aa:	bfb8      	it	lt
 80113ac:	4618      	movlt	r0, r3
 80113ae:	e739      	b.n	8011224 <_printf_float+0x9c>
 80113b0:	2301      	movs	r3, #1
 80113b2:	4652      	mov	r2, sl
 80113b4:	4631      	mov	r1, r6
 80113b6:	4628      	mov	r0, r5
 80113b8:	47b8      	blx	r7
 80113ba:	3001      	adds	r0, #1
 80113bc:	f43f af30 	beq.w	8011220 <_printf_float+0x98>
 80113c0:	f109 0901 	add.w	r9, r9, #1
 80113c4:	e7e8      	b.n	8011398 <_printf_float+0x210>
 80113c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	dc3b      	bgt.n	8011444 <_printf_float+0x2bc>
 80113cc:	4a1c      	ldr	r2, [pc, #112]	@ (8011440 <_printf_float+0x2b8>)
 80113ce:	2301      	movs	r3, #1
 80113d0:	4631      	mov	r1, r6
 80113d2:	4628      	mov	r0, r5
 80113d4:	47b8      	blx	r7
 80113d6:	3001      	adds	r0, #1
 80113d8:	f43f af22 	beq.w	8011220 <_printf_float+0x98>
 80113dc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80113e0:	ea59 0303 	orrs.w	r3, r9, r3
 80113e4:	d102      	bne.n	80113ec <_printf_float+0x264>
 80113e6:	6823      	ldr	r3, [r4, #0]
 80113e8:	07d9      	lsls	r1, r3, #31
 80113ea:	d5d7      	bpl.n	801139c <_printf_float+0x214>
 80113ec:	9b05      	ldr	r3, [sp, #20]
 80113ee:	465a      	mov	r2, fp
 80113f0:	4631      	mov	r1, r6
 80113f2:	4628      	mov	r0, r5
 80113f4:	47b8      	blx	r7
 80113f6:	3001      	adds	r0, #1
 80113f8:	f43f af12 	beq.w	8011220 <_printf_float+0x98>
 80113fc:	f04f 0a00 	mov.w	sl, #0
 8011400:	f104 0b1a 	add.w	fp, r4, #26
 8011404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011406:	425b      	negs	r3, r3
 8011408:	4553      	cmp	r3, sl
 801140a:	dc01      	bgt.n	8011410 <_printf_float+0x288>
 801140c:	464b      	mov	r3, r9
 801140e:	e794      	b.n	801133a <_printf_float+0x1b2>
 8011410:	2301      	movs	r3, #1
 8011412:	465a      	mov	r2, fp
 8011414:	4631      	mov	r1, r6
 8011416:	4628      	mov	r0, r5
 8011418:	47b8      	blx	r7
 801141a:	3001      	adds	r0, #1
 801141c:	f43f af00 	beq.w	8011220 <_printf_float+0x98>
 8011420:	f10a 0a01 	add.w	sl, sl, #1
 8011424:	e7ee      	b.n	8011404 <_printf_float+0x27c>
 8011426:	bf00      	nop
 8011428:	ffffffff 	.word	0xffffffff
 801142c:	7fefffff 	.word	0x7fefffff
 8011430:	08013dcc 	.word	0x08013dcc
 8011434:	08013dd0 	.word	0x08013dd0
 8011438:	08013dd4 	.word	0x08013dd4
 801143c:	08013dd8 	.word	0x08013dd8
 8011440:	08013ddc 	.word	0x08013ddc
 8011444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801144a:	4553      	cmp	r3, sl
 801144c:	bfa8      	it	ge
 801144e:	4653      	movge	r3, sl
 8011450:	2b00      	cmp	r3, #0
 8011452:	4699      	mov	r9, r3
 8011454:	dc37      	bgt.n	80114c6 <_printf_float+0x33e>
 8011456:	2300      	movs	r3, #0
 8011458:	9307      	str	r3, [sp, #28]
 801145a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801145e:	f104 021a 	add.w	r2, r4, #26
 8011462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011464:	9907      	ldr	r1, [sp, #28]
 8011466:	9306      	str	r3, [sp, #24]
 8011468:	eba3 0309 	sub.w	r3, r3, r9
 801146c:	428b      	cmp	r3, r1
 801146e:	dc31      	bgt.n	80114d4 <_printf_float+0x34c>
 8011470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011472:	459a      	cmp	sl, r3
 8011474:	dc3b      	bgt.n	80114ee <_printf_float+0x366>
 8011476:	6823      	ldr	r3, [r4, #0]
 8011478:	07da      	lsls	r2, r3, #31
 801147a:	d438      	bmi.n	80114ee <_printf_float+0x366>
 801147c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801147e:	ebaa 0903 	sub.w	r9, sl, r3
 8011482:	9b06      	ldr	r3, [sp, #24]
 8011484:	ebaa 0303 	sub.w	r3, sl, r3
 8011488:	4599      	cmp	r9, r3
 801148a:	bfa8      	it	ge
 801148c:	4699      	movge	r9, r3
 801148e:	f1b9 0f00 	cmp.w	r9, #0
 8011492:	dc34      	bgt.n	80114fe <_printf_float+0x376>
 8011494:	f04f 0800 	mov.w	r8, #0
 8011498:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801149c:	f104 0b1a 	add.w	fp, r4, #26
 80114a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114a2:	ebaa 0303 	sub.w	r3, sl, r3
 80114a6:	eba3 0309 	sub.w	r3, r3, r9
 80114aa:	4543      	cmp	r3, r8
 80114ac:	f77f af76 	ble.w	801139c <_printf_float+0x214>
 80114b0:	2301      	movs	r3, #1
 80114b2:	465a      	mov	r2, fp
 80114b4:	4631      	mov	r1, r6
 80114b6:	4628      	mov	r0, r5
 80114b8:	47b8      	blx	r7
 80114ba:	3001      	adds	r0, #1
 80114bc:	f43f aeb0 	beq.w	8011220 <_printf_float+0x98>
 80114c0:	f108 0801 	add.w	r8, r8, #1
 80114c4:	e7ec      	b.n	80114a0 <_printf_float+0x318>
 80114c6:	4642      	mov	r2, r8
 80114c8:	4631      	mov	r1, r6
 80114ca:	4628      	mov	r0, r5
 80114cc:	47b8      	blx	r7
 80114ce:	3001      	adds	r0, #1
 80114d0:	d1c1      	bne.n	8011456 <_printf_float+0x2ce>
 80114d2:	e6a5      	b.n	8011220 <_printf_float+0x98>
 80114d4:	2301      	movs	r3, #1
 80114d6:	4631      	mov	r1, r6
 80114d8:	4628      	mov	r0, r5
 80114da:	9206      	str	r2, [sp, #24]
 80114dc:	47b8      	blx	r7
 80114de:	3001      	adds	r0, #1
 80114e0:	f43f ae9e 	beq.w	8011220 <_printf_float+0x98>
 80114e4:	9b07      	ldr	r3, [sp, #28]
 80114e6:	9a06      	ldr	r2, [sp, #24]
 80114e8:	3301      	adds	r3, #1
 80114ea:	9307      	str	r3, [sp, #28]
 80114ec:	e7b9      	b.n	8011462 <_printf_float+0x2da>
 80114ee:	9b05      	ldr	r3, [sp, #20]
 80114f0:	465a      	mov	r2, fp
 80114f2:	4631      	mov	r1, r6
 80114f4:	4628      	mov	r0, r5
 80114f6:	47b8      	blx	r7
 80114f8:	3001      	adds	r0, #1
 80114fa:	d1bf      	bne.n	801147c <_printf_float+0x2f4>
 80114fc:	e690      	b.n	8011220 <_printf_float+0x98>
 80114fe:	9a06      	ldr	r2, [sp, #24]
 8011500:	464b      	mov	r3, r9
 8011502:	4442      	add	r2, r8
 8011504:	4631      	mov	r1, r6
 8011506:	4628      	mov	r0, r5
 8011508:	47b8      	blx	r7
 801150a:	3001      	adds	r0, #1
 801150c:	d1c2      	bne.n	8011494 <_printf_float+0x30c>
 801150e:	e687      	b.n	8011220 <_printf_float+0x98>
 8011510:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011514:	f1b9 0f01 	cmp.w	r9, #1
 8011518:	dc01      	bgt.n	801151e <_printf_float+0x396>
 801151a:	07db      	lsls	r3, r3, #31
 801151c:	d536      	bpl.n	801158c <_printf_float+0x404>
 801151e:	2301      	movs	r3, #1
 8011520:	4642      	mov	r2, r8
 8011522:	4631      	mov	r1, r6
 8011524:	4628      	mov	r0, r5
 8011526:	47b8      	blx	r7
 8011528:	3001      	adds	r0, #1
 801152a:	f43f ae79 	beq.w	8011220 <_printf_float+0x98>
 801152e:	9b05      	ldr	r3, [sp, #20]
 8011530:	465a      	mov	r2, fp
 8011532:	4631      	mov	r1, r6
 8011534:	4628      	mov	r0, r5
 8011536:	47b8      	blx	r7
 8011538:	3001      	adds	r0, #1
 801153a:	f43f ae71 	beq.w	8011220 <_printf_float+0x98>
 801153e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011542:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801154a:	f109 39ff 	add.w	r9, r9, #4294967295
 801154e:	d018      	beq.n	8011582 <_printf_float+0x3fa>
 8011550:	464b      	mov	r3, r9
 8011552:	f108 0201 	add.w	r2, r8, #1
 8011556:	4631      	mov	r1, r6
 8011558:	4628      	mov	r0, r5
 801155a:	47b8      	blx	r7
 801155c:	3001      	adds	r0, #1
 801155e:	d10c      	bne.n	801157a <_printf_float+0x3f2>
 8011560:	e65e      	b.n	8011220 <_printf_float+0x98>
 8011562:	2301      	movs	r3, #1
 8011564:	465a      	mov	r2, fp
 8011566:	4631      	mov	r1, r6
 8011568:	4628      	mov	r0, r5
 801156a:	47b8      	blx	r7
 801156c:	3001      	adds	r0, #1
 801156e:	f43f ae57 	beq.w	8011220 <_printf_float+0x98>
 8011572:	f108 0801 	add.w	r8, r8, #1
 8011576:	45c8      	cmp	r8, r9
 8011578:	dbf3      	blt.n	8011562 <_printf_float+0x3da>
 801157a:	4653      	mov	r3, sl
 801157c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011580:	e6dc      	b.n	801133c <_printf_float+0x1b4>
 8011582:	f04f 0800 	mov.w	r8, #0
 8011586:	f104 0b1a 	add.w	fp, r4, #26
 801158a:	e7f4      	b.n	8011576 <_printf_float+0x3ee>
 801158c:	2301      	movs	r3, #1
 801158e:	4642      	mov	r2, r8
 8011590:	e7e1      	b.n	8011556 <_printf_float+0x3ce>
 8011592:	2301      	movs	r3, #1
 8011594:	464a      	mov	r2, r9
 8011596:	4631      	mov	r1, r6
 8011598:	4628      	mov	r0, r5
 801159a:	47b8      	blx	r7
 801159c:	3001      	adds	r0, #1
 801159e:	f43f ae3f 	beq.w	8011220 <_printf_float+0x98>
 80115a2:	f108 0801 	add.w	r8, r8, #1
 80115a6:	68e3      	ldr	r3, [r4, #12]
 80115a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80115aa:	1a5b      	subs	r3, r3, r1
 80115ac:	4543      	cmp	r3, r8
 80115ae:	dcf0      	bgt.n	8011592 <_printf_float+0x40a>
 80115b0:	e6f8      	b.n	80113a4 <_printf_float+0x21c>
 80115b2:	f04f 0800 	mov.w	r8, #0
 80115b6:	f104 0919 	add.w	r9, r4, #25
 80115ba:	e7f4      	b.n	80115a6 <_printf_float+0x41e>

080115bc <_printf_common>:
 80115bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80115c0:	4616      	mov	r6, r2
 80115c2:	4698      	mov	r8, r3
 80115c4:	688a      	ldr	r2, [r1, #8]
 80115c6:	690b      	ldr	r3, [r1, #16]
 80115c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80115cc:	4293      	cmp	r3, r2
 80115ce:	bfb8      	it	lt
 80115d0:	4613      	movlt	r3, r2
 80115d2:	6033      	str	r3, [r6, #0]
 80115d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80115d8:	4607      	mov	r7, r0
 80115da:	460c      	mov	r4, r1
 80115dc:	b10a      	cbz	r2, 80115e2 <_printf_common+0x26>
 80115de:	3301      	adds	r3, #1
 80115e0:	6033      	str	r3, [r6, #0]
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	0699      	lsls	r1, r3, #26
 80115e6:	bf42      	ittt	mi
 80115e8:	6833      	ldrmi	r3, [r6, #0]
 80115ea:	3302      	addmi	r3, #2
 80115ec:	6033      	strmi	r3, [r6, #0]
 80115ee:	6825      	ldr	r5, [r4, #0]
 80115f0:	f015 0506 	ands.w	r5, r5, #6
 80115f4:	d106      	bne.n	8011604 <_printf_common+0x48>
 80115f6:	f104 0a19 	add.w	sl, r4, #25
 80115fa:	68e3      	ldr	r3, [r4, #12]
 80115fc:	6832      	ldr	r2, [r6, #0]
 80115fe:	1a9b      	subs	r3, r3, r2
 8011600:	42ab      	cmp	r3, r5
 8011602:	dc26      	bgt.n	8011652 <_printf_common+0x96>
 8011604:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011608:	6822      	ldr	r2, [r4, #0]
 801160a:	3b00      	subs	r3, #0
 801160c:	bf18      	it	ne
 801160e:	2301      	movne	r3, #1
 8011610:	0692      	lsls	r2, r2, #26
 8011612:	d42b      	bmi.n	801166c <_printf_common+0xb0>
 8011614:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011618:	4641      	mov	r1, r8
 801161a:	4638      	mov	r0, r7
 801161c:	47c8      	blx	r9
 801161e:	3001      	adds	r0, #1
 8011620:	d01e      	beq.n	8011660 <_printf_common+0xa4>
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	6922      	ldr	r2, [r4, #16]
 8011626:	f003 0306 	and.w	r3, r3, #6
 801162a:	2b04      	cmp	r3, #4
 801162c:	bf02      	ittt	eq
 801162e:	68e5      	ldreq	r5, [r4, #12]
 8011630:	6833      	ldreq	r3, [r6, #0]
 8011632:	1aed      	subeq	r5, r5, r3
 8011634:	68a3      	ldr	r3, [r4, #8]
 8011636:	bf0c      	ite	eq
 8011638:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801163c:	2500      	movne	r5, #0
 801163e:	4293      	cmp	r3, r2
 8011640:	bfc4      	itt	gt
 8011642:	1a9b      	subgt	r3, r3, r2
 8011644:	18ed      	addgt	r5, r5, r3
 8011646:	2600      	movs	r6, #0
 8011648:	341a      	adds	r4, #26
 801164a:	42b5      	cmp	r5, r6
 801164c:	d11a      	bne.n	8011684 <_printf_common+0xc8>
 801164e:	2000      	movs	r0, #0
 8011650:	e008      	b.n	8011664 <_printf_common+0xa8>
 8011652:	2301      	movs	r3, #1
 8011654:	4652      	mov	r2, sl
 8011656:	4641      	mov	r1, r8
 8011658:	4638      	mov	r0, r7
 801165a:	47c8      	blx	r9
 801165c:	3001      	adds	r0, #1
 801165e:	d103      	bne.n	8011668 <_printf_common+0xac>
 8011660:	f04f 30ff 	mov.w	r0, #4294967295
 8011664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011668:	3501      	adds	r5, #1
 801166a:	e7c6      	b.n	80115fa <_printf_common+0x3e>
 801166c:	18e1      	adds	r1, r4, r3
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	2030      	movs	r0, #48	@ 0x30
 8011672:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011676:	4422      	add	r2, r4
 8011678:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801167c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011680:	3302      	adds	r3, #2
 8011682:	e7c7      	b.n	8011614 <_printf_common+0x58>
 8011684:	2301      	movs	r3, #1
 8011686:	4622      	mov	r2, r4
 8011688:	4641      	mov	r1, r8
 801168a:	4638      	mov	r0, r7
 801168c:	47c8      	blx	r9
 801168e:	3001      	adds	r0, #1
 8011690:	d0e6      	beq.n	8011660 <_printf_common+0xa4>
 8011692:	3601      	adds	r6, #1
 8011694:	e7d9      	b.n	801164a <_printf_common+0x8e>
	...

08011698 <_printf_i>:
 8011698:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801169c:	7e0f      	ldrb	r7, [r1, #24]
 801169e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116a0:	2f78      	cmp	r7, #120	@ 0x78
 80116a2:	4691      	mov	r9, r2
 80116a4:	4680      	mov	r8, r0
 80116a6:	460c      	mov	r4, r1
 80116a8:	469a      	mov	sl, r3
 80116aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116ae:	d807      	bhi.n	80116c0 <_printf_i+0x28>
 80116b0:	2f62      	cmp	r7, #98	@ 0x62
 80116b2:	d80a      	bhi.n	80116ca <_printf_i+0x32>
 80116b4:	2f00      	cmp	r7, #0
 80116b6:	f000 80d2 	beq.w	801185e <_printf_i+0x1c6>
 80116ba:	2f58      	cmp	r7, #88	@ 0x58
 80116bc:	f000 80b9 	beq.w	8011832 <_printf_i+0x19a>
 80116c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80116c8:	e03a      	b.n	8011740 <_printf_i+0xa8>
 80116ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80116ce:	2b15      	cmp	r3, #21
 80116d0:	d8f6      	bhi.n	80116c0 <_printf_i+0x28>
 80116d2:	a101      	add	r1, pc, #4	@ (adr r1, 80116d8 <_printf_i+0x40>)
 80116d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80116d8:	08011731 	.word	0x08011731
 80116dc:	08011745 	.word	0x08011745
 80116e0:	080116c1 	.word	0x080116c1
 80116e4:	080116c1 	.word	0x080116c1
 80116e8:	080116c1 	.word	0x080116c1
 80116ec:	080116c1 	.word	0x080116c1
 80116f0:	08011745 	.word	0x08011745
 80116f4:	080116c1 	.word	0x080116c1
 80116f8:	080116c1 	.word	0x080116c1
 80116fc:	080116c1 	.word	0x080116c1
 8011700:	080116c1 	.word	0x080116c1
 8011704:	08011845 	.word	0x08011845
 8011708:	0801176f 	.word	0x0801176f
 801170c:	080117ff 	.word	0x080117ff
 8011710:	080116c1 	.word	0x080116c1
 8011714:	080116c1 	.word	0x080116c1
 8011718:	08011867 	.word	0x08011867
 801171c:	080116c1 	.word	0x080116c1
 8011720:	0801176f 	.word	0x0801176f
 8011724:	080116c1 	.word	0x080116c1
 8011728:	080116c1 	.word	0x080116c1
 801172c:	08011807 	.word	0x08011807
 8011730:	6833      	ldr	r3, [r6, #0]
 8011732:	1d1a      	adds	r2, r3, #4
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	6032      	str	r2, [r6, #0]
 8011738:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801173c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011740:	2301      	movs	r3, #1
 8011742:	e09d      	b.n	8011880 <_printf_i+0x1e8>
 8011744:	6833      	ldr	r3, [r6, #0]
 8011746:	6820      	ldr	r0, [r4, #0]
 8011748:	1d19      	adds	r1, r3, #4
 801174a:	6031      	str	r1, [r6, #0]
 801174c:	0606      	lsls	r6, r0, #24
 801174e:	d501      	bpl.n	8011754 <_printf_i+0xbc>
 8011750:	681d      	ldr	r5, [r3, #0]
 8011752:	e003      	b.n	801175c <_printf_i+0xc4>
 8011754:	0645      	lsls	r5, r0, #25
 8011756:	d5fb      	bpl.n	8011750 <_printf_i+0xb8>
 8011758:	f9b3 5000 	ldrsh.w	r5, [r3]
 801175c:	2d00      	cmp	r5, #0
 801175e:	da03      	bge.n	8011768 <_printf_i+0xd0>
 8011760:	232d      	movs	r3, #45	@ 0x2d
 8011762:	426d      	negs	r5, r5
 8011764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011768:	4859      	ldr	r0, [pc, #356]	@ (80118d0 <_printf_i+0x238>)
 801176a:	230a      	movs	r3, #10
 801176c:	e011      	b.n	8011792 <_printf_i+0xfa>
 801176e:	6821      	ldr	r1, [r4, #0]
 8011770:	6833      	ldr	r3, [r6, #0]
 8011772:	0608      	lsls	r0, r1, #24
 8011774:	f853 5b04 	ldr.w	r5, [r3], #4
 8011778:	d402      	bmi.n	8011780 <_printf_i+0xe8>
 801177a:	0649      	lsls	r1, r1, #25
 801177c:	bf48      	it	mi
 801177e:	b2ad      	uxthmi	r5, r5
 8011780:	2f6f      	cmp	r7, #111	@ 0x6f
 8011782:	4853      	ldr	r0, [pc, #332]	@ (80118d0 <_printf_i+0x238>)
 8011784:	6033      	str	r3, [r6, #0]
 8011786:	bf14      	ite	ne
 8011788:	230a      	movne	r3, #10
 801178a:	2308      	moveq	r3, #8
 801178c:	2100      	movs	r1, #0
 801178e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011792:	6866      	ldr	r6, [r4, #4]
 8011794:	60a6      	str	r6, [r4, #8]
 8011796:	2e00      	cmp	r6, #0
 8011798:	bfa2      	ittt	ge
 801179a:	6821      	ldrge	r1, [r4, #0]
 801179c:	f021 0104 	bicge.w	r1, r1, #4
 80117a0:	6021      	strge	r1, [r4, #0]
 80117a2:	b90d      	cbnz	r5, 80117a8 <_printf_i+0x110>
 80117a4:	2e00      	cmp	r6, #0
 80117a6:	d04b      	beq.n	8011840 <_printf_i+0x1a8>
 80117a8:	4616      	mov	r6, r2
 80117aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80117ae:	fb03 5711 	mls	r7, r3, r1, r5
 80117b2:	5dc7      	ldrb	r7, [r0, r7]
 80117b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117b8:	462f      	mov	r7, r5
 80117ba:	42bb      	cmp	r3, r7
 80117bc:	460d      	mov	r5, r1
 80117be:	d9f4      	bls.n	80117aa <_printf_i+0x112>
 80117c0:	2b08      	cmp	r3, #8
 80117c2:	d10b      	bne.n	80117dc <_printf_i+0x144>
 80117c4:	6823      	ldr	r3, [r4, #0]
 80117c6:	07df      	lsls	r7, r3, #31
 80117c8:	d508      	bpl.n	80117dc <_printf_i+0x144>
 80117ca:	6923      	ldr	r3, [r4, #16]
 80117cc:	6861      	ldr	r1, [r4, #4]
 80117ce:	4299      	cmp	r1, r3
 80117d0:	bfde      	ittt	le
 80117d2:	2330      	movle	r3, #48	@ 0x30
 80117d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80117d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80117dc:	1b92      	subs	r2, r2, r6
 80117de:	6122      	str	r2, [r4, #16]
 80117e0:	f8cd a000 	str.w	sl, [sp]
 80117e4:	464b      	mov	r3, r9
 80117e6:	aa03      	add	r2, sp, #12
 80117e8:	4621      	mov	r1, r4
 80117ea:	4640      	mov	r0, r8
 80117ec:	f7ff fee6 	bl	80115bc <_printf_common>
 80117f0:	3001      	adds	r0, #1
 80117f2:	d14a      	bne.n	801188a <_printf_i+0x1f2>
 80117f4:	f04f 30ff 	mov.w	r0, #4294967295
 80117f8:	b004      	add	sp, #16
 80117fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117fe:	6823      	ldr	r3, [r4, #0]
 8011800:	f043 0320 	orr.w	r3, r3, #32
 8011804:	6023      	str	r3, [r4, #0]
 8011806:	4833      	ldr	r0, [pc, #204]	@ (80118d4 <_printf_i+0x23c>)
 8011808:	2778      	movs	r7, #120	@ 0x78
 801180a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801180e:	6823      	ldr	r3, [r4, #0]
 8011810:	6831      	ldr	r1, [r6, #0]
 8011812:	061f      	lsls	r7, r3, #24
 8011814:	f851 5b04 	ldr.w	r5, [r1], #4
 8011818:	d402      	bmi.n	8011820 <_printf_i+0x188>
 801181a:	065f      	lsls	r7, r3, #25
 801181c:	bf48      	it	mi
 801181e:	b2ad      	uxthmi	r5, r5
 8011820:	6031      	str	r1, [r6, #0]
 8011822:	07d9      	lsls	r1, r3, #31
 8011824:	bf44      	itt	mi
 8011826:	f043 0320 	orrmi.w	r3, r3, #32
 801182a:	6023      	strmi	r3, [r4, #0]
 801182c:	b11d      	cbz	r5, 8011836 <_printf_i+0x19e>
 801182e:	2310      	movs	r3, #16
 8011830:	e7ac      	b.n	801178c <_printf_i+0xf4>
 8011832:	4827      	ldr	r0, [pc, #156]	@ (80118d0 <_printf_i+0x238>)
 8011834:	e7e9      	b.n	801180a <_printf_i+0x172>
 8011836:	6823      	ldr	r3, [r4, #0]
 8011838:	f023 0320 	bic.w	r3, r3, #32
 801183c:	6023      	str	r3, [r4, #0]
 801183e:	e7f6      	b.n	801182e <_printf_i+0x196>
 8011840:	4616      	mov	r6, r2
 8011842:	e7bd      	b.n	80117c0 <_printf_i+0x128>
 8011844:	6833      	ldr	r3, [r6, #0]
 8011846:	6825      	ldr	r5, [r4, #0]
 8011848:	6961      	ldr	r1, [r4, #20]
 801184a:	1d18      	adds	r0, r3, #4
 801184c:	6030      	str	r0, [r6, #0]
 801184e:	062e      	lsls	r6, r5, #24
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	d501      	bpl.n	8011858 <_printf_i+0x1c0>
 8011854:	6019      	str	r1, [r3, #0]
 8011856:	e002      	b.n	801185e <_printf_i+0x1c6>
 8011858:	0668      	lsls	r0, r5, #25
 801185a:	d5fb      	bpl.n	8011854 <_printf_i+0x1bc>
 801185c:	8019      	strh	r1, [r3, #0]
 801185e:	2300      	movs	r3, #0
 8011860:	6123      	str	r3, [r4, #16]
 8011862:	4616      	mov	r6, r2
 8011864:	e7bc      	b.n	80117e0 <_printf_i+0x148>
 8011866:	6833      	ldr	r3, [r6, #0]
 8011868:	1d1a      	adds	r2, r3, #4
 801186a:	6032      	str	r2, [r6, #0]
 801186c:	681e      	ldr	r6, [r3, #0]
 801186e:	6862      	ldr	r2, [r4, #4]
 8011870:	2100      	movs	r1, #0
 8011872:	4630      	mov	r0, r6
 8011874:	f7ee fd4c 	bl	8000310 <memchr>
 8011878:	b108      	cbz	r0, 801187e <_printf_i+0x1e6>
 801187a:	1b80      	subs	r0, r0, r6
 801187c:	6060      	str	r0, [r4, #4]
 801187e:	6863      	ldr	r3, [r4, #4]
 8011880:	6123      	str	r3, [r4, #16]
 8011882:	2300      	movs	r3, #0
 8011884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011888:	e7aa      	b.n	80117e0 <_printf_i+0x148>
 801188a:	6923      	ldr	r3, [r4, #16]
 801188c:	4632      	mov	r2, r6
 801188e:	4649      	mov	r1, r9
 8011890:	4640      	mov	r0, r8
 8011892:	47d0      	blx	sl
 8011894:	3001      	adds	r0, #1
 8011896:	d0ad      	beq.n	80117f4 <_printf_i+0x15c>
 8011898:	6823      	ldr	r3, [r4, #0]
 801189a:	079b      	lsls	r3, r3, #30
 801189c:	d413      	bmi.n	80118c6 <_printf_i+0x22e>
 801189e:	68e0      	ldr	r0, [r4, #12]
 80118a0:	9b03      	ldr	r3, [sp, #12]
 80118a2:	4298      	cmp	r0, r3
 80118a4:	bfb8      	it	lt
 80118a6:	4618      	movlt	r0, r3
 80118a8:	e7a6      	b.n	80117f8 <_printf_i+0x160>
 80118aa:	2301      	movs	r3, #1
 80118ac:	4632      	mov	r2, r6
 80118ae:	4649      	mov	r1, r9
 80118b0:	4640      	mov	r0, r8
 80118b2:	47d0      	blx	sl
 80118b4:	3001      	adds	r0, #1
 80118b6:	d09d      	beq.n	80117f4 <_printf_i+0x15c>
 80118b8:	3501      	adds	r5, #1
 80118ba:	68e3      	ldr	r3, [r4, #12]
 80118bc:	9903      	ldr	r1, [sp, #12]
 80118be:	1a5b      	subs	r3, r3, r1
 80118c0:	42ab      	cmp	r3, r5
 80118c2:	dcf2      	bgt.n	80118aa <_printf_i+0x212>
 80118c4:	e7eb      	b.n	801189e <_printf_i+0x206>
 80118c6:	2500      	movs	r5, #0
 80118c8:	f104 0619 	add.w	r6, r4, #25
 80118cc:	e7f5      	b.n	80118ba <_printf_i+0x222>
 80118ce:	bf00      	nop
 80118d0:	08013dde 	.word	0x08013dde
 80118d4:	08013def 	.word	0x08013def

080118d8 <std>:
 80118d8:	2300      	movs	r3, #0
 80118da:	b510      	push	{r4, lr}
 80118dc:	4604      	mov	r4, r0
 80118de:	e9c0 3300 	strd	r3, r3, [r0]
 80118e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80118e6:	6083      	str	r3, [r0, #8]
 80118e8:	8181      	strh	r1, [r0, #12]
 80118ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80118ec:	81c2      	strh	r2, [r0, #14]
 80118ee:	6183      	str	r3, [r0, #24]
 80118f0:	4619      	mov	r1, r3
 80118f2:	2208      	movs	r2, #8
 80118f4:	305c      	adds	r0, #92	@ 0x5c
 80118f6:	f000 f928 	bl	8011b4a <memset>
 80118fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011930 <std+0x58>)
 80118fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80118fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011934 <std+0x5c>)
 8011900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011902:	4b0d      	ldr	r3, [pc, #52]	@ (8011938 <std+0x60>)
 8011904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011906:	4b0d      	ldr	r3, [pc, #52]	@ (801193c <std+0x64>)
 8011908:	6323      	str	r3, [r4, #48]	@ 0x30
 801190a:	4b0d      	ldr	r3, [pc, #52]	@ (8011940 <std+0x68>)
 801190c:	6224      	str	r4, [r4, #32]
 801190e:	429c      	cmp	r4, r3
 8011910:	d006      	beq.n	8011920 <std+0x48>
 8011912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011916:	4294      	cmp	r4, r2
 8011918:	d002      	beq.n	8011920 <std+0x48>
 801191a:	33d0      	adds	r3, #208	@ 0xd0
 801191c:	429c      	cmp	r4, r3
 801191e:	d105      	bne.n	801192c <std+0x54>
 8011920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011928:	f000 b9e2 	b.w	8011cf0 <__retarget_lock_init_recursive>
 801192c:	bd10      	pop	{r4, pc}
 801192e:	bf00      	nop
 8011930:	08011ac5 	.word	0x08011ac5
 8011934:	08011ae7 	.word	0x08011ae7
 8011938:	08011b1f 	.word	0x08011b1f
 801193c:	08011b43 	.word	0x08011b43
 8011940:	240055a4 	.word	0x240055a4

08011944 <stdio_exit_handler>:
 8011944:	4a02      	ldr	r2, [pc, #8]	@ (8011950 <stdio_exit_handler+0xc>)
 8011946:	4903      	ldr	r1, [pc, #12]	@ (8011954 <stdio_exit_handler+0x10>)
 8011948:	4803      	ldr	r0, [pc, #12]	@ (8011958 <stdio_exit_handler+0x14>)
 801194a:	f000 b869 	b.w	8011a20 <_fwalk_sglue>
 801194e:	bf00      	nop
 8011950:	24000018 	.word	0x24000018
 8011954:	08013591 	.word	0x08013591
 8011958:	24000028 	.word	0x24000028

0801195c <cleanup_stdio>:
 801195c:	6841      	ldr	r1, [r0, #4]
 801195e:	4b0c      	ldr	r3, [pc, #48]	@ (8011990 <cleanup_stdio+0x34>)
 8011960:	4299      	cmp	r1, r3
 8011962:	b510      	push	{r4, lr}
 8011964:	4604      	mov	r4, r0
 8011966:	d001      	beq.n	801196c <cleanup_stdio+0x10>
 8011968:	f001 fe12 	bl	8013590 <_fflush_r>
 801196c:	68a1      	ldr	r1, [r4, #8]
 801196e:	4b09      	ldr	r3, [pc, #36]	@ (8011994 <cleanup_stdio+0x38>)
 8011970:	4299      	cmp	r1, r3
 8011972:	d002      	beq.n	801197a <cleanup_stdio+0x1e>
 8011974:	4620      	mov	r0, r4
 8011976:	f001 fe0b 	bl	8013590 <_fflush_r>
 801197a:	68e1      	ldr	r1, [r4, #12]
 801197c:	4b06      	ldr	r3, [pc, #24]	@ (8011998 <cleanup_stdio+0x3c>)
 801197e:	4299      	cmp	r1, r3
 8011980:	d004      	beq.n	801198c <cleanup_stdio+0x30>
 8011982:	4620      	mov	r0, r4
 8011984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011988:	f001 be02 	b.w	8013590 <_fflush_r>
 801198c:	bd10      	pop	{r4, pc}
 801198e:	bf00      	nop
 8011990:	240055a4 	.word	0x240055a4
 8011994:	2400560c 	.word	0x2400560c
 8011998:	24005674 	.word	0x24005674

0801199c <global_stdio_init.part.0>:
 801199c:	b510      	push	{r4, lr}
 801199e:	4b0b      	ldr	r3, [pc, #44]	@ (80119cc <global_stdio_init.part.0+0x30>)
 80119a0:	4c0b      	ldr	r4, [pc, #44]	@ (80119d0 <global_stdio_init.part.0+0x34>)
 80119a2:	4a0c      	ldr	r2, [pc, #48]	@ (80119d4 <global_stdio_init.part.0+0x38>)
 80119a4:	601a      	str	r2, [r3, #0]
 80119a6:	4620      	mov	r0, r4
 80119a8:	2200      	movs	r2, #0
 80119aa:	2104      	movs	r1, #4
 80119ac:	f7ff ff94 	bl	80118d8 <std>
 80119b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80119b4:	2201      	movs	r2, #1
 80119b6:	2109      	movs	r1, #9
 80119b8:	f7ff ff8e 	bl	80118d8 <std>
 80119bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80119c0:	2202      	movs	r2, #2
 80119c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c6:	2112      	movs	r1, #18
 80119c8:	f7ff bf86 	b.w	80118d8 <std>
 80119cc:	240056dc 	.word	0x240056dc
 80119d0:	240055a4 	.word	0x240055a4
 80119d4:	08011945 	.word	0x08011945

080119d8 <__sfp_lock_acquire>:
 80119d8:	4801      	ldr	r0, [pc, #4]	@ (80119e0 <__sfp_lock_acquire+0x8>)
 80119da:	f000 b98a 	b.w	8011cf2 <__retarget_lock_acquire_recursive>
 80119de:	bf00      	nop
 80119e0:	240056e5 	.word	0x240056e5

080119e4 <__sfp_lock_release>:
 80119e4:	4801      	ldr	r0, [pc, #4]	@ (80119ec <__sfp_lock_release+0x8>)
 80119e6:	f000 b985 	b.w	8011cf4 <__retarget_lock_release_recursive>
 80119ea:	bf00      	nop
 80119ec:	240056e5 	.word	0x240056e5

080119f0 <__sinit>:
 80119f0:	b510      	push	{r4, lr}
 80119f2:	4604      	mov	r4, r0
 80119f4:	f7ff fff0 	bl	80119d8 <__sfp_lock_acquire>
 80119f8:	6a23      	ldr	r3, [r4, #32]
 80119fa:	b11b      	cbz	r3, 8011a04 <__sinit+0x14>
 80119fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a00:	f7ff bff0 	b.w	80119e4 <__sfp_lock_release>
 8011a04:	4b04      	ldr	r3, [pc, #16]	@ (8011a18 <__sinit+0x28>)
 8011a06:	6223      	str	r3, [r4, #32]
 8011a08:	4b04      	ldr	r3, [pc, #16]	@ (8011a1c <__sinit+0x2c>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1f5      	bne.n	80119fc <__sinit+0xc>
 8011a10:	f7ff ffc4 	bl	801199c <global_stdio_init.part.0>
 8011a14:	e7f2      	b.n	80119fc <__sinit+0xc>
 8011a16:	bf00      	nop
 8011a18:	0801195d 	.word	0x0801195d
 8011a1c:	240056dc 	.word	0x240056dc

08011a20 <_fwalk_sglue>:
 8011a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a24:	4607      	mov	r7, r0
 8011a26:	4688      	mov	r8, r1
 8011a28:	4614      	mov	r4, r2
 8011a2a:	2600      	movs	r6, #0
 8011a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a30:	f1b9 0901 	subs.w	r9, r9, #1
 8011a34:	d505      	bpl.n	8011a42 <_fwalk_sglue+0x22>
 8011a36:	6824      	ldr	r4, [r4, #0]
 8011a38:	2c00      	cmp	r4, #0
 8011a3a:	d1f7      	bne.n	8011a2c <_fwalk_sglue+0xc>
 8011a3c:	4630      	mov	r0, r6
 8011a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a42:	89ab      	ldrh	r3, [r5, #12]
 8011a44:	2b01      	cmp	r3, #1
 8011a46:	d907      	bls.n	8011a58 <_fwalk_sglue+0x38>
 8011a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a4c:	3301      	adds	r3, #1
 8011a4e:	d003      	beq.n	8011a58 <_fwalk_sglue+0x38>
 8011a50:	4629      	mov	r1, r5
 8011a52:	4638      	mov	r0, r7
 8011a54:	47c0      	blx	r8
 8011a56:	4306      	orrs	r6, r0
 8011a58:	3568      	adds	r5, #104	@ 0x68
 8011a5a:	e7e9      	b.n	8011a30 <_fwalk_sglue+0x10>

08011a5c <sniprintf>:
 8011a5c:	b40c      	push	{r2, r3}
 8011a5e:	b530      	push	{r4, r5, lr}
 8011a60:	4b17      	ldr	r3, [pc, #92]	@ (8011ac0 <sniprintf+0x64>)
 8011a62:	1e0c      	subs	r4, r1, #0
 8011a64:	681d      	ldr	r5, [r3, #0]
 8011a66:	b09d      	sub	sp, #116	@ 0x74
 8011a68:	da08      	bge.n	8011a7c <sniprintf+0x20>
 8011a6a:	238b      	movs	r3, #139	@ 0x8b
 8011a6c:	602b      	str	r3, [r5, #0]
 8011a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8011a72:	b01d      	add	sp, #116	@ 0x74
 8011a74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011a78:	b002      	add	sp, #8
 8011a7a:	4770      	bx	lr
 8011a7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011a80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011a84:	bf14      	ite	ne
 8011a86:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011a8a:	4623      	moveq	r3, r4
 8011a8c:	9304      	str	r3, [sp, #16]
 8011a8e:	9307      	str	r3, [sp, #28]
 8011a90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011a94:	9002      	str	r0, [sp, #8]
 8011a96:	9006      	str	r0, [sp, #24]
 8011a98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011a9c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011a9e:	ab21      	add	r3, sp, #132	@ 0x84
 8011aa0:	a902      	add	r1, sp, #8
 8011aa2:	4628      	mov	r0, r5
 8011aa4:	9301      	str	r3, [sp, #4]
 8011aa6:	f001 fbf3 	bl	8013290 <_svfiprintf_r>
 8011aaa:	1c43      	adds	r3, r0, #1
 8011aac:	bfbc      	itt	lt
 8011aae:	238b      	movlt	r3, #139	@ 0x8b
 8011ab0:	602b      	strlt	r3, [r5, #0]
 8011ab2:	2c00      	cmp	r4, #0
 8011ab4:	d0dd      	beq.n	8011a72 <sniprintf+0x16>
 8011ab6:	9b02      	ldr	r3, [sp, #8]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	701a      	strb	r2, [r3, #0]
 8011abc:	e7d9      	b.n	8011a72 <sniprintf+0x16>
 8011abe:	bf00      	nop
 8011ac0:	24000024 	.word	0x24000024

08011ac4 <__sread>:
 8011ac4:	b510      	push	{r4, lr}
 8011ac6:	460c      	mov	r4, r1
 8011ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011acc:	f000 f8c2 	bl	8011c54 <_read_r>
 8011ad0:	2800      	cmp	r0, #0
 8011ad2:	bfab      	itete	ge
 8011ad4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8011ad8:	181b      	addge	r3, r3, r0
 8011ada:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ade:	bfac      	ite	ge
 8011ae0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ae2:	81a3      	strhlt	r3, [r4, #12]
 8011ae4:	bd10      	pop	{r4, pc}

08011ae6 <__swrite>:
 8011ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aea:	461f      	mov	r7, r3
 8011aec:	898b      	ldrh	r3, [r1, #12]
 8011aee:	05db      	lsls	r3, r3, #23
 8011af0:	4605      	mov	r5, r0
 8011af2:	460c      	mov	r4, r1
 8011af4:	4616      	mov	r6, r2
 8011af6:	d505      	bpl.n	8011b04 <__swrite+0x1e>
 8011af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011afc:	2302      	movs	r3, #2
 8011afe:	2200      	movs	r2, #0
 8011b00:	f000 f896 	bl	8011c30 <_lseek_r>
 8011b04:	89a3      	ldrh	r3, [r4, #12]
 8011b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b0e:	81a3      	strh	r3, [r4, #12]
 8011b10:	4632      	mov	r2, r6
 8011b12:	463b      	mov	r3, r7
 8011b14:	4628      	mov	r0, r5
 8011b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b1a:	f000 b8ad 	b.w	8011c78 <_write_r>

08011b1e <__sseek>:
 8011b1e:	b510      	push	{r4, lr}
 8011b20:	460c      	mov	r4, r1
 8011b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b26:	f000 f883 	bl	8011c30 <_lseek_r>
 8011b2a:	1c43      	adds	r3, r0, #1
 8011b2c:	89a3      	ldrh	r3, [r4, #12]
 8011b2e:	bf15      	itete	ne
 8011b30:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b32:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b36:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b3a:	81a3      	strheq	r3, [r4, #12]
 8011b3c:	bf18      	it	ne
 8011b3e:	81a3      	strhne	r3, [r4, #12]
 8011b40:	bd10      	pop	{r4, pc}

08011b42 <__sclose>:
 8011b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b46:	f000 b80d 	b.w	8011b64 <_close_r>

08011b4a <memset>:
 8011b4a:	4402      	add	r2, r0
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d100      	bne.n	8011b54 <memset+0xa>
 8011b52:	4770      	bx	lr
 8011b54:	f803 1b01 	strb.w	r1, [r3], #1
 8011b58:	e7f9      	b.n	8011b4e <memset+0x4>
	...

08011b5c <_localeconv_r>:
 8011b5c:	4800      	ldr	r0, [pc, #0]	@ (8011b60 <_localeconv_r+0x4>)
 8011b5e:	4770      	bx	lr
 8011b60:	24000164 	.word	0x24000164

08011b64 <_close_r>:
 8011b64:	b538      	push	{r3, r4, r5, lr}
 8011b66:	4d06      	ldr	r5, [pc, #24]	@ (8011b80 <_close_r+0x1c>)
 8011b68:	2300      	movs	r3, #0
 8011b6a:	4604      	mov	r4, r0
 8011b6c:	4608      	mov	r0, r1
 8011b6e:	602b      	str	r3, [r5, #0]
 8011b70:	f7f0 ff00 	bl	8002974 <_close>
 8011b74:	1c43      	adds	r3, r0, #1
 8011b76:	d102      	bne.n	8011b7e <_close_r+0x1a>
 8011b78:	682b      	ldr	r3, [r5, #0]
 8011b7a:	b103      	cbz	r3, 8011b7e <_close_r+0x1a>
 8011b7c:	6023      	str	r3, [r4, #0]
 8011b7e:	bd38      	pop	{r3, r4, r5, pc}
 8011b80:	240056e0 	.word	0x240056e0

08011b84 <_reclaim_reent>:
 8011b84:	4b29      	ldr	r3, [pc, #164]	@ (8011c2c <_reclaim_reent+0xa8>)
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	4283      	cmp	r3, r0
 8011b8a:	b570      	push	{r4, r5, r6, lr}
 8011b8c:	4604      	mov	r4, r0
 8011b8e:	d04b      	beq.n	8011c28 <_reclaim_reent+0xa4>
 8011b90:	69c3      	ldr	r3, [r0, #28]
 8011b92:	b1ab      	cbz	r3, 8011bc0 <_reclaim_reent+0x3c>
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	b16b      	cbz	r3, 8011bb4 <_reclaim_reent+0x30>
 8011b98:	2500      	movs	r5, #0
 8011b9a:	69e3      	ldr	r3, [r4, #28]
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	5959      	ldr	r1, [r3, r5]
 8011ba0:	2900      	cmp	r1, #0
 8011ba2:	d13b      	bne.n	8011c1c <_reclaim_reent+0x98>
 8011ba4:	3504      	adds	r5, #4
 8011ba6:	2d80      	cmp	r5, #128	@ 0x80
 8011ba8:	d1f7      	bne.n	8011b9a <_reclaim_reent+0x16>
 8011baa:	69e3      	ldr	r3, [r4, #28]
 8011bac:	4620      	mov	r0, r4
 8011bae:	68d9      	ldr	r1, [r3, #12]
 8011bb0:	f000 fe90 	bl	80128d4 <_free_r>
 8011bb4:	69e3      	ldr	r3, [r4, #28]
 8011bb6:	6819      	ldr	r1, [r3, #0]
 8011bb8:	b111      	cbz	r1, 8011bc0 <_reclaim_reent+0x3c>
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f000 fe8a 	bl	80128d4 <_free_r>
 8011bc0:	6961      	ldr	r1, [r4, #20]
 8011bc2:	b111      	cbz	r1, 8011bca <_reclaim_reent+0x46>
 8011bc4:	4620      	mov	r0, r4
 8011bc6:	f000 fe85 	bl	80128d4 <_free_r>
 8011bca:	69e1      	ldr	r1, [r4, #28]
 8011bcc:	b111      	cbz	r1, 8011bd4 <_reclaim_reent+0x50>
 8011bce:	4620      	mov	r0, r4
 8011bd0:	f000 fe80 	bl	80128d4 <_free_r>
 8011bd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011bd6:	b111      	cbz	r1, 8011bde <_reclaim_reent+0x5a>
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fe7b 	bl	80128d4 <_free_r>
 8011bde:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011be0:	b111      	cbz	r1, 8011be8 <_reclaim_reent+0x64>
 8011be2:	4620      	mov	r0, r4
 8011be4:	f000 fe76 	bl	80128d4 <_free_r>
 8011be8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011bea:	b111      	cbz	r1, 8011bf2 <_reclaim_reent+0x6e>
 8011bec:	4620      	mov	r0, r4
 8011bee:	f000 fe71 	bl	80128d4 <_free_r>
 8011bf2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011bf4:	b111      	cbz	r1, 8011bfc <_reclaim_reent+0x78>
 8011bf6:	4620      	mov	r0, r4
 8011bf8:	f000 fe6c 	bl	80128d4 <_free_r>
 8011bfc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011bfe:	b111      	cbz	r1, 8011c06 <_reclaim_reent+0x82>
 8011c00:	4620      	mov	r0, r4
 8011c02:	f000 fe67 	bl	80128d4 <_free_r>
 8011c06:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011c08:	b111      	cbz	r1, 8011c10 <_reclaim_reent+0x8c>
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	f000 fe62 	bl	80128d4 <_free_r>
 8011c10:	6a23      	ldr	r3, [r4, #32]
 8011c12:	b14b      	cbz	r3, 8011c28 <_reclaim_reent+0xa4>
 8011c14:	4620      	mov	r0, r4
 8011c16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c1a:	4718      	bx	r3
 8011c1c:	680e      	ldr	r6, [r1, #0]
 8011c1e:	4620      	mov	r0, r4
 8011c20:	f000 fe58 	bl	80128d4 <_free_r>
 8011c24:	4631      	mov	r1, r6
 8011c26:	e7bb      	b.n	8011ba0 <_reclaim_reent+0x1c>
 8011c28:	bd70      	pop	{r4, r5, r6, pc}
 8011c2a:	bf00      	nop
 8011c2c:	24000024 	.word	0x24000024

08011c30 <_lseek_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d07      	ldr	r5, [pc, #28]	@ (8011c50 <_lseek_r+0x20>)
 8011c34:	4604      	mov	r4, r0
 8011c36:	4608      	mov	r0, r1
 8011c38:	4611      	mov	r1, r2
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	602a      	str	r2, [r5, #0]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f7f0 febf 	bl	80029c2 <_lseek>
 8011c44:	1c43      	adds	r3, r0, #1
 8011c46:	d102      	bne.n	8011c4e <_lseek_r+0x1e>
 8011c48:	682b      	ldr	r3, [r5, #0]
 8011c4a:	b103      	cbz	r3, 8011c4e <_lseek_r+0x1e>
 8011c4c:	6023      	str	r3, [r4, #0]
 8011c4e:	bd38      	pop	{r3, r4, r5, pc}
 8011c50:	240056e0 	.word	0x240056e0

08011c54 <_read_r>:
 8011c54:	b538      	push	{r3, r4, r5, lr}
 8011c56:	4d07      	ldr	r5, [pc, #28]	@ (8011c74 <_read_r+0x20>)
 8011c58:	4604      	mov	r4, r0
 8011c5a:	4608      	mov	r0, r1
 8011c5c:	4611      	mov	r1, r2
 8011c5e:	2200      	movs	r2, #0
 8011c60:	602a      	str	r2, [r5, #0]
 8011c62:	461a      	mov	r2, r3
 8011c64:	f7f0 fe4d 	bl	8002902 <_read>
 8011c68:	1c43      	adds	r3, r0, #1
 8011c6a:	d102      	bne.n	8011c72 <_read_r+0x1e>
 8011c6c:	682b      	ldr	r3, [r5, #0]
 8011c6e:	b103      	cbz	r3, 8011c72 <_read_r+0x1e>
 8011c70:	6023      	str	r3, [r4, #0]
 8011c72:	bd38      	pop	{r3, r4, r5, pc}
 8011c74:	240056e0 	.word	0x240056e0

08011c78 <_write_r>:
 8011c78:	b538      	push	{r3, r4, r5, lr}
 8011c7a:	4d07      	ldr	r5, [pc, #28]	@ (8011c98 <_write_r+0x20>)
 8011c7c:	4604      	mov	r4, r0
 8011c7e:	4608      	mov	r0, r1
 8011c80:	4611      	mov	r1, r2
 8011c82:	2200      	movs	r2, #0
 8011c84:	602a      	str	r2, [r5, #0]
 8011c86:	461a      	mov	r2, r3
 8011c88:	f7f0 fe58 	bl	800293c <_write>
 8011c8c:	1c43      	adds	r3, r0, #1
 8011c8e:	d102      	bne.n	8011c96 <_write_r+0x1e>
 8011c90:	682b      	ldr	r3, [r5, #0]
 8011c92:	b103      	cbz	r3, 8011c96 <_write_r+0x1e>
 8011c94:	6023      	str	r3, [r4, #0]
 8011c96:	bd38      	pop	{r3, r4, r5, pc}
 8011c98:	240056e0 	.word	0x240056e0

08011c9c <__errno>:
 8011c9c:	4b01      	ldr	r3, [pc, #4]	@ (8011ca4 <__errno+0x8>)
 8011c9e:	6818      	ldr	r0, [r3, #0]
 8011ca0:	4770      	bx	lr
 8011ca2:	bf00      	nop
 8011ca4:	24000024 	.word	0x24000024

08011ca8 <__libc_init_array>:
 8011ca8:	b570      	push	{r4, r5, r6, lr}
 8011caa:	4d0d      	ldr	r5, [pc, #52]	@ (8011ce0 <__libc_init_array+0x38>)
 8011cac:	4c0d      	ldr	r4, [pc, #52]	@ (8011ce4 <__libc_init_array+0x3c>)
 8011cae:	1b64      	subs	r4, r4, r5
 8011cb0:	10a4      	asrs	r4, r4, #2
 8011cb2:	2600      	movs	r6, #0
 8011cb4:	42a6      	cmp	r6, r4
 8011cb6:	d109      	bne.n	8011ccc <__libc_init_array+0x24>
 8011cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8011ce8 <__libc_init_array+0x40>)
 8011cba:	4c0c      	ldr	r4, [pc, #48]	@ (8011cec <__libc_init_array+0x44>)
 8011cbc:	f001 fff8 	bl	8013cb0 <_init>
 8011cc0:	1b64      	subs	r4, r4, r5
 8011cc2:	10a4      	asrs	r4, r4, #2
 8011cc4:	2600      	movs	r6, #0
 8011cc6:	42a6      	cmp	r6, r4
 8011cc8:	d105      	bne.n	8011cd6 <__libc_init_array+0x2e>
 8011cca:	bd70      	pop	{r4, r5, r6, pc}
 8011ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cd0:	4798      	blx	r3
 8011cd2:	3601      	adds	r6, #1
 8011cd4:	e7ee      	b.n	8011cb4 <__libc_init_array+0xc>
 8011cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cda:	4798      	blx	r3
 8011cdc:	3601      	adds	r6, #1
 8011cde:	e7f2      	b.n	8011cc6 <__libc_init_array+0x1e>
 8011ce0:	08014148 	.word	0x08014148
 8011ce4:	08014148 	.word	0x08014148
 8011ce8:	08014148 	.word	0x08014148
 8011cec:	0801414c 	.word	0x0801414c

08011cf0 <__retarget_lock_init_recursive>:
 8011cf0:	4770      	bx	lr

08011cf2 <__retarget_lock_acquire_recursive>:
 8011cf2:	4770      	bx	lr

08011cf4 <__retarget_lock_release_recursive>:
 8011cf4:	4770      	bx	lr

08011cf6 <memcpy>:
 8011cf6:	440a      	add	r2, r1
 8011cf8:	4291      	cmp	r1, r2
 8011cfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cfe:	d100      	bne.n	8011d02 <memcpy+0xc>
 8011d00:	4770      	bx	lr
 8011d02:	b510      	push	{r4, lr}
 8011d04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d0c:	4291      	cmp	r1, r2
 8011d0e:	d1f9      	bne.n	8011d04 <memcpy+0xe>
 8011d10:	bd10      	pop	{r4, pc}

08011d12 <quorem>:
 8011d12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d16:	6903      	ldr	r3, [r0, #16]
 8011d18:	690c      	ldr	r4, [r1, #16]
 8011d1a:	42a3      	cmp	r3, r4
 8011d1c:	4607      	mov	r7, r0
 8011d1e:	db7e      	blt.n	8011e1e <quorem+0x10c>
 8011d20:	3c01      	subs	r4, #1
 8011d22:	f101 0814 	add.w	r8, r1, #20
 8011d26:	00a3      	lsls	r3, r4, #2
 8011d28:	f100 0514 	add.w	r5, r0, #20
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d32:	9301      	str	r3, [sp, #4]
 8011d34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d3c:	3301      	adds	r3, #1
 8011d3e:	429a      	cmp	r2, r3
 8011d40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d44:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d48:	d32e      	bcc.n	8011da8 <quorem+0x96>
 8011d4a:	f04f 0a00 	mov.w	sl, #0
 8011d4e:	46c4      	mov	ip, r8
 8011d50:	46ae      	mov	lr, r5
 8011d52:	46d3      	mov	fp, sl
 8011d54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d58:	b298      	uxth	r0, r3
 8011d5a:	fb06 a000 	mla	r0, r6, r0, sl
 8011d5e:	0c02      	lsrs	r2, r0, #16
 8011d60:	0c1b      	lsrs	r3, r3, #16
 8011d62:	fb06 2303 	mla	r3, r6, r3, r2
 8011d66:	f8de 2000 	ldr.w	r2, [lr]
 8011d6a:	b280      	uxth	r0, r0
 8011d6c:	b292      	uxth	r2, r2
 8011d6e:	1a12      	subs	r2, r2, r0
 8011d70:	445a      	add	r2, fp
 8011d72:	f8de 0000 	ldr.w	r0, [lr]
 8011d76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011d80:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011d84:	b292      	uxth	r2, r2
 8011d86:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011d8a:	45e1      	cmp	r9, ip
 8011d8c:	f84e 2b04 	str.w	r2, [lr], #4
 8011d90:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011d94:	d2de      	bcs.n	8011d54 <quorem+0x42>
 8011d96:	9b00      	ldr	r3, [sp, #0]
 8011d98:	58eb      	ldr	r3, [r5, r3]
 8011d9a:	b92b      	cbnz	r3, 8011da8 <quorem+0x96>
 8011d9c:	9b01      	ldr	r3, [sp, #4]
 8011d9e:	3b04      	subs	r3, #4
 8011da0:	429d      	cmp	r5, r3
 8011da2:	461a      	mov	r2, r3
 8011da4:	d32f      	bcc.n	8011e06 <quorem+0xf4>
 8011da6:	613c      	str	r4, [r7, #16]
 8011da8:	4638      	mov	r0, r7
 8011daa:	f001 f90d 	bl	8012fc8 <__mcmp>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	db25      	blt.n	8011dfe <quorem+0xec>
 8011db2:	4629      	mov	r1, r5
 8011db4:	2000      	movs	r0, #0
 8011db6:	f858 2b04 	ldr.w	r2, [r8], #4
 8011dba:	f8d1 c000 	ldr.w	ip, [r1]
 8011dbe:	fa1f fe82 	uxth.w	lr, r2
 8011dc2:	fa1f f38c 	uxth.w	r3, ip
 8011dc6:	eba3 030e 	sub.w	r3, r3, lr
 8011dca:	4403      	add	r3, r0
 8011dcc:	0c12      	lsrs	r2, r2, #16
 8011dce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011dd2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011dd6:	b29b      	uxth	r3, r3
 8011dd8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ddc:	45c1      	cmp	r9, r8
 8011dde:	f841 3b04 	str.w	r3, [r1], #4
 8011de2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011de6:	d2e6      	bcs.n	8011db6 <quorem+0xa4>
 8011de8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011dec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011df0:	b922      	cbnz	r2, 8011dfc <quorem+0xea>
 8011df2:	3b04      	subs	r3, #4
 8011df4:	429d      	cmp	r5, r3
 8011df6:	461a      	mov	r2, r3
 8011df8:	d30b      	bcc.n	8011e12 <quorem+0x100>
 8011dfa:	613c      	str	r4, [r7, #16]
 8011dfc:	3601      	adds	r6, #1
 8011dfe:	4630      	mov	r0, r6
 8011e00:	b003      	add	sp, #12
 8011e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e06:	6812      	ldr	r2, [r2, #0]
 8011e08:	3b04      	subs	r3, #4
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d1cb      	bne.n	8011da6 <quorem+0x94>
 8011e0e:	3c01      	subs	r4, #1
 8011e10:	e7c6      	b.n	8011da0 <quorem+0x8e>
 8011e12:	6812      	ldr	r2, [r2, #0]
 8011e14:	3b04      	subs	r3, #4
 8011e16:	2a00      	cmp	r2, #0
 8011e18:	d1ef      	bne.n	8011dfa <quorem+0xe8>
 8011e1a:	3c01      	subs	r4, #1
 8011e1c:	e7ea      	b.n	8011df4 <quorem+0xe2>
 8011e1e:	2000      	movs	r0, #0
 8011e20:	e7ee      	b.n	8011e00 <quorem+0xee>
 8011e22:	0000      	movs	r0, r0
 8011e24:	0000      	movs	r0, r0
	...

08011e28 <_dtoa_r>:
 8011e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e2c:	ed2d 8b02 	vpush	{d8}
 8011e30:	69c7      	ldr	r7, [r0, #28]
 8011e32:	b091      	sub	sp, #68	@ 0x44
 8011e34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e38:	ec55 4b10 	vmov	r4, r5, d0
 8011e3c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011e3e:	9107      	str	r1, [sp, #28]
 8011e40:	4681      	mov	r9, r0
 8011e42:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e44:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e46:	b97f      	cbnz	r7, 8011e68 <_dtoa_r+0x40>
 8011e48:	2010      	movs	r0, #16
 8011e4a:	f000 fd8d 	bl	8012968 <malloc>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	f8c9 001c 	str.w	r0, [r9, #28]
 8011e54:	b920      	cbnz	r0, 8011e60 <_dtoa_r+0x38>
 8011e56:	4ba0      	ldr	r3, [pc, #640]	@ (80120d8 <_dtoa_r+0x2b0>)
 8011e58:	21ef      	movs	r1, #239	@ 0xef
 8011e5a:	48a0      	ldr	r0, [pc, #640]	@ (80120dc <_dtoa_r+0x2b4>)
 8011e5c:	f001 fbea 	bl	8013634 <__assert_func>
 8011e60:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011e64:	6007      	str	r7, [r0, #0]
 8011e66:	60c7      	str	r7, [r0, #12]
 8011e68:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011e6c:	6819      	ldr	r1, [r3, #0]
 8011e6e:	b159      	cbz	r1, 8011e88 <_dtoa_r+0x60>
 8011e70:	685a      	ldr	r2, [r3, #4]
 8011e72:	604a      	str	r2, [r1, #4]
 8011e74:	2301      	movs	r3, #1
 8011e76:	4093      	lsls	r3, r2
 8011e78:	608b      	str	r3, [r1, #8]
 8011e7a:	4648      	mov	r0, r9
 8011e7c:	f000 fe6a 	bl	8012b54 <_Bfree>
 8011e80:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011e84:	2200      	movs	r2, #0
 8011e86:	601a      	str	r2, [r3, #0]
 8011e88:	1e2b      	subs	r3, r5, #0
 8011e8a:	bfbb      	ittet	lt
 8011e8c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011e90:	9303      	strlt	r3, [sp, #12]
 8011e92:	2300      	movge	r3, #0
 8011e94:	2201      	movlt	r2, #1
 8011e96:	bfac      	ite	ge
 8011e98:	6033      	strge	r3, [r6, #0]
 8011e9a:	6032      	strlt	r2, [r6, #0]
 8011e9c:	4b90      	ldr	r3, [pc, #576]	@ (80120e0 <_dtoa_r+0x2b8>)
 8011e9e:	9e03      	ldr	r6, [sp, #12]
 8011ea0:	43b3      	bics	r3, r6
 8011ea2:	d110      	bne.n	8011ec6 <_dtoa_r+0x9e>
 8011ea4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ea6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011eaa:	6013      	str	r3, [r2, #0]
 8011eac:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011eb0:	4323      	orrs	r3, r4
 8011eb2:	f000 84de 	beq.w	8012872 <_dtoa_r+0xa4a>
 8011eb6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011eb8:	4f8a      	ldr	r7, [pc, #552]	@ (80120e4 <_dtoa_r+0x2bc>)
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	f000 84e0 	beq.w	8012880 <_dtoa_r+0xa58>
 8011ec0:	1cfb      	adds	r3, r7, #3
 8011ec2:	f000 bcdb 	b.w	801287c <_dtoa_r+0xa54>
 8011ec6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011eca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed2:	d10a      	bne.n	8011eea <_dtoa_r+0xc2>
 8011ed4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011edc:	b113      	cbz	r3, 8011ee4 <_dtoa_r+0xbc>
 8011ede:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011ee0:	4b81      	ldr	r3, [pc, #516]	@ (80120e8 <_dtoa_r+0x2c0>)
 8011ee2:	6013      	str	r3, [r2, #0]
 8011ee4:	4f81      	ldr	r7, [pc, #516]	@ (80120ec <_dtoa_r+0x2c4>)
 8011ee6:	f000 bccb 	b.w	8012880 <_dtoa_r+0xa58>
 8011eea:	aa0e      	add	r2, sp, #56	@ 0x38
 8011eec:	a90f      	add	r1, sp, #60	@ 0x3c
 8011eee:	4648      	mov	r0, r9
 8011ef0:	eeb0 0b48 	vmov.f64	d0, d8
 8011ef4:	f001 f918 	bl	8013128 <__d2b>
 8011ef8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011efc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011efe:	9001      	str	r0, [sp, #4]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d045      	beq.n	8011f90 <_dtoa_r+0x168>
 8011f04:	eeb0 7b48 	vmov.f64	d7, d8
 8011f08:	ee18 1a90 	vmov	r1, s17
 8011f0c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011f10:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011f14:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011f18:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011f1c:	2500      	movs	r5, #0
 8011f1e:	ee07 1a90 	vmov	s15, r1
 8011f22:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011f26:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80120c0 <_dtoa_r+0x298>
 8011f2a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f2e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80120c8 <_dtoa_r+0x2a0>
 8011f32:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f36:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80120d0 <_dtoa_r+0x2a8>
 8011f3a:	ee07 3a90 	vmov	s15, r3
 8011f3e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011f42:	eeb0 7b46 	vmov.f64	d7, d6
 8011f46:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011f4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011f4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f56:	ee16 8a90 	vmov	r8, s13
 8011f5a:	d508      	bpl.n	8011f6e <_dtoa_r+0x146>
 8011f5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011f60:	eeb4 6b47 	vcmp.f64	d6, d7
 8011f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f68:	bf18      	it	ne
 8011f6a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8011f6e:	f1b8 0f16 	cmp.w	r8, #22
 8011f72:	d82b      	bhi.n	8011fcc <_dtoa_r+0x1a4>
 8011f74:	495e      	ldr	r1, [pc, #376]	@ (80120f0 <_dtoa_r+0x2c8>)
 8011f76:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011f7a:	ed91 7b00 	vldr	d7, [r1]
 8011f7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f86:	d501      	bpl.n	8011f8c <_dtoa_r+0x164>
 8011f88:	f108 38ff 	add.w	r8, r8, #4294967295
 8011f8c:	2100      	movs	r1, #0
 8011f8e:	e01e      	b.n	8011fce <_dtoa_r+0x1a6>
 8011f90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011f92:	4413      	add	r3, r2
 8011f94:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011f98:	2920      	cmp	r1, #32
 8011f9a:	bfc1      	itttt	gt
 8011f9c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011fa0:	408e      	lslgt	r6, r1
 8011fa2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011fa6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011faa:	bfd6      	itet	le
 8011fac:	f1c1 0120 	rsble	r1, r1, #32
 8011fb0:	4331      	orrgt	r1, r6
 8011fb2:	fa04 f101 	lslle.w	r1, r4, r1
 8011fb6:	ee07 1a90 	vmov	s15, r1
 8011fba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011fbe:	3b01      	subs	r3, #1
 8011fc0:	ee17 1a90 	vmov	r1, s15
 8011fc4:	2501      	movs	r5, #1
 8011fc6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011fca:	e7a8      	b.n	8011f1e <_dtoa_r+0xf6>
 8011fcc:	2101      	movs	r1, #1
 8011fce:	1ad2      	subs	r2, r2, r3
 8011fd0:	1e53      	subs	r3, r2, #1
 8011fd2:	9306      	str	r3, [sp, #24]
 8011fd4:	bf45      	ittet	mi
 8011fd6:	f1c2 0301 	rsbmi	r3, r2, #1
 8011fda:	9305      	strmi	r3, [sp, #20]
 8011fdc:	2300      	movpl	r3, #0
 8011fde:	2300      	movmi	r3, #0
 8011fe0:	bf4c      	ite	mi
 8011fe2:	9306      	strmi	r3, [sp, #24]
 8011fe4:	9305      	strpl	r3, [sp, #20]
 8011fe6:	f1b8 0f00 	cmp.w	r8, #0
 8011fea:	910c      	str	r1, [sp, #48]	@ 0x30
 8011fec:	db18      	blt.n	8012020 <_dtoa_r+0x1f8>
 8011fee:	9b06      	ldr	r3, [sp, #24]
 8011ff0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8011ff4:	4443      	add	r3, r8
 8011ff6:	9306      	str	r3, [sp, #24]
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	9a07      	ldr	r2, [sp, #28]
 8011ffc:	2a09      	cmp	r2, #9
 8011ffe:	d849      	bhi.n	8012094 <_dtoa_r+0x26c>
 8012000:	2a05      	cmp	r2, #5
 8012002:	bfc4      	itt	gt
 8012004:	3a04      	subgt	r2, #4
 8012006:	9207      	strgt	r2, [sp, #28]
 8012008:	9a07      	ldr	r2, [sp, #28]
 801200a:	f1a2 0202 	sub.w	r2, r2, #2
 801200e:	bfcc      	ite	gt
 8012010:	2400      	movgt	r4, #0
 8012012:	2401      	movle	r4, #1
 8012014:	2a03      	cmp	r2, #3
 8012016:	d848      	bhi.n	80120aa <_dtoa_r+0x282>
 8012018:	e8df f002 	tbb	[pc, r2]
 801201c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012020:	9b05      	ldr	r3, [sp, #20]
 8012022:	2200      	movs	r2, #0
 8012024:	eba3 0308 	sub.w	r3, r3, r8
 8012028:	9305      	str	r3, [sp, #20]
 801202a:	920a      	str	r2, [sp, #40]	@ 0x28
 801202c:	f1c8 0300 	rsb	r3, r8, #0
 8012030:	e7e3      	b.n	8011ffa <_dtoa_r+0x1d2>
 8012032:	2200      	movs	r2, #0
 8012034:	9208      	str	r2, [sp, #32]
 8012036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012038:	2a00      	cmp	r2, #0
 801203a:	dc39      	bgt.n	80120b0 <_dtoa_r+0x288>
 801203c:	f04f 0b01 	mov.w	fp, #1
 8012040:	46da      	mov	sl, fp
 8012042:	465a      	mov	r2, fp
 8012044:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012048:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801204c:	2100      	movs	r1, #0
 801204e:	2004      	movs	r0, #4
 8012050:	f100 0614 	add.w	r6, r0, #20
 8012054:	4296      	cmp	r6, r2
 8012056:	d930      	bls.n	80120ba <_dtoa_r+0x292>
 8012058:	6079      	str	r1, [r7, #4]
 801205a:	4648      	mov	r0, r9
 801205c:	9304      	str	r3, [sp, #16]
 801205e:	f000 fd39 	bl	8012ad4 <_Balloc>
 8012062:	9b04      	ldr	r3, [sp, #16]
 8012064:	4607      	mov	r7, r0
 8012066:	2800      	cmp	r0, #0
 8012068:	d146      	bne.n	80120f8 <_dtoa_r+0x2d0>
 801206a:	4b22      	ldr	r3, [pc, #136]	@ (80120f4 <_dtoa_r+0x2cc>)
 801206c:	4602      	mov	r2, r0
 801206e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012072:	e6f2      	b.n	8011e5a <_dtoa_r+0x32>
 8012074:	2201      	movs	r2, #1
 8012076:	e7dd      	b.n	8012034 <_dtoa_r+0x20c>
 8012078:	2200      	movs	r2, #0
 801207a:	9208      	str	r2, [sp, #32]
 801207c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801207e:	eb08 0b02 	add.w	fp, r8, r2
 8012082:	f10b 0a01 	add.w	sl, fp, #1
 8012086:	4652      	mov	r2, sl
 8012088:	2a01      	cmp	r2, #1
 801208a:	bfb8      	it	lt
 801208c:	2201      	movlt	r2, #1
 801208e:	e7db      	b.n	8012048 <_dtoa_r+0x220>
 8012090:	2201      	movs	r2, #1
 8012092:	e7f2      	b.n	801207a <_dtoa_r+0x252>
 8012094:	2401      	movs	r4, #1
 8012096:	2200      	movs	r2, #0
 8012098:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801209c:	f04f 3bff 	mov.w	fp, #4294967295
 80120a0:	2100      	movs	r1, #0
 80120a2:	46da      	mov	sl, fp
 80120a4:	2212      	movs	r2, #18
 80120a6:	9109      	str	r1, [sp, #36]	@ 0x24
 80120a8:	e7ce      	b.n	8012048 <_dtoa_r+0x220>
 80120aa:	2201      	movs	r2, #1
 80120ac:	9208      	str	r2, [sp, #32]
 80120ae:	e7f5      	b.n	801209c <_dtoa_r+0x274>
 80120b0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80120b4:	46da      	mov	sl, fp
 80120b6:	465a      	mov	r2, fp
 80120b8:	e7c6      	b.n	8012048 <_dtoa_r+0x220>
 80120ba:	3101      	adds	r1, #1
 80120bc:	0040      	lsls	r0, r0, #1
 80120be:	e7c7      	b.n	8012050 <_dtoa_r+0x228>
 80120c0:	636f4361 	.word	0x636f4361
 80120c4:	3fd287a7 	.word	0x3fd287a7
 80120c8:	8b60c8b3 	.word	0x8b60c8b3
 80120cc:	3fc68a28 	.word	0x3fc68a28
 80120d0:	509f79fb 	.word	0x509f79fb
 80120d4:	3fd34413 	.word	0x3fd34413
 80120d8:	08013e0d 	.word	0x08013e0d
 80120dc:	08013e24 	.word	0x08013e24
 80120e0:	7ff00000 	.word	0x7ff00000
 80120e4:	08013e09 	.word	0x08013e09
 80120e8:	08013ddd 	.word	0x08013ddd
 80120ec:	08013ddc 	.word	0x08013ddc
 80120f0:	08013f20 	.word	0x08013f20
 80120f4:	08013e7c 	.word	0x08013e7c
 80120f8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80120fc:	f1ba 0f0e 	cmp.w	sl, #14
 8012100:	6010      	str	r0, [r2, #0]
 8012102:	d86f      	bhi.n	80121e4 <_dtoa_r+0x3bc>
 8012104:	2c00      	cmp	r4, #0
 8012106:	d06d      	beq.n	80121e4 <_dtoa_r+0x3bc>
 8012108:	f1b8 0f00 	cmp.w	r8, #0
 801210c:	f340 80c2 	ble.w	8012294 <_dtoa_r+0x46c>
 8012110:	4aca      	ldr	r2, [pc, #808]	@ (801243c <_dtoa_r+0x614>)
 8012112:	f008 010f 	and.w	r1, r8, #15
 8012116:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801211a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801211e:	ed92 7b00 	vldr	d7, [r2]
 8012122:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012126:	f000 80a9 	beq.w	801227c <_dtoa_r+0x454>
 801212a:	4ac5      	ldr	r2, [pc, #788]	@ (8012440 <_dtoa_r+0x618>)
 801212c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012130:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012134:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012138:	f001 010f 	and.w	r1, r1, #15
 801213c:	2203      	movs	r2, #3
 801213e:	48c0      	ldr	r0, [pc, #768]	@ (8012440 <_dtoa_r+0x618>)
 8012140:	2900      	cmp	r1, #0
 8012142:	f040 809d 	bne.w	8012280 <_dtoa_r+0x458>
 8012146:	ed9d 6b02 	vldr	d6, [sp, #8]
 801214a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801214e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012152:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012154:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012158:	2900      	cmp	r1, #0
 801215a:	f000 80c1 	beq.w	80122e0 <_dtoa_r+0x4b8>
 801215e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012162:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801216a:	f140 80b9 	bpl.w	80122e0 <_dtoa_r+0x4b8>
 801216e:	f1ba 0f00 	cmp.w	sl, #0
 8012172:	f000 80b5 	beq.w	80122e0 <_dtoa_r+0x4b8>
 8012176:	f1bb 0f00 	cmp.w	fp, #0
 801217a:	dd31      	ble.n	80121e0 <_dtoa_r+0x3b8>
 801217c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012180:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012184:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012188:	f108 31ff 	add.w	r1, r8, #4294967295
 801218c:	9104      	str	r1, [sp, #16]
 801218e:	3201      	adds	r2, #1
 8012190:	465c      	mov	r4, fp
 8012192:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012196:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 801219a:	ee07 2a90 	vmov	s15, r2
 801219e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121a2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80121a6:	ee15 2a90 	vmov	r2, s11
 80121aa:	ec51 0b15 	vmov	r0, r1, d5
 80121ae:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80121b2:	2c00      	cmp	r4, #0
 80121b4:	f040 8098 	bne.w	80122e8 <_dtoa_r+0x4c0>
 80121b8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80121bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80121c0:	ec41 0b17 	vmov	d7, r0, r1
 80121c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121cc:	f300 8261 	bgt.w	8012692 <_dtoa_r+0x86a>
 80121d0:	eeb1 7b47 	vneg.f64	d7, d7
 80121d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80121d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121dc:	f100 80f5 	bmi.w	80123ca <_dtoa_r+0x5a2>
 80121e0:	ed8d 8b02 	vstr	d8, [sp, #8]
 80121e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121e6:	2a00      	cmp	r2, #0
 80121e8:	f2c0 812c 	blt.w	8012444 <_dtoa_r+0x61c>
 80121ec:	f1b8 0f0e 	cmp.w	r8, #14
 80121f0:	f300 8128 	bgt.w	8012444 <_dtoa_r+0x61c>
 80121f4:	4b91      	ldr	r3, [pc, #580]	@ (801243c <_dtoa_r+0x614>)
 80121f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80121fa:	ed93 6b00 	vldr	d6, [r3]
 80121fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012200:	2b00      	cmp	r3, #0
 8012202:	da03      	bge.n	801220c <_dtoa_r+0x3e4>
 8012204:	f1ba 0f00 	cmp.w	sl, #0
 8012208:	f340 80d2 	ble.w	80123b0 <_dtoa_r+0x588>
 801220c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012210:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012214:	463e      	mov	r6, r7
 8012216:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801221a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801221e:	ee15 3a10 	vmov	r3, s10
 8012222:	3330      	adds	r3, #48	@ 0x30
 8012224:	f806 3b01 	strb.w	r3, [r6], #1
 8012228:	1bf3      	subs	r3, r6, r7
 801222a:	459a      	cmp	sl, r3
 801222c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012230:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012234:	f040 80f8 	bne.w	8012428 <_dtoa_r+0x600>
 8012238:	ee37 7b07 	vadd.f64	d7, d7, d7
 801223c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012244:	f300 80dd 	bgt.w	8012402 <_dtoa_r+0x5da>
 8012248:	eeb4 7b46 	vcmp.f64	d7, d6
 801224c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012250:	d104      	bne.n	801225c <_dtoa_r+0x434>
 8012252:	ee15 3a10 	vmov	r3, s10
 8012256:	07db      	lsls	r3, r3, #31
 8012258:	f100 80d3 	bmi.w	8012402 <_dtoa_r+0x5da>
 801225c:	9901      	ldr	r1, [sp, #4]
 801225e:	4648      	mov	r0, r9
 8012260:	f000 fc78 	bl	8012b54 <_Bfree>
 8012264:	2300      	movs	r3, #0
 8012266:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012268:	7033      	strb	r3, [r6, #0]
 801226a:	f108 0301 	add.w	r3, r8, #1
 801226e:	6013      	str	r3, [r2, #0]
 8012270:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012272:	2b00      	cmp	r3, #0
 8012274:	f000 8304 	beq.w	8012880 <_dtoa_r+0xa58>
 8012278:	601e      	str	r6, [r3, #0]
 801227a:	e301      	b.n	8012880 <_dtoa_r+0xa58>
 801227c:	2202      	movs	r2, #2
 801227e:	e75e      	b.n	801213e <_dtoa_r+0x316>
 8012280:	07cc      	lsls	r4, r1, #31
 8012282:	d504      	bpl.n	801228e <_dtoa_r+0x466>
 8012284:	ed90 6b00 	vldr	d6, [r0]
 8012288:	3201      	adds	r2, #1
 801228a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801228e:	1049      	asrs	r1, r1, #1
 8012290:	3008      	adds	r0, #8
 8012292:	e755      	b.n	8012140 <_dtoa_r+0x318>
 8012294:	d022      	beq.n	80122dc <_dtoa_r+0x4b4>
 8012296:	f1c8 0100 	rsb	r1, r8, #0
 801229a:	4a68      	ldr	r2, [pc, #416]	@ (801243c <_dtoa_r+0x614>)
 801229c:	f001 000f 	and.w	r0, r1, #15
 80122a0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80122a4:	ed92 7b00 	vldr	d7, [r2]
 80122a8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80122ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122b0:	4863      	ldr	r0, [pc, #396]	@ (8012440 <_dtoa_r+0x618>)
 80122b2:	1109      	asrs	r1, r1, #4
 80122b4:	2400      	movs	r4, #0
 80122b6:	2202      	movs	r2, #2
 80122b8:	b929      	cbnz	r1, 80122c6 <_dtoa_r+0x49e>
 80122ba:	2c00      	cmp	r4, #0
 80122bc:	f43f af49 	beq.w	8012152 <_dtoa_r+0x32a>
 80122c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122c4:	e745      	b.n	8012152 <_dtoa_r+0x32a>
 80122c6:	07ce      	lsls	r6, r1, #31
 80122c8:	d505      	bpl.n	80122d6 <_dtoa_r+0x4ae>
 80122ca:	ed90 6b00 	vldr	d6, [r0]
 80122ce:	3201      	adds	r2, #1
 80122d0:	2401      	movs	r4, #1
 80122d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80122d6:	1049      	asrs	r1, r1, #1
 80122d8:	3008      	adds	r0, #8
 80122da:	e7ed      	b.n	80122b8 <_dtoa_r+0x490>
 80122dc:	2202      	movs	r2, #2
 80122de:	e738      	b.n	8012152 <_dtoa_r+0x32a>
 80122e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80122e4:	4654      	mov	r4, sl
 80122e6:	e754      	b.n	8012192 <_dtoa_r+0x36a>
 80122e8:	4a54      	ldr	r2, [pc, #336]	@ (801243c <_dtoa_r+0x614>)
 80122ea:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80122ee:	ed12 4b02 	vldr	d4, [r2, #-8]
 80122f2:	9a08      	ldr	r2, [sp, #32]
 80122f4:	ec41 0b17 	vmov	d7, r0, r1
 80122f8:	443c      	add	r4, r7
 80122fa:	b34a      	cbz	r2, 8012350 <_dtoa_r+0x528>
 80122fc:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012300:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012304:	463e      	mov	r6, r7
 8012306:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801230a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801230e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012312:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012316:	ee14 2a90 	vmov	r2, s9
 801231a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801231e:	3230      	adds	r2, #48	@ 0x30
 8012320:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012324:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232c:	f806 2b01 	strb.w	r2, [r6], #1
 8012330:	d438      	bmi.n	80123a4 <_dtoa_r+0x57c>
 8012332:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012336:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801233e:	d462      	bmi.n	8012406 <_dtoa_r+0x5de>
 8012340:	42a6      	cmp	r6, r4
 8012342:	f43f af4d 	beq.w	80121e0 <_dtoa_r+0x3b8>
 8012346:	ee27 7b03 	vmul.f64	d7, d7, d3
 801234a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801234e:	e7e0      	b.n	8012312 <_dtoa_r+0x4ea>
 8012350:	4621      	mov	r1, r4
 8012352:	463e      	mov	r6, r7
 8012354:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012358:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801235c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012360:	ee14 2a90 	vmov	r2, s9
 8012364:	3230      	adds	r2, #48	@ 0x30
 8012366:	f806 2b01 	strb.w	r2, [r6], #1
 801236a:	42a6      	cmp	r6, r4
 801236c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012370:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012374:	d119      	bne.n	80123aa <_dtoa_r+0x582>
 8012376:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801237a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801237e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012386:	dc3e      	bgt.n	8012406 <_dtoa_r+0x5de>
 8012388:	ee35 5b47 	vsub.f64	d5, d5, d7
 801238c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012394:	f57f af24 	bpl.w	80121e0 <_dtoa_r+0x3b8>
 8012398:	460e      	mov	r6, r1
 801239a:	3901      	subs	r1, #1
 801239c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80123a0:	2b30      	cmp	r3, #48	@ 0x30
 80123a2:	d0f9      	beq.n	8012398 <_dtoa_r+0x570>
 80123a4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80123a8:	e758      	b.n	801225c <_dtoa_r+0x434>
 80123aa:	ee26 6b03 	vmul.f64	d6, d6, d3
 80123ae:	e7d5      	b.n	801235c <_dtoa_r+0x534>
 80123b0:	d10b      	bne.n	80123ca <_dtoa_r+0x5a2>
 80123b2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80123b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80123ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80123c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c6:	f2c0 8161 	blt.w	801268c <_dtoa_r+0x864>
 80123ca:	2400      	movs	r4, #0
 80123cc:	4625      	mov	r5, r4
 80123ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123d0:	43db      	mvns	r3, r3
 80123d2:	9304      	str	r3, [sp, #16]
 80123d4:	463e      	mov	r6, r7
 80123d6:	f04f 0800 	mov.w	r8, #0
 80123da:	4621      	mov	r1, r4
 80123dc:	4648      	mov	r0, r9
 80123de:	f000 fbb9 	bl	8012b54 <_Bfree>
 80123e2:	2d00      	cmp	r5, #0
 80123e4:	d0de      	beq.n	80123a4 <_dtoa_r+0x57c>
 80123e6:	f1b8 0f00 	cmp.w	r8, #0
 80123ea:	d005      	beq.n	80123f8 <_dtoa_r+0x5d0>
 80123ec:	45a8      	cmp	r8, r5
 80123ee:	d003      	beq.n	80123f8 <_dtoa_r+0x5d0>
 80123f0:	4641      	mov	r1, r8
 80123f2:	4648      	mov	r0, r9
 80123f4:	f000 fbae 	bl	8012b54 <_Bfree>
 80123f8:	4629      	mov	r1, r5
 80123fa:	4648      	mov	r0, r9
 80123fc:	f000 fbaa 	bl	8012b54 <_Bfree>
 8012400:	e7d0      	b.n	80123a4 <_dtoa_r+0x57c>
 8012402:	f8cd 8010 	str.w	r8, [sp, #16]
 8012406:	4633      	mov	r3, r6
 8012408:	461e      	mov	r6, r3
 801240a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801240e:	2a39      	cmp	r2, #57	@ 0x39
 8012410:	d106      	bne.n	8012420 <_dtoa_r+0x5f8>
 8012412:	429f      	cmp	r7, r3
 8012414:	d1f8      	bne.n	8012408 <_dtoa_r+0x5e0>
 8012416:	9a04      	ldr	r2, [sp, #16]
 8012418:	3201      	adds	r2, #1
 801241a:	9204      	str	r2, [sp, #16]
 801241c:	2230      	movs	r2, #48	@ 0x30
 801241e:	703a      	strb	r2, [r7, #0]
 8012420:	781a      	ldrb	r2, [r3, #0]
 8012422:	3201      	adds	r2, #1
 8012424:	701a      	strb	r2, [r3, #0]
 8012426:	e7bd      	b.n	80123a4 <_dtoa_r+0x57c>
 8012428:	ee27 7b04 	vmul.f64	d7, d7, d4
 801242c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012434:	f47f aeef 	bne.w	8012216 <_dtoa_r+0x3ee>
 8012438:	e710      	b.n	801225c <_dtoa_r+0x434>
 801243a:	bf00      	nop
 801243c:	08013f20 	.word	0x08013f20
 8012440:	08013ef8 	.word	0x08013ef8
 8012444:	9908      	ldr	r1, [sp, #32]
 8012446:	2900      	cmp	r1, #0
 8012448:	f000 80e3 	beq.w	8012612 <_dtoa_r+0x7ea>
 801244c:	9907      	ldr	r1, [sp, #28]
 801244e:	2901      	cmp	r1, #1
 8012450:	f300 80c8 	bgt.w	80125e4 <_dtoa_r+0x7bc>
 8012454:	2d00      	cmp	r5, #0
 8012456:	f000 80c1 	beq.w	80125dc <_dtoa_r+0x7b4>
 801245a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801245e:	9e05      	ldr	r6, [sp, #20]
 8012460:	461c      	mov	r4, r3
 8012462:	9304      	str	r3, [sp, #16]
 8012464:	9b05      	ldr	r3, [sp, #20]
 8012466:	4413      	add	r3, r2
 8012468:	9305      	str	r3, [sp, #20]
 801246a:	9b06      	ldr	r3, [sp, #24]
 801246c:	2101      	movs	r1, #1
 801246e:	4413      	add	r3, r2
 8012470:	4648      	mov	r0, r9
 8012472:	9306      	str	r3, [sp, #24]
 8012474:	f000 fc22 	bl	8012cbc <__i2b>
 8012478:	9b04      	ldr	r3, [sp, #16]
 801247a:	4605      	mov	r5, r0
 801247c:	b166      	cbz	r6, 8012498 <_dtoa_r+0x670>
 801247e:	9a06      	ldr	r2, [sp, #24]
 8012480:	2a00      	cmp	r2, #0
 8012482:	dd09      	ble.n	8012498 <_dtoa_r+0x670>
 8012484:	42b2      	cmp	r2, r6
 8012486:	9905      	ldr	r1, [sp, #20]
 8012488:	bfa8      	it	ge
 801248a:	4632      	movge	r2, r6
 801248c:	1a89      	subs	r1, r1, r2
 801248e:	9105      	str	r1, [sp, #20]
 8012490:	9906      	ldr	r1, [sp, #24]
 8012492:	1ab6      	subs	r6, r6, r2
 8012494:	1a8a      	subs	r2, r1, r2
 8012496:	9206      	str	r2, [sp, #24]
 8012498:	b1fb      	cbz	r3, 80124da <_dtoa_r+0x6b2>
 801249a:	9a08      	ldr	r2, [sp, #32]
 801249c:	2a00      	cmp	r2, #0
 801249e:	f000 80bc 	beq.w	801261a <_dtoa_r+0x7f2>
 80124a2:	b19c      	cbz	r4, 80124cc <_dtoa_r+0x6a4>
 80124a4:	4629      	mov	r1, r5
 80124a6:	4622      	mov	r2, r4
 80124a8:	4648      	mov	r0, r9
 80124aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124ac:	f000 fcc6 	bl	8012e3c <__pow5mult>
 80124b0:	9a01      	ldr	r2, [sp, #4]
 80124b2:	4601      	mov	r1, r0
 80124b4:	4605      	mov	r5, r0
 80124b6:	4648      	mov	r0, r9
 80124b8:	f000 fc16 	bl	8012ce8 <__multiply>
 80124bc:	9901      	ldr	r1, [sp, #4]
 80124be:	9004      	str	r0, [sp, #16]
 80124c0:	4648      	mov	r0, r9
 80124c2:	f000 fb47 	bl	8012b54 <_Bfree>
 80124c6:	9a04      	ldr	r2, [sp, #16]
 80124c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124ca:	9201      	str	r2, [sp, #4]
 80124cc:	1b1a      	subs	r2, r3, r4
 80124ce:	d004      	beq.n	80124da <_dtoa_r+0x6b2>
 80124d0:	9901      	ldr	r1, [sp, #4]
 80124d2:	4648      	mov	r0, r9
 80124d4:	f000 fcb2 	bl	8012e3c <__pow5mult>
 80124d8:	9001      	str	r0, [sp, #4]
 80124da:	2101      	movs	r1, #1
 80124dc:	4648      	mov	r0, r9
 80124de:	f000 fbed 	bl	8012cbc <__i2b>
 80124e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80124e4:	4604      	mov	r4, r0
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	f000 81d0 	beq.w	801288c <_dtoa_r+0xa64>
 80124ec:	461a      	mov	r2, r3
 80124ee:	4601      	mov	r1, r0
 80124f0:	4648      	mov	r0, r9
 80124f2:	f000 fca3 	bl	8012e3c <__pow5mult>
 80124f6:	9b07      	ldr	r3, [sp, #28]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	4604      	mov	r4, r0
 80124fc:	f300 8095 	bgt.w	801262a <_dtoa_r+0x802>
 8012500:	9b02      	ldr	r3, [sp, #8]
 8012502:	2b00      	cmp	r3, #0
 8012504:	f040 808b 	bne.w	801261e <_dtoa_r+0x7f6>
 8012508:	9b03      	ldr	r3, [sp, #12]
 801250a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801250e:	2a00      	cmp	r2, #0
 8012510:	f040 8087 	bne.w	8012622 <_dtoa_r+0x7fa>
 8012514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012518:	0d12      	lsrs	r2, r2, #20
 801251a:	0512      	lsls	r2, r2, #20
 801251c:	2a00      	cmp	r2, #0
 801251e:	f000 8082 	beq.w	8012626 <_dtoa_r+0x7fe>
 8012522:	9b05      	ldr	r3, [sp, #20]
 8012524:	3301      	adds	r3, #1
 8012526:	9305      	str	r3, [sp, #20]
 8012528:	9b06      	ldr	r3, [sp, #24]
 801252a:	3301      	adds	r3, #1
 801252c:	9306      	str	r3, [sp, #24]
 801252e:	2301      	movs	r3, #1
 8012530:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012532:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 81af 	beq.w	8012898 <_dtoa_r+0xa70>
 801253a:	6922      	ldr	r2, [r4, #16]
 801253c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012540:	6910      	ldr	r0, [r2, #16]
 8012542:	f000 fb6f 	bl	8012c24 <__hi0bits>
 8012546:	f1c0 0020 	rsb	r0, r0, #32
 801254a:	9b06      	ldr	r3, [sp, #24]
 801254c:	4418      	add	r0, r3
 801254e:	f010 001f 	ands.w	r0, r0, #31
 8012552:	d076      	beq.n	8012642 <_dtoa_r+0x81a>
 8012554:	f1c0 0220 	rsb	r2, r0, #32
 8012558:	2a04      	cmp	r2, #4
 801255a:	dd69      	ble.n	8012630 <_dtoa_r+0x808>
 801255c:	9b05      	ldr	r3, [sp, #20]
 801255e:	f1c0 001c 	rsb	r0, r0, #28
 8012562:	4403      	add	r3, r0
 8012564:	9305      	str	r3, [sp, #20]
 8012566:	9b06      	ldr	r3, [sp, #24]
 8012568:	4406      	add	r6, r0
 801256a:	4403      	add	r3, r0
 801256c:	9306      	str	r3, [sp, #24]
 801256e:	9b05      	ldr	r3, [sp, #20]
 8012570:	2b00      	cmp	r3, #0
 8012572:	dd05      	ble.n	8012580 <_dtoa_r+0x758>
 8012574:	9901      	ldr	r1, [sp, #4]
 8012576:	461a      	mov	r2, r3
 8012578:	4648      	mov	r0, r9
 801257a:	f000 fcb9 	bl	8012ef0 <__lshift>
 801257e:	9001      	str	r0, [sp, #4]
 8012580:	9b06      	ldr	r3, [sp, #24]
 8012582:	2b00      	cmp	r3, #0
 8012584:	dd05      	ble.n	8012592 <_dtoa_r+0x76a>
 8012586:	4621      	mov	r1, r4
 8012588:	461a      	mov	r2, r3
 801258a:	4648      	mov	r0, r9
 801258c:	f000 fcb0 	bl	8012ef0 <__lshift>
 8012590:	4604      	mov	r4, r0
 8012592:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012594:	2b00      	cmp	r3, #0
 8012596:	d056      	beq.n	8012646 <_dtoa_r+0x81e>
 8012598:	9801      	ldr	r0, [sp, #4]
 801259a:	4621      	mov	r1, r4
 801259c:	f000 fd14 	bl	8012fc8 <__mcmp>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	da50      	bge.n	8012646 <_dtoa_r+0x81e>
 80125a4:	f108 33ff 	add.w	r3, r8, #4294967295
 80125a8:	9304      	str	r3, [sp, #16]
 80125aa:	9901      	ldr	r1, [sp, #4]
 80125ac:	2300      	movs	r3, #0
 80125ae:	220a      	movs	r2, #10
 80125b0:	4648      	mov	r0, r9
 80125b2:	f000 faf1 	bl	8012b98 <__multadd>
 80125b6:	9b08      	ldr	r3, [sp, #32]
 80125b8:	9001      	str	r0, [sp, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	f000 816e 	beq.w	801289c <_dtoa_r+0xa74>
 80125c0:	4629      	mov	r1, r5
 80125c2:	2300      	movs	r3, #0
 80125c4:	220a      	movs	r2, #10
 80125c6:	4648      	mov	r0, r9
 80125c8:	f000 fae6 	bl	8012b98 <__multadd>
 80125cc:	f1bb 0f00 	cmp.w	fp, #0
 80125d0:	4605      	mov	r5, r0
 80125d2:	dc64      	bgt.n	801269e <_dtoa_r+0x876>
 80125d4:	9b07      	ldr	r3, [sp, #28]
 80125d6:	2b02      	cmp	r3, #2
 80125d8:	dc3e      	bgt.n	8012658 <_dtoa_r+0x830>
 80125da:	e060      	b.n	801269e <_dtoa_r+0x876>
 80125dc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80125de:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80125e2:	e73c      	b.n	801245e <_dtoa_r+0x636>
 80125e4:	f10a 34ff 	add.w	r4, sl, #4294967295
 80125e8:	42a3      	cmp	r3, r4
 80125ea:	bfbf      	itttt	lt
 80125ec:	1ae2      	sublt	r2, r4, r3
 80125ee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80125f0:	189b      	addlt	r3, r3, r2
 80125f2:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80125f4:	bfae      	itee	ge
 80125f6:	1b1c      	subge	r4, r3, r4
 80125f8:	4623      	movlt	r3, r4
 80125fa:	2400      	movlt	r4, #0
 80125fc:	f1ba 0f00 	cmp.w	sl, #0
 8012600:	bfb5      	itete	lt
 8012602:	9a05      	ldrlt	r2, [sp, #20]
 8012604:	9e05      	ldrge	r6, [sp, #20]
 8012606:	eba2 060a 	sublt.w	r6, r2, sl
 801260a:	4652      	movge	r2, sl
 801260c:	bfb8      	it	lt
 801260e:	2200      	movlt	r2, #0
 8012610:	e727      	b.n	8012462 <_dtoa_r+0x63a>
 8012612:	9e05      	ldr	r6, [sp, #20]
 8012614:	9d08      	ldr	r5, [sp, #32]
 8012616:	461c      	mov	r4, r3
 8012618:	e730      	b.n	801247c <_dtoa_r+0x654>
 801261a:	461a      	mov	r2, r3
 801261c:	e758      	b.n	80124d0 <_dtoa_r+0x6a8>
 801261e:	2300      	movs	r3, #0
 8012620:	e786      	b.n	8012530 <_dtoa_r+0x708>
 8012622:	9b02      	ldr	r3, [sp, #8]
 8012624:	e784      	b.n	8012530 <_dtoa_r+0x708>
 8012626:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012628:	e783      	b.n	8012532 <_dtoa_r+0x70a>
 801262a:	2300      	movs	r3, #0
 801262c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801262e:	e784      	b.n	801253a <_dtoa_r+0x712>
 8012630:	d09d      	beq.n	801256e <_dtoa_r+0x746>
 8012632:	9b05      	ldr	r3, [sp, #20]
 8012634:	321c      	adds	r2, #28
 8012636:	4413      	add	r3, r2
 8012638:	9305      	str	r3, [sp, #20]
 801263a:	9b06      	ldr	r3, [sp, #24]
 801263c:	4416      	add	r6, r2
 801263e:	4413      	add	r3, r2
 8012640:	e794      	b.n	801256c <_dtoa_r+0x744>
 8012642:	4602      	mov	r2, r0
 8012644:	e7f5      	b.n	8012632 <_dtoa_r+0x80a>
 8012646:	f1ba 0f00 	cmp.w	sl, #0
 801264a:	f8cd 8010 	str.w	r8, [sp, #16]
 801264e:	46d3      	mov	fp, sl
 8012650:	dc21      	bgt.n	8012696 <_dtoa_r+0x86e>
 8012652:	9b07      	ldr	r3, [sp, #28]
 8012654:	2b02      	cmp	r3, #2
 8012656:	dd1e      	ble.n	8012696 <_dtoa_r+0x86e>
 8012658:	f1bb 0f00 	cmp.w	fp, #0
 801265c:	f47f aeb7 	bne.w	80123ce <_dtoa_r+0x5a6>
 8012660:	4621      	mov	r1, r4
 8012662:	465b      	mov	r3, fp
 8012664:	2205      	movs	r2, #5
 8012666:	4648      	mov	r0, r9
 8012668:	f000 fa96 	bl	8012b98 <__multadd>
 801266c:	4601      	mov	r1, r0
 801266e:	4604      	mov	r4, r0
 8012670:	9801      	ldr	r0, [sp, #4]
 8012672:	f000 fca9 	bl	8012fc8 <__mcmp>
 8012676:	2800      	cmp	r0, #0
 8012678:	f77f aea9 	ble.w	80123ce <_dtoa_r+0x5a6>
 801267c:	463e      	mov	r6, r7
 801267e:	2331      	movs	r3, #49	@ 0x31
 8012680:	f806 3b01 	strb.w	r3, [r6], #1
 8012684:	9b04      	ldr	r3, [sp, #16]
 8012686:	3301      	adds	r3, #1
 8012688:	9304      	str	r3, [sp, #16]
 801268a:	e6a4      	b.n	80123d6 <_dtoa_r+0x5ae>
 801268c:	f8cd 8010 	str.w	r8, [sp, #16]
 8012690:	4654      	mov	r4, sl
 8012692:	4625      	mov	r5, r4
 8012694:	e7f2      	b.n	801267c <_dtoa_r+0x854>
 8012696:	9b08      	ldr	r3, [sp, #32]
 8012698:	2b00      	cmp	r3, #0
 801269a:	f000 8103 	beq.w	80128a4 <_dtoa_r+0xa7c>
 801269e:	2e00      	cmp	r6, #0
 80126a0:	dd05      	ble.n	80126ae <_dtoa_r+0x886>
 80126a2:	4629      	mov	r1, r5
 80126a4:	4632      	mov	r2, r6
 80126a6:	4648      	mov	r0, r9
 80126a8:	f000 fc22 	bl	8012ef0 <__lshift>
 80126ac:	4605      	mov	r5, r0
 80126ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d058      	beq.n	8012766 <_dtoa_r+0x93e>
 80126b4:	6869      	ldr	r1, [r5, #4]
 80126b6:	4648      	mov	r0, r9
 80126b8:	f000 fa0c 	bl	8012ad4 <_Balloc>
 80126bc:	4606      	mov	r6, r0
 80126be:	b928      	cbnz	r0, 80126cc <_dtoa_r+0x8a4>
 80126c0:	4b82      	ldr	r3, [pc, #520]	@ (80128cc <_dtoa_r+0xaa4>)
 80126c2:	4602      	mov	r2, r0
 80126c4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80126c8:	f7ff bbc7 	b.w	8011e5a <_dtoa_r+0x32>
 80126cc:	692a      	ldr	r2, [r5, #16]
 80126ce:	3202      	adds	r2, #2
 80126d0:	0092      	lsls	r2, r2, #2
 80126d2:	f105 010c 	add.w	r1, r5, #12
 80126d6:	300c      	adds	r0, #12
 80126d8:	f7ff fb0d 	bl	8011cf6 <memcpy>
 80126dc:	2201      	movs	r2, #1
 80126de:	4631      	mov	r1, r6
 80126e0:	4648      	mov	r0, r9
 80126e2:	f000 fc05 	bl	8012ef0 <__lshift>
 80126e6:	1c7b      	adds	r3, r7, #1
 80126e8:	9305      	str	r3, [sp, #20]
 80126ea:	eb07 030b 	add.w	r3, r7, fp
 80126ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80126f0:	9b02      	ldr	r3, [sp, #8]
 80126f2:	f003 0301 	and.w	r3, r3, #1
 80126f6:	46a8      	mov	r8, r5
 80126f8:	9308      	str	r3, [sp, #32]
 80126fa:	4605      	mov	r5, r0
 80126fc:	9b05      	ldr	r3, [sp, #20]
 80126fe:	9801      	ldr	r0, [sp, #4]
 8012700:	4621      	mov	r1, r4
 8012702:	f103 3bff 	add.w	fp, r3, #4294967295
 8012706:	f7ff fb04 	bl	8011d12 <quorem>
 801270a:	4641      	mov	r1, r8
 801270c:	9002      	str	r0, [sp, #8]
 801270e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012712:	9801      	ldr	r0, [sp, #4]
 8012714:	f000 fc58 	bl	8012fc8 <__mcmp>
 8012718:	462a      	mov	r2, r5
 801271a:	9006      	str	r0, [sp, #24]
 801271c:	4621      	mov	r1, r4
 801271e:	4648      	mov	r0, r9
 8012720:	f000 fc6e 	bl	8013000 <__mdiff>
 8012724:	68c2      	ldr	r2, [r0, #12]
 8012726:	4606      	mov	r6, r0
 8012728:	b9fa      	cbnz	r2, 801276a <_dtoa_r+0x942>
 801272a:	4601      	mov	r1, r0
 801272c:	9801      	ldr	r0, [sp, #4]
 801272e:	f000 fc4b 	bl	8012fc8 <__mcmp>
 8012732:	4602      	mov	r2, r0
 8012734:	4631      	mov	r1, r6
 8012736:	4648      	mov	r0, r9
 8012738:	920a      	str	r2, [sp, #40]	@ 0x28
 801273a:	f000 fa0b 	bl	8012b54 <_Bfree>
 801273e:	9b07      	ldr	r3, [sp, #28]
 8012740:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012742:	9e05      	ldr	r6, [sp, #20]
 8012744:	ea43 0102 	orr.w	r1, r3, r2
 8012748:	9b08      	ldr	r3, [sp, #32]
 801274a:	4319      	orrs	r1, r3
 801274c:	d10f      	bne.n	801276e <_dtoa_r+0x946>
 801274e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012752:	d028      	beq.n	80127a6 <_dtoa_r+0x97e>
 8012754:	9b06      	ldr	r3, [sp, #24]
 8012756:	2b00      	cmp	r3, #0
 8012758:	dd02      	ble.n	8012760 <_dtoa_r+0x938>
 801275a:	9b02      	ldr	r3, [sp, #8]
 801275c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8012760:	f88b a000 	strb.w	sl, [fp]
 8012764:	e639      	b.n	80123da <_dtoa_r+0x5b2>
 8012766:	4628      	mov	r0, r5
 8012768:	e7bd      	b.n	80126e6 <_dtoa_r+0x8be>
 801276a:	2201      	movs	r2, #1
 801276c:	e7e2      	b.n	8012734 <_dtoa_r+0x90c>
 801276e:	9b06      	ldr	r3, [sp, #24]
 8012770:	2b00      	cmp	r3, #0
 8012772:	db04      	blt.n	801277e <_dtoa_r+0x956>
 8012774:	9907      	ldr	r1, [sp, #28]
 8012776:	430b      	orrs	r3, r1
 8012778:	9908      	ldr	r1, [sp, #32]
 801277a:	430b      	orrs	r3, r1
 801277c:	d120      	bne.n	80127c0 <_dtoa_r+0x998>
 801277e:	2a00      	cmp	r2, #0
 8012780:	ddee      	ble.n	8012760 <_dtoa_r+0x938>
 8012782:	9901      	ldr	r1, [sp, #4]
 8012784:	2201      	movs	r2, #1
 8012786:	4648      	mov	r0, r9
 8012788:	f000 fbb2 	bl	8012ef0 <__lshift>
 801278c:	4621      	mov	r1, r4
 801278e:	9001      	str	r0, [sp, #4]
 8012790:	f000 fc1a 	bl	8012fc8 <__mcmp>
 8012794:	2800      	cmp	r0, #0
 8012796:	dc03      	bgt.n	80127a0 <_dtoa_r+0x978>
 8012798:	d1e2      	bne.n	8012760 <_dtoa_r+0x938>
 801279a:	f01a 0f01 	tst.w	sl, #1
 801279e:	d0df      	beq.n	8012760 <_dtoa_r+0x938>
 80127a0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80127a4:	d1d9      	bne.n	801275a <_dtoa_r+0x932>
 80127a6:	2339      	movs	r3, #57	@ 0x39
 80127a8:	f88b 3000 	strb.w	r3, [fp]
 80127ac:	4633      	mov	r3, r6
 80127ae:	461e      	mov	r6, r3
 80127b0:	3b01      	subs	r3, #1
 80127b2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80127b6:	2a39      	cmp	r2, #57	@ 0x39
 80127b8:	d053      	beq.n	8012862 <_dtoa_r+0xa3a>
 80127ba:	3201      	adds	r2, #1
 80127bc:	701a      	strb	r2, [r3, #0]
 80127be:	e60c      	b.n	80123da <_dtoa_r+0x5b2>
 80127c0:	2a00      	cmp	r2, #0
 80127c2:	dd07      	ble.n	80127d4 <_dtoa_r+0x9ac>
 80127c4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80127c8:	d0ed      	beq.n	80127a6 <_dtoa_r+0x97e>
 80127ca:	f10a 0301 	add.w	r3, sl, #1
 80127ce:	f88b 3000 	strb.w	r3, [fp]
 80127d2:	e602      	b.n	80123da <_dtoa_r+0x5b2>
 80127d4:	9b05      	ldr	r3, [sp, #20]
 80127d6:	9a05      	ldr	r2, [sp, #20]
 80127d8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80127dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127de:	4293      	cmp	r3, r2
 80127e0:	d029      	beq.n	8012836 <_dtoa_r+0xa0e>
 80127e2:	9901      	ldr	r1, [sp, #4]
 80127e4:	2300      	movs	r3, #0
 80127e6:	220a      	movs	r2, #10
 80127e8:	4648      	mov	r0, r9
 80127ea:	f000 f9d5 	bl	8012b98 <__multadd>
 80127ee:	45a8      	cmp	r8, r5
 80127f0:	9001      	str	r0, [sp, #4]
 80127f2:	f04f 0300 	mov.w	r3, #0
 80127f6:	f04f 020a 	mov.w	r2, #10
 80127fa:	4641      	mov	r1, r8
 80127fc:	4648      	mov	r0, r9
 80127fe:	d107      	bne.n	8012810 <_dtoa_r+0x9e8>
 8012800:	f000 f9ca 	bl	8012b98 <__multadd>
 8012804:	4680      	mov	r8, r0
 8012806:	4605      	mov	r5, r0
 8012808:	9b05      	ldr	r3, [sp, #20]
 801280a:	3301      	adds	r3, #1
 801280c:	9305      	str	r3, [sp, #20]
 801280e:	e775      	b.n	80126fc <_dtoa_r+0x8d4>
 8012810:	f000 f9c2 	bl	8012b98 <__multadd>
 8012814:	4629      	mov	r1, r5
 8012816:	4680      	mov	r8, r0
 8012818:	2300      	movs	r3, #0
 801281a:	220a      	movs	r2, #10
 801281c:	4648      	mov	r0, r9
 801281e:	f000 f9bb 	bl	8012b98 <__multadd>
 8012822:	4605      	mov	r5, r0
 8012824:	e7f0      	b.n	8012808 <_dtoa_r+0x9e0>
 8012826:	f1bb 0f00 	cmp.w	fp, #0
 801282a:	bfcc      	ite	gt
 801282c:	465e      	movgt	r6, fp
 801282e:	2601      	movle	r6, #1
 8012830:	443e      	add	r6, r7
 8012832:	f04f 0800 	mov.w	r8, #0
 8012836:	9901      	ldr	r1, [sp, #4]
 8012838:	2201      	movs	r2, #1
 801283a:	4648      	mov	r0, r9
 801283c:	f000 fb58 	bl	8012ef0 <__lshift>
 8012840:	4621      	mov	r1, r4
 8012842:	9001      	str	r0, [sp, #4]
 8012844:	f000 fbc0 	bl	8012fc8 <__mcmp>
 8012848:	2800      	cmp	r0, #0
 801284a:	dcaf      	bgt.n	80127ac <_dtoa_r+0x984>
 801284c:	d102      	bne.n	8012854 <_dtoa_r+0xa2c>
 801284e:	f01a 0f01 	tst.w	sl, #1
 8012852:	d1ab      	bne.n	80127ac <_dtoa_r+0x984>
 8012854:	4633      	mov	r3, r6
 8012856:	461e      	mov	r6, r3
 8012858:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801285c:	2a30      	cmp	r2, #48	@ 0x30
 801285e:	d0fa      	beq.n	8012856 <_dtoa_r+0xa2e>
 8012860:	e5bb      	b.n	80123da <_dtoa_r+0x5b2>
 8012862:	429f      	cmp	r7, r3
 8012864:	d1a3      	bne.n	80127ae <_dtoa_r+0x986>
 8012866:	9b04      	ldr	r3, [sp, #16]
 8012868:	3301      	adds	r3, #1
 801286a:	9304      	str	r3, [sp, #16]
 801286c:	2331      	movs	r3, #49	@ 0x31
 801286e:	703b      	strb	r3, [r7, #0]
 8012870:	e5b3      	b.n	80123da <_dtoa_r+0x5b2>
 8012872:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012874:	4f16      	ldr	r7, [pc, #88]	@ (80128d0 <_dtoa_r+0xaa8>)
 8012876:	b11b      	cbz	r3, 8012880 <_dtoa_r+0xa58>
 8012878:	f107 0308 	add.w	r3, r7, #8
 801287c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801287e:	6013      	str	r3, [r2, #0]
 8012880:	4638      	mov	r0, r7
 8012882:	b011      	add	sp, #68	@ 0x44
 8012884:	ecbd 8b02 	vpop	{d8}
 8012888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801288c:	9b07      	ldr	r3, [sp, #28]
 801288e:	2b01      	cmp	r3, #1
 8012890:	f77f ae36 	ble.w	8012500 <_dtoa_r+0x6d8>
 8012894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012896:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012898:	2001      	movs	r0, #1
 801289a:	e656      	b.n	801254a <_dtoa_r+0x722>
 801289c:	f1bb 0f00 	cmp.w	fp, #0
 80128a0:	f77f aed7 	ble.w	8012652 <_dtoa_r+0x82a>
 80128a4:	463e      	mov	r6, r7
 80128a6:	9801      	ldr	r0, [sp, #4]
 80128a8:	4621      	mov	r1, r4
 80128aa:	f7ff fa32 	bl	8011d12 <quorem>
 80128ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80128b2:	f806 ab01 	strb.w	sl, [r6], #1
 80128b6:	1bf2      	subs	r2, r6, r7
 80128b8:	4593      	cmp	fp, r2
 80128ba:	ddb4      	ble.n	8012826 <_dtoa_r+0x9fe>
 80128bc:	9901      	ldr	r1, [sp, #4]
 80128be:	2300      	movs	r3, #0
 80128c0:	220a      	movs	r2, #10
 80128c2:	4648      	mov	r0, r9
 80128c4:	f000 f968 	bl	8012b98 <__multadd>
 80128c8:	9001      	str	r0, [sp, #4]
 80128ca:	e7ec      	b.n	80128a6 <_dtoa_r+0xa7e>
 80128cc:	08013e7c 	.word	0x08013e7c
 80128d0:	08013e00 	.word	0x08013e00

080128d4 <_free_r>:
 80128d4:	b538      	push	{r3, r4, r5, lr}
 80128d6:	4605      	mov	r5, r0
 80128d8:	2900      	cmp	r1, #0
 80128da:	d041      	beq.n	8012960 <_free_r+0x8c>
 80128dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80128e0:	1f0c      	subs	r4, r1, #4
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	bfb8      	it	lt
 80128e6:	18e4      	addlt	r4, r4, r3
 80128e8:	f000 f8e8 	bl	8012abc <__malloc_lock>
 80128ec:	4a1d      	ldr	r2, [pc, #116]	@ (8012964 <_free_r+0x90>)
 80128ee:	6813      	ldr	r3, [r2, #0]
 80128f0:	b933      	cbnz	r3, 8012900 <_free_r+0x2c>
 80128f2:	6063      	str	r3, [r4, #4]
 80128f4:	6014      	str	r4, [r2, #0]
 80128f6:	4628      	mov	r0, r5
 80128f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128fc:	f000 b8e4 	b.w	8012ac8 <__malloc_unlock>
 8012900:	42a3      	cmp	r3, r4
 8012902:	d908      	bls.n	8012916 <_free_r+0x42>
 8012904:	6820      	ldr	r0, [r4, #0]
 8012906:	1821      	adds	r1, r4, r0
 8012908:	428b      	cmp	r3, r1
 801290a:	bf01      	itttt	eq
 801290c:	6819      	ldreq	r1, [r3, #0]
 801290e:	685b      	ldreq	r3, [r3, #4]
 8012910:	1809      	addeq	r1, r1, r0
 8012912:	6021      	streq	r1, [r4, #0]
 8012914:	e7ed      	b.n	80128f2 <_free_r+0x1e>
 8012916:	461a      	mov	r2, r3
 8012918:	685b      	ldr	r3, [r3, #4]
 801291a:	b10b      	cbz	r3, 8012920 <_free_r+0x4c>
 801291c:	42a3      	cmp	r3, r4
 801291e:	d9fa      	bls.n	8012916 <_free_r+0x42>
 8012920:	6811      	ldr	r1, [r2, #0]
 8012922:	1850      	adds	r0, r2, r1
 8012924:	42a0      	cmp	r0, r4
 8012926:	d10b      	bne.n	8012940 <_free_r+0x6c>
 8012928:	6820      	ldr	r0, [r4, #0]
 801292a:	4401      	add	r1, r0
 801292c:	1850      	adds	r0, r2, r1
 801292e:	4283      	cmp	r3, r0
 8012930:	6011      	str	r1, [r2, #0]
 8012932:	d1e0      	bne.n	80128f6 <_free_r+0x22>
 8012934:	6818      	ldr	r0, [r3, #0]
 8012936:	685b      	ldr	r3, [r3, #4]
 8012938:	6053      	str	r3, [r2, #4]
 801293a:	4408      	add	r0, r1
 801293c:	6010      	str	r0, [r2, #0]
 801293e:	e7da      	b.n	80128f6 <_free_r+0x22>
 8012940:	d902      	bls.n	8012948 <_free_r+0x74>
 8012942:	230c      	movs	r3, #12
 8012944:	602b      	str	r3, [r5, #0]
 8012946:	e7d6      	b.n	80128f6 <_free_r+0x22>
 8012948:	6820      	ldr	r0, [r4, #0]
 801294a:	1821      	adds	r1, r4, r0
 801294c:	428b      	cmp	r3, r1
 801294e:	bf04      	itt	eq
 8012950:	6819      	ldreq	r1, [r3, #0]
 8012952:	685b      	ldreq	r3, [r3, #4]
 8012954:	6063      	str	r3, [r4, #4]
 8012956:	bf04      	itt	eq
 8012958:	1809      	addeq	r1, r1, r0
 801295a:	6021      	streq	r1, [r4, #0]
 801295c:	6054      	str	r4, [r2, #4]
 801295e:	e7ca      	b.n	80128f6 <_free_r+0x22>
 8012960:	bd38      	pop	{r3, r4, r5, pc}
 8012962:	bf00      	nop
 8012964:	240056ec 	.word	0x240056ec

08012968 <malloc>:
 8012968:	4b02      	ldr	r3, [pc, #8]	@ (8012974 <malloc+0xc>)
 801296a:	4601      	mov	r1, r0
 801296c:	6818      	ldr	r0, [r3, #0]
 801296e:	f000 b825 	b.w	80129bc <_malloc_r>
 8012972:	bf00      	nop
 8012974:	24000024 	.word	0x24000024

08012978 <sbrk_aligned>:
 8012978:	b570      	push	{r4, r5, r6, lr}
 801297a:	4e0f      	ldr	r6, [pc, #60]	@ (80129b8 <sbrk_aligned+0x40>)
 801297c:	460c      	mov	r4, r1
 801297e:	6831      	ldr	r1, [r6, #0]
 8012980:	4605      	mov	r5, r0
 8012982:	b911      	cbnz	r1, 801298a <sbrk_aligned+0x12>
 8012984:	f000 fe46 	bl	8013614 <_sbrk_r>
 8012988:	6030      	str	r0, [r6, #0]
 801298a:	4621      	mov	r1, r4
 801298c:	4628      	mov	r0, r5
 801298e:	f000 fe41 	bl	8013614 <_sbrk_r>
 8012992:	1c43      	adds	r3, r0, #1
 8012994:	d103      	bne.n	801299e <sbrk_aligned+0x26>
 8012996:	f04f 34ff 	mov.w	r4, #4294967295
 801299a:	4620      	mov	r0, r4
 801299c:	bd70      	pop	{r4, r5, r6, pc}
 801299e:	1cc4      	adds	r4, r0, #3
 80129a0:	f024 0403 	bic.w	r4, r4, #3
 80129a4:	42a0      	cmp	r0, r4
 80129a6:	d0f8      	beq.n	801299a <sbrk_aligned+0x22>
 80129a8:	1a21      	subs	r1, r4, r0
 80129aa:	4628      	mov	r0, r5
 80129ac:	f000 fe32 	bl	8013614 <_sbrk_r>
 80129b0:	3001      	adds	r0, #1
 80129b2:	d1f2      	bne.n	801299a <sbrk_aligned+0x22>
 80129b4:	e7ef      	b.n	8012996 <sbrk_aligned+0x1e>
 80129b6:	bf00      	nop
 80129b8:	240056e8 	.word	0x240056e8

080129bc <_malloc_r>:
 80129bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129c0:	1ccd      	adds	r5, r1, #3
 80129c2:	f025 0503 	bic.w	r5, r5, #3
 80129c6:	3508      	adds	r5, #8
 80129c8:	2d0c      	cmp	r5, #12
 80129ca:	bf38      	it	cc
 80129cc:	250c      	movcc	r5, #12
 80129ce:	2d00      	cmp	r5, #0
 80129d0:	4606      	mov	r6, r0
 80129d2:	db01      	blt.n	80129d8 <_malloc_r+0x1c>
 80129d4:	42a9      	cmp	r1, r5
 80129d6:	d904      	bls.n	80129e2 <_malloc_r+0x26>
 80129d8:	230c      	movs	r3, #12
 80129da:	6033      	str	r3, [r6, #0]
 80129dc:	2000      	movs	r0, #0
 80129de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ab8 <_malloc_r+0xfc>
 80129e6:	f000 f869 	bl	8012abc <__malloc_lock>
 80129ea:	f8d8 3000 	ldr.w	r3, [r8]
 80129ee:	461c      	mov	r4, r3
 80129f0:	bb44      	cbnz	r4, 8012a44 <_malloc_r+0x88>
 80129f2:	4629      	mov	r1, r5
 80129f4:	4630      	mov	r0, r6
 80129f6:	f7ff ffbf 	bl	8012978 <sbrk_aligned>
 80129fa:	1c43      	adds	r3, r0, #1
 80129fc:	4604      	mov	r4, r0
 80129fe:	d158      	bne.n	8012ab2 <_malloc_r+0xf6>
 8012a00:	f8d8 4000 	ldr.w	r4, [r8]
 8012a04:	4627      	mov	r7, r4
 8012a06:	2f00      	cmp	r7, #0
 8012a08:	d143      	bne.n	8012a92 <_malloc_r+0xd6>
 8012a0a:	2c00      	cmp	r4, #0
 8012a0c:	d04b      	beq.n	8012aa6 <_malloc_r+0xea>
 8012a0e:	6823      	ldr	r3, [r4, #0]
 8012a10:	4639      	mov	r1, r7
 8012a12:	4630      	mov	r0, r6
 8012a14:	eb04 0903 	add.w	r9, r4, r3
 8012a18:	f000 fdfc 	bl	8013614 <_sbrk_r>
 8012a1c:	4581      	cmp	r9, r0
 8012a1e:	d142      	bne.n	8012aa6 <_malloc_r+0xea>
 8012a20:	6821      	ldr	r1, [r4, #0]
 8012a22:	1a6d      	subs	r5, r5, r1
 8012a24:	4629      	mov	r1, r5
 8012a26:	4630      	mov	r0, r6
 8012a28:	f7ff ffa6 	bl	8012978 <sbrk_aligned>
 8012a2c:	3001      	adds	r0, #1
 8012a2e:	d03a      	beq.n	8012aa6 <_malloc_r+0xea>
 8012a30:	6823      	ldr	r3, [r4, #0]
 8012a32:	442b      	add	r3, r5
 8012a34:	6023      	str	r3, [r4, #0]
 8012a36:	f8d8 3000 	ldr.w	r3, [r8]
 8012a3a:	685a      	ldr	r2, [r3, #4]
 8012a3c:	bb62      	cbnz	r2, 8012a98 <_malloc_r+0xdc>
 8012a3e:	f8c8 7000 	str.w	r7, [r8]
 8012a42:	e00f      	b.n	8012a64 <_malloc_r+0xa8>
 8012a44:	6822      	ldr	r2, [r4, #0]
 8012a46:	1b52      	subs	r2, r2, r5
 8012a48:	d420      	bmi.n	8012a8c <_malloc_r+0xd0>
 8012a4a:	2a0b      	cmp	r2, #11
 8012a4c:	d917      	bls.n	8012a7e <_malloc_r+0xc2>
 8012a4e:	1961      	adds	r1, r4, r5
 8012a50:	42a3      	cmp	r3, r4
 8012a52:	6025      	str	r5, [r4, #0]
 8012a54:	bf18      	it	ne
 8012a56:	6059      	strne	r1, [r3, #4]
 8012a58:	6863      	ldr	r3, [r4, #4]
 8012a5a:	bf08      	it	eq
 8012a5c:	f8c8 1000 	streq.w	r1, [r8]
 8012a60:	5162      	str	r2, [r4, r5]
 8012a62:	604b      	str	r3, [r1, #4]
 8012a64:	4630      	mov	r0, r6
 8012a66:	f000 f82f 	bl	8012ac8 <__malloc_unlock>
 8012a6a:	f104 000b 	add.w	r0, r4, #11
 8012a6e:	1d23      	adds	r3, r4, #4
 8012a70:	f020 0007 	bic.w	r0, r0, #7
 8012a74:	1ac2      	subs	r2, r0, r3
 8012a76:	bf1c      	itt	ne
 8012a78:	1a1b      	subne	r3, r3, r0
 8012a7a:	50a3      	strne	r3, [r4, r2]
 8012a7c:	e7af      	b.n	80129de <_malloc_r+0x22>
 8012a7e:	6862      	ldr	r2, [r4, #4]
 8012a80:	42a3      	cmp	r3, r4
 8012a82:	bf0c      	ite	eq
 8012a84:	f8c8 2000 	streq.w	r2, [r8]
 8012a88:	605a      	strne	r2, [r3, #4]
 8012a8a:	e7eb      	b.n	8012a64 <_malloc_r+0xa8>
 8012a8c:	4623      	mov	r3, r4
 8012a8e:	6864      	ldr	r4, [r4, #4]
 8012a90:	e7ae      	b.n	80129f0 <_malloc_r+0x34>
 8012a92:	463c      	mov	r4, r7
 8012a94:	687f      	ldr	r7, [r7, #4]
 8012a96:	e7b6      	b.n	8012a06 <_malloc_r+0x4a>
 8012a98:	461a      	mov	r2, r3
 8012a9a:	685b      	ldr	r3, [r3, #4]
 8012a9c:	42a3      	cmp	r3, r4
 8012a9e:	d1fb      	bne.n	8012a98 <_malloc_r+0xdc>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	6053      	str	r3, [r2, #4]
 8012aa4:	e7de      	b.n	8012a64 <_malloc_r+0xa8>
 8012aa6:	230c      	movs	r3, #12
 8012aa8:	6033      	str	r3, [r6, #0]
 8012aaa:	4630      	mov	r0, r6
 8012aac:	f000 f80c 	bl	8012ac8 <__malloc_unlock>
 8012ab0:	e794      	b.n	80129dc <_malloc_r+0x20>
 8012ab2:	6005      	str	r5, [r0, #0]
 8012ab4:	e7d6      	b.n	8012a64 <_malloc_r+0xa8>
 8012ab6:	bf00      	nop
 8012ab8:	240056ec 	.word	0x240056ec

08012abc <__malloc_lock>:
 8012abc:	4801      	ldr	r0, [pc, #4]	@ (8012ac4 <__malloc_lock+0x8>)
 8012abe:	f7ff b918 	b.w	8011cf2 <__retarget_lock_acquire_recursive>
 8012ac2:	bf00      	nop
 8012ac4:	240056e4 	.word	0x240056e4

08012ac8 <__malloc_unlock>:
 8012ac8:	4801      	ldr	r0, [pc, #4]	@ (8012ad0 <__malloc_unlock+0x8>)
 8012aca:	f7ff b913 	b.w	8011cf4 <__retarget_lock_release_recursive>
 8012ace:	bf00      	nop
 8012ad0:	240056e4 	.word	0x240056e4

08012ad4 <_Balloc>:
 8012ad4:	b570      	push	{r4, r5, r6, lr}
 8012ad6:	69c6      	ldr	r6, [r0, #28]
 8012ad8:	4604      	mov	r4, r0
 8012ada:	460d      	mov	r5, r1
 8012adc:	b976      	cbnz	r6, 8012afc <_Balloc+0x28>
 8012ade:	2010      	movs	r0, #16
 8012ae0:	f7ff ff42 	bl	8012968 <malloc>
 8012ae4:	4602      	mov	r2, r0
 8012ae6:	61e0      	str	r0, [r4, #28]
 8012ae8:	b920      	cbnz	r0, 8012af4 <_Balloc+0x20>
 8012aea:	4b18      	ldr	r3, [pc, #96]	@ (8012b4c <_Balloc+0x78>)
 8012aec:	4818      	ldr	r0, [pc, #96]	@ (8012b50 <_Balloc+0x7c>)
 8012aee:	216b      	movs	r1, #107	@ 0x6b
 8012af0:	f000 fda0 	bl	8013634 <__assert_func>
 8012af4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012af8:	6006      	str	r6, [r0, #0]
 8012afa:	60c6      	str	r6, [r0, #12]
 8012afc:	69e6      	ldr	r6, [r4, #28]
 8012afe:	68f3      	ldr	r3, [r6, #12]
 8012b00:	b183      	cbz	r3, 8012b24 <_Balloc+0x50>
 8012b02:	69e3      	ldr	r3, [r4, #28]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b0a:	b9b8      	cbnz	r0, 8012b3c <_Balloc+0x68>
 8012b0c:	2101      	movs	r1, #1
 8012b0e:	fa01 f605 	lsl.w	r6, r1, r5
 8012b12:	1d72      	adds	r2, r6, #5
 8012b14:	0092      	lsls	r2, r2, #2
 8012b16:	4620      	mov	r0, r4
 8012b18:	f000 fdaa 	bl	8013670 <_calloc_r>
 8012b1c:	b160      	cbz	r0, 8012b38 <_Balloc+0x64>
 8012b1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b22:	e00e      	b.n	8012b42 <_Balloc+0x6e>
 8012b24:	2221      	movs	r2, #33	@ 0x21
 8012b26:	2104      	movs	r1, #4
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f000 fda1 	bl	8013670 <_calloc_r>
 8012b2e:	69e3      	ldr	r3, [r4, #28]
 8012b30:	60f0      	str	r0, [r6, #12]
 8012b32:	68db      	ldr	r3, [r3, #12]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1e4      	bne.n	8012b02 <_Balloc+0x2e>
 8012b38:	2000      	movs	r0, #0
 8012b3a:	bd70      	pop	{r4, r5, r6, pc}
 8012b3c:	6802      	ldr	r2, [r0, #0]
 8012b3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b42:	2300      	movs	r3, #0
 8012b44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b48:	e7f7      	b.n	8012b3a <_Balloc+0x66>
 8012b4a:	bf00      	nop
 8012b4c:	08013e0d 	.word	0x08013e0d
 8012b50:	08013e8d 	.word	0x08013e8d

08012b54 <_Bfree>:
 8012b54:	b570      	push	{r4, r5, r6, lr}
 8012b56:	69c6      	ldr	r6, [r0, #28]
 8012b58:	4605      	mov	r5, r0
 8012b5a:	460c      	mov	r4, r1
 8012b5c:	b976      	cbnz	r6, 8012b7c <_Bfree+0x28>
 8012b5e:	2010      	movs	r0, #16
 8012b60:	f7ff ff02 	bl	8012968 <malloc>
 8012b64:	4602      	mov	r2, r0
 8012b66:	61e8      	str	r0, [r5, #28]
 8012b68:	b920      	cbnz	r0, 8012b74 <_Bfree+0x20>
 8012b6a:	4b09      	ldr	r3, [pc, #36]	@ (8012b90 <_Bfree+0x3c>)
 8012b6c:	4809      	ldr	r0, [pc, #36]	@ (8012b94 <_Bfree+0x40>)
 8012b6e:	218f      	movs	r1, #143	@ 0x8f
 8012b70:	f000 fd60 	bl	8013634 <__assert_func>
 8012b74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b78:	6006      	str	r6, [r0, #0]
 8012b7a:	60c6      	str	r6, [r0, #12]
 8012b7c:	b13c      	cbz	r4, 8012b8e <_Bfree+0x3a>
 8012b7e:	69eb      	ldr	r3, [r5, #28]
 8012b80:	6862      	ldr	r2, [r4, #4]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012b88:	6021      	str	r1, [r4, #0]
 8012b8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012b8e:	bd70      	pop	{r4, r5, r6, pc}
 8012b90:	08013e0d 	.word	0x08013e0d
 8012b94:	08013e8d 	.word	0x08013e8d

08012b98 <__multadd>:
 8012b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	690d      	ldr	r5, [r1, #16]
 8012b9e:	4607      	mov	r7, r0
 8012ba0:	460c      	mov	r4, r1
 8012ba2:	461e      	mov	r6, r3
 8012ba4:	f101 0c14 	add.w	ip, r1, #20
 8012ba8:	2000      	movs	r0, #0
 8012baa:	f8dc 3000 	ldr.w	r3, [ip]
 8012bae:	b299      	uxth	r1, r3
 8012bb0:	fb02 6101 	mla	r1, r2, r1, r6
 8012bb4:	0c1e      	lsrs	r6, r3, #16
 8012bb6:	0c0b      	lsrs	r3, r1, #16
 8012bb8:	fb02 3306 	mla	r3, r2, r6, r3
 8012bbc:	b289      	uxth	r1, r1
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012bc4:	4285      	cmp	r5, r0
 8012bc6:	f84c 1b04 	str.w	r1, [ip], #4
 8012bca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012bce:	dcec      	bgt.n	8012baa <__multadd+0x12>
 8012bd0:	b30e      	cbz	r6, 8012c16 <__multadd+0x7e>
 8012bd2:	68a3      	ldr	r3, [r4, #8]
 8012bd4:	42ab      	cmp	r3, r5
 8012bd6:	dc19      	bgt.n	8012c0c <__multadd+0x74>
 8012bd8:	6861      	ldr	r1, [r4, #4]
 8012bda:	4638      	mov	r0, r7
 8012bdc:	3101      	adds	r1, #1
 8012bde:	f7ff ff79 	bl	8012ad4 <_Balloc>
 8012be2:	4680      	mov	r8, r0
 8012be4:	b928      	cbnz	r0, 8012bf2 <__multadd+0x5a>
 8012be6:	4602      	mov	r2, r0
 8012be8:	4b0c      	ldr	r3, [pc, #48]	@ (8012c1c <__multadd+0x84>)
 8012bea:	480d      	ldr	r0, [pc, #52]	@ (8012c20 <__multadd+0x88>)
 8012bec:	21ba      	movs	r1, #186	@ 0xba
 8012bee:	f000 fd21 	bl	8013634 <__assert_func>
 8012bf2:	6922      	ldr	r2, [r4, #16]
 8012bf4:	3202      	adds	r2, #2
 8012bf6:	f104 010c 	add.w	r1, r4, #12
 8012bfa:	0092      	lsls	r2, r2, #2
 8012bfc:	300c      	adds	r0, #12
 8012bfe:	f7ff f87a 	bl	8011cf6 <memcpy>
 8012c02:	4621      	mov	r1, r4
 8012c04:	4638      	mov	r0, r7
 8012c06:	f7ff ffa5 	bl	8012b54 <_Bfree>
 8012c0a:	4644      	mov	r4, r8
 8012c0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c10:	3501      	adds	r5, #1
 8012c12:	615e      	str	r6, [r3, #20]
 8012c14:	6125      	str	r5, [r4, #16]
 8012c16:	4620      	mov	r0, r4
 8012c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c1c:	08013e7c 	.word	0x08013e7c
 8012c20:	08013e8d 	.word	0x08013e8d

08012c24 <__hi0bits>:
 8012c24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012c28:	4603      	mov	r3, r0
 8012c2a:	bf36      	itet	cc
 8012c2c:	0403      	lslcc	r3, r0, #16
 8012c2e:	2000      	movcs	r0, #0
 8012c30:	2010      	movcc	r0, #16
 8012c32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c36:	bf3c      	itt	cc
 8012c38:	021b      	lslcc	r3, r3, #8
 8012c3a:	3008      	addcc	r0, #8
 8012c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c40:	bf3c      	itt	cc
 8012c42:	011b      	lslcc	r3, r3, #4
 8012c44:	3004      	addcc	r0, #4
 8012c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c4a:	bf3c      	itt	cc
 8012c4c:	009b      	lslcc	r3, r3, #2
 8012c4e:	3002      	addcc	r0, #2
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	db05      	blt.n	8012c60 <__hi0bits+0x3c>
 8012c54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012c58:	f100 0001 	add.w	r0, r0, #1
 8012c5c:	bf08      	it	eq
 8012c5e:	2020      	moveq	r0, #32
 8012c60:	4770      	bx	lr

08012c62 <__lo0bits>:
 8012c62:	6803      	ldr	r3, [r0, #0]
 8012c64:	4602      	mov	r2, r0
 8012c66:	f013 0007 	ands.w	r0, r3, #7
 8012c6a:	d00b      	beq.n	8012c84 <__lo0bits+0x22>
 8012c6c:	07d9      	lsls	r1, r3, #31
 8012c6e:	d421      	bmi.n	8012cb4 <__lo0bits+0x52>
 8012c70:	0798      	lsls	r0, r3, #30
 8012c72:	bf49      	itett	mi
 8012c74:	085b      	lsrmi	r3, r3, #1
 8012c76:	089b      	lsrpl	r3, r3, #2
 8012c78:	2001      	movmi	r0, #1
 8012c7a:	6013      	strmi	r3, [r2, #0]
 8012c7c:	bf5c      	itt	pl
 8012c7e:	6013      	strpl	r3, [r2, #0]
 8012c80:	2002      	movpl	r0, #2
 8012c82:	4770      	bx	lr
 8012c84:	b299      	uxth	r1, r3
 8012c86:	b909      	cbnz	r1, 8012c8c <__lo0bits+0x2a>
 8012c88:	0c1b      	lsrs	r3, r3, #16
 8012c8a:	2010      	movs	r0, #16
 8012c8c:	b2d9      	uxtb	r1, r3
 8012c8e:	b909      	cbnz	r1, 8012c94 <__lo0bits+0x32>
 8012c90:	3008      	adds	r0, #8
 8012c92:	0a1b      	lsrs	r3, r3, #8
 8012c94:	0719      	lsls	r1, r3, #28
 8012c96:	bf04      	itt	eq
 8012c98:	091b      	lsreq	r3, r3, #4
 8012c9a:	3004      	addeq	r0, #4
 8012c9c:	0799      	lsls	r1, r3, #30
 8012c9e:	bf04      	itt	eq
 8012ca0:	089b      	lsreq	r3, r3, #2
 8012ca2:	3002      	addeq	r0, #2
 8012ca4:	07d9      	lsls	r1, r3, #31
 8012ca6:	d403      	bmi.n	8012cb0 <__lo0bits+0x4e>
 8012ca8:	085b      	lsrs	r3, r3, #1
 8012caa:	f100 0001 	add.w	r0, r0, #1
 8012cae:	d003      	beq.n	8012cb8 <__lo0bits+0x56>
 8012cb0:	6013      	str	r3, [r2, #0]
 8012cb2:	4770      	bx	lr
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	4770      	bx	lr
 8012cb8:	2020      	movs	r0, #32
 8012cba:	4770      	bx	lr

08012cbc <__i2b>:
 8012cbc:	b510      	push	{r4, lr}
 8012cbe:	460c      	mov	r4, r1
 8012cc0:	2101      	movs	r1, #1
 8012cc2:	f7ff ff07 	bl	8012ad4 <_Balloc>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	b928      	cbnz	r0, 8012cd6 <__i2b+0x1a>
 8012cca:	4b05      	ldr	r3, [pc, #20]	@ (8012ce0 <__i2b+0x24>)
 8012ccc:	4805      	ldr	r0, [pc, #20]	@ (8012ce4 <__i2b+0x28>)
 8012cce:	f240 1145 	movw	r1, #325	@ 0x145
 8012cd2:	f000 fcaf 	bl	8013634 <__assert_func>
 8012cd6:	2301      	movs	r3, #1
 8012cd8:	6144      	str	r4, [r0, #20]
 8012cda:	6103      	str	r3, [r0, #16]
 8012cdc:	bd10      	pop	{r4, pc}
 8012cde:	bf00      	nop
 8012ce0:	08013e7c 	.word	0x08013e7c
 8012ce4:	08013e8d 	.word	0x08013e8d

08012ce8 <__multiply>:
 8012ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cec:	4614      	mov	r4, r2
 8012cee:	690a      	ldr	r2, [r1, #16]
 8012cf0:	6923      	ldr	r3, [r4, #16]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	bfa8      	it	ge
 8012cf6:	4623      	movge	r3, r4
 8012cf8:	460f      	mov	r7, r1
 8012cfa:	bfa4      	itt	ge
 8012cfc:	460c      	movge	r4, r1
 8012cfe:	461f      	movge	r7, r3
 8012d00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012d04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012d08:	68a3      	ldr	r3, [r4, #8]
 8012d0a:	6861      	ldr	r1, [r4, #4]
 8012d0c:	eb0a 0609 	add.w	r6, sl, r9
 8012d10:	42b3      	cmp	r3, r6
 8012d12:	b085      	sub	sp, #20
 8012d14:	bfb8      	it	lt
 8012d16:	3101      	addlt	r1, #1
 8012d18:	f7ff fedc 	bl	8012ad4 <_Balloc>
 8012d1c:	b930      	cbnz	r0, 8012d2c <__multiply+0x44>
 8012d1e:	4602      	mov	r2, r0
 8012d20:	4b44      	ldr	r3, [pc, #272]	@ (8012e34 <__multiply+0x14c>)
 8012d22:	4845      	ldr	r0, [pc, #276]	@ (8012e38 <__multiply+0x150>)
 8012d24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012d28:	f000 fc84 	bl	8013634 <__assert_func>
 8012d2c:	f100 0514 	add.w	r5, r0, #20
 8012d30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012d34:	462b      	mov	r3, r5
 8012d36:	2200      	movs	r2, #0
 8012d38:	4543      	cmp	r3, r8
 8012d3a:	d321      	bcc.n	8012d80 <__multiply+0x98>
 8012d3c:	f107 0114 	add.w	r1, r7, #20
 8012d40:	f104 0214 	add.w	r2, r4, #20
 8012d44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012d48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012d4c:	9302      	str	r3, [sp, #8]
 8012d4e:	1b13      	subs	r3, r2, r4
 8012d50:	3b15      	subs	r3, #21
 8012d52:	f023 0303 	bic.w	r3, r3, #3
 8012d56:	3304      	adds	r3, #4
 8012d58:	f104 0715 	add.w	r7, r4, #21
 8012d5c:	42ba      	cmp	r2, r7
 8012d5e:	bf38      	it	cc
 8012d60:	2304      	movcc	r3, #4
 8012d62:	9301      	str	r3, [sp, #4]
 8012d64:	9b02      	ldr	r3, [sp, #8]
 8012d66:	9103      	str	r1, [sp, #12]
 8012d68:	428b      	cmp	r3, r1
 8012d6a:	d80c      	bhi.n	8012d86 <__multiply+0x9e>
 8012d6c:	2e00      	cmp	r6, #0
 8012d6e:	dd03      	ble.n	8012d78 <__multiply+0x90>
 8012d70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d05b      	beq.n	8012e30 <__multiply+0x148>
 8012d78:	6106      	str	r6, [r0, #16]
 8012d7a:	b005      	add	sp, #20
 8012d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d80:	f843 2b04 	str.w	r2, [r3], #4
 8012d84:	e7d8      	b.n	8012d38 <__multiply+0x50>
 8012d86:	f8b1 a000 	ldrh.w	sl, [r1]
 8012d8a:	f1ba 0f00 	cmp.w	sl, #0
 8012d8e:	d024      	beq.n	8012dda <__multiply+0xf2>
 8012d90:	f104 0e14 	add.w	lr, r4, #20
 8012d94:	46a9      	mov	r9, r5
 8012d96:	f04f 0c00 	mov.w	ip, #0
 8012d9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012d9e:	f8d9 3000 	ldr.w	r3, [r9]
 8012da2:	fa1f fb87 	uxth.w	fp, r7
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012dac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012db0:	f8d9 7000 	ldr.w	r7, [r9]
 8012db4:	4463      	add	r3, ip
 8012db6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012dba:	fb0a c70b 	mla	r7, sl, fp, ip
 8012dbe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012dc2:	b29b      	uxth	r3, r3
 8012dc4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012dc8:	4572      	cmp	r2, lr
 8012dca:	f849 3b04 	str.w	r3, [r9], #4
 8012dce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012dd2:	d8e2      	bhi.n	8012d9a <__multiply+0xb2>
 8012dd4:	9b01      	ldr	r3, [sp, #4]
 8012dd6:	f845 c003 	str.w	ip, [r5, r3]
 8012dda:	9b03      	ldr	r3, [sp, #12]
 8012ddc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012de0:	3104      	adds	r1, #4
 8012de2:	f1b9 0f00 	cmp.w	r9, #0
 8012de6:	d021      	beq.n	8012e2c <__multiply+0x144>
 8012de8:	682b      	ldr	r3, [r5, #0]
 8012dea:	f104 0c14 	add.w	ip, r4, #20
 8012dee:	46ae      	mov	lr, r5
 8012df0:	f04f 0a00 	mov.w	sl, #0
 8012df4:	f8bc b000 	ldrh.w	fp, [ip]
 8012df8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012dfc:	fb09 770b 	mla	r7, r9, fp, r7
 8012e00:	4457      	add	r7, sl
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012e08:	f84e 3b04 	str.w	r3, [lr], #4
 8012e0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012e10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e14:	f8be 3000 	ldrh.w	r3, [lr]
 8012e18:	fb09 330a 	mla	r3, r9, sl, r3
 8012e1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012e20:	4562      	cmp	r2, ip
 8012e22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e26:	d8e5      	bhi.n	8012df4 <__multiply+0x10c>
 8012e28:	9f01      	ldr	r7, [sp, #4]
 8012e2a:	51eb      	str	r3, [r5, r7]
 8012e2c:	3504      	adds	r5, #4
 8012e2e:	e799      	b.n	8012d64 <__multiply+0x7c>
 8012e30:	3e01      	subs	r6, #1
 8012e32:	e79b      	b.n	8012d6c <__multiply+0x84>
 8012e34:	08013e7c 	.word	0x08013e7c
 8012e38:	08013e8d 	.word	0x08013e8d

08012e3c <__pow5mult>:
 8012e3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e40:	4615      	mov	r5, r2
 8012e42:	f012 0203 	ands.w	r2, r2, #3
 8012e46:	4607      	mov	r7, r0
 8012e48:	460e      	mov	r6, r1
 8012e4a:	d007      	beq.n	8012e5c <__pow5mult+0x20>
 8012e4c:	4c25      	ldr	r4, [pc, #148]	@ (8012ee4 <__pow5mult+0xa8>)
 8012e4e:	3a01      	subs	r2, #1
 8012e50:	2300      	movs	r3, #0
 8012e52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e56:	f7ff fe9f 	bl	8012b98 <__multadd>
 8012e5a:	4606      	mov	r6, r0
 8012e5c:	10ad      	asrs	r5, r5, #2
 8012e5e:	d03d      	beq.n	8012edc <__pow5mult+0xa0>
 8012e60:	69fc      	ldr	r4, [r7, #28]
 8012e62:	b97c      	cbnz	r4, 8012e84 <__pow5mult+0x48>
 8012e64:	2010      	movs	r0, #16
 8012e66:	f7ff fd7f 	bl	8012968 <malloc>
 8012e6a:	4602      	mov	r2, r0
 8012e6c:	61f8      	str	r0, [r7, #28]
 8012e6e:	b928      	cbnz	r0, 8012e7c <__pow5mult+0x40>
 8012e70:	4b1d      	ldr	r3, [pc, #116]	@ (8012ee8 <__pow5mult+0xac>)
 8012e72:	481e      	ldr	r0, [pc, #120]	@ (8012eec <__pow5mult+0xb0>)
 8012e74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012e78:	f000 fbdc 	bl	8013634 <__assert_func>
 8012e7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012e80:	6004      	str	r4, [r0, #0]
 8012e82:	60c4      	str	r4, [r0, #12]
 8012e84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012e88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012e8c:	b94c      	cbnz	r4, 8012ea2 <__pow5mult+0x66>
 8012e8e:	f240 2171 	movw	r1, #625	@ 0x271
 8012e92:	4638      	mov	r0, r7
 8012e94:	f7ff ff12 	bl	8012cbc <__i2b>
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8012e9e:	4604      	mov	r4, r0
 8012ea0:	6003      	str	r3, [r0, #0]
 8012ea2:	f04f 0900 	mov.w	r9, #0
 8012ea6:	07eb      	lsls	r3, r5, #31
 8012ea8:	d50a      	bpl.n	8012ec0 <__pow5mult+0x84>
 8012eaa:	4631      	mov	r1, r6
 8012eac:	4622      	mov	r2, r4
 8012eae:	4638      	mov	r0, r7
 8012eb0:	f7ff ff1a 	bl	8012ce8 <__multiply>
 8012eb4:	4631      	mov	r1, r6
 8012eb6:	4680      	mov	r8, r0
 8012eb8:	4638      	mov	r0, r7
 8012eba:	f7ff fe4b 	bl	8012b54 <_Bfree>
 8012ebe:	4646      	mov	r6, r8
 8012ec0:	106d      	asrs	r5, r5, #1
 8012ec2:	d00b      	beq.n	8012edc <__pow5mult+0xa0>
 8012ec4:	6820      	ldr	r0, [r4, #0]
 8012ec6:	b938      	cbnz	r0, 8012ed8 <__pow5mult+0x9c>
 8012ec8:	4622      	mov	r2, r4
 8012eca:	4621      	mov	r1, r4
 8012ecc:	4638      	mov	r0, r7
 8012ece:	f7ff ff0b 	bl	8012ce8 <__multiply>
 8012ed2:	6020      	str	r0, [r4, #0]
 8012ed4:	f8c0 9000 	str.w	r9, [r0]
 8012ed8:	4604      	mov	r4, r0
 8012eda:	e7e4      	b.n	8012ea6 <__pow5mult+0x6a>
 8012edc:	4630      	mov	r0, r6
 8012ede:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ee2:	bf00      	nop
 8012ee4:	08013ee8 	.word	0x08013ee8
 8012ee8:	08013e0d 	.word	0x08013e0d
 8012eec:	08013e8d 	.word	0x08013e8d

08012ef0 <__lshift>:
 8012ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ef4:	460c      	mov	r4, r1
 8012ef6:	6849      	ldr	r1, [r1, #4]
 8012ef8:	6923      	ldr	r3, [r4, #16]
 8012efa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012efe:	68a3      	ldr	r3, [r4, #8]
 8012f00:	4607      	mov	r7, r0
 8012f02:	4691      	mov	r9, r2
 8012f04:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f08:	f108 0601 	add.w	r6, r8, #1
 8012f0c:	42b3      	cmp	r3, r6
 8012f0e:	db0b      	blt.n	8012f28 <__lshift+0x38>
 8012f10:	4638      	mov	r0, r7
 8012f12:	f7ff fddf 	bl	8012ad4 <_Balloc>
 8012f16:	4605      	mov	r5, r0
 8012f18:	b948      	cbnz	r0, 8012f2e <__lshift+0x3e>
 8012f1a:	4602      	mov	r2, r0
 8012f1c:	4b28      	ldr	r3, [pc, #160]	@ (8012fc0 <__lshift+0xd0>)
 8012f1e:	4829      	ldr	r0, [pc, #164]	@ (8012fc4 <__lshift+0xd4>)
 8012f20:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012f24:	f000 fb86 	bl	8013634 <__assert_func>
 8012f28:	3101      	adds	r1, #1
 8012f2a:	005b      	lsls	r3, r3, #1
 8012f2c:	e7ee      	b.n	8012f0c <__lshift+0x1c>
 8012f2e:	2300      	movs	r3, #0
 8012f30:	f100 0114 	add.w	r1, r0, #20
 8012f34:	f100 0210 	add.w	r2, r0, #16
 8012f38:	4618      	mov	r0, r3
 8012f3a:	4553      	cmp	r3, sl
 8012f3c:	db33      	blt.n	8012fa6 <__lshift+0xb6>
 8012f3e:	6920      	ldr	r0, [r4, #16]
 8012f40:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f44:	f104 0314 	add.w	r3, r4, #20
 8012f48:	f019 091f 	ands.w	r9, r9, #31
 8012f4c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f50:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f54:	d02b      	beq.n	8012fae <__lshift+0xbe>
 8012f56:	f1c9 0e20 	rsb	lr, r9, #32
 8012f5a:	468a      	mov	sl, r1
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	6818      	ldr	r0, [r3, #0]
 8012f60:	fa00 f009 	lsl.w	r0, r0, r9
 8012f64:	4310      	orrs	r0, r2
 8012f66:	f84a 0b04 	str.w	r0, [sl], #4
 8012f6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8012f6e:	459c      	cmp	ip, r3
 8012f70:	fa22 f20e 	lsr.w	r2, r2, lr
 8012f74:	d8f3      	bhi.n	8012f5e <__lshift+0x6e>
 8012f76:	ebac 0304 	sub.w	r3, ip, r4
 8012f7a:	3b15      	subs	r3, #21
 8012f7c:	f023 0303 	bic.w	r3, r3, #3
 8012f80:	3304      	adds	r3, #4
 8012f82:	f104 0015 	add.w	r0, r4, #21
 8012f86:	4584      	cmp	ip, r0
 8012f88:	bf38      	it	cc
 8012f8a:	2304      	movcc	r3, #4
 8012f8c:	50ca      	str	r2, [r1, r3]
 8012f8e:	b10a      	cbz	r2, 8012f94 <__lshift+0xa4>
 8012f90:	f108 0602 	add.w	r6, r8, #2
 8012f94:	3e01      	subs	r6, #1
 8012f96:	4638      	mov	r0, r7
 8012f98:	612e      	str	r6, [r5, #16]
 8012f9a:	4621      	mov	r1, r4
 8012f9c:	f7ff fdda 	bl	8012b54 <_Bfree>
 8012fa0:	4628      	mov	r0, r5
 8012fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012faa:	3301      	adds	r3, #1
 8012fac:	e7c5      	b.n	8012f3a <__lshift+0x4a>
 8012fae:	3904      	subs	r1, #4
 8012fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fb4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012fb8:	459c      	cmp	ip, r3
 8012fba:	d8f9      	bhi.n	8012fb0 <__lshift+0xc0>
 8012fbc:	e7ea      	b.n	8012f94 <__lshift+0xa4>
 8012fbe:	bf00      	nop
 8012fc0:	08013e7c 	.word	0x08013e7c
 8012fc4:	08013e8d 	.word	0x08013e8d

08012fc8 <__mcmp>:
 8012fc8:	690a      	ldr	r2, [r1, #16]
 8012fca:	4603      	mov	r3, r0
 8012fcc:	6900      	ldr	r0, [r0, #16]
 8012fce:	1a80      	subs	r0, r0, r2
 8012fd0:	b530      	push	{r4, r5, lr}
 8012fd2:	d10e      	bne.n	8012ff2 <__mcmp+0x2a>
 8012fd4:	3314      	adds	r3, #20
 8012fd6:	3114      	adds	r1, #20
 8012fd8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012fdc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012fe0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012fe4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012fe8:	4295      	cmp	r5, r2
 8012fea:	d003      	beq.n	8012ff4 <__mcmp+0x2c>
 8012fec:	d205      	bcs.n	8012ffa <__mcmp+0x32>
 8012fee:	f04f 30ff 	mov.w	r0, #4294967295
 8012ff2:	bd30      	pop	{r4, r5, pc}
 8012ff4:	42a3      	cmp	r3, r4
 8012ff6:	d3f3      	bcc.n	8012fe0 <__mcmp+0x18>
 8012ff8:	e7fb      	b.n	8012ff2 <__mcmp+0x2a>
 8012ffa:	2001      	movs	r0, #1
 8012ffc:	e7f9      	b.n	8012ff2 <__mcmp+0x2a>
	...

08013000 <__mdiff>:
 8013000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013004:	4689      	mov	r9, r1
 8013006:	4606      	mov	r6, r0
 8013008:	4611      	mov	r1, r2
 801300a:	4648      	mov	r0, r9
 801300c:	4614      	mov	r4, r2
 801300e:	f7ff ffdb 	bl	8012fc8 <__mcmp>
 8013012:	1e05      	subs	r5, r0, #0
 8013014:	d112      	bne.n	801303c <__mdiff+0x3c>
 8013016:	4629      	mov	r1, r5
 8013018:	4630      	mov	r0, r6
 801301a:	f7ff fd5b 	bl	8012ad4 <_Balloc>
 801301e:	4602      	mov	r2, r0
 8013020:	b928      	cbnz	r0, 801302e <__mdiff+0x2e>
 8013022:	4b3f      	ldr	r3, [pc, #252]	@ (8013120 <__mdiff+0x120>)
 8013024:	f240 2137 	movw	r1, #567	@ 0x237
 8013028:	483e      	ldr	r0, [pc, #248]	@ (8013124 <__mdiff+0x124>)
 801302a:	f000 fb03 	bl	8013634 <__assert_func>
 801302e:	2301      	movs	r3, #1
 8013030:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013034:	4610      	mov	r0, r2
 8013036:	b003      	add	sp, #12
 8013038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303c:	bfbc      	itt	lt
 801303e:	464b      	movlt	r3, r9
 8013040:	46a1      	movlt	r9, r4
 8013042:	4630      	mov	r0, r6
 8013044:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013048:	bfba      	itte	lt
 801304a:	461c      	movlt	r4, r3
 801304c:	2501      	movlt	r5, #1
 801304e:	2500      	movge	r5, #0
 8013050:	f7ff fd40 	bl	8012ad4 <_Balloc>
 8013054:	4602      	mov	r2, r0
 8013056:	b918      	cbnz	r0, 8013060 <__mdiff+0x60>
 8013058:	4b31      	ldr	r3, [pc, #196]	@ (8013120 <__mdiff+0x120>)
 801305a:	f240 2145 	movw	r1, #581	@ 0x245
 801305e:	e7e3      	b.n	8013028 <__mdiff+0x28>
 8013060:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013064:	6926      	ldr	r6, [r4, #16]
 8013066:	60c5      	str	r5, [r0, #12]
 8013068:	f109 0310 	add.w	r3, r9, #16
 801306c:	f109 0514 	add.w	r5, r9, #20
 8013070:	f104 0e14 	add.w	lr, r4, #20
 8013074:	f100 0b14 	add.w	fp, r0, #20
 8013078:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801307c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013080:	9301      	str	r3, [sp, #4]
 8013082:	46d9      	mov	r9, fp
 8013084:	f04f 0c00 	mov.w	ip, #0
 8013088:	9b01      	ldr	r3, [sp, #4]
 801308a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801308e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013092:	9301      	str	r3, [sp, #4]
 8013094:	fa1f f38a 	uxth.w	r3, sl
 8013098:	4619      	mov	r1, r3
 801309a:	b283      	uxth	r3, r0
 801309c:	1acb      	subs	r3, r1, r3
 801309e:	0c00      	lsrs	r0, r0, #16
 80130a0:	4463      	add	r3, ip
 80130a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80130a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80130aa:	b29b      	uxth	r3, r3
 80130ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80130b0:	4576      	cmp	r6, lr
 80130b2:	f849 3b04 	str.w	r3, [r9], #4
 80130b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80130ba:	d8e5      	bhi.n	8013088 <__mdiff+0x88>
 80130bc:	1b33      	subs	r3, r6, r4
 80130be:	3b15      	subs	r3, #21
 80130c0:	f023 0303 	bic.w	r3, r3, #3
 80130c4:	3415      	adds	r4, #21
 80130c6:	3304      	adds	r3, #4
 80130c8:	42a6      	cmp	r6, r4
 80130ca:	bf38      	it	cc
 80130cc:	2304      	movcc	r3, #4
 80130ce:	441d      	add	r5, r3
 80130d0:	445b      	add	r3, fp
 80130d2:	461e      	mov	r6, r3
 80130d4:	462c      	mov	r4, r5
 80130d6:	4544      	cmp	r4, r8
 80130d8:	d30e      	bcc.n	80130f8 <__mdiff+0xf8>
 80130da:	f108 0103 	add.w	r1, r8, #3
 80130de:	1b49      	subs	r1, r1, r5
 80130e0:	f021 0103 	bic.w	r1, r1, #3
 80130e4:	3d03      	subs	r5, #3
 80130e6:	45a8      	cmp	r8, r5
 80130e8:	bf38      	it	cc
 80130ea:	2100      	movcc	r1, #0
 80130ec:	440b      	add	r3, r1
 80130ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80130f2:	b191      	cbz	r1, 801311a <__mdiff+0x11a>
 80130f4:	6117      	str	r7, [r2, #16]
 80130f6:	e79d      	b.n	8013034 <__mdiff+0x34>
 80130f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80130fc:	46e6      	mov	lr, ip
 80130fe:	0c08      	lsrs	r0, r1, #16
 8013100:	fa1c fc81 	uxtah	ip, ip, r1
 8013104:	4471      	add	r1, lr
 8013106:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801310a:	b289      	uxth	r1, r1
 801310c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013110:	f846 1b04 	str.w	r1, [r6], #4
 8013114:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013118:	e7dd      	b.n	80130d6 <__mdiff+0xd6>
 801311a:	3f01      	subs	r7, #1
 801311c:	e7e7      	b.n	80130ee <__mdiff+0xee>
 801311e:	bf00      	nop
 8013120:	08013e7c 	.word	0x08013e7c
 8013124:	08013e8d 	.word	0x08013e8d

08013128 <__d2b>:
 8013128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801312c:	460f      	mov	r7, r1
 801312e:	2101      	movs	r1, #1
 8013130:	ec59 8b10 	vmov	r8, r9, d0
 8013134:	4616      	mov	r6, r2
 8013136:	f7ff fccd 	bl	8012ad4 <_Balloc>
 801313a:	4604      	mov	r4, r0
 801313c:	b930      	cbnz	r0, 801314c <__d2b+0x24>
 801313e:	4602      	mov	r2, r0
 8013140:	4b23      	ldr	r3, [pc, #140]	@ (80131d0 <__d2b+0xa8>)
 8013142:	4824      	ldr	r0, [pc, #144]	@ (80131d4 <__d2b+0xac>)
 8013144:	f240 310f 	movw	r1, #783	@ 0x30f
 8013148:	f000 fa74 	bl	8013634 <__assert_func>
 801314c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013154:	b10d      	cbz	r5, 801315a <__d2b+0x32>
 8013156:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801315a:	9301      	str	r3, [sp, #4]
 801315c:	f1b8 0300 	subs.w	r3, r8, #0
 8013160:	d023      	beq.n	80131aa <__d2b+0x82>
 8013162:	4668      	mov	r0, sp
 8013164:	9300      	str	r3, [sp, #0]
 8013166:	f7ff fd7c 	bl	8012c62 <__lo0bits>
 801316a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801316e:	b1d0      	cbz	r0, 80131a6 <__d2b+0x7e>
 8013170:	f1c0 0320 	rsb	r3, r0, #32
 8013174:	fa02 f303 	lsl.w	r3, r2, r3
 8013178:	430b      	orrs	r3, r1
 801317a:	40c2      	lsrs	r2, r0
 801317c:	6163      	str	r3, [r4, #20]
 801317e:	9201      	str	r2, [sp, #4]
 8013180:	9b01      	ldr	r3, [sp, #4]
 8013182:	61a3      	str	r3, [r4, #24]
 8013184:	2b00      	cmp	r3, #0
 8013186:	bf0c      	ite	eq
 8013188:	2201      	moveq	r2, #1
 801318a:	2202      	movne	r2, #2
 801318c:	6122      	str	r2, [r4, #16]
 801318e:	b1a5      	cbz	r5, 80131ba <__d2b+0x92>
 8013190:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013194:	4405      	add	r5, r0
 8013196:	603d      	str	r5, [r7, #0]
 8013198:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801319c:	6030      	str	r0, [r6, #0]
 801319e:	4620      	mov	r0, r4
 80131a0:	b003      	add	sp, #12
 80131a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131a6:	6161      	str	r1, [r4, #20]
 80131a8:	e7ea      	b.n	8013180 <__d2b+0x58>
 80131aa:	a801      	add	r0, sp, #4
 80131ac:	f7ff fd59 	bl	8012c62 <__lo0bits>
 80131b0:	9b01      	ldr	r3, [sp, #4]
 80131b2:	6163      	str	r3, [r4, #20]
 80131b4:	3020      	adds	r0, #32
 80131b6:	2201      	movs	r2, #1
 80131b8:	e7e8      	b.n	801318c <__d2b+0x64>
 80131ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80131be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80131c2:	6038      	str	r0, [r7, #0]
 80131c4:	6918      	ldr	r0, [r3, #16]
 80131c6:	f7ff fd2d 	bl	8012c24 <__hi0bits>
 80131ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80131ce:	e7e5      	b.n	801319c <__d2b+0x74>
 80131d0:	08013e7c 	.word	0x08013e7c
 80131d4:	08013e8d 	.word	0x08013e8d

080131d8 <__ssputs_r>:
 80131d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80131dc:	688e      	ldr	r6, [r1, #8]
 80131de:	461f      	mov	r7, r3
 80131e0:	42be      	cmp	r6, r7
 80131e2:	680b      	ldr	r3, [r1, #0]
 80131e4:	4682      	mov	sl, r0
 80131e6:	460c      	mov	r4, r1
 80131e8:	4690      	mov	r8, r2
 80131ea:	d82d      	bhi.n	8013248 <__ssputs_r+0x70>
 80131ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80131f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80131f4:	d026      	beq.n	8013244 <__ssputs_r+0x6c>
 80131f6:	6965      	ldr	r5, [r4, #20]
 80131f8:	6909      	ldr	r1, [r1, #16]
 80131fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80131fe:	eba3 0901 	sub.w	r9, r3, r1
 8013202:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013206:	1c7b      	adds	r3, r7, #1
 8013208:	444b      	add	r3, r9
 801320a:	106d      	asrs	r5, r5, #1
 801320c:	429d      	cmp	r5, r3
 801320e:	bf38      	it	cc
 8013210:	461d      	movcc	r5, r3
 8013212:	0553      	lsls	r3, r2, #21
 8013214:	d527      	bpl.n	8013266 <__ssputs_r+0x8e>
 8013216:	4629      	mov	r1, r5
 8013218:	f7ff fbd0 	bl	80129bc <_malloc_r>
 801321c:	4606      	mov	r6, r0
 801321e:	b360      	cbz	r0, 801327a <__ssputs_r+0xa2>
 8013220:	6921      	ldr	r1, [r4, #16]
 8013222:	464a      	mov	r2, r9
 8013224:	f7fe fd67 	bl	8011cf6 <memcpy>
 8013228:	89a3      	ldrh	r3, [r4, #12]
 801322a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801322e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013232:	81a3      	strh	r3, [r4, #12]
 8013234:	6126      	str	r6, [r4, #16]
 8013236:	6165      	str	r5, [r4, #20]
 8013238:	444e      	add	r6, r9
 801323a:	eba5 0509 	sub.w	r5, r5, r9
 801323e:	6026      	str	r6, [r4, #0]
 8013240:	60a5      	str	r5, [r4, #8]
 8013242:	463e      	mov	r6, r7
 8013244:	42be      	cmp	r6, r7
 8013246:	d900      	bls.n	801324a <__ssputs_r+0x72>
 8013248:	463e      	mov	r6, r7
 801324a:	6820      	ldr	r0, [r4, #0]
 801324c:	4632      	mov	r2, r6
 801324e:	4641      	mov	r1, r8
 8013250:	f000 f9c6 	bl	80135e0 <memmove>
 8013254:	68a3      	ldr	r3, [r4, #8]
 8013256:	1b9b      	subs	r3, r3, r6
 8013258:	60a3      	str	r3, [r4, #8]
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	4433      	add	r3, r6
 801325e:	6023      	str	r3, [r4, #0]
 8013260:	2000      	movs	r0, #0
 8013262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013266:	462a      	mov	r2, r5
 8013268:	f000 fa28 	bl	80136bc <_realloc_r>
 801326c:	4606      	mov	r6, r0
 801326e:	2800      	cmp	r0, #0
 8013270:	d1e0      	bne.n	8013234 <__ssputs_r+0x5c>
 8013272:	6921      	ldr	r1, [r4, #16]
 8013274:	4650      	mov	r0, sl
 8013276:	f7ff fb2d 	bl	80128d4 <_free_r>
 801327a:	230c      	movs	r3, #12
 801327c:	f8ca 3000 	str.w	r3, [sl]
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013286:	81a3      	strh	r3, [r4, #12]
 8013288:	f04f 30ff 	mov.w	r0, #4294967295
 801328c:	e7e9      	b.n	8013262 <__ssputs_r+0x8a>
	...

08013290 <_svfiprintf_r>:
 8013290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013294:	4698      	mov	r8, r3
 8013296:	898b      	ldrh	r3, [r1, #12]
 8013298:	061b      	lsls	r3, r3, #24
 801329a:	b09d      	sub	sp, #116	@ 0x74
 801329c:	4607      	mov	r7, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	4614      	mov	r4, r2
 80132a2:	d510      	bpl.n	80132c6 <_svfiprintf_r+0x36>
 80132a4:	690b      	ldr	r3, [r1, #16]
 80132a6:	b973      	cbnz	r3, 80132c6 <_svfiprintf_r+0x36>
 80132a8:	2140      	movs	r1, #64	@ 0x40
 80132aa:	f7ff fb87 	bl	80129bc <_malloc_r>
 80132ae:	6028      	str	r0, [r5, #0]
 80132b0:	6128      	str	r0, [r5, #16]
 80132b2:	b930      	cbnz	r0, 80132c2 <_svfiprintf_r+0x32>
 80132b4:	230c      	movs	r3, #12
 80132b6:	603b      	str	r3, [r7, #0]
 80132b8:	f04f 30ff 	mov.w	r0, #4294967295
 80132bc:	b01d      	add	sp, #116	@ 0x74
 80132be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c2:	2340      	movs	r3, #64	@ 0x40
 80132c4:	616b      	str	r3, [r5, #20]
 80132c6:	2300      	movs	r3, #0
 80132c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80132ca:	2320      	movs	r3, #32
 80132cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80132d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80132d4:	2330      	movs	r3, #48	@ 0x30
 80132d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013474 <_svfiprintf_r+0x1e4>
 80132da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80132de:	f04f 0901 	mov.w	r9, #1
 80132e2:	4623      	mov	r3, r4
 80132e4:	469a      	mov	sl, r3
 80132e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80132ea:	b10a      	cbz	r2, 80132f0 <_svfiprintf_r+0x60>
 80132ec:	2a25      	cmp	r2, #37	@ 0x25
 80132ee:	d1f9      	bne.n	80132e4 <_svfiprintf_r+0x54>
 80132f0:	ebba 0b04 	subs.w	fp, sl, r4
 80132f4:	d00b      	beq.n	801330e <_svfiprintf_r+0x7e>
 80132f6:	465b      	mov	r3, fp
 80132f8:	4622      	mov	r2, r4
 80132fa:	4629      	mov	r1, r5
 80132fc:	4638      	mov	r0, r7
 80132fe:	f7ff ff6b 	bl	80131d8 <__ssputs_r>
 8013302:	3001      	adds	r0, #1
 8013304:	f000 80a7 	beq.w	8013456 <_svfiprintf_r+0x1c6>
 8013308:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801330a:	445a      	add	r2, fp
 801330c:	9209      	str	r2, [sp, #36]	@ 0x24
 801330e:	f89a 3000 	ldrb.w	r3, [sl]
 8013312:	2b00      	cmp	r3, #0
 8013314:	f000 809f 	beq.w	8013456 <_svfiprintf_r+0x1c6>
 8013318:	2300      	movs	r3, #0
 801331a:	f04f 32ff 	mov.w	r2, #4294967295
 801331e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013322:	f10a 0a01 	add.w	sl, sl, #1
 8013326:	9304      	str	r3, [sp, #16]
 8013328:	9307      	str	r3, [sp, #28]
 801332a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801332e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013330:	4654      	mov	r4, sl
 8013332:	2205      	movs	r2, #5
 8013334:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013338:	484e      	ldr	r0, [pc, #312]	@ (8013474 <_svfiprintf_r+0x1e4>)
 801333a:	f7ec ffe9 	bl	8000310 <memchr>
 801333e:	9a04      	ldr	r2, [sp, #16]
 8013340:	b9d8      	cbnz	r0, 801337a <_svfiprintf_r+0xea>
 8013342:	06d0      	lsls	r0, r2, #27
 8013344:	bf44      	itt	mi
 8013346:	2320      	movmi	r3, #32
 8013348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801334c:	0711      	lsls	r1, r2, #28
 801334e:	bf44      	itt	mi
 8013350:	232b      	movmi	r3, #43	@ 0x2b
 8013352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013356:	f89a 3000 	ldrb.w	r3, [sl]
 801335a:	2b2a      	cmp	r3, #42	@ 0x2a
 801335c:	d015      	beq.n	801338a <_svfiprintf_r+0xfa>
 801335e:	9a07      	ldr	r2, [sp, #28]
 8013360:	4654      	mov	r4, sl
 8013362:	2000      	movs	r0, #0
 8013364:	f04f 0c0a 	mov.w	ip, #10
 8013368:	4621      	mov	r1, r4
 801336a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801336e:	3b30      	subs	r3, #48	@ 0x30
 8013370:	2b09      	cmp	r3, #9
 8013372:	d94b      	bls.n	801340c <_svfiprintf_r+0x17c>
 8013374:	b1b0      	cbz	r0, 80133a4 <_svfiprintf_r+0x114>
 8013376:	9207      	str	r2, [sp, #28]
 8013378:	e014      	b.n	80133a4 <_svfiprintf_r+0x114>
 801337a:	eba0 0308 	sub.w	r3, r0, r8
 801337e:	fa09 f303 	lsl.w	r3, r9, r3
 8013382:	4313      	orrs	r3, r2
 8013384:	9304      	str	r3, [sp, #16]
 8013386:	46a2      	mov	sl, r4
 8013388:	e7d2      	b.n	8013330 <_svfiprintf_r+0xa0>
 801338a:	9b03      	ldr	r3, [sp, #12]
 801338c:	1d19      	adds	r1, r3, #4
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	9103      	str	r1, [sp, #12]
 8013392:	2b00      	cmp	r3, #0
 8013394:	bfbb      	ittet	lt
 8013396:	425b      	neglt	r3, r3
 8013398:	f042 0202 	orrlt.w	r2, r2, #2
 801339c:	9307      	strge	r3, [sp, #28]
 801339e:	9307      	strlt	r3, [sp, #28]
 80133a0:	bfb8      	it	lt
 80133a2:	9204      	strlt	r2, [sp, #16]
 80133a4:	7823      	ldrb	r3, [r4, #0]
 80133a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80133a8:	d10a      	bne.n	80133c0 <_svfiprintf_r+0x130>
 80133aa:	7863      	ldrb	r3, [r4, #1]
 80133ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80133ae:	d132      	bne.n	8013416 <_svfiprintf_r+0x186>
 80133b0:	9b03      	ldr	r3, [sp, #12]
 80133b2:	1d1a      	adds	r2, r3, #4
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	9203      	str	r2, [sp, #12]
 80133b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80133bc:	3402      	adds	r4, #2
 80133be:	9305      	str	r3, [sp, #20]
 80133c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013484 <_svfiprintf_r+0x1f4>
 80133c4:	7821      	ldrb	r1, [r4, #0]
 80133c6:	2203      	movs	r2, #3
 80133c8:	4650      	mov	r0, sl
 80133ca:	f7ec ffa1 	bl	8000310 <memchr>
 80133ce:	b138      	cbz	r0, 80133e0 <_svfiprintf_r+0x150>
 80133d0:	9b04      	ldr	r3, [sp, #16]
 80133d2:	eba0 000a 	sub.w	r0, r0, sl
 80133d6:	2240      	movs	r2, #64	@ 0x40
 80133d8:	4082      	lsls	r2, r0
 80133da:	4313      	orrs	r3, r2
 80133dc:	3401      	adds	r4, #1
 80133de:	9304      	str	r3, [sp, #16]
 80133e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133e4:	4824      	ldr	r0, [pc, #144]	@ (8013478 <_svfiprintf_r+0x1e8>)
 80133e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80133ea:	2206      	movs	r2, #6
 80133ec:	f7ec ff90 	bl	8000310 <memchr>
 80133f0:	2800      	cmp	r0, #0
 80133f2:	d036      	beq.n	8013462 <_svfiprintf_r+0x1d2>
 80133f4:	4b21      	ldr	r3, [pc, #132]	@ (801347c <_svfiprintf_r+0x1ec>)
 80133f6:	bb1b      	cbnz	r3, 8013440 <_svfiprintf_r+0x1b0>
 80133f8:	9b03      	ldr	r3, [sp, #12]
 80133fa:	3307      	adds	r3, #7
 80133fc:	f023 0307 	bic.w	r3, r3, #7
 8013400:	3308      	adds	r3, #8
 8013402:	9303      	str	r3, [sp, #12]
 8013404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013406:	4433      	add	r3, r6
 8013408:	9309      	str	r3, [sp, #36]	@ 0x24
 801340a:	e76a      	b.n	80132e2 <_svfiprintf_r+0x52>
 801340c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013410:	460c      	mov	r4, r1
 8013412:	2001      	movs	r0, #1
 8013414:	e7a8      	b.n	8013368 <_svfiprintf_r+0xd8>
 8013416:	2300      	movs	r3, #0
 8013418:	3401      	adds	r4, #1
 801341a:	9305      	str	r3, [sp, #20]
 801341c:	4619      	mov	r1, r3
 801341e:	f04f 0c0a 	mov.w	ip, #10
 8013422:	4620      	mov	r0, r4
 8013424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013428:	3a30      	subs	r2, #48	@ 0x30
 801342a:	2a09      	cmp	r2, #9
 801342c:	d903      	bls.n	8013436 <_svfiprintf_r+0x1a6>
 801342e:	2b00      	cmp	r3, #0
 8013430:	d0c6      	beq.n	80133c0 <_svfiprintf_r+0x130>
 8013432:	9105      	str	r1, [sp, #20]
 8013434:	e7c4      	b.n	80133c0 <_svfiprintf_r+0x130>
 8013436:	fb0c 2101 	mla	r1, ip, r1, r2
 801343a:	4604      	mov	r4, r0
 801343c:	2301      	movs	r3, #1
 801343e:	e7f0      	b.n	8013422 <_svfiprintf_r+0x192>
 8013440:	ab03      	add	r3, sp, #12
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	462a      	mov	r2, r5
 8013446:	4b0e      	ldr	r3, [pc, #56]	@ (8013480 <_svfiprintf_r+0x1f0>)
 8013448:	a904      	add	r1, sp, #16
 801344a:	4638      	mov	r0, r7
 801344c:	f7fd fe9c 	bl	8011188 <_printf_float>
 8013450:	1c42      	adds	r2, r0, #1
 8013452:	4606      	mov	r6, r0
 8013454:	d1d6      	bne.n	8013404 <_svfiprintf_r+0x174>
 8013456:	89ab      	ldrh	r3, [r5, #12]
 8013458:	065b      	lsls	r3, r3, #25
 801345a:	f53f af2d 	bmi.w	80132b8 <_svfiprintf_r+0x28>
 801345e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013460:	e72c      	b.n	80132bc <_svfiprintf_r+0x2c>
 8013462:	ab03      	add	r3, sp, #12
 8013464:	9300      	str	r3, [sp, #0]
 8013466:	462a      	mov	r2, r5
 8013468:	4b05      	ldr	r3, [pc, #20]	@ (8013480 <_svfiprintf_r+0x1f0>)
 801346a:	a904      	add	r1, sp, #16
 801346c:	4638      	mov	r0, r7
 801346e:	f7fe f913 	bl	8011698 <_printf_i>
 8013472:	e7ed      	b.n	8013450 <_svfiprintf_r+0x1c0>
 8013474:	08013fe8 	.word	0x08013fe8
 8013478:	08013ff2 	.word	0x08013ff2
 801347c:	08011189 	.word	0x08011189
 8013480:	080131d9 	.word	0x080131d9
 8013484:	08013fee 	.word	0x08013fee

08013488 <__sflush_r>:
 8013488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013490:	0716      	lsls	r6, r2, #28
 8013492:	4605      	mov	r5, r0
 8013494:	460c      	mov	r4, r1
 8013496:	d454      	bmi.n	8013542 <__sflush_r+0xba>
 8013498:	684b      	ldr	r3, [r1, #4]
 801349a:	2b00      	cmp	r3, #0
 801349c:	dc02      	bgt.n	80134a4 <__sflush_r+0x1c>
 801349e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	dd48      	ble.n	8013536 <__sflush_r+0xae>
 80134a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80134a6:	2e00      	cmp	r6, #0
 80134a8:	d045      	beq.n	8013536 <__sflush_r+0xae>
 80134aa:	2300      	movs	r3, #0
 80134ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80134b0:	682f      	ldr	r7, [r5, #0]
 80134b2:	6a21      	ldr	r1, [r4, #32]
 80134b4:	602b      	str	r3, [r5, #0]
 80134b6:	d030      	beq.n	801351a <__sflush_r+0x92>
 80134b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80134ba:	89a3      	ldrh	r3, [r4, #12]
 80134bc:	0759      	lsls	r1, r3, #29
 80134be:	d505      	bpl.n	80134cc <__sflush_r+0x44>
 80134c0:	6863      	ldr	r3, [r4, #4]
 80134c2:	1ad2      	subs	r2, r2, r3
 80134c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80134c6:	b10b      	cbz	r3, 80134cc <__sflush_r+0x44>
 80134c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80134ca:	1ad2      	subs	r2, r2, r3
 80134cc:	2300      	movs	r3, #0
 80134ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80134d0:	6a21      	ldr	r1, [r4, #32]
 80134d2:	4628      	mov	r0, r5
 80134d4:	47b0      	blx	r6
 80134d6:	1c43      	adds	r3, r0, #1
 80134d8:	89a3      	ldrh	r3, [r4, #12]
 80134da:	d106      	bne.n	80134ea <__sflush_r+0x62>
 80134dc:	6829      	ldr	r1, [r5, #0]
 80134de:	291d      	cmp	r1, #29
 80134e0:	d82b      	bhi.n	801353a <__sflush_r+0xb2>
 80134e2:	4a2a      	ldr	r2, [pc, #168]	@ (801358c <__sflush_r+0x104>)
 80134e4:	410a      	asrs	r2, r1
 80134e6:	07d6      	lsls	r6, r2, #31
 80134e8:	d427      	bmi.n	801353a <__sflush_r+0xb2>
 80134ea:	2200      	movs	r2, #0
 80134ec:	6062      	str	r2, [r4, #4]
 80134ee:	04d9      	lsls	r1, r3, #19
 80134f0:	6922      	ldr	r2, [r4, #16]
 80134f2:	6022      	str	r2, [r4, #0]
 80134f4:	d504      	bpl.n	8013500 <__sflush_r+0x78>
 80134f6:	1c42      	adds	r2, r0, #1
 80134f8:	d101      	bne.n	80134fe <__sflush_r+0x76>
 80134fa:	682b      	ldr	r3, [r5, #0]
 80134fc:	b903      	cbnz	r3, 8013500 <__sflush_r+0x78>
 80134fe:	6560      	str	r0, [r4, #84]	@ 0x54
 8013500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013502:	602f      	str	r7, [r5, #0]
 8013504:	b1b9      	cbz	r1, 8013536 <__sflush_r+0xae>
 8013506:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801350a:	4299      	cmp	r1, r3
 801350c:	d002      	beq.n	8013514 <__sflush_r+0x8c>
 801350e:	4628      	mov	r0, r5
 8013510:	f7ff f9e0 	bl	80128d4 <_free_r>
 8013514:	2300      	movs	r3, #0
 8013516:	6363      	str	r3, [r4, #52]	@ 0x34
 8013518:	e00d      	b.n	8013536 <__sflush_r+0xae>
 801351a:	2301      	movs	r3, #1
 801351c:	4628      	mov	r0, r5
 801351e:	47b0      	blx	r6
 8013520:	4602      	mov	r2, r0
 8013522:	1c50      	adds	r0, r2, #1
 8013524:	d1c9      	bne.n	80134ba <__sflush_r+0x32>
 8013526:	682b      	ldr	r3, [r5, #0]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d0c6      	beq.n	80134ba <__sflush_r+0x32>
 801352c:	2b1d      	cmp	r3, #29
 801352e:	d001      	beq.n	8013534 <__sflush_r+0xac>
 8013530:	2b16      	cmp	r3, #22
 8013532:	d11e      	bne.n	8013572 <__sflush_r+0xea>
 8013534:	602f      	str	r7, [r5, #0]
 8013536:	2000      	movs	r0, #0
 8013538:	e022      	b.n	8013580 <__sflush_r+0xf8>
 801353a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801353e:	b21b      	sxth	r3, r3
 8013540:	e01b      	b.n	801357a <__sflush_r+0xf2>
 8013542:	690f      	ldr	r7, [r1, #16]
 8013544:	2f00      	cmp	r7, #0
 8013546:	d0f6      	beq.n	8013536 <__sflush_r+0xae>
 8013548:	0793      	lsls	r3, r2, #30
 801354a:	680e      	ldr	r6, [r1, #0]
 801354c:	bf08      	it	eq
 801354e:	694b      	ldreq	r3, [r1, #20]
 8013550:	600f      	str	r7, [r1, #0]
 8013552:	bf18      	it	ne
 8013554:	2300      	movne	r3, #0
 8013556:	eba6 0807 	sub.w	r8, r6, r7
 801355a:	608b      	str	r3, [r1, #8]
 801355c:	f1b8 0f00 	cmp.w	r8, #0
 8013560:	dde9      	ble.n	8013536 <__sflush_r+0xae>
 8013562:	6a21      	ldr	r1, [r4, #32]
 8013564:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013566:	4643      	mov	r3, r8
 8013568:	463a      	mov	r2, r7
 801356a:	4628      	mov	r0, r5
 801356c:	47b0      	blx	r6
 801356e:	2800      	cmp	r0, #0
 8013570:	dc08      	bgt.n	8013584 <__sflush_r+0xfc>
 8013572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801357a:	81a3      	strh	r3, [r4, #12]
 801357c:	f04f 30ff 	mov.w	r0, #4294967295
 8013580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013584:	4407      	add	r7, r0
 8013586:	eba8 0800 	sub.w	r8, r8, r0
 801358a:	e7e7      	b.n	801355c <__sflush_r+0xd4>
 801358c:	dfbffffe 	.word	0xdfbffffe

08013590 <_fflush_r>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	690b      	ldr	r3, [r1, #16]
 8013594:	4605      	mov	r5, r0
 8013596:	460c      	mov	r4, r1
 8013598:	b913      	cbnz	r3, 80135a0 <_fflush_r+0x10>
 801359a:	2500      	movs	r5, #0
 801359c:	4628      	mov	r0, r5
 801359e:	bd38      	pop	{r3, r4, r5, pc}
 80135a0:	b118      	cbz	r0, 80135aa <_fflush_r+0x1a>
 80135a2:	6a03      	ldr	r3, [r0, #32]
 80135a4:	b90b      	cbnz	r3, 80135aa <_fflush_r+0x1a>
 80135a6:	f7fe fa23 	bl	80119f0 <__sinit>
 80135aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d0f3      	beq.n	801359a <_fflush_r+0xa>
 80135b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80135b4:	07d0      	lsls	r0, r2, #31
 80135b6:	d404      	bmi.n	80135c2 <_fflush_r+0x32>
 80135b8:	0599      	lsls	r1, r3, #22
 80135ba:	d402      	bmi.n	80135c2 <_fflush_r+0x32>
 80135bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135be:	f7fe fb98 	bl	8011cf2 <__retarget_lock_acquire_recursive>
 80135c2:	4628      	mov	r0, r5
 80135c4:	4621      	mov	r1, r4
 80135c6:	f7ff ff5f 	bl	8013488 <__sflush_r>
 80135ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80135cc:	07da      	lsls	r2, r3, #31
 80135ce:	4605      	mov	r5, r0
 80135d0:	d4e4      	bmi.n	801359c <_fflush_r+0xc>
 80135d2:	89a3      	ldrh	r3, [r4, #12]
 80135d4:	059b      	lsls	r3, r3, #22
 80135d6:	d4e1      	bmi.n	801359c <_fflush_r+0xc>
 80135d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135da:	f7fe fb8b 	bl	8011cf4 <__retarget_lock_release_recursive>
 80135de:	e7dd      	b.n	801359c <_fflush_r+0xc>

080135e0 <memmove>:
 80135e0:	4288      	cmp	r0, r1
 80135e2:	b510      	push	{r4, lr}
 80135e4:	eb01 0402 	add.w	r4, r1, r2
 80135e8:	d902      	bls.n	80135f0 <memmove+0x10>
 80135ea:	4284      	cmp	r4, r0
 80135ec:	4623      	mov	r3, r4
 80135ee:	d807      	bhi.n	8013600 <memmove+0x20>
 80135f0:	1e43      	subs	r3, r0, #1
 80135f2:	42a1      	cmp	r1, r4
 80135f4:	d008      	beq.n	8013608 <memmove+0x28>
 80135f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80135fe:	e7f8      	b.n	80135f2 <memmove+0x12>
 8013600:	4402      	add	r2, r0
 8013602:	4601      	mov	r1, r0
 8013604:	428a      	cmp	r2, r1
 8013606:	d100      	bne.n	801360a <memmove+0x2a>
 8013608:	bd10      	pop	{r4, pc}
 801360a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801360e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013612:	e7f7      	b.n	8013604 <memmove+0x24>

08013614 <_sbrk_r>:
 8013614:	b538      	push	{r3, r4, r5, lr}
 8013616:	4d06      	ldr	r5, [pc, #24]	@ (8013630 <_sbrk_r+0x1c>)
 8013618:	2300      	movs	r3, #0
 801361a:	4604      	mov	r4, r0
 801361c:	4608      	mov	r0, r1
 801361e:	602b      	str	r3, [r5, #0]
 8013620:	f7ef f9dc 	bl	80029dc <_sbrk>
 8013624:	1c43      	adds	r3, r0, #1
 8013626:	d102      	bne.n	801362e <_sbrk_r+0x1a>
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	b103      	cbz	r3, 801362e <_sbrk_r+0x1a>
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	bd38      	pop	{r3, r4, r5, pc}
 8013630:	240056e0 	.word	0x240056e0

08013634 <__assert_func>:
 8013634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013636:	4614      	mov	r4, r2
 8013638:	461a      	mov	r2, r3
 801363a:	4b09      	ldr	r3, [pc, #36]	@ (8013660 <__assert_func+0x2c>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4605      	mov	r5, r0
 8013640:	68d8      	ldr	r0, [r3, #12]
 8013642:	b954      	cbnz	r4, 801365a <__assert_func+0x26>
 8013644:	4b07      	ldr	r3, [pc, #28]	@ (8013664 <__assert_func+0x30>)
 8013646:	461c      	mov	r4, r3
 8013648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801364c:	9100      	str	r1, [sp, #0]
 801364e:	462b      	mov	r3, r5
 8013650:	4905      	ldr	r1, [pc, #20]	@ (8013668 <__assert_func+0x34>)
 8013652:	f000 f86f 	bl	8013734 <fiprintf>
 8013656:	f000 f87f 	bl	8013758 <abort>
 801365a:	4b04      	ldr	r3, [pc, #16]	@ (801366c <__assert_func+0x38>)
 801365c:	e7f4      	b.n	8013648 <__assert_func+0x14>
 801365e:	bf00      	nop
 8013660:	24000024 	.word	0x24000024
 8013664:	0801403e 	.word	0x0801403e
 8013668:	08014010 	.word	0x08014010
 801366c:	08014003 	.word	0x08014003

08013670 <_calloc_r>:
 8013670:	b570      	push	{r4, r5, r6, lr}
 8013672:	fba1 5402 	umull	r5, r4, r1, r2
 8013676:	b93c      	cbnz	r4, 8013688 <_calloc_r+0x18>
 8013678:	4629      	mov	r1, r5
 801367a:	f7ff f99f 	bl	80129bc <_malloc_r>
 801367e:	4606      	mov	r6, r0
 8013680:	b928      	cbnz	r0, 801368e <_calloc_r+0x1e>
 8013682:	2600      	movs	r6, #0
 8013684:	4630      	mov	r0, r6
 8013686:	bd70      	pop	{r4, r5, r6, pc}
 8013688:	220c      	movs	r2, #12
 801368a:	6002      	str	r2, [r0, #0]
 801368c:	e7f9      	b.n	8013682 <_calloc_r+0x12>
 801368e:	462a      	mov	r2, r5
 8013690:	4621      	mov	r1, r4
 8013692:	f7fe fa5a 	bl	8011b4a <memset>
 8013696:	e7f5      	b.n	8013684 <_calloc_r+0x14>

08013698 <__ascii_mbtowc>:
 8013698:	b082      	sub	sp, #8
 801369a:	b901      	cbnz	r1, 801369e <__ascii_mbtowc+0x6>
 801369c:	a901      	add	r1, sp, #4
 801369e:	b142      	cbz	r2, 80136b2 <__ascii_mbtowc+0x1a>
 80136a0:	b14b      	cbz	r3, 80136b6 <__ascii_mbtowc+0x1e>
 80136a2:	7813      	ldrb	r3, [r2, #0]
 80136a4:	600b      	str	r3, [r1, #0]
 80136a6:	7812      	ldrb	r2, [r2, #0]
 80136a8:	1e10      	subs	r0, r2, #0
 80136aa:	bf18      	it	ne
 80136ac:	2001      	movne	r0, #1
 80136ae:	b002      	add	sp, #8
 80136b0:	4770      	bx	lr
 80136b2:	4610      	mov	r0, r2
 80136b4:	e7fb      	b.n	80136ae <__ascii_mbtowc+0x16>
 80136b6:	f06f 0001 	mvn.w	r0, #1
 80136ba:	e7f8      	b.n	80136ae <__ascii_mbtowc+0x16>

080136bc <_realloc_r>:
 80136bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136c0:	4680      	mov	r8, r0
 80136c2:	4615      	mov	r5, r2
 80136c4:	460c      	mov	r4, r1
 80136c6:	b921      	cbnz	r1, 80136d2 <_realloc_r+0x16>
 80136c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80136cc:	4611      	mov	r1, r2
 80136ce:	f7ff b975 	b.w	80129bc <_malloc_r>
 80136d2:	b92a      	cbnz	r2, 80136e0 <_realloc_r+0x24>
 80136d4:	f7ff f8fe 	bl	80128d4 <_free_r>
 80136d8:	2400      	movs	r4, #0
 80136da:	4620      	mov	r0, r4
 80136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e0:	f000 f841 	bl	8013766 <_malloc_usable_size_r>
 80136e4:	4285      	cmp	r5, r0
 80136e6:	4606      	mov	r6, r0
 80136e8:	d802      	bhi.n	80136f0 <_realloc_r+0x34>
 80136ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136ee:	d8f4      	bhi.n	80136da <_realloc_r+0x1e>
 80136f0:	4629      	mov	r1, r5
 80136f2:	4640      	mov	r0, r8
 80136f4:	f7ff f962 	bl	80129bc <_malloc_r>
 80136f8:	4607      	mov	r7, r0
 80136fa:	2800      	cmp	r0, #0
 80136fc:	d0ec      	beq.n	80136d8 <_realloc_r+0x1c>
 80136fe:	42b5      	cmp	r5, r6
 8013700:	462a      	mov	r2, r5
 8013702:	4621      	mov	r1, r4
 8013704:	bf28      	it	cs
 8013706:	4632      	movcs	r2, r6
 8013708:	f7fe faf5 	bl	8011cf6 <memcpy>
 801370c:	4621      	mov	r1, r4
 801370e:	4640      	mov	r0, r8
 8013710:	f7ff f8e0 	bl	80128d4 <_free_r>
 8013714:	463c      	mov	r4, r7
 8013716:	e7e0      	b.n	80136da <_realloc_r+0x1e>

08013718 <__ascii_wctomb>:
 8013718:	4603      	mov	r3, r0
 801371a:	4608      	mov	r0, r1
 801371c:	b141      	cbz	r1, 8013730 <__ascii_wctomb+0x18>
 801371e:	2aff      	cmp	r2, #255	@ 0xff
 8013720:	d904      	bls.n	801372c <__ascii_wctomb+0x14>
 8013722:	228a      	movs	r2, #138	@ 0x8a
 8013724:	601a      	str	r2, [r3, #0]
 8013726:	f04f 30ff 	mov.w	r0, #4294967295
 801372a:	4770      	bx	lr
 801372c:	700a      	strb	r2, [r1, #0]
 801372e:	2001      	movs	r0, #1
 8013730:	4770      	bx	lr
	...

08013734 <fiprintf>:
 8013734:	b40e      	push	{r1, r2, r3}
 8013736:	b503      	push	{r0, r1, lr}
 8013738:	4601      	mov	r1, r0
 801373a:	ab03      	add	r3, sp, #12
 801373c:	4805      	ldr	r0, [pc, #20]	@ (8013754 <fiprintf+0x20>)
 801373e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013742:	6800      	ldr	r0, [r0, #0]
 8013744:	9301      	str	r3, [sp, #4]
 8013746:	f000 f83f 	bl	80137c8 <_vfiprintf_r>
 801374a:	b002      	add	sp, #8
 801374c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013750:	b003      	add	sp, #12
 8013752:	4770      	bx	lr
 8013754:	24000024 	.word	0x24000024

08013758 <abort>:
 8013758:	b508      	push	{r3, lr}
 801375a:	2006      	movs	r0, #6
 801375c:	f000 fa08 	bl	8013b70 <raise>
 8013760:	2001      	movs	r0, #1
 8013762:	f7ef f8c3 	bl	80028ec <_exit>

08013766 <_malloc_usable_size_r>:
 8013766:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801376a:	1f18      	subs	r0, r3, #4
 801376c:	2b00      	cmp	r3, #0
 801376e:	bfbc      	itt	lt
 8013770:	580b      	ldrlt	r3, [r1, r0]
 8013772:	18c0      	addlt	r0, r0, r3
 8013774:	4770      	bx	lr

08013776 <__sfputc_r>:
 8013776:	6893      	ldr	r3, [r2, #8]
 8013778:	3b01      	subs	r3, #1
 801377a:	2b00      	cmp	r3, #0
 801377c:	b410      	push	{r4}
 801377e:	6093      	str	r3, [r2, #8]
 8013780:	da08      	bge.n	8013794 <__sfputc_r+0x1e>
 8013782:	6994      	ldr	r4, [r2, #24]
 8013784:	42a3      	cmp	r3, r4
 8013786:	db01      	blt.n	801378c <__sfputc_r+0x16>
 8013788:	290a      	cmp	r1, #10
 801378a:	d103      	bne.n	8013794 <__sfputc_r+0x1e>
 801378c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013790:	f000 b932 	b.w	80139f8 <__swbuf_r>
 8013794:	6813      	ldr	r3, [r2, #0]
 8013796:	1c58      	adds	r0, r3, #1
 8013798:	6010      	str	r0, [r2, #0]
 801379a:	7019      	strb	r1, [r3, #0]
 801379c:	4608      	mov	r0, r1
 801379e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137a2:	4770      	bx	lr

080137a4 <__sfputs_r>:
 80137a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a6:	4606      	mov	r6, r0
 80137a8:	460f      	mov	r7, r1
 80137aa:	4614      	mov	r4, r2
 80137ac:	18d5      	adds	r5, r2, r3
 80137ae:	42ac      	cmp	r4, r5
 80137b0:	d101      	bne.n	80137b6 <__sfputs_r+0x12>
 80137b2:	2000      	movs	r0, #0
 80137b4:	e007      	b.n	80137c6 <__sfputs_r+0x22>
 80137b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137ba:	463a      	mov	r2, r7
 80137bc:	4630      	mov	r0, r6
 80137be:	f7ff ffda 	bl	8013776 <__sfputc_r>
 80137c2:	1c43      	adds	r3, r0, #1
 80137c4:	d1f3      	bne.n	80137ae <__sfputs_r+0xa>
 80137c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080137c8 <_vfiprintf_r>:
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	460d      	mov	r5, r1
 80137ce:	b09d      	sub	sp, #116	@ 0x74
 80137d0:	4614      	mov	r4, r2
 80137d2:	4698      	mov	r8, r3
 80137d4:	4606      	mov	r6, r0
 80137d6:	b118      	cbz	r0, 80137e0 <_vfiprintf_r+0x18>
 80137d8:	6a03      	ldr	r3, [r0, #32]
 80137da:	b90b      	cbnz	r3, 80137e0 <_vfiprintf_r+0x18>
 80137dc:	f7fe f908 	bl	80119f0 <__sinit>
 80137e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80137e2:	07d9      	lsls	r1, r3, #31
 80137e4:	d405      	bmi.n	80137f2 <_vfiprintf_r+0x2a>
 80137e6:	89ab      	ldrh	r3, [r5, #12]
 80137e8:	059a      	lsls	r2, r3, #22
 80137ea:	d402      	bmi.n	80137f2 <_vfiprintf_r+0x2a>
 80137ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80137ee:	f7fe fa80 	bl	8011cf2 <__retarget_lock_acquire_recursive>
 80137f2:	89ab      	ldrh	r3, [r5, #12]
 80137f4:	071b      	lsls	r3, r3, #28
 80137f6:	d501      	bpl.n	80137fc <_vfiprintf_r+0x34>
 80137f8:	692b      	ldr	r3, [r5, #16]
 80137fa:	b99b      	cbnz	r3, 8013824 <_vfiprintf_r+0x5c>
 80137fc:	4629      	mov	r1, r5
 80137fe:	4630      	mov	r0, r6
 8013800:	f000 f938 	bl	8013a74 <__swsetup_r>
 8013804:	b170      	cbz	r0, 8013824 <_vfiprintf_r+0x5c>
 8013806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013808:	07dc      	lsls	r4, r3, #31
 801380a:	d504      	bpl.n	8013816 <_vfiprintf_r+0x4e>
 801380c:	f04f 30ff 	mov.w	r0, #4294967295
 8013810:	b01d      	add	sp, #116	@ 0x74
 8013812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013816:	89ab      	ldrh	r3, [r5, #12]
 8013818:	0598      	lsls	r0, r3, #22
 801381a:	d4f7      	bmi.n	801380c <_vfiprintf_r+0x44>
 801381c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801381e:	f7fe fa69 	bl	8011cf4 <__retarget_lock_release_recursive>
 8013822:	e7f3      	b.n	801380c <_vfiprintf_r+0x44>
 8013824:	2300      	movs	r3, #0
 8013826:	9309      	str	r3, [sp, #36]	@ 0x24
 8013828:	2320      	movs	r3, #32
 801382a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801382e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013832:	2330      	movs	r3, #48	@ 0x30
 8013834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80139e4 <_vfiprintf_r+0x21c>
 8013838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801383c:	f04f 0901 	mov.w	r9, #1
 8013840:	4623      	mov	r3, r4
 8013842:	469a      	mov	sl, r3
 8013844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013848:	b10a      	cbz	r2, 801384e <_vfiprintf_r+0x86>
 801384a:	2a25      	cmp	r2, #37	@ 0x25
 801384c:	d1f9      	bne.n	8013842 <_vfiprintf_r+0x7a>
 801384e:	ebba 0b04 	subs.w	fp, sl, r4
 8013852:	d00b      	beq.n	801386c <_vfiprintf_r+0xa4>
 8013854:	465b      	mov	r3, fp
 8013856:	4622      	mov	r2, r4
 8013858:	4629      	mov	r1, r5
 801385a:	4630      	mov	r0, r6
 801385c:	f7ff ffa2 	bl	80137a4 <__sfputs_r>
 8013860:	3001      	adds	r0, #1
 8013862:	f000 80a7 	beq.w	80139b4 <_vfiprintf_r+0x1ec>
 8013866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013868:	445a      	add	r2, fp
 801386a:	9209      	str	r2, [sp, #36]	@ 0x24
 801386c:	f89a 3000 	ldrb.w	r3, [sl]
 8013870:	2b00      	cmp	r3, #0
 8013872:	f000 809f 	beq.w	80139b4 <_vfiprintf_r+0x1ec>
 8013876:	2300      	movs	r3, #0
 8013878:	f04f 32ff 	mov.w	r2, #4294967295
 801387c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013880:	f10a 0a01 	add.w	sl, sl, #1
 8013884:	9304      	str	r3, [sp, #16]
 8013886:	9307      	str	r3, [sp, #28]
 8013888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801388c:	931a      	str	r3, [sp, #104]	@ 0x68
 801388e:	4654      	mov	r4, sl
 8013890:	2205      	movs	r2, #5
 8013892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013896:	4853      	ldr	r0, [pc, #332]	@ (80139e4 <_vfiprintf_r+0x21c>)
 8013898:	f7ec fd3a 	bl	8000310 <memchr>
 801389c:	9a04      	ldr	r2, [sp, #16]
 801389e:	b9d8      	cbnz	r0, 80138d8 <_vfiprintf_r+0x110>
 80138a0:	06d1      	lsls	r1, r2, #27
 80138a2:	bf44      	itt	mi
 80138a4:	2320      	movmi	r3, #32
 80138a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138aa:	0713      	lsls	r3, r2, #28
 80138ac:	bf44      	itt	mi
 80138ae:	232b      	movmi	r3, #43	@ 0x2b
 80138b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138b4:	f89a 3000 	ldrb.w	r3, [sl]
 80138b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80138ba:	d015      	beq.n	80138e8 <_vfiprintf_r+0x120>
 80138bc:	9a07      	ldr	r2, [sp, #28]
 80138be:	4654      	mov	r4, sl
 80138c0:	2000      	movs	r0, #0
 80138c2:	f04f 0c0a 	mov.w	ip, #10
 80138c6:	4621      	mov	r1, r4
 80138c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138cc:	3b30      	subs	r3, #48	@ 0x30
 80138ce:	2b09      	cmp	r3, #9
 80138d0:	d94b      	bls.n	801396a <_vfiprintf_r+0x1a2>
 80138d2:	b1b0      	cbz	r0, 8013902 <_vfiprintf_r+0x13a>
 80138d4:	9207      	str	r2, [sp, #28]
 80138d6:	e014      	b.n	8013902 <_vfiprintf_r+0x13a>
 80138d8:	eba0 0308 	sub.w	r3, r0, r8
 80138dc:	fa09 f303 	lsl.w	r3, r9, r3
 80138e0:	4313      	orrs	r3, r2
 80138e2:	9304      	str	r3, [sp, #16]
 80138e4:	46a2      	mov	sl, r4
 80138e6:	e7d2      	b.n	801388e <_vfiprintf_r+0xc6>
 80138e8:	9b03      	ldr	r3, [sp, #12]
 80138ea:	1d19      	adds	r1, r3, #4
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	9103      	str	r1, [sp, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	bfbb      	ittet	lt
 80138f4:	425b      	neglt	r3, r3
 80138f6:	f042 0202 	orrlt.w	r2, r2, #2
 80138fa:	9307      	strge	r3, [sp, #28]
 80138fc:	9307      	strlt	r3, [sp, #28]
 80138fe:	bfb8      	it	lt
 8013900:	9204      	strlt	r2, [sp, #16]
 8013902:	7823      	ldrb	r3, [r4, #0]
 8013904:	2b2e      	cmp	r3, #46	@ 0x2e
 8013906:	d10a      	bne.n	801391e <_vfiprintf_r+0x156>
 8013908:	7863      	ldrb	r3, [r4, #1]
 801390a:	2b2a      	cmp	r3, #42	@ 0x2a
 801390c:	d132      	bne.n	8013974 <_vfiprintf_r+0x1ac>
 801390e:	9b03      	ldr	r3, [sp, #12]
 8013910:	1d1a      	adds	r2, r3, #4
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	9203      	str	r2, [sp, #12]
 8013916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801391a:	3402      	adds	r4, #2
 801391c:	9305      	str	r3, [sp, #20]
 801391e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80139f4 <_vfiprintf_r+0x22c>
 8013922:	7821      	ldrb	r1, [r4, #0]
 8013924:	2203      	movs	r2, #3
 8013926:	4650      	mov	r0, sl
 8013928:	f7ec fcf2 	bl	8000310 <memchr>
 801392c:	b138      	cbz	r0, 801393e <_vfiprintf_r+0x176>
 801392e:	9b04      	ldr	r3, [sp, #16]
 8013930:	eba0 000a 	sub.w	r0, r0, sl
 8013934:	2240      	movs	r2, #64	@ 0x40
 8013936:	4082      	lsls	r2, r0
 8013938:	4313      	orrs	r3, r2
 801393a:	3401      	adds	r4, #1
 801393c:	9304      	str	r3, [sp, #16]
 801393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013942:	4829      	ldr	r0, [pc, #164]	@ (80139e8 <_vfiprintf_r+0x220>)
 8013944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013948:	2206      	movs	r2, #6
 801394a:	f7ec fce1 	bl	8000310 <memchr>
 801394e:	2800      	cmp	r0, #0
 8013950:	d03f      	beq.n	80139d2 <_vfiprintf_r+0x20a>
 8013952:	4b26      	ldr	r3, [pc, #152]	@ (80139ec <_vfiprintf_r+0x224>)
 8013954:	bb1b      	cbnz	r3, 801399e <_vfiprintf_r+0x1d6>
 8013956:	9b03      	ldr	r3, [sp, #12]
 8013958:	3307      	adds	r3, #7
 801395a:	f023 0307 	bic.w	r3, r3, #7
 801395e:	3308      	adds	r3, #8
 8013960:	9303      	str	r3, [sp, #12]
 8013962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013964:	443b      	add	r3, r7
 8013966:	9309      	str	r3, [sp, #36]	@ 0x24
 8013968:	e76a      	b.n	8013840 <_vfiprintf_r+0x78>
 801396a:	fb0c 3202 	mla	r2, ip, r2, r3
 801396e:	460c      	mov	r4, r1
 8013970:	2001      	movs	r0, #1
 8013972:	e7a8      	b.n	80138c6 <_vfiprintf_r+0xfe>
 8013974:	2300      	movs	r3, #0
 8013976:	3401      	adds	r4, #1
 8013978:	9305      	str	r3, [sp, #20]
 801397a:	4619      	mov	r1, r3
 801397c:	f04f 0c0a 	mov.w	ip, #10
 8013980:	4620      	mov	r0, r4
 8013982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013986:	3a30      	subs	r2, #48	@ 0x30
 8013988:	2a09      	cmp	r2, #9
 801398a:	d903      	bls.n	8013994 <_vfiprintf_r+0x1cc>
 801398c:	2b00      	cmp	r3, #0
 801398e:	d0c6      	beq.n	801391e <_vfiprintf_r+0x156>
 8013990:	9105      	str	r1, [sp, #20]
 8013992:	e7c4      	b.n	801391e <_vfiprintf_r+0x156>
 8013994:	fb0c 2101 	mla	r1, ip, r1, r2
 8013998:	4604      	mov	r4, r0
 801399a:	2301      	movs	r3, #1
 801399c:	e7f0      	b.n	8013980 <_vfiprintf_r+0x1b8>
 801399e:	ab03      	add	r3, sp, #12
 80139a0:	9300      	str	r3, [sp, #0]
 80139a2:	462a      	mov	r2, r5
 80139a4:	4b12      	ldr	r3, [pc, #72]	@ (80139f0 <_vfiprintf_r+0x228>)
 80139a6:	a904      	add	r1, sp, #16
 80139a8:	4630      	mov	r0, r6
 80139aa:	f7fd fbed 	bl	8011188 <_printf_float>
 80139ae:	4607      	mov	r7, r0
 80139b0:	1c78      	adds	r0, r7, #1
 80139b2:	d1d6      	bne.n	8013962 <_vfiprintf_r+0x19a>
 80139b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139b6:	07d9      	lsls	r1, r3, #31
 80139b8:	d405      	bmi.n	80139c6 <_vfiprintf_r+0x1fe>
 80139ba:	89ab      	ldrh	r3, [r5, #12]
 80139bc:	059a      	lsls	r2, r3, #22
 80139be:	d402      	bmi.n	80139c6 <_vfiprintf_r+0x1fe>
 80139c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80139c2:	f7fe f997 	bl	8011cf4 <__retarget_lock_release_recursive>
 80139c6:	89ab      	ldrh	r3, [r5, #12]
 80139c8:	065b      	lsls	r3, r3, #25
 80139ca:	f53f af1f 	bmi.w	801380c <_vfiprintf_r+0x44>
 80139ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139d0:	e71e      	b.n	8013810 <_vfiprintf_r+0x48>
 80139d2:	ab03      	add	r3, sp, #12
 80139d4:	9300      	str	r3, [sp, #0]
 80139d6:	462a      	mov	r2, r5
 80139d8:	4b05      	ldr	r3, [pc, #20]	@ (80139f0 <_vfiprintf_r+0x228>)
 80139da:	a904      	add	r1, sp, #16
 80139dc:	4630      	mov	r0, r6
 80139de:	f7fd fe5b 	bl	8011698 <_printf_i>
 80139e2:	e7e4      	b.n	80139ae <_vfiprintf_r+0x1e6>
 80139e4:	08013fe8 	.word	0x08013fe8
 80139e8:	08013ff2 	.word	0x08013ff2
 80139ec:	08011189 	.word	0x08011189
 80139f0:	080137a5 	.word	0x080137a5
 80139f4:	08013fee 	.word	0x08013fee

080139f8 <__swbuf_r>:
 80139f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139fa:	460e      	mov	r6, r1
 80139fc:	4614      	mov	r4, r2
 80139fe:	4605      	mov	r5, r0
 8013a00:	b118      	cbz	r0, 8013a0a <__swbuf_r+0x12>
 8013a02:	6a03      	ldr	r3, [r0, #32]
 8013a04:	b90b      	cbnz	r3, 8013a0a <__swbuf_r+0x12>
 8013a06:	f7fd fff3 	bl	80119f0 <__sinit>
 8013a0a:	69a3      	ldr	r3, [r4, #24]
 8013a0c:	60a3      	str	r3, [r4, #8]
 8013a0e:	89a3      	ldrh	r3, [r4, #12]
 8013a10:	071a      	lsls	r2, r3, #28
 8013a12:	d501      	bpl.n	8013a18 <__swbuf_r+0x20>
 8013a14:	6923      	ldr	r3, [r4, #16]
 8013a16:	b943      	cbnz	r3, 8013a2a <__swbuf_r+0x32>
 8013a18:	4621      	mov	r1, r4
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	f000 f82a 	bl	8013a74 <__swsetup_r>
 8013a20:	b118      	cbz	r0, 8013a2a <__swbuf_r+0x32>
 8013a22:	f04f 37ff 	mov.w	r7, #4294967295
 8013a26:	4638      	mov	r0, r7
 8013a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a2a:	6823      	ldr	r3, [r4, #0]
 8013a2c:	6922      	ldr	r2, [r4, #16]
 8013a2e:	1a98      	subs	r0, r3, r2
 8013a30:	6963      	ldr	r3, [r4, #20]
 8013a32:	b2f6      	uxtb	r6, r6
 8013a34:	4283      	cmp	r3, r0
 8013a36:	4637      	mov	r7, r6
 8013a38:	dc05      	bgt.n	8013a46 <__swbuf_r+0x4e>
 8013a3a:	4621      	mov	r1, r4
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	f7ff fda7 	bl	8013590 <_fflush_r>
 8013a42:	2800      	cmp	r0, #0
 8013a44:	d1ed      	bne.n	8013a22 <__swbuf_r+0x2a>
 8013a46:	68a3      	ldr	r3, [r4, #8]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	60a3      	str	r3, [r4, #8]
 8013a4c:	6823      	ldr	r3, [r4, #0]
 8013a4e:	1c5a      	adds	r2, r3, #1
 8013a50:	6022      	str	r2, [r4, #0]
 8013a52:	701e      	strb	r6, [r3, #0]
 8013a54:	6962      	ldr	r2, [r4, #20]
 8013a56:	1c43      	adds	r3, r0, #1
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d004      	beq.n	8013a66 <__swbuf_r+0x6e>
 8013a5c:	89a3      	ldrh	r3, [r4, #12]
 8013a5e:	07db      	lsls	r3, r3, #31
 8013a60:	d5e1      	bpl.n	8013a26 <__swbuf_r+0x2e>
 8013a62:	2e0a      	cmp	r6, #10
 8013a64:	d1df      	bne.n	8013a26 <__swbuf_r+0x2e>
 8013a66:	4621      	mov	r1, r4
 8013a68:	4628      	mov	r0, r5
 8013a6a:	f7ff fd91 	bl	8013590 <_fflush_r>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d0d9      	beq.n	8013a26 <__swbuf_r+0x2e>
 8013a72:	e7d6      	b.n	8013a22 <__swbuf_r+0x2a>

08013a74 <__swsetup_r>:
 8013a74:	b538      	push	{r3, r4, r5, lr}
 8013a76:	4b29      	ldr	r3, [pc, #164]	@ (8013b1c <__swsetup_r+0xa8>)
 8013a78:	4605      	mov	r5, r0
 8013a7a:	6818      	ldr	r0, [r3, #0]
 8013a7c:	460c      	mov	r4, r1
 8013a7e:	b118      	cbz	r0, 8013a88 <__swsetup_r+0x14>
 8013a80:	6a03      	ldr	r3, [r0, #32]
 8013a82:	b90b      	cbnz	r3, 8013a88 <__swsetup_r+0x14>
 8013a84:	f7fd ffb4 	bl	80119f0 <__sinit>
 8013a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013a8c:	0719      	lsls	r1, r3, #28
 8013a8e:	d422      	bmi.n	8013ad6 <__swsetup_r+0x62>
 8013a90:	06da      	lsls	r2, r3, #27
 8013a92:	d407      	bmi.n	8013aa4 <__swsetup_r+0x30>
 8013a94:	2209      	movs	r2, #9
 8013a96:	602a      	str	r2, [r5, #0]
 8013a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013a9c:	81a3      	strh	r3, [r4, #12]
 8013a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8013aa2:	e033      	b.n	8013b0c <__swsetup_r+0x98>
 8013aa4:	0758      	lsls	r0, r3, #29
 8013aa6:	d512      	bpl.n	8013ace <__swsetup_r+0x5a>
 8013aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013aaa:	b141      	cbz	r1, 8013abe <__swsetup_r+0x4a>
 8013aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013ab0:	4299      	cmp	r1, r3
 8013ab2:	d002      	beq.n	8013aba <__swsetup_r+0x46>
 8013ab4:	4628      	mov	r0, r5
 8013ab6:	f7fe ff0d 	bl	80128d4 <_free_r>
 8013aba:	2300      	movs	r3, #0
 8013abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013ac4:	81a3      	strh	r3, [r4, #12]
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	6063      	str	r3, [r4, #4]
 8013aca:	6923      	ldr	r3, [r4, #16]
 8013acc:	6023      	str	r3, [r4, #0]
 8013ace:	89a3      	ldrh	r3, [r4, #12]
 8013ad0:	f043 0308 	orr.w	r3, r3, #8
 8013ad4:	81a3      	strh	r3, [r4, #12]
 8013ad6:	6923      	ldr	r3, [r4, #16]
 8013ad8:	b94b      	cbnz	r3, 8013aee <__swsetup_r+0x7a>
 8013ada:	89a3      	ldrh	r3, [r4, #12]
 8013adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013ae4:	d003      	beq.n	8013aee <__swsetup_r+0x7a>
 8013ae6:	4621      	mov	r1, r4
 8013ae8:	4628      	mov	r0, r5
 8013aea:	f000 f883 	bl	8013bf4 <__smakebuf_r>
 8013aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013af2:	f013 0201 	ands.w	r2, r3, #1
 8013af6:	d00a      	beq.n	8013b0e <__swsetup_r+0x9a>
 8013af8:	2200      	movs	r2, #0
 8013afa:	60a2      	str	r2, [r4, #8]
 8013afc:	6962      	ldr	r2, [r4, #20]
 8013afe:	4252      	negs	r2, r2
 8013b00:	61a2      	str	r2, [r4, #24]
 8013b02:	6922      	ldr	r2, [r4, #16]
 8013b04:	b942      	cbnz	r2, 8013b18 <__swsetup_r+0xa4>
 8013b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b0a:	d1c5      	bne.n	8013a98 <__swsetup_r+0x24>
 8013b0c:	bd38      	pop	{r3, r4, r5, pc}
 8013b0e:	0799      	lsls	r1, r3, #30
 8013b10:	bf58      	it	pl
 8013b12:	6962      	ldrpl	r2, [r4, #20]
 8013b14:	60a2      	str	r2, [r4, #8]
 8013b16:	e7f4      	b.n	8013b02 <__swsetup_r+0x8e>
 8013b18:	2000      	movs	r0, #0
 8013b1a:	e7f7      	b.n	8013b0c <__swsetup_r+0x98>
 8013b1c:	24000024 	.word	0x24000024

08013b20 <_raise_r>:
 8013b20:	291f      	cmp	r1, #31
 8013b22:	b538      	push	{r3, r4, r5, lr}
 8013b24:	4605      	mov	r5, r0
 8013b26:	460c      	mov	r4, r1
 8013b28:	d904      	bls.n	8013b34 <_raise_r+0x14>
 8013b2a:	2316      	movs	r3, #22
 8013b2c:	6003      	str	r3, [r0, #0]
 8013b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b36:	b112      	cbz	r2, 8013b3e <_raise_r+0x1e>
 8013b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b3c:	b94b      	cbnz	r3, 8013b52 <_raise_r+0x32>
 8013b3e:	4628      	mov	r0, r5
 8013b40:	f000 f830 	bl	8013ba4 <_getpid_r>
 8013b44:	4622      	mov	r2, r4
 8013b46:	4601      	mov	r1, r0
 8013b48:	4628      	mov	r0, r5
 8013b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b4e:	f000 b817 	b.w	8013b80 <_kill_r>
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	d00a      	beq.n	8013b6c <_raise_r+0x4c>
 8013b56:	1c59      	adds	r1, r3, #1
 8013b58:	d103      	bne.n	8013b62 <_raise_r+0x42>
 8013b5a:	2316      	movs	r3, #22
 8013b5c:	6003      	str	r3, [r0, #0]
 8013b5e:	2001      	movs	r0, #1
 8013b60:	e7e7      	b.n	8013b32 <_raise_r+0x12>
 8013b62:	2100      	movs	r1, #0
 8013b64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013b68:	4620      	mov	r0, r4
 8013b6a:	4798      	blx	r3
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	e7e0      	b.n	8013b32 <_raise_r+0x12>

08013b70 <raise>:
 8013b70:	4b02      	ldr	r3, [pc, #8]	@ (8013b7c <raise+0xc>)
 8013b72:	4601      	mov	r1, r0
 8013b74:	6818      	ldr	r0, [r3, #0]
 8013b76:	f7ff bfd3 	b.w	8013b20 <_raise_r>
 8013b7a:	bf00      	nop
 8013b7c:	24000024 	.word	0x24000024

08013b80 <_kill_r>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	4d07      	ldr	r5, [pc, #28]	@ (8013ba0 <_kill_r+0x20>)
 8013b84:	2300      	movs	r3, #0
 8013b86:	4604      	mov	r4, r0
 8013b88:	4608      	mov	r0, r1
 8013b8a:	4611      	mov	r1, r2
 8013b8c:	602b      	str	r3, [r5, #0]
 8013b8e:	f7ee fe9d 	bl	80028cc <_kill>
 8013b92:	1c43      	adds	r3, r0, #1
 8013b94:	d102      	bne.n	8013b9c <_kill_r+0x1c>
 8013b96:	682b      	ldr	r3, [r5, #0]
 8013b98:	b103      	cbz	r3, 8013b9c <_kill_r+0x1c>
 8013b9a:	6023      	str	r3, [r4, #0]
 8013b9c:	bd38      	pop	{r3, r4, r5, pc}
 8013b9e:	bf00      	nop
 8013ba0:	240056e0 	.word	0x240056e0

08013ba4 <_getpid_r>:
 8013ba4:	f7ee be8a 	b.w	80028bc <_getpid>

08013ba8 <__swhatbuf_r>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	460c      	mov	r4, r1
 8013bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb0:	2900      	cmp	r1, #0
 8013bb2:	b096      	sub	sp, #88	@ 0x58
 8013bb4:	4615      	mov	r5, r2
 8013bb6:	461e      	mov	r6, r3
 8013bb8:	da0d      	bge.n	8013bd6 <__swhatbuf_r+0x2e>
 8013bba:	89a3      	ldrh	r3, [r4, #12]
 8013bbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013bc0:	f04f 0100 	mov.w	r1, #0
 8013bc4:	bf14      	ite	ne
 8013bc6:	2340      	movne	r3, #64	@ 0x40
 8013bc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013bcc:	2000      	movs	r0, #0
 8013bce:	6031      	str	r1, [r6, #0]
 8013bd0:	602b      	str	r3, [r5, #0]
 8013bd2:	b016      	add	sp, #88	@ 0x58
 8013bd4:	bd70      	pop	{r4, r5, r6, pc}
 8013bd6:	466a      	mov	r2, sp
 8013bd8:	f000 f848 	bl	8013c6c <_fstat_r>
 8013bdc:	2800      	cmp	r0, #0
 8013bde:	dbec      	blt.n	8013bba <__swhatbuf_r+0x12>
 8013be0:	9901      	ldr	r1, [sp, #4]
 8013be2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013be6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013bea:	4259      	negs	r1, r3
 8013bec:	4159      	adcs	r1, r3
 8013bee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013bf2:	e7eb      	b.n	8013bcc <__swhatbuf_r+0x24>

08013bf4 <__smakebuf_r>:
 8013bf4:	898b      	ldrh	r3, [r1, #12]
 8013bf6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013bf8:	079d      	lsls	r5, r3, #30
 8013bfa:	4606      	mov	r6, r0
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	d507      	bpl.n	8013c10 <__smakebuf_r+0x1c>
 8013c00:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c04:	6023      	str	r3, [r4, #0]
 8013c06:	6123      	str	r3, [r4, #16]
 8013c08:	2301      	movs	r3, #1
 8013c0a:	6163      	str	r3, [r4, #20]
 8013c0c:	b003      	add	sp, #12
 8013c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c10:	ab01      	add	r3, sp, #4
 8013c12:	466a      	mov	r2, sp
 8013c14:	f7ff ffc8 	bl	8013ba8 <__swhatbuf_r>
 8013c18:	9f00      	ldr	r7, [sp, #0]
 8013c1a:	4605      	mov	r5, r0
 8013c1c:	4639      	mov	r1, r7
 8013c1e:	4630      	mov	r0, r6
 8013c20:	f7fe fecc 	bl	80129bc <_malloc_r>
 8013c24:	b948      	cbnz	r0, 8013c3a <__smakebuf_r+0x46>
 8013c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c2a:	059a      	lsls	r2, r3, #22
 8013c2c:	d4ee      	bmi.n	8013c0c <__smakebuf_r+0x18>
 8013c2e:	f023 0303 	bic.w	r3, r3, #3
 8013c32:	f043 0302 	orr.w	r3, r3, #2
 8013c36:	81a3      	strh	r3, [r4, #12]
 8013c38:	e7e2      	b.n	8013c00 <__smakebuf_r+0xc>
 8013c3a:	89a3      	ldrh	r3, [r4, #12]
 8013c3c:	6020      	str	r0, [r4, #0]
 8013c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c42:	81a3      	strh	r3, [r4, #12]
 8013c44:	9b01      	ldr	r3, [sp, #4]
 8013c46:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c4a:	b15b      	cbz	r3, 8013c64 <__smakebuf_r+0x70>
 8013c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c50:	4630      	mov	r0, r6
 8013c52:	f000 f81d 	bl	8013c90 <_isatty_r>
 8013c56:	b128      	cbz	r0, 8013c64 <__smakebuf_r+0x70>
 8013c58:	89a3      	ldrh	r3, [r4, #12]
 8013c5a:	f023 0303 	bic.w	r3, r3, #3
 8013c5e:	f043 0301 	orr.w	r3, r3, #1
 8013c62:	81a3      	strh	r3, [r4, #12]
 8013c64:	89a3      	ldrh	r3, [r4, #12]
 8013c66:	431d      	orrs	r5, r3
 8013c68:	81a5      	strh	r5, [r4, #12]
 8013c6a:	e7cf      	b.n	8013c0c <__smakebuf_r+0x18>

08013c6c <_fstat_r>:
 8013c6c:	b538      	push	{r3, r4, r5, lr}
 8013c6e:	4d07      	ldr	r5, [pc, #28]	@ (8013c8c <_fstat_r+0x20>)
 8013c70:	2300      	movs	r3, #0
 8013c72:	4604      	mov	r4, r0
 8013c74:	4608      	mov	r0, r1
 8013c76:	4611      	mov	r1, r2
 8013c78:	602b      	str	r3, [r5, #0]
 8013c7a:	f7ee fe87 	bl	800298c <_fstat>
 8013c7e:	1c43      	adds	r3, r0, #1
 8013c80:	d102      	bne.n	8013c88 <_fstat_r+0x1c>
 8013c82:	682b      	ldr	r3, [r5, #0]
 8013c84:	b103      	cbz	r3, 8013c88 <_fstat_r+0x1c>
 8013c86:	6023      	str	r3, [r4, #0]
 8013c88:	bd38      	pop	{r3, r4, r5, pc}
 8013c8a:	bf00      	nop
 8013c8c:	240056e0 	.word	0x240056e0

08013c90 <_isatty_r>:
 8013c90:	b538      	push	{r3, r4, r5, lr}
 8013c92:	4d06      	ldr	r5, [pc, #24]	@ (8013cac <_isatty_r+0x1c>)
 8013c94:	2300      	movs	r3, #0
 8013c96:	4604      	mov	r4, r0
 8013c98:	4608      	mov	r0, r1
 8013c9a:	602b      	str	r3, [r5, #0]
 8013c9c:	f7ee fe86 	bl	80029ac <_isatty>
 8013ca0:	1c43      	adds	r3, r0, #1
 8013ca2:	d102      	bne.n	8013caa <_isatty_r+0x1a>
 8013ca4:	682b      	ldr	r3, [r5, #0]
 8013ca6:	b103      	cbz	r3, 8013caa <_isatty_r+0x1a>
 8013ca8:	6023      	str	r3, [r4, #0]
 8013caa:	bd38      	pop	{r3, r4, r5, pc}
 8013cac:	240056e0 	.word	0x240056e0

08013cb0 <_init>:
 8013cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb2:	bf00      	nop
 8013cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cb6:	bc08      	pop	{r3}
 8013cb8:	469e      	mov	lr, r3
 8013cba:	4770      	bx	lr

08013cbc <_fini>:
 8013cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cbe:	bf00      	nop
 8013cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cc2:	bc08      	pop	{r3}
 8013cc4:	469e      	mov	lr, r3
 8013cc6:	4770      	bx	lr
