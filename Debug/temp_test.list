
temp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f14  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  080131e8  080131e8  000141e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080136b4  080136b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080136bc  080136bc  000146bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080136c0  080136c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  080136c4  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001dc  080138a0  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  2400023c  08013900  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000546c  2400029c  08013960  0001529c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24005708  08013960  00015708  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001529c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d4b8  00000000  00000000  000152ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007194  00000000  00000000  00052782  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d20  00000000  00000000  00059918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002312  00000000  00000000  0005c638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000422ff  00000000  00000000  0005e94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003ecfd  00000000  00000000  000a0c49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00196041  00000000  00000000  000df946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00275987  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d1c0  00000000  00000000  002759cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00282b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400029c 	.word	0x2400029c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080131cc 	.word	0x080131cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a0 	.word	0x240002a0
 800030c:	080131cc 	.word	0x080131cc

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2224      	movs	r2, #36	@ 0x24
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f010 fcce 	bl	801106a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d0:	4a32      	ldr	r2, [pc, #200]	@ (800079c <MX_ADC1_Init+0xec>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800072e:	2201      	movs	r2, #1
 8000730:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000734:	f003 f81c 	bl	8003770 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800073e:	f001 faef 	bl	8001d20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800074e:	f004 f85b 	bl	8004808 <HAL_ADCEx_MultiModeConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000758:	f001 fae2 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_ADC1_Init+0xf0>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000782:	f003 f9fd 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800078c:	f001 fac8 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240002b8 	.word	0x240002b8
 800079c:	40022000 	.word	0x40022000
 80007a0:	04300002 	.word	0x04300002

080007a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2224      	movs	r2, #36	@ 0x24
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f010 fc5a 	bl	801106a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <MX_ADC2_Init+0xc8>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000808:	2200      	movs	r2, #0
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000816:	2201      	movs	r2, #1
 8000818:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800081c:	f002 ffa8 	bl	8003770 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000826:	f001 fa7b 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800082a:	2301      	movs	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082e:	2306      	movs	r3, #6
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000836:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083c:	2304      	movs	r3, #4
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000850:	f003 f996 	bl	8003b80 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800085a:	f001 fa61 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24000328 	.word	0x24000328
 800086c:	40022100 	.word	0x40022100

08000870 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2224      	movs	r2, #36	@ 0x24
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f010 fbf4 	bl	801106a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000884:	4a33      	ldr	r2, [pc, #204]	@ (8000954 <MX_ADC3_Init+0xe4>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000890:	2208      	movs	r2, #8
 8000892:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008fa:	4815      	ldr	r0, [pc, #84]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008fc:	f002 ff38 	bl	8003770 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000906:	f001 fa0b 	bl	8001d20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800090a:	2301      	movs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091c:	2304      	movs	r3, #4
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800093a:	f003 f921 	bl	8003b80 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000944:	f001 f9ec 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	24000398 	.word	0x24000398
 8000954:	58026000 	.word	0x58026000

08000958 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	@ 0x40
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a6c      	ldr	r2, [pc, #432]	@ (8000b28 <HAL_ADC_MspInit+0x1d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14e      	bne.n	8000a18 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a6a      	ldr	r2, [pc, #424]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000984:	4b69      	ldr	r3, [pc, #420]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800098c:	4b68      	ldr	r3, [pc, #416]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800098e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000992:	4a67      	ldr	r2, [pc, #412]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800099c:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800099e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b61      	ldr	r3, [pc, #388]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a5f      	ldr	r2, [pc, #380]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a58      	ldr	r2, [pc, #352]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b55      	ldr	r3, [pc, #340]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	484e      	ldr	r0, [pc, #312]	@ (8000b34 <HAL_ADC_MspInit+0x1dc>)
 80009fa:	f005 fa2d 	bl	8005e58 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80009fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a02:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a06:	f002 fc57 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a0a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a0e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a12:	f002 fc51 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a16:	e082      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a46      	ldr	r2, [pc, #280]	@ (8000b38 <HAL_ADC_MspInit+0x1e0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d133      	bne.n	8000a8a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10e      	bne.n	8000a52 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a34:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a44:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a74:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a78:	f002 fc1e 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a7c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a80:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a84:	f002 fc18 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a88:	e049      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <HAL_ADC_MspInit+0x1e4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d144      	bne.n	8000b1e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aee:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000af2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000af6:	f002 fbdf 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000afa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8000afe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b02:	f002 fbd9 	bl	80032b8 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8000b06:	2304      	movs	r3, #4
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_ADC_MspInit+0x1e8>)
 8000b1a:	f005 f99d 	bl	8005e58 <HAL_GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	3740      	adds	r7, #64	@ 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	24000408 	.word	0x24000408
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020800 	.word	0x58020800
 8000b38:	40022100 	.word	0x40022100
 8000b3c:	58026000 	.word	0x58026000
 8000b40:	58021c00 	.word	0x58021c00

08000b44 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2224      	movs	r2, #36	@ 0x24
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f010 fa8a 	bl	801106a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_DAC1_Init+0x60>)
 8000b5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b5c:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b5e:	f004 f815 	bl	8004b8c <HAL_DAC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b68:	f001 f8da 	bl	8001d20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2210      	movs	r2, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b88:	f004 f882 	bl	8004c90 <HAL_DAC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b92:	f001 f8c5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2400040c 	.word	0x2400040c
 8000ba4:	40007400 	.word	0x40007400

08000ba8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_DAC_MspInit+0x90>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d131      	bne.n	8000c2e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <HAL_DAC_MspInit+0x98>)
 8000c1a:	f005 f91d 	bl	8005e58 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	2036      	movs	r0, #54	@ 0x36
 8000c24:	f003 ff8a 	bl	8004b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c28:	2036      	movs	r0, #54	@ 0x36
 8000c2a:	f003 ffa1 	bl	8004b70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020000 	.word	0x58020000

08000c44 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <MX_ETH_Init+0x84>)
 8000c4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c5c:	22e1      	movs	r2, #225	@ 0xe1
 8000c5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c74:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_ETH_Init+0x8c>)
 8000c82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_ETH_Init+0x90>)
 8000c88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c8c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c94:	f004 f948 	bl	8004f28 <HAL_ETH_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c9e:	f001 f83f 	bl	8001d20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ca2:	2238      	movs	r2, #56	@ 0x38
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000ca8:	f010 f9df 	bl	801106a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cae:	2221      	movs	r2, #33	@ 0x21
 8000cb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24000458 	.word	0x24000458
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	24000508 	.word	0x24000508
 8000cd0:	2400023c 	.word	0x2400023c
 8000cd4:	240001dc 	.word	0x240001dc
 8000cd8:	24000420 	.word	0x24000420

08000cdc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	@ (8000e20 <HAL_ETH_MspInit+0x144>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 808b 	bne.w	8000e16 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d00:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d06:	4a47      	ldr	r2, [pc, #284]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d10:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d24:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4c:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a30      	ldr	r2, [pc, #192]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8000db4:	2332      	movs	r3, #50	@ 0x32
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4816      	ldr	r0, [pc, #88]	@ (8000e28 <HAL_ETH_MspInit+0x14c>)
 8000dd0:	f005 f842 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8000dd4:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_ETH_MspInit+0x150>)
 8000df2:	f005 f831 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000df6:	2386      	movs	r3, #134	@ 0x86
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <HAL_ETH_MspInit+0x154>)
 8000e12:	f005 f821 	bl	8005e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40028000 	.word	0x40028000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	58020000 	.word	0x58020000

08000e34 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <MX_FDCAN1_Init+0xc4>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2210      	movs	r2, #16
 8000e60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ee2:	f004 fc55 	bl	8005790 <HAL_FDCAN_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000eec:	f000 ff18 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000510 	.word	0x24000510
 8000ef8:	4000a000 	.word	0x4000a000

08000efc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f02:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <MX_FDCAN2_Init+0xc4>)
 8000f04:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f06:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f1e:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f26:	2210      	movs	r2, #16
 8000f28:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000faa:	f004 fbf1 	bl	8005790 <HAL_FDCAN_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fb4:	f000 feb4 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240005b0 	.word	0x240005b0
 8000fc0:	4000a400 	.word	0x4000a400

08000fc4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	22b8      	movs	r2, #184	@ 0xb8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f010 f840 	bl	801106a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a57      	ldr	r2, [pc, #348]	@ (800114c <HAL_FDCAN_MspInit+0x188>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d151      	bne.n	8001098 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001000:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f007 fba7 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001018:	f000 fe82 	bl	8001d20 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800101c:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001024:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001026:	4b4a      	ldr	r3, [pc, #296]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10e      	bne.n	800104c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001030:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001034:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800103e:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001040:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a40      	ldr	r2, [pc, #256]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800106a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001084:	2309      	movs	r3, #9
 8001086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800108a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800108e:	4619      	mov	r1, r3
 8001090:	4831      	ldr	r0, [pc, #196]	@ (8001158 <HAL_FDCAN_MspInit+0x194>)
 8001092:	f004 fee1 	bl	8005e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001096:	e054      	b.n	8001142 <HAL_FDCAN_MspInit+0x17e>
  else if(fdcanHandle->Instance==FDCAN2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2f      	ldr	r2, [pc, #188]	@ (800115c <HAL_FDCAN_MspInit+0x198>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d14f      	bne.n	8001142 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fb50 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80010c6:	f000 fe2b 	bl	8001d20 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10e      	bne.n	80010fa <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001118:	2360      	movs	r3, #96	@ 0x60
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001130:	2309      	movs	r3, #9
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4808      	ldr	r0, [pc, #32]	@ (8001160 <HAL_FDCAN_MspInit+0x19c>)
 800113e:	f004 fe8b 	bl	8005e58 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	@ 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	4000a000 	.word	0x4000a000
 8001150:	24000650 	.word	0x24000650
 8001154:	58024400 	.word	0x58024400
 8001158:	58021c00 	.word	0x58021c00
 800115c:	4000a400 	.word	0x4000a400
 8001160:	58020400 	.word	0x58020400

08001164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printToTerm */
  printToTermHandle = osThreadNew(StartDefaultTask, NULL, &printToTerm_attributes);
 8001168:	4a08      	ldr	r2, [pc, #32]	@ (800118c <MX_FREERTOS_Init+0x28>)
 800116a:	2100      	movs	r1, #0
 800116c:	4808      	ldr	r0, [pc, #32]	@ (8001190 <MX_FREERTOS_Init+0x2c>)
 800116e:	f00c fc7d 	bl	800da6c <osThreadNew>
 8001172:	4603      	mov	r3, r0
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <MX_FREERTOS_Init+0x30>)
 8001176:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(StartTask02, NULL, &getTemp_attributes);
 8001178:	4a07      	ldr	r2, [pc, #28]	@ (8001198 <MX_FREERTOS_Init+0x34>)
 800117a:	2100      	movs	r1, #0
 800117c:	4807      	ldr	r0, [pc, #28]	@ (800119c <MX_FREERTOS_Init+0x38>)
 800117e:	f00c fc75 	bl	800da6c <osThreadNew>
 8001182:	4603      	mov	r3, r0
 8001184:	4a06      	ldr	r2, [pc, #24]	@ (80011a0 <MX_FREERTOS_Init+0x3c>)
 8001186:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	0801326c 	.word	0x0801326c
 8001190:	080011a5 	.word	0x080011a5
 8001194:	24000680 	.word	0x24000680
 8001198:	08013290 	.word	0x08013290
 800119c:	080011e9 	.word	0x080011e9
 80011a0:	24000684 	.word	0x24000684

080011a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  temperature_log[temp_index] = get_temperature();
 80011ac:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <StartDefaultTask+0x3c>)
 80011ae:	681c      	ldr	r4, [r3, #0]
 80011b0:	f000 f82a 	bl	8001208 <get_temperature>
 80011b4:	4603      	mov	r3, r0
 80011b6:	4a0b      	ldr	r2, [pc, #44]	@ (80011e4 <StartDefaultTask+0x40>)
 80011b8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  temp_index++;
 80011bc:	4b08      	ldr	r3, [pc, #32]	@ (80011e0 <StartDefaultTask+0x3c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	4a07      	ldr	r2, [pc, #28]	@ (80011e0 <StartDefaultTask+0x3c>)
 80011c4:	6013      	str	r3, [r2, #0]
	  if(temp_index >= 10){
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <StartDefaultTask+0x3c>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b09      	cmp	r3, #9
 80011cc:	dd02      	ble.n	80011d4 <StartDefaultTask+0x30>
		  temp_index = 0;
 80011ce:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <StartDefaultTask+0x3c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
	  }
	  osDelay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d8:	f00c fcda 	bl	800db90 <osDelay>
	  temperature_log[temp_index] = get_temperature();
 80011dc:	e7e6      	b.n	80011ac <StartDefaultTask+0x8>
 80011de:	bf00      	nop
 80011e0:	2400067c 	.word	0x2400067c
 80011e4:	24000654 	.word	0x24000654

080011e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  Print_Temperature_Log(temperature_log);
 80011f0:	4804      	ldr	r0, [pc, #16]	@ (8001204 <StartTask02+0x1c>)
 80011f2:	f001 ff87 	bl	8003104 <Print_Temperature_Log>
	  osDelay(5000);
 80011f6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011fa:	f00c fcc9 	bl	800db90 <osDelay>
	  Print_Temperature_Log(temperature_log);
 80011fe:	bf00      	nop
 8001200:	e7f6      	b.n	80011f0 <StartTask02+0x8>
 8001202:	bf00      	nop
 8001204:	24000654 	.word	0x24000654

08001208 <get_temperature>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

int get_temperature(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

	return rand() % 41;
 800120c:	f00f f994 	bl	8010538 <rand>
 8001210:	4601      	mov	r1, r0
 8001212:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <get_temperature+0x28>)
 8001214:	fb83 2301 	smull	r2, r3, r3, r1
 8001218:	111a      	asrs	r2, r3, #4
 800121a:	17cb      	asrs	r3, r1, #31
 800121c:	1ad2      	subs	r2, r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	4413      	add	r3, r2
 8001228:	1aca      	subs	r2, r1, r3
 800122a:	4613      	mov	r3, r2

}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}
 8001230:	63e7063f 	.word	0x63e7063f

08001234 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_HS_VBUS
     PH7   ------> SPI5_MISO
     PF11   ------> SPI5_MOSI
*/
void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	@ 0x38
 8001238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4bc1      	ldr	r3, [pc, #772]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	4abf      	ldr	r2, [pc, #764]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001252:	f043 0302 	orr.w	r3, r3, #2
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125a:	4bbd      	ldr	r3, [pc, #756]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	f003 0302 	and.w	r3, r3, #2
 8001264:	623b      	str	r3, [r7, #32]
 8001266:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001268:	4bb9      	ldr	r3, [pc, #740]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	4ab8      	ldr	r2, [pc, #736]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001278:	4bb5      	ldr	r3, [pc, #724]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	4bb2      	ldr	r3, [pc, #712]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	4ab0      	ldr	r2, [pc, #704]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800128e:	f043 0308 	orr.w	r3, r3, #8
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001296:	4bae      	ldr	r3, [pc, #696]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4baa      	ldr	r3, [pc, #680]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4aa9      	ldr	r2, [pc, #676]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012ac:	f043 0301 	orr.w	r3, r3, #1
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4ba6      	ldr	r3, [pc, #664]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c2:	4ba3      	ldr	r3, [pc, #652]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	4aa1      	ldr	r2, [pc, #644]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012ca:	f043 0310 	orr.w	r3, r3, #16
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d2:	4b9f      	ldr	r3, [pc, #636]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	f003 0310 	and.w	r3, r3, #16
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e0:	4b9b      	ldr	r3, [pc, #620]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012e8:	f043 0304 	orr.w	r3, r3, #4
 80012ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f0:	4b97      	ldr	r3, [pc, #604]	@ (8001550 <MX_GPIO_Init+0x31c>)
 80012f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	4b94      	ldr	r3, [pc, #592]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001300:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001304:	4a92      	ldr	r2, [pc, #584]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001306:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800130a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130e:	4b90      	ldr	r3, [pc, #576]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001314:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800131c:	4b8c      	ldr	r3, [pc, #560]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	4a8b      	ldr	r2, [pc, #556]	@ (8001550 <MX_GPIO_Init+0x31c>)
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800132c:	4b88      	ldr	r3, [pc, #544]	@ (8001550 <MX_GPIO_Init+0x31c>)
 800132e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	f240 4102 	movw	r1, #1026	@ 0x402
 8001340:	4884      	ldr	r0, [pc, #528]	@ (8001554 <MX_GPIO_Init+0x320>)
 8001342:	f004 ff31 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 800134c:	4882      	ldr	r0, [pc, #520]	@ (8001558 <MX_GPIO_Init+0x324>)
 800134e:	f004 ff2b 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001352:	2200      	movs	r2, #0
 8001354:	f248 1138 	movw	r1, #33080	@ 0x8138
 8001358:	4880      	ldr	r0, [pc, #512]	@ (800155c <MX_GPIO_Init+0x328>)
 800135a:	f004 ff25 	bl	80061a8 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	210c      	movs	r1, #12
 8001362:	487f      	ldr	r0, [pc, #508]	@ (8001560 <MX_GPIO_Init+0x32c>)
 8001364:	f004 ff20 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800136e:	487d      	ldr	r0, [pc, #500]	@ (8001564 <MX_GPIO_Init+0x330>)
 8001370:	f004 ff1a 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2160      	movs	r1, #96	@ 0x60
 8001378:	487b      	ldr	r0, [pc, #492]	@ (8001568 <MX_GPIO_Init+0x334>)
 800137a:	f004 ff15 	bl	80061a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 800137e:	f240 4302 	movw	r3, #1026	@ 0x402
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001384:	2301      	movs	r3, #1
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138c:	2300      	movs	r3, #0
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001394:	4619      	mov	r1, r3
 8001396:	486f      	ldr	r0, [pc, #444]	@ (8001554 <MX_GPIO_Init+0x320>)
 8001398:	f004 fd5e 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 800139c:	2330      	movs	r3, #48	@ 0x30
 800139e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80013ac:	230a      	movs	r3, #10
 80013ae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4868      	ldr	r0, [pc, #416]	@ (8001558 <MX_GPIO_Init+0x324>)
 80013b8:	f004 fd4e 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 80013bc:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d2:	4619      	mov	r1, r3
 80013d4:	4860      	ldr	r0, [pc, #384]	@ (8001558 <MX_GPIO_Init+0x324>)
 80013d6:	f004 fd3f 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 80013da:	f242 0304 	movw	r3, #8196	@ 0x2004
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ee:	4619      	mov	r1, r3
 80013f0:	485a      	ldr	r0, [pc, #360]	@ (800155c <MX_GPIO_Init+0x328>)
 80013f2:	f004 fd31 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 80013f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	4855      	ldr	r0, [pc, #340]	@ (8001560 <MX_GPIO_Init+0x32c>)
 800140c:	f004 fd24 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001410:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001414:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001422:	230a      	movs	r3, #10
 8001424:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001426:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800142a:	4619      	mov	r1, r3
 800142c:	484f      	ldr	r0, [pc, #316]	@ (800156c <MX_GPIO_Init+0x338>)
 800142e:	f004 fd13 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001432:	f248 1338 	movw	r3, #33080	@ 0x8138
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	4844      	ldr	r0, [pc, #272]	@ (800155c <MX_GPIO_Init+0x328>)
 800144c:	f004 fd04 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001450:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001454:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	4841      	ldr	r0, [pc, #260]	@ (800156c <MX_GPIO_Init+0x338>)
 8001466:	f004 fcf7 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800146a:	2320      	movs	r3, #32
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800146e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001472:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4839      	ldr	r0, [pc, #228]	@ (8001564 <MX_GPIO_Init+0x330>)
 8001480:	f004 fcea 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 8001484:	230c      	movs	r3, #12
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	2301      	movs	r3, #1
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001494:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001498:	4619      	mov	r1, r3
 800149a:	4831      	ldr	r0, [pc, #196]	@ (8001560 <MX_GPIO_Init+0x32c>)
 800149c:	f004 fcdc 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 80014a0:	2380      	movs	r3, #128	@ 0x80
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014b0:	2305      	movs	r3, #5
 80014b2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	482b      	ldr	r0, [pc, #172]	@ (8001568 <MX_GPIO_Init+0x334>)
 80014bc:	f004 fccc 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 80014c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014d2:	2305      	movs	r3, #5
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	4821      	ldr	r0, [pc, #132]	@ (8001564 <MX_GPIO_Init+0x330>)
 80014de:	f004 fcbb 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 80014e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014e8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f6:	4619      	mov	r1, r3
 80014f8:	4817      	ldr	r0, [pc, #92]	@ (8001558 <MX_GPIO_Init+0x324>)
 80014fa:	f004 fcad 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 80014fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001504:	2301      	movs	r3, #1
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 8001510:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001514:	4619      	mov	r1, r3
 8001516:	4813      	ldr	r0, [pc, #76]	@ (8001564 <MX_GPIO_Init+0x330>)
 8001518:	f004 fc9e 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 800151c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001520:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001522:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <MX_GPIO_Init+0x334>)
 8001534:	f004 fc90 	bl	8005e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 8001538:	2360      	movs	r3, #96	@ 0x60
 800153a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800154c:	e010      	b.n	8001570 <MX_GPIO_Init+0x33c>
 800154e:	bf00      	nop
 8001550:	58024400 	.word	0x58024400
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58021800 	.word	0x58021800
 8001560:	58020800 	.word	0x58020800
 8001564:	58021400 	.word	0x58021400
 8001568:	58021c00 	.word	0x58021c00
 800156c:	58020000 	.word	0x58020000
 8001570:	4619      	mov	r1, r3
 8001572:	4803      	ldr	r0, [pc, #12]	@ (8001580 <MX_GPIO_Init+0x34c>)
 8001574:	f004 fc70 	bl	8005e58 <HAL_GPIO_Init>

}
 8001578:	bf00      	nop
 800157a:	3738      	adds	r7, #56	@ 0x38
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	58021c00 	.word	0x58021c00

08001584 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001588:	4b1b      	ldr	r3, [pc, #108]	@ (80015f8 <MX_I2C4_Init+0x74>)
 800158a:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <MX_I2C4_Init+0x78>)
 800158c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 800158e:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <MX_I2C4_Init+0x74>)
 8001590:	4a1b      	ldr	r2, [pc, #108]	@ (8001600 <MX_I2C4_Init+0x7c>)
 8001592:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001594:	4b18      	ldr	r3, [pc, #96]	@ (80015f8 <MX_I2C4_Init+0x74>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <MX_I2C4_Init+0x74>)
 800159c:	2201      	movs	r2, #1
 800159e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015a0:	4b15      	ldr	r3, [pc, #84]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80015a6:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015ac:	4b12      	ldr	r3, [pc, #72]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015b2:	4b11      	ldr	r3, [pc, #68]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015b8:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80015be:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015c0:	f004 fe0c 	bl	80061dc <HAL_I2C_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80015ca:	f000 fba9 	bl	8001d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ce:	2100      	movs	r1, #0
 80015d0:	4809      	ldr	r0, [pc, #36]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015d2:	f004 fe9f 	bl	8006314 <HAL_I2CEx_ConfigAnalogFilter>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80015dc:	f000 fba0 	bl	8001d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80015e0:	2100      	movs	r1, #0
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_I2C4_Init+0x74>)
 80015e4:	f004 fee1 	bl	80063aa <HAL_I2CEx_ConfigDigitalFilter>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80015ee:	f000 fb97 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000688 	.word	0x24000688
 80015fc:	58001c00 	.word	0x58001c00
 8001600:	60404e72 	.word	0x60404e72

08001604 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b0b8      	sub	sp, #224	@ 0xe0
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	22b8      	movs	r2, #184	@ 0xb8
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f00f fd20 	bl	801106a <memset>
  if(i2cHandle->Instance==I2C4)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a27      	ldr	r2, [pc, #156]	@ (80016cc <HAL_I2C_MspInit+0xc8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d146      	bne.n	80016c2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001634:	f04f 0210 	mov.w	r2, #16
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001646:	f107 0310 	add.w	r3, r7, #16
 800164a:	4618      	mov	r0, r3
 800164c:	f007 f888 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001656:	f000 fb63 	bl	8001d20 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800165a:	4b1d      	ldr	r3, [pc, #116]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 800165c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 8001662:	f043 0320 	orr.w	r3, r3, #32
 8001666:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800166a:	4b19      	ldr	r3, [pc, #100]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 800166c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001670:	f003 0320 	and.w	r3, r3, #32
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001678:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800167c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001680:	2312      	movs	r3, #18
 8001682:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001686:	2301      	movs	r3, #1
 8001688:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001692:	2304      	movs	r3, #4
 8001694:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001698:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800169c:	4619      	mov	r1, r3
 800169e:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <HAL_I2C_MspInit+0xd0>)
 80016a0:	f004 fbda 	bl	8005e58 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 80016a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016aa:	4a09      	ldr	r2, [pc, #36]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <HAL_I2C_MspInit+0xcc>)
 80016b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	37e0      	adds	r7, #224	@ 0xe0
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	58001c00 	.word	0x58001c00
 80016d0:	58024400 	.word	0x58024400
 80016d4:	58021400 	.word	0x58021400

080016d8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09a      	sub	sp, #104	@ 0x68
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80016de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80016e2:	2234      	movs	r2, #52	@ 0x34
 80016e4:	2100      	movs	r1, #0
 80016e6:	4618      	mov	r0, r3
 80016e8:	f00f fcbf 	bl	801106a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80016ec:	463b      	mov	r3, r7
 80016ee:	2234      	movs	r2, #52	@ 0x34
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00f fcb9 	bl	801106a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80016f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001834 <MX_LTDC_Init+0x15c>)
 80016fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001838 <MX_LTDC_Init+0x160>)
 80016fc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80016fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001700:	2200      	movs	r2, #0
 8001702:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001704:	4b4b      	ldr	r3, [pc, #300]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <MX_LTDC_Init+0x15c>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001710:	4b48      	ldr	r3, [pc, #288]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001718:	2207      	movs	r2, #7
 800171a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800171c:	4b45      	ldr	r3, [pc, #276]	@ (8001834 <MX_LTDC_Init+0x15c>)
 800171e:	2203      	movs	r2, #3
 8001720:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001724:	220e      	movs	r2, #14
 8001726:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <MX_LTDC_Init+0x15c>)
 800172a:	2205      	movs	r2, #5
 800172c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001730:	f240 228e 	movw	r2, #654	@ 0x28e
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001736:	4b3f      	ldr	r3, [pc, #252]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001738:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001740:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001748:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800174c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800174e:	4b39      	ldr	r3, [pc, #228]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800175e:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001766:	4833      	ldr	r0, [pc, #204]	@ (8001834 <MX_LTDC_Init+0x15c>)
 8001768:	f004 fe6c 	bl	8006444 <HAL_LTDC_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001772:	f000 fad5 	bl	8001d20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001782:	2300      	movs	r3, #0
 8001784:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001786:	2300      	movs	r3, #0
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800178a:	2300      	movs	r3, #0
 800178c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001792:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001796:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001798:	2305      	movs	r3, #5
 800179a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80017ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017be:	2200      	movs	r2, #0
 80017c0:	4619      	mov	r1, r3
 80017c2:	481c      	ldr	r0, [pc, #112]	@ (8001834 <MX_LTDC_Init+0x15c>)
 80017c4:	f004 ff0e 	bl	80065e4 <HAL_LTDC_ConfigLayer>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80017ce:	f000 faa7 	bl	8001d20 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80017e2:	2300      	movs	r3, #0
 80017e4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80017ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80017f4:	2305      	movs	r3, #5
 80017f6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001816:	463b      	mov	r3, r7
 8001818:	2201      	movs	r2, #1
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <MX_LTDC_Init+0x15c>)
 800181e:	f004 fee1 	bl	80065e4 <HAL_LTDC_ConfigLayer>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001828:	f000 fa7a 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3768      	adds	r7, #104	@ 0x68
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	240006dc 	.word	0x240006dc
 8001838:	50001000 	.word	0x50001000

0800183c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0be      	sub	sp, #248	@ 0xf8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001854:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001858:	22b8      	movs	r2, #184	@ 0xb8
 800185a:	2100      	movs	r1, #0
 800185c:	4618      	mov	r0, r3
 800185e:	f00f fc04 	bl	801106a <memset>
  if(ltdcHandle->Instance==LTDC)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4ab1      	ldr	r2, [pc, #708]	@ (8001b2c <HAL_LTDC_MspInit+0x2f0>)
 8001868:	4293      	cmp	r3, r2
 800186a:	f040 815b 	bne.w	8001b24 <HAL_LTDC_MspInit+0x2e8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800186e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800187a:	2320      	movs	r3, #32
 800187c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800187e:	2381      	movs	r3, #129	@ 0x81
 8001880:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001882:	2302      	movs	r3, #2
 8001884:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001886:	2302      	movs	r3, #2
 8001888:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800188a:	2302      	movs	r3, #2
 800188c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800188e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001892:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001894:	2300      	movs	r3, #0
 8001896:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a0:	4618      	mov	r0, r3
 80018a2:	f006 ff5d 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 80018ac:	f000 fa38 	bl	8001d20 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80018b0:	4b9f      	ldr	r3, [pc, #636]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018b2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018b6:	4a9e      	ldr	r2, [pc, #632]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018b8:	f043 0308 	orr.w	r3, r3, #8
 80018bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80018c0:	4b9b      	ldr	r3, [pc, #620]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018c2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80018c6:	f003 0308 	and.w	r3, r3, #8
 80018ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80018cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	4b98      	ldr	r3, [pc, #608]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018d4:	4a96      	ldr	r2, [pc, #600]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018d6:	f043 0302 	orr.w	r3, r3, #2
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018de:	4b94      	ldr	r3, [pc, #592]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ec:	4b90      	ldr	r3, [pc, #576]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018f2:	4a8f      	ldr	r2, [pc, #572]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001902:	f003 0308 	and.w	r3, r3, #8
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800190a:	4b89      	ldr	r3, [pc, #548]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001910:	4a87      	ldr	r2, [pc, #540]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001912:	f043 0310 	orr.w	r3, r3, #16
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800191a:	4b85      	ldr	r3, [pc, #532]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	61bb      	str	r3, [r7, #24]
 8001926:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b81      	ldr	r3, [pc, #516]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	4a80      	ldr	r2, [pc, #512]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001938:	4b7d      	ldr	r3, [pc, #500]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	4a78      	ldr	r2, [pc, #480]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800194e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001956:	4b76      	ldr	r3, [pc, #472]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800195c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001964:	4b72      	ldr	r3, [pc, #456]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800196a:	4a71      	ldr	r2, [pc, #452]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800196c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001974:	4b6e      	ldr	r3, [pc, #440]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b6b      	ldr	r3, [pc, #428]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001988:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001992:	4b67      	ldr	r3, [pc, #412]	@ (8001b30 <HAL_LTDC_MspInit+0x2f4>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
    PH3     ------> LTDC_R1
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 80019a0:	f240 3303 	movw	r3, #771	@ 0x303
 80019a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019ba:	230e      	movs	r3, #14
 80019bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019c4:	4619      	mov	r1, r3
 80019c6:	485b      	ldr	r0, [pc, #364]	@ (8001b34 <HAL_LTDC_MspInit+0x2f8>)
 80019c8:	f004 fa46 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 80019cc:	2349      	movs	r3, #73	@ 0x49
 80019ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80019e4:	230e      	movs	r3, #14
 80019e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80019ee:	4619      	mov	r1, r3
 80019f0:	4851      	ldr	r0, [pc, #324]	@ (8001b38 <HAL_LTDC_MspInit+0x2fc>)
 80019f2:	f004 fa31 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 80019f6:	f64b 0303 	movw	r3, #47107	@ 0xb803
 80019fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R7_Pin|LCD_G3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a10:	230e      	movs	r3, #14
 8001a12:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a16:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4847      	ldr	r0, [pc, #284]	@ (8001b3c <HAL_LTDC_MspInit+0x300>)
 8001a1e:	f004 fa1b 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001a22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001a3c:	230d      	movs	r3, #13
 8001a3e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a46:	4619      	mov	r1, r3
 8001a48:	483d      	ldr	r0, [pc, #244]	@ (8001b40 <HAL_LTDC_MspInit+0x304>)
 8001a4a:	f004 fa05 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001a4e:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001a52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a68:	230e      	movs	r3, #14
 8001a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4833      	ldr	r0, [pc, #204]	@ (8001b44 <HAL_LTDC_MspInit+0x308>)
 8001a76:	f004 f9ef 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001a7a:	f648 7308 	movw	r3, #36616	@ 0x8f08
 8001a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R4_Pin|LCD_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a94:	230e      	movs	r3, #14
 8001a96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a9a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4829      	ldr	r0, [pc, #164]	@ (8001b48 <HAL_LTDC_MspInit+0x30c>)
 8001aa2:	f004 f9d9 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001abe:	230e      	movs	r3, #14
 8001ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4820      	ldr	r0, [pc, #128]	@ (8001b4c <HAL_LTDC_MspInit+0x310>)
 8001acc:	f004 f9c4 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 8001ad0:	2358      	movs	r3, #88	@ 0x58
 8001ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae8:	230e      	movs	r3, #14
 8001aea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4812      	ldr	r0, [pc, #72]	@ (8001b40 <HAL_LTDC_MspInit+0x304>)
 8001af6:	f004 f9af 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001afa:	2310      	movs	r3, #16
 8001afc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b12:	2309      	movs	r3, #9
 8001b14:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001b18:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480a      	ldr	r0, [pc, #40]	@ (8001b48 <HAL_LTDC_MspInit+0x30c>)
 8001b20:	f004 f99a 	bl	8005e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001b24:	bf00      	nop
 8001b26:	37f8      	adds	r7, #248	@ 0xf8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	50001000 	.word	0x50001000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58020400 	.word	0x58020400
 8001b38:	58020c00 	.word	0x58020c00
 8001b3c:	58021000 	.word	0x58021000
 8001b40:	58020000 	.word	0x58020000
 8001b44:	58021800 	.word	0x58021800
 8001b48:	58021c00 	.word	0x58021c00
 8001b4c:	58020800 	.word	0x58020800

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b54:	f001 fb40 	bl	80031d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b58:	f000 f830 	bl	8001bbc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b5c:	f000 f89e 	bl	8001c9c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b60:	f7ff fb68 	bl	8001234 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b64:	f7fe fda4 	bl	80006b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001b68:	f7fe fe1c 	bl	80007a4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b6c:	f7fe fe80 	bl	8000870 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001b70:	f7fe ffe8 	bl	8000b44 <MX_DAC1_Init>
  MX_ETH_Init();
 8001b74:	f7ff f866 	bl	8000c44 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8001b78:	f7ff f95c 	bl	8000e34 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001b7c:	f7ff f9be 	bl	8000efc <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8001b80:	f7ff fd00 	bl	8001584 <MX_I2C4_Init>
  MX_LTDC_Init();
 8001b84:	f7ff fda8 	bl	80016d8 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8001b88:	f000 f8d0 	bl	8001d2c <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001b8c:	f000 f932 	bl	8001df4 <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8001b90:	f000 fbb4 	bl	80022fc <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8001b94:	f000 ff0c 	bl	80029b0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001b98:	f000 ff98 	bl	8002acc <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b9c:	f001 f806 	bl	8002bac <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001ba0:	f001 f95e 	bl	8002e60 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001ba4:	f001 f9a8 	bl	8002ef8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001ba8:	f001 fae4 	bl	8003174 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001bac:	f00b ff14 	bl	800d9d8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001bb0:	f7ff fad8 	bl	8001164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bb4:	f00b ff34 	bl	800da20 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <main+0x68>

08001bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b09c      	sub	sp, #112	@ 0x70
 8001bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc6:	224c      	movs	r2, #76	@ 0x4c
 8001bc8:	2100      	movs	r1, #0
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f00f fa4d 	bl	801106a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f00f fa47 	bl	801106a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001bdc:	2004      	movs	r0, #4
 8001bde:	f005 fdbd 	bl	800775c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001be2:	2300      	movs	r3, #0
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4b2c      	ldr	r3, [pc, #176]	@ (8001c98 <SystemClock_Config+0xdc>)
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	4a2b      	ldr	r2, [pc, #172]	@ (8001c98 <SystemClock_Config+0xdc>)
 8001bec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001bf0:	6193      	str	r3, [r2, #24]
 8001bf2:	4b29      	ldr	r3, [pc, #164]	@ (8001c98 <SystemClock_Config+0xdc>)
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bfa:	603b      	str	r3, [r7, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bfe:	bf00      	nop
 8001c00:	4b25      	ldr	r3, [pc, #148]	@ (8001c98 <SystemClock_Config+0xdc>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c0c:	d1f8      	bne.n	8001c00 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c0e:	2321      	movs	r3, #33	@ 0x21
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c20:	2302      	movs	r3, #2
 8001c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001c24:	2305      	movs	r3, #5
 8001c26:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001c28:	236e      	movs	r3, #110	@ 0x6e
 8001c2a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c30:	2304      	movs	r3, #4
 8001c32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c34:	2302      	movs	r3, #2
 8001c36:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fde1 	bl	8007810 <HAL_RCC_OscConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c54:	f000 f864 	bl	8001d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c58:	233f      	movs	r3, #63	@ 0x3f
 8001c5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c64:	2308      	movs	r3, #8
 8001c66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c68:	2340      	movs	r3, #64	@ 0x40
 8001c6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c6c:	2340      	movs	r3, #64	@ 0x40
 8001c6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c74:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c76:	2340      	movs	r3, #64	@ 0x40
 8001c78:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2103      	movs	r1, #3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f006 f9a0 	bl	8007fc4 <HAL_RCC_ClockConfig>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001c8a:	f000 f849 	bl	8001d20 <Error_Handler>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	3770      	adds	r7, #112	@ 0x70
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	58024800 	.word	0x58024800

08001c9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b0ae      	sub	sp, #184	@ 0xb8
 8001ca0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	22b8      	movs	r2, #184	@ 0xb8
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00f f9de 	bl	801106a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cae:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001cb2:	f04f 0300 	mov.w	r3, #0
 8001cb6:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001cba:	2305      	movs	r3, #5
 8001cbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8001cbe:	2350      	movs	r3, #80	@ 0x50
 8001cc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001cce:	2380      	movs	r3, #128	@ 0x80
 8001cd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ce0:	463b      	mov	r3, r7
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fd3c 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001cee:	f000 f817 	bl	8001d20 <Error_Handler>
  }
}
 8001cf2:	bf00      	nop
 8001cf4:	37b8      	adds	r7, #184	@ 0xb8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d101      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d0e:	f001 fa9f 	bl	8003250 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d12:	bf00      	nop
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40001000 	.word	0x40001000

08001d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d24:	b672      	cpsid	i
}
 8001d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d28:	bf00      	nop
 8001d2a:	e7fd      	b.n	8001d28 <Error_Handler+0x8>

08001d2c <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001d32:	463b      	mov	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
 8001d40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001d42:	4b29      	ldr	r3, [pc, #164]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d44:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <MX_OCTOSPI1_Init+0xc0>)
 8001d46:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001d48:	4b27      	ldr	r3, [pc, #156]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001d54:	4b24      	ldr	r3, [pc, #144]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001d60:	4b21      	ldr	r3, [pc, #132]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001d66:	4b20      	ldr	r3, [pc, #128]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001d78:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001d84:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001d8a:	4b17      	ldr	r3, [pc, #92]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001d90:	4b15      	ldr	r3, [pc, #84]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d92:	2208      	movs	r2, #8
 8001d94:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001d96:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001da2:	4811      	ldr	r0, [pc, #68]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001da4:	f004 fdf6 	bl	8006994 <HAL_OSPI_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8001dae:	f7ff ffb7 	bl	8001d20 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001dbe:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001dc2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <MX_OCTOSPI1_Init+0xc4>)
 8001dc6:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	@ (8001de8 <MX_OCTOSPI1_Init+0xbc>)
 8001dd2:	f004 fee9 	bl	8006ba8 <HAL_OSPIM_Config>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_OCTOSPI1_Init+0xb4>
  {
    Error_Handler();
 8001ddc:	f7ff ffa0 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	24000784 	.word	0x24000784
 8001dec:	52005000 	.word	0x52005000
 8001df0:	01000001 	.word	0x01000001

08001df4 <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001dfa:	f107 0310 	add.w	r3, r7, #16
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001e0c:	463b      	mov	r3, r7
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8001e18:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e1a:	4a34      	ldr	r2, [pc, #208]	@ (8001eec <MX_OCTOSPI2_Init+0xf8>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001e1e:	4b32      	ldr	r3, [pc, #200]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001e24:	4b30      	ldr	r3, [pc, #192]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e30:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001e32:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e34:	2220      	movs	r2, #32
 8001e36:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001e44:	4b28      	ldr	r3, [pc, #160]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001e50:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001e7a:	481b      	ldr	r0, [pc, #108]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001e7c:	f004 fd8a 	bl	8006994 <HAL_OSPI_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8001e86:	f7ff ff4b 	bl	8001d20 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_OCTOSPI2_Init+0xfc>)
 8001e98:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <MX_OCTOSPI2_Init+0x100>)
 8001e9c:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001eaa:	f004 fe7d 	bl	8006ba8 <HAL_OSPIM_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_OCTOSPI2_Init+0xc4>
  {
    Error_Handler();
 8001eb4:	f7ff ff34 	bl	8001d20 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4805      	ldr	r0, [pc, #20]	@ (8001ee8 <MX_OCTOSPI2_Init+0xf4>)
 8001ed2:	f004 fe1b 	bl	8006b0c <HAL_OSPI_HyperbusCfg>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_OCTOSPI2_Init+0xec>
  {
    Error_Handler();
 8001edc:	f7ff ff20 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001ee0:	bf00      	nop
 8001ee2:	3728      	adds	r7, #40	@ 0x28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	240007e0 	.word	0x240007e0
 8001eec:	5200a000 	.word	0x5200a000
 8001ef0:	00010002 	.word	0x00010002
 8001ef4:	01000002 	.word	0x01000002

08001ef8 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0c2      	sub	sp, #264	@ 0x108
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f06:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
 8001f16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f1c:	22b8      	movs	r2, #184	@ 0xb8
 8001f1e:	2100      	movs	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f00f f8a2 	bl	801106a <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a90      	ldr	r2, [pc, #576]	@ (8002174 <HAL_OSPI_MspInit+0x27c>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	f040 812d 	bne.w	8002194 <HAL_OSPI_MspInit+0x29c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001f3a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f50:	4618      	mov	r0, r3
 8001f52:	f006 fc05 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8001f5c:	f7ff fee0 	bl	8001d20 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8001f60:	4b85      	ldr	r3, [pc, #532]	@ (8002178 <HAL_OSPI_MspInit+0x280>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	4a84      	ldr	r2, [pc, #528]	@ (8002178 <HAL_OSPI_MspInit+0x280>)
 8001f68:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8001f6a:	4b83      	ldr	r3, [pc, #524]	@ (8002178 <HAL_OSPI_MspInit+0x280>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10e      	bne.n	8001f90 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8001f72:	4b82      	ldr	r3, [pc, #520]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001f74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f78:	4a80      	ldr	r2, [pc, #512]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001f7a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f7e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001f82:	4b7e      	ldr	r3, [pc, #504]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001f84:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001f90:	4b7a      	ldr	r3, [pc, #488]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001f92:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001f96:	4a79      	ldr	r2, [pc, #484]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8001fa0:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fa2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001fa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001faa:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fae:	4b73      	ldr	r3, [pc, #460]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	4a71      	ldr	r2, [pc, #452]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fbe:	4b6f      	ldr	r3, [pc, #444]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fcc:	4b6b      	ldr	r3, [pc, #428]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fd2:	4a6a      	ldr	r2, [pc, #424]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fd4:	f043 0308 	orr.w	r3, r3, #8
 8001fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fdc:	4b67      	ldr	r3, [pc, #412]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fea:	4b64      	ldr	r3, [pc, #400]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff0:	4a62      	ldr	r2, [pc, #392]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ffa:	4b60      	ldr	r3, [pc, #384]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002008:	4b5c      	ldr	r3, [pc, #368]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a5b      	ldr	r2, [pc, #364]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8002010:	f043 0320 	orr.w	r3, r3, #32
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b58      	ldr	r3, [pc, #352]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0320 	and.w	r3, r3, #32
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b55      	ldr	r3, [pc, #340]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202c:	4a53      	ldr	r2, [pc, #332]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002036:	4b51      	ldr	r3, [pc, #324]	@ (800217c <HAL_OSPI_MspInit+0x284>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 8002044:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002048:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800205e:	2309      	movs	r3, #9
 8002060:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002068:	4619      	mov	r1, r3
 800206a:	4845      	ldr	r0, [pc, #276]	@ (8002180 <HAL_OSPI_MspInit+0x288>)
 800206c:	f003 fef4 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8002070:	23b0      	movs	r3, #176	@ 0xb0
 8002072:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002082:	2303      	movs	r3, #3
 8002084:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002088:	230a      	movs	r3, #10
 800208a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800208e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002092:	4619      	mov	r1, r3
 8002094:	483b      	ldr	r0, [pc, #236]	@ (8002184 <HAL_OSPI_MspInit+0x28c>)
 8002096:	f003 fedf 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 800209a:	2304      	movs	r3, #4
 800209c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a0:	2302      	movs	r3, #2
 80020a2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80020b2:	2309      	movs	r3, #9
 80020b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020bc:	4619      	mov	r1, r3
 80020be:	4832      	ldr	r0, [pc, #200]	@ (8002188 <HAL_OSPI_MspInit+0x290>)
 80020c0:	f003 feca 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 80020c4:	2340      	movs	r3, #64	@ 0x40
 80020c6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d6:	2303      	movs	r3, #3
 80020d8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80020dc:	230a      	movs	r3, #10
 80020de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4825      	ldr	r0, [pc, #148]	@ (8002180 <HAL_OSPI_MspInit+0x288>)
 80020ea:	f003 feb5 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 80020ee:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80020f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f6:	2302      	movs	r3, #2
 80020f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002108:	2309      	movs	r3, #9
 800210a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800210e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002112:	4619      	mov	r1, r3
 8002114:	481b      	ldr	r0, [pc, #108]	@ (8002184 <HAL_OSPI_MspInit+0x28c>)
 8002116:	f003 fe9f 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 800211a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800211e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002128:	2300      	movs	r3, #0
 800212a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002134:	2309      	movs	r3, #9
 8002136:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800213e:	4619      	mov	r1, r3
 8002140:	4812      	ldr	r0, [pc, #72]	@ (800218c <HAL_OSPI_MspInit+0x294>)
 8002142:	f003 fe89 	bl	8005e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 8002146:	2304      	movs	r3, #4
 8002148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214c:	2302      	movs	r3, #2
 800214e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800215e:	230a      	movs	r3, #10
 8002160:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002168:	4619      	mov	r1, r3
 800216a:	4809      	ldr	r0, [pc, #36]	@ (8002190 <HAL_OSPI_MspInit+0x298>)
 800216c:	f003 fe74 	bl	8005e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8002170:	e0b4      	b.n	80022dc <HAL_OSPI_MspInit+0x3e4>
 8002172:	bf00      	nop
 8002174:	52005000 	.word	0x52005000
 8002178:	2400083c 	.word	0x2400083c
 800217c:	58024400 	.word	0x58024400
 8002180:	58021800 	.word	0x58021800
 8002184:	58020c00 	.word	0x58020c00
 8002188:	58021000 	.word	0x58021000
 800218c:	58021400 	.word	0x58021400
 8002190:	58020400 	.word	0x58020400
  else if(ospiHandle->Instance==OCTOSPI2)
 8002194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a51      	ldr	r2, [pc, #324]	@ (80022e8 <HAL_OSPI_MspInit+0x3f0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	f040 809a 	bne.w	80022dc <HAL_OSPI_MspInit+0x3e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80021a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021be:	4618      	mov	r0, r3
 80021c0:	f006 face 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_OSPI_MspInit+0x2d6>
      Error_Handler();
 80021ca:	f7ff fda9 	bl	8001d20 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_OSPI_MspInit+0x3f4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	3301      	adds	r3, #1
 80021d4:	4a45      	ldr	r2, [pc, #276]	@ (80022ec <HAL_OSPI_MspInit+0x3f4>)
 80021d6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 80021d8:	4b44      	ldr	r3, [pc, #272]	@ (80022ec <HAL_OSPI_MspInit+0x3f4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d10e      	bne.n	80021fe <HAL_OSPI_MspInit+0x306>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 80021e0:	4b43      	ldr	r3, [pc, #268]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 80021e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021e6:	4a42      	ldr	r2, [pc, #264]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 80021e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80021f0:	4b3f      	ldr	r3, [pc, #252]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 80021f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80021f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80021fe:	4b3c      	ldr	r3, [pc, #240]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 8002200:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002204:	4a3a      	ldr	r2, [pc, #232]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 8002206:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800220a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800220e:	4b38      	ldr	r3, [pc, #224]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 8002210:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800221c:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 800221e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002222:	4a33      	ldr	r2, [pc, #204]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 8002224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002228:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800222c:	4b30      	ldr	r3, [pc, #192]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 800222e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800223a:	4b2d      	ldr	r3, [pc, #180]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 800223c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002240:	4a2b      	ldr	r2, [pc, #172]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 8002242:	f043 0320 	orr.w	r3, r3, #32
 8002246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800224a:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HAL_OSPI_MspInit+0x3f8>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002250:	f003 0320 	and.w	r3, r3, #32
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8002258:	f640 0303 	movw	r3, #2051	@ 0x803
 800225c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226c:	2303      	movs	r3, #3
 800226e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002272:	2309      	movs	r3, #9
 8002274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002278:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800227c:	4619      	mov	r1, r3
 800227e:	481d      	ldr	r0, [pc, #116]	@ (80022f4 <HAL_OSPI_MspInit+0x3fc>)
 8002280:	f003 fdea 	bl	8005e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8002284:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002288:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800229e:	2303      	movs	r3, #3
 80022a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4812      	ldr	r0, [pc, #72]	@ (80022f4 <HAL_OSPI_MspInit+0x3fc>)
 80022ac:	f003 fdd4 	bl	8005e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 80022b0:	f241 031f 	movw	r3, #4127	@ 0x101f
 80022b4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022c4:	2303      	movs	r3, #3
 80022c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 80022ca:	2309      	movs	r3, #9
 80022cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022d0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022d4:	4619      	mov	r1, r3
 80022d6:	4808      	ldr	r0, [pc, #32]	@ (80022f8 <HAL_OSPI_MspInit+0x400>)
 80022d8:	f003 fdbe 	bl	8005e58 <HAL_GPIO_Init>
}
 80022dc:	bf00      	nop
 80022de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	5200a000 	.word	0x5200a000
 80022ec:	2400083c 	.word	0x2400083c
 80022f0:	58024400 	.word	0x58024400
 80022f4:	58021800 	.word	0x58021800
 80022f8:	58021400 	.word	0x58021400

080022fc <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8002300:	4b58      	ldr	r3, [pc, #352]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002302:	4a59      	ldr	r2, [pc, #356]	@ (8002468 <MX_SAI1_Init+0x16c>)
 8002304:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002306:	4b57      	ldr	r3, [pc, #348]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002308:	2200      	movs	r2, #0
 800230a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 800230c:	4b55      	ldr	r3, [pc, #340]	@ (8002464 <MX_SAI1_Init+0x168>)
 800230e:	2203      	movs	r2, #3
 8002310:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8002312:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002314:	2240      	movs	r2, #64	@ 0x40
 8002316:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002318:	4b52      	ldr	r3, [pc, #328]	@ (8002464 <MX_SAI1_Init+0x168>)
 800231a:	2200      	movs	r2, #0
 800231c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002320:	2200      	movs	r2, #0
 8002322:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 8002324:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002326:	2201      	movs	r2, #1
 8002328:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800232a:	4b4e      	ldr	r3, [pc, #312]	@ (8002464 <MX_SAI1_Init+0x168>)
 800232c:	2200      	movs	r2, #0
 800232e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002330:	4b4c      	ldr	r3, [pc, #304]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8002336:	4b4b      	ldr	r3, [pc, #300]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 800233c:	4b49      	ldr	r3, [pc, #292]	@ (8002464 <MX_SAI1_Init+0x168>)
 800233e:	2200      	movs	r2, #0
 8002340:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8002342:	4b48      	ldr	r3, [pc, #288]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002344:	2200      	movs	r2, #0
 8002346:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8002348:	4b46      	ldr	r3, [pc, #280]	@ (8002464 <MX_SAI1_Init+0x168>)
 800234a:	2200      	movs	r2, #0
 800234c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 800234e:	4b45      	ldr	r3, [pc, #276]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002350:	2200      	movs	r2, #0
 8002352:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8002356:	4b43      	ldr	r3, [pc, #268]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002358:	2200      	movs	r2, #0
 800235a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800235c:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <MX_SAI1_Init+0x168>)
 800235e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002364:	4b3f      	ldr	r3, [pc, #252]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002366:	2208      	movs	r2, #8
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800236a:	4b3e      	ldr	r3, [pc, #248]	@ (8002464 <MX_SAI1_Init+0x168>)
 800236c:	2201      	movs	r2, #1
 800236e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002370:	4b3c      	ldr	r3, [pc, #240]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002372:	2200      	movs	r2, #0
 8002374:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002378:	2200      	movs	r2, #0
 800237a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800237c:	4b39      	ldr	r3, [pc, #228]	@ (8002464 <MX_SAI1_Init+0x168>)
 800237e:	2200      	movs	r2, #0
 8002380:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002382:	4b38      	ldr	r3, [pc, #224]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002384:	2200      	movs	r2, #0
 8002386:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002388:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <MX_SAI1_Init+0x168>)
 800238a:	2200      	movs	r2, #0
 800238c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800238e:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002390:	2201      	movs	r2, #1
 8002392:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002394:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <MX_SAI1_Init+0x168>)
 8002396:	2200      	movs	r2, #0
 8002398:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800239a:	4832      	ldr	r0, [pc, #200]	@ (8002464 <MX_SAI1_Init+0x168>)
 800239c:	f008 fdc6 	bl	800af2c <HAL_SAI_Init>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 80023a6:	f7ff fcbb 	bl	8001d20 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80023aa:	4b30      	ldr	r3, [pc, #192]	@ (800246c <MX_SAI1_Init+0x170>)
 80023ac:	4a30      	ldr	r2, [pc, #192]	@ (8002470 <MX_SAI1_Init+0x174>)
 80023ae:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80023b0:	4b2e      	ldr	r3, [pc, #184]	@ (800246c <MX_SAI1_Init+0x170>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80023b6:	4b2d      	ldr	r3, [pc, #180]	@ (800246c <MX_SAI1_Init+0x170>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <MX_SAI1_Init+0x170>)
 80023be:	2240      	movs	r2, #64	@ 0x40
 80023c0:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80023c2:	4b2a      	ldr	r3, [pc, #168]	@ (800246c <MX_SAI1_Init+0x170>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80023c8:	4b28      	ldr	r3, [pc, #160]	@ (800246c <MX_SAI1_Init+0x170>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80023ce:	4b27      	ldr	r3, [pc, #156]	@ (800246c <MX_SAI1_Init+0x170>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023d4:	4b25      	ldr	r3, [pc, #148]	@ (800246c <MX_SAI1_Init+0x170>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80023da:	4b24      	ldr	r3, [pc, #144]	@ (800246c <MX_SAI1_Init+0x170>)
 80023dc:	2200      	movs	r2, #0
 80023de:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80023e0:	4b22      	ldr	r3, [pc, #136]	@ (800246c <MX_SAI1_Init+0x170>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 80023e6:	4b21      	ldr	r3, [pc, #132]	@ (800246c <MX_SAI1_Init+0x170>)
 80023e8:	4a22      	ldr	r2, [pc, #136]	@ (8002474 <MX_SAI1_Init+0x178>)
 80023ea:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023ec:	4b1f      	ldr	r3, [pc, #124]	@ (800246c <MX_SAI1_Init+0x170>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <MX_SAI1_Init+0x170>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80023f8:	4b1c      	ldr	r3, [pc, #112]	@ (800246c <MX_SAI1_Init+0x170>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80023fe:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <MX_SAI1_Init+0x170>)
 8002400:	2200      	movs	r2, #0
 8002402:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <MX_SAI1_Init+0x170>)
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 800240c:	4b17      	ldr	r3, [pc, #92]	@ (800246c <MX_SAI1_Init+0x170>)
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8002412:	4b16      	ldr	r3, [pc, #88]	@ (800246c <MX_SAI1_Init+0x170>)
 8002414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002418:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 800241a:	4b14      	ldr	r3, [pc, #80]	@ (800246c <MX_SAI1_Init+0x170>)
 800241c:	2208      	movs	r2, #8
 800241e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8002420:	4b12      	ldr	r3, [pc, #72]	@ (800246c <MX_SAI1_Init+0x170>)
 8002422:	2201      	movs	r2, #1
 8002424:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002426:	4b11      	ldr	r3, [pc, #68]	@ (800246c <MX_SAI1_Init+0x170>)
 8002428:	2200      	movs	r2, #0
 800242a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800242c:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <MX_SAI1_Init+0x170>)
 800242e:	2200      	movs	r2, #0
 8002430:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8002432:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <MX_SAI1_Init+0x170>)
 8002434:	2200      	movs	r2, #0
 8002436:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8002438:	4b0c      	ldr	r3, [pc, #48]	@ (800246c <MX_SAI1_Init+0x170>)
 800243a:	2200      	movs	r2, #0
 800243c:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <MX_SAI1_Init+0x170>)
 8002440:	2200      	movs	r2, #0
 8002442:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <MX_SAI1_Init+0x170>)
 8002446:	2201      	movs	r2, #1
 8002448:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 800244a:	4b08      	ldr	r3, [pc, #32]	@ (800246c <MX_SAI1_Init+0x170>)
 800244c:	2200      	movs	r2, #0
 800244e:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002450:	4806      	ldr	r0, [pc, #24]	@ (800246c <MX_SAI1_Init+0x170>)
 8002452:	f008 fd6b 	bl	800af2c <HAL_SAI_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 800245c:	f7ff fc60 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	24000840 	.word	0x24000840
 8002468:	40015804 	.word	0x40015804
 800246c:	240008d8 	.word	0x240008d8
 8002470:	40015824 	.word	0x40015824
 8002474:	0002ee00 	.word	0x0002ee00

08002478 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0b8      	sub	sp, #224	@ 0xe0
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002480:	f107 0310 	add.w	r3, r7, #16
 8002484:	22b8      	movs	r2, #184	@ 0xb8
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00e fdee 	bl	801106a <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a45      	ldr	r2, [pc, #276]	@ (80025a8 <HAL_SAI_MspInit+0x130>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d13e      	bne.n	8002516 <HAL_SAI_MspInit+0x9e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002498:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a8:	f107 0310 	add.w	r3, r7, #16
 80024ac:	4618      	mov	r0, r3
 80024ae:	f006 f957 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80024b8:	f7ff fc32 	bl	8001d20 <Error_Handler>
    }

    if (SAI1_client == 0)
 80024bc:	4b3b      	ldr	r3, [pc, #236]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10e      	bne.n	80024e2 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80024c4:	4b3a      	ldr	r3, [pc, #232]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 80024c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024ca:	4a39      	ldr	r2, [pc, #228]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 80024cc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024d0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80024d4:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 80024d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80024da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 80024e2:	4b32      	ldr	r3, [pc, #200]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	4a30      	ldr	r2, [pc, #192]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 80024ea:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 80024ec:	2340      	movs	r3, #64	@ 0x40
 80024ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8002504:	2306      	movs	r3, #6
 8002506:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800250e:	4619      	mov	r1, r3
 8002510:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <HAL_SAI_MspInit+0x13c>)
 8002512:	f003 fca1 	bl	8005e58 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a27      	ldr	r2, [pc, #156]	@ (80025b8 <HAL_SAI_MspInit+0x140>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d13f      	bne.n	80025a0 <HAL_SAI_MspInit+0x128>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 800252c:	2300      	movs	r3, #0
 800252e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	4618      	mov	r0, r3
 8002536:	f006 f913 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002540:	f7ff fbee 	bl	8001d20 <Error_Handler>
    }

      if (SAI1_client == 0)
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10e      	bne.n	800256a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800254c:	4b18      	ldr	r3, [pc, #96]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 800254e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 8002554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002558:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800255c:	4b14      	ldr	r3, [pc, #80]	@ (80025b0 <HAL_SAI_MspInit+0x138>)
 800255e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 800256a:	4b10      	ldr	r3, [pc, #64]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	4a0e      	ldr	r2, [pc, #56]	@ (80025ac <HAL_SAI_MspInit+0x134>)
 8002572:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 8002574:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002578:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257c:	2302      	movs	r3, #2
 800257e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800258e:	2306      	movs	r3, #6
 8002590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002594:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002598:	4619      	mov	r1, r3
 800259a:	4808      	ldr	r0, [pc, #32]	@ (80025bc <HAL_SAI_MspInit+0x144>)
 800259c:	f003 fc5c 	bl	8005e58 <HAL_GPIO_Init>

    }
}
 80025a0:	bf00      	nop
 80025a2:	37e0      	adds	r7, #224	@ 0xe0
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40015804 	.word	0x40015804
 80025ac:	24000970 	.word	0x24000970
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58021000 	.word	0x58021000
 80025b8:	40015824 	.word	0x40015824
 80025bc:	58021400 	.word	0x58021400

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b0c      	ldr	r3, [pc, #48]	@ (80025f8 <HAL_MspInit+0x38>)
 80025c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025cc:	4a0a      	ldr	r2, [pc, #40]	@ (80025f8 <HAL_MspInit+0x38>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80025d6:	4b08      	ldr	r3, [pc, #32]	@ (80025f8 <HAL_MspInit+0x38>)
 80025d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	210f      	movs	r1, #15
 80025e8:	f06f 0001 	mvn.w	r0, #1
 80025ec:	f002 faa6 	bl	8004b3c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	58024400 	.word	0x58024400

080025fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b090      	sub	sp, #64	@ 0x40
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	d827      	bhi.n	800265a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800260a:	2200      	movs	r2, #0
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	2036      	movs	r0, #54	@ 0x36
 8002610:	f002 fa94 	bl	8004b3c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002614:	2036      	movs	r0, #54	@ 0x36
 8002616:	f002 faab 	bl	8004b70 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800261a:	4a29      	ldr	r2, [pc, #164]	@ (80026c0 <HAL_InitTick+0xc4>)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002620:	4b28      	ldr	r3, [pc, #160]	@ (80026c4 <HAL_InitTick+0xc8>)
 8002622:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002626:	4a27      	ldr	r2, [pc, #156]	@ (80026c4 <HAL_InitTick+0xc8>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002630:	4b24      	ldr	r3, [pc, #144]	@ (80026c4 <HAL_InitTick+0xc8>)
 8002632:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002636:	f003 0310 	and.w	r3, r3, #16
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263e:	f107 0210 	add.w	r2, r7, #16
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f006 f847 	bl	80086dc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002654:	2b00      	cmp	r3, #0
 8002656:	d106      	bne.n	8002666 <HAL_InitTick+0x6a>
 8002658:	e001      	b.n	800265e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e02b      	b.n	80026b6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800265e:	f006 f811 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 8002662:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002664:	e004      	b.n	8002670 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002666:	f006 f80d 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 800266a:	4603      	mov	r3, r0
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002672:	4a15      	ldr	r2, [pc, #84]	@ (80026c8 <HAL_InitTick+0xcc>)
 8002674:	fba2 2303 	umull	r2, r3, r2, r3
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	3b01      	subs	r3, #1
 800267c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800267e:	4b13      	ldr	r3, [pc, #76]	@ (80026cc <HAL_InitTick+0xd0>)
 8002680:	4a13      	ldr	r2, [pc, #76]	@ (80026d0 <HAL_InitTick+0xd4>)
 8002682:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002684:	4b11      	ldr	r3, [pc, #68]	@ (80026cc <HAL_InitTick+0xd0>)
 8002686:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800268a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800268c:	4a0f      	ldr	r2, [pc, #60]	@ (80026cc <HAL_InitTick+0xd0>)
 800268e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002690:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <HAL_InitTick+0xd0>)
 8002694:	2200      	movs	r2, #0
 8002696:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002698:	4b0c      	ldr	r3, [pc, #48]	@ (80026cc <HAL_InitTick+0xd0>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800269e:	480b      	ldr	r0, [pc, #44]	@ (80026cc <HAL_InitTick+0xd0>)
 80026a0:	f008 fe98 	bl	800b3d4 <HAL_TIM_Base_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d104      	bne.n	80026b4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80026aa:	4808      	ldr	r0, [pc, #32]	@ (80026cc <HAL_InitTick+0xd0>)
 80026ac:	f008 fef4 	bl	800b498 <HAL_TIM_Base_Start_IT>
 80026b0:	4603      	mov	r3, r0
 80026b2:	e000      	b.n	80026b6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3740      	adds	r7, #64	@ 0x40
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	24000008 	.word	0x24000008
 80026c4:	58024400 	.word	0x58024400
 80026c8:	431bde83 	.word	0x431bde83
 80026cc:	24000974 	.word	0x24000974
 80026d0:	40001000 	.word	0x40001000

080026d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <NMI_Handler+0x4>

080026dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <HardFault_Handler+0x4>

080026e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <MemManage_Handler+0x4>

080026ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <BusFault_Handler+0x4>

080026f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <UsageFault_Handler+0x4>

080026fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <TIM6_DAC_IRQHandler+0x20>)
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 800271a:	4804      	ldr	r0, [pc, #16]	@ (800272c <TIM6_DAC_IRQHandler+0x20>)
 800271c:	f002 fa58 	bl	8004bd0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8002720:	4803      	ldr	r0, [pc, #12]	@ (8002730 <TIM6_DAC_IRQHandler+0x24>)
 8002722:	f008 ff96 	bl	800b652 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	2400040c 	.word	0x2400040c
 8002730:	24000974 	.word	0x24000974

08002734 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return 1;
 8002738:	2301      	movs	r3, #1
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <_kill>:

int _kill(int pid, int sig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800274e:	f00e fd35 	bl	80111bc <__errno>
 8002752:	4603      	mov	r3, r0
 8002754:	2216      	movs	r2, #22
 8002756:	601a      	str	r2, [r3, #0]
  return -1;
 8002758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <_exit>:

void _exit (int status)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800276c:	f04f 31ff 	mov.w	r1, #4294967295
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff ffe7 	bl	8002744 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002776:	bf00      	nop
 8002778:	e7fd      	b.n	8002776 <_exit+0x12>

0800277a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e00a      	b.n	80027a2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800278c:	f3af 8000 	nop.w
 8002790:	4601      	mov	r1, r0
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	60ba      	str	r2, [r7, #8]
 8002798:	b2ca      	uxtb	r2, r1
 800279a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3301      	adds	r3, #1
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	dbf0      	blt.n	800278c <_read+0x12>
  }

  return len;
 80027aa:	687b      	ldr	r3, [r7, #4]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	e009      	b.n	80027da <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	60ba      	str	r2, [r7, #8]
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3301      	adds	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	dbf1      	blt.n	80027c6 <_write+0x12>
  }
  return len;
 80027e2:	687b      	ldr	r3, [r7, #4]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <_close>:

int _close(int file)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002814:	605a      	str	r2, [r3, #4]
  return 0;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_isatty>:

int _isatty(int file)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800282c:	2301      	movs	r3, #1
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800283a:	b480      	push	{r7}
 800283c:	b085      	sub	sp, #20
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <_sbrk+0x5c>)
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <_sbrk+0x60>)
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002868:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <_sbrk+0x64>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002870:	4b11      	ldr	r3, [pc, #68]	@ (80028b8 <_sbrk+0x64>)
 8002872:	4a12      	ldr	r2, [pc, #72]	@ (80028bc <_sbrk+0x68>)
 8002874:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002876:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <_sbrk+0x64>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	429a      	cmp	r2, r3
 8002882:	d207      	bcs.n	8002894 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002884:	f00e fc9a 	bl	80111bc <__errno>
 8002888:	4603      	mov	r3, r0
 800288a:	220c      	movs	r2, #12
 800288c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800288e:	f04f 33ff 	mov.w	r3, #4294967295
 8002892:	e009      	b.n	80028a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002894:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <_sbrk+0x64>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800289a:	4b07      	ldr	r3, [pc, #28]	@ (80028b8 <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a05      	ldr	r2, [pc, #20]	@ (80028b8 <_sbrk+0x64>)
 80028a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028a6:	68fb      	ldr	r3, [r7, #12]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	24050000 	.word	0x24050000
 80028b4:	00000400 	.word	0x00000400
 80028b8:	240009c0 	.word	0x240009c0
 80028bc:	24005708 	.word	0x24005708

080028c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028c4:	4b32      	ldr	r3, [pc, #200]	@ (8002990 <SystemInit+0xd0>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ca:	4a31      	ldr	r2, [pc, #196]	@ (8002990 <SystemInit+0xd0>)
 80028cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80028d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002994 <SystemInit+0xd4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	2b06      	cmp	r3, #6
 80028de:	d807      	bhi.n	80028f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80028e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002994 <SystemInit+0xd4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f023 030f 	bic.w	r3, r3, #15
 80028e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002994 <SystemInit+0xd4>)
 80028ea:	f043 0307 	orr.w	r3, r3, #7
 80028ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80028f0:	4b29      	ldr	r3, [pc, #164]	@ (8002998 <SystemInit+0xd8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a28      	ldr	r2, [pc, #160]	@ (8002998 <SystemInit+0xd8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028fc:	4b26      	ldr	r3, [pc, #152]	@ (8002998 <SystemInit+0xd8>)
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002902:	4b25      	ldr	r3, [pc, #148]	@ (8002998 <SystemInit+0xd8>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	4924      	ldr	r1, [pc, #144]	@ (8002998 <SystemInit+0xd8>)
 8002908:	4b24      	ldr	r3, [pc, #144]	@ (800299c <SystemInit+0xdc>)
 800290a:	4013      	ands	r3, r2
 800290c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800290e:	4b21      	ldr	r3, [pc, #132]	@ (8002994 <SystemInit+0xd4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d007      	beq.n	800292a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800291a:	4b1e      	ldr	r3, [pc, #120]	@ (8002994 <SystemInit+0xd4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 030f 	bic.w	r3, r3, #15
 8002922:	4a1c      	ldr	r2, [pc, #112]	@ (8002994 <SystemInit+0xd4>)
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800292a:	4b1b      	ldr	r3, [pc, #108]	@ (8002998 <SystemInit+0xd8>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <SystemInit+0xd8>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002936:	4b18      	ldr	r3, [pc, #96]	@ (8002998 <SystemInit+0xd8>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800293c:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <SystemInit+0xd8>)
 800293e:	4a18      	ldr	r2, [pc, #96]	@ (80029a0 <SystemInit+0xe0>)
 8002940:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002942:	4b15      	ldr	r3, [pc, #84]	@ (8002998 <SystemInit+0xd8>)
 8002944:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <SystemInit+0xe4>)
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002948:	4b13      	ldr	r3, [pc, #76]	@ (8002998 <SystemInit+0xd8>)
 800294a:	4a17      	ldr	r2, [pc, #92]	@ (80029a8 <SystemInit+0xe8>)
 800294c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <SystemInit+0xd8>)
 8002950:	2200      	movs	r2, #0
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002954:	4b10      	ldr	r3, [pc, #64]	@ (8002998 <SystemInit+0xd8>)
 8002956:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <SystemInit+0xe8>)
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <SystemInit+0xd8>)
 800295c:	2200      	movs	r2, #0
 800295e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <SystemInit+0xd8>)
 8002962:	4a11      	ldr	r2, [pc, #68]	@ (80029a8 <SystemInit+0xe8>)
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <SystemInit+0xd8>)
 8002968:	2200      	movs	r2, #0
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800296c:	4b0a      	ldr	r3, [pc, #40]	@ (8002998 <SystemInit+0xd8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <SystemInit+0xd8>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002978:	4b07      	ldr	r3, [pc, #28]	@ (8002998 <SystemInit+0xd8>)
 800297a:	2200      	movs	r2, #0
 800297c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <SystemInit+0xec>)
 8002980:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002984:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002986:	bf00      	nop
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00
 8002994:	52002000 	.word	0x52002000
 8002998:	58024400 	.word	0x58024400
 800299c:	eaf6ed7f 	.word	0xeaf6ed7f
 80029a0:	02020200 	.word	0x02020200
 80029a4:	01ff0000 	.word	0x01ff0000
 80029a8:	01010280 	.word	0x01010280
 80029ac:	52004000 	.word	0x52004000

080029b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b098      	sub	sp, #96	@ 0x60
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
 80029ca:	605a      	str	r2, [r3, #4]
 80029cc:	609a      	str	r2, [r3, #8]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	611a      	str	r2, [r3, #16]
 80029d2:	615a      	str	r2, [r3, #20]
 80029d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029d6:	1d3b      	adds	r3, r7, #4
 80029d8:	2234      	movs	r2, #52	@ 0x34
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f00e fb44 	bl	801106a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029e2:	4b38      	ldr	r3, [pc, #224]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 80029e4:	4a38      	ldr	r2, [pc, #224]	@ (8002ac8 <MX_TIM1_Init+0x118>)
 80029e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029e8:	4b36      	ldr	r3, [pc, #216]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ee:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80029f4:	4b33      	ldr	r3, [pc, #204]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 80029f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80029fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029fc:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002a02:	4b30      	ldr	r3, [pc, #192]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a08:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002a0e:	482d      	ldr	r0, [pc, #180]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002a10:	f008 fdc8 	bl	800b5a4 <HAL_TIM_PWM_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002a1a:	f7ff f981 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a2a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4824      	ldr	r0, [pc, #144]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002a32:	f009 fbd9 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002a3c:	f7ff f970 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a40:	2360      	movs	r3, #96	@ 0x60
 8002a42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a50:	2300      	movs	r3, #0
 8002a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a54:	2300      	movs	r3, #0
 8002a56:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a58:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4818      	ldr	r0, [pc, #96]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002a62:	f008 fefd 	bl	800b860 <HAL_TIM_PWM_ConfigChannel>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002a6c:	f7ff f958 	bl	8001d20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a70:	2300      	movs	r3, #0
 8002a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aa0:	1d3b      	adds	r3, r7, #4
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4807      	ldr	r0, [pc, #28]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002aa6:	f009 fc3b 	bl	800c320 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8002ab0:	f7ff f936 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ab4:	4803      	ldr	r0, [pc, #12]	@ (8002ac4 <MX_TIM1_Init+0x114>)
 8002ab6:	f000 f923 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8002aba:	bf00      	nop
 8002abc:	3760      	adds	r7, #96	@ 0x60
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	240009c4 	.word	0x240009c4
 8002ac8:	40010000 	.word	0x40010000

08002acc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad2:	f107 031c 	add.w	r3, r7, #28
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	601a      	str	r2, [r3, #0]
 8002ada:	605a      	str	r2, [r3, #4]
 8002adc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ade:	463b      	mov	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	615a      	str	r2, [r3, #20]
 8002aee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002af0:	4b2c      	ldr	r3, [pc, #176]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002af2:	4a2d      	ldr	r2, [pc, #180]	@ (8002ba8 <MX_TIM4_Init+0xdc>)
 8002af4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002af6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002afc:	4b29      	ldr	r3, [pc, #164]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002b02:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b10:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b16:	4823      	ldr	r0, [pc, #140]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b18:	f008 fd44 	bl	800b5a4 <HAL_TIM_PWM_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002b22:	f7ff f8fd 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b2e:	f107 031c 	add.w	r3, r7, #28
 8002b32:	4619      	mov	r1, r3
 8002b34:	481b      	ldr	r0, [pc, #108]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b36:	f009 fb57 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002b40:	f7ff f8ee 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b44:	2360      	movs	r3, #96	@ 0x60
 8002b46:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b54:	463b      	mov	r3, r7
 8002b56:	2204      	movs	r2, #4
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4812      	ldr	r0, [pc, #72]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b5c:	f008 fe80 	bl	800b860 <HAL_TIM_PWM_ConfigChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002b66:	f7ff f8db 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	4619      	mov	r1, r3
 8002b70:	480c      	ldr	r0, [pc, #48]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b72:	f008 fe75 	bl	800b860 <HAL_TIM_PWM_ConfigChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002b7c:	f7ff f8d0 	bl	8001d20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b80:	463b      	mov	r3, r7
 8002b82:	220c      	movs	r2, #12
 8002b84:	4619      	mov	r1, r3
 8002b86:	4807      	ldr	r0, [pc, #28]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b88:	f008 fe6a 	bl	800b860 <HAL_TIM_PWM_ConfigChannel>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d001      	beq.n	8002b96 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002b92:	f7ff f8c5 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b96:	4803      	ldr	r0, [pc, #12]	@ (8002ba4 <MX_TIM4_Init+0xd8>)
 8002b98:	f000 f8b2 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8002b9c:	bf00      	nop
 8002b9e:	3728      	adds	r7, #40	@ 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	24000a10 	.word	0x24000a10
 8002ba8:	40000800 	.word	0x40000800

08002bac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb2:	f107 031c 	add.w	r3, r7, #28
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bbe:	463b      	mov	r3, r7
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
 8002bcc:	615a      	str	r2, [r3, #20]
 8002bce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bd0:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bd2:	4a22      	ldr	r2, [pc, #136]	@ (8002c5c <MX_TIM5_Init+0xb0>)
 8002bd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002be4:	f04f 32ff 	mov.w	r2, #4294967295
 8002be8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bea:	4b1b      	ldr	r3, [pc, #108]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bf0:	4b19      	ldr	r3, [pc, #100]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002bf6:	4818      	ldr	r0, [pc, #96]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002bf8:	f008 fcd4 	bl	800b5a4 <HAL_TIM_PWM_Init>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002c02:	f7ff f88d 	bl	8001d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c0e:	f107 031c 	add.w	r3, r7, #28
 8002c12:	4619      	mov	r1, r3
 8002c14:	4810      	ldr	r0, [pc, #64]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002c16:	f009 fae7 	bl	800c1e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002c20:	f7ff f87e 	bl	8001d20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c24:	2360      	movs	r3, #96	@ 0x60
 8002c26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c34:	463b      	mov	r3, r7
 8002c36:	2200      	movs	r2, #0
 8002c38:	4619      	mov	r1, r3
 8002c3a:	4807      	ldr	r0, [pc, #28]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002c3c:	f008 fe10 	bl	800b860 <HAL_TIM_PWM_ConfigChannel>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002c46:	f7ff f86b 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c4a:	4803      	ldr	r0, [pc, #12]	@ (8002c58 <MX_TIM5_Init+0xac>)
 8002c4c:	f000 f858 	bl	8002d00 <HAL_TIM_MspPostInit>

}
 8002c50:	bf00      	nop
 8002c52:	3728      	adds	r7, #40	@ 0x28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	24000a5c 	.word	0x24000a5c
 8002c5c:	40000c00 	.word	0x40000c00

08002c60 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a20      	ldr	r2, [pc, #128]	@ (8002cf0 <HAL_TIM_PWM_MspInit+0x90>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10f      	bne.n	8002c92 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c72:	4b20      	ldr	r3, [pc, #128]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c78:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002c82:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c90:	e028      	b.n	8002ce4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a18      	ldr	r2, [pc, #96]	@ (8002cf8 <HAL_TIM_PWM_MspInit+0x98>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10f      	bne.n	8002cbc <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c9c:	4b15      	ldr	r3, [pc, #84]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002c9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ca2:	4a14      	ldr	r2, [pc, #80]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002ca4:	f043 0304 	orr.w	r3, r3, #4
 8002ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002cae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	693b      	ldr	r3, [r7, #16]
}
 8002cba:	e013      	b.n	8002ce4 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM5)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <HAL_TIM_PWM_MspInit+0x9c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002cc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ccc:	4a09      	ldr	r2, [pc, #36]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002cce:	f043 0308 	orr.w	r3, r3, #8
 8002cd2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002cd6:	4b07      	ldr	r3, [pc, #28]	@ (8002cf4 <HAL_TIM_PWM_MspInit+0x94>)
 8002cd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
}
 8002ce4:	bf00      	nop
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40010000 	.word	0x40010000
 8002cf4:	58024400 	.word	0x58024400
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40000c00 	.word	0x40000c00

08002d00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	@ 0x30
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 031c 	add.w	r3, r7, #28
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a48      	ldr	r2, [pc, #288]	@ (8002e40 <HAL_TIM_MspPostInit+0x140>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d120      	bne.n	8002d64 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d22:	4b48      	ldr	r3, [pc, #288]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d28:	4a46      	ldr	r2, [pc, #280]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d2a:	f043 0310 	orr.w	r3, r3, #16
 8002d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d32:	4b44      	ldr	r3, [pc, #272]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d38:	f003 0310 	and.w	r3, r3, #16
 8002d3c:	61bb      	str	r3, [r7, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002d40:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d46:	2302      	movs	r3, #2
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d52:	2301      	movs	r3, #1
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002d56:	f107 031c 	add.w	r3, r7, #28
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	483a      	ldr	r0, [pc, #232]	@ (8002e48 <HAL_TIM_MspPostInit+0x148>)
 8002d5e:	f003 f87b 	bl	8005e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d62:	e068      	b.n	8002e36 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a38      	ldr	r2, [pc, #224]	@ (8002e4c <HAL_TIM_MspPostInit+0x14c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d13f      	bne.n	8002dee <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6e:	4b35      	ldr	r3, [pc, #212]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d74:	4a33      	ldr	r2, [pc, #204]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d92:	4a2c      	ldr	r2, [pc, #176]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d94:	f043 0308 	orr.w	r3, r3, #8
 8002d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d9c:	4b29      	ldr	r3, [pc, #164]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db2:	2300      	movs	r3, #0
 8002db4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4822      	ldr	r0, [pc, #136]	@ (8002e50 <HAL_TIM_MspPostInit+0x150>)
 8002dc6:	f003 f847 	bl	8005e58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8002dca:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4619      	mov	r1, r3
 8002de6:	481b      	ldr	r0, [pc, #108]	@ (8002e54 <HAL_TIM_MspPostInit+0x154>)
 8002de8:	f003 f836 	bl	8005e58 <HAL_GPIO_Init>
}
 8002dec:	e023      	b.n	8002e36 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM5)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a19      	ldr	r2, [pc, #100]	@ (8002e58 <HAL_TIM_MspPostInit+0x158>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d11e      	bne.n	8002e36 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df8:	4b12      	ldr	r3, [pc, #72]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dfe:	4a11      	ldr	r2, [pc, #68]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e08:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <HAL_TIM_MspPostInit+0x144>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002e16:	2301      	movs	r3, #1
 8002e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002e26:	2302      	movs	r3, #2
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 031c 	add.w	r3, r7, #28
 8002e2e:	4619      	mov	r1, r3
 8002e30:	480a      	ldr	r0, [pc, #40]	@ (8002e5c <HAL_TIM_MspPostInit+0x15c>)
 8002e32:	f003 f811 	bl	8005e58 <HAL_GPIO_Init>
}
 8002e36:	bf00      	nop
 8002e38:	3730      	adds	r7, #48	@ 0x30
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40010000 	.word	0x40010000
 8002e44:	58024400 	.word	0x58024400
 8002e48:	58021000 	.word	0x58021000
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	58020400 	.word	0x58020400
 8002e54:	58020c00 	.word	0x58020c00
 8002e58:	40000c00 	.word	0x40000c00
 8002e5c:	58020000 	.word	0x58020000

08002e60 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e64:	4b22      	ldr	r3, [pc, #136]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e66:	4a23      	ldr	r2, [pc, #140]	@ (8002ef4 <MX_USART1_UART_Init+0x94>)
 8002e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e72:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e86:	220c      	movs	r2, #12
 8002e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	4b19      	ldr	r3, [pc, #100]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e90:	4b17      	ldr	r3, [pc, #92]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e96:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e9c:	4b14      	ldr	r3, [pc, #80]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ea2:	4b13      	ldr	r3, [pc, #76]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ea8:	4811      	ldr	r0, [pc, #68]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002eaa:	f009 fae3 	bl	800c474 <HAL_UART_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002eb4:	f7fe ff34 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	480d      	ldr	r0, [pc, #52]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ebc:	f00a fc7d 	bl	800d7ba <HAL_UARTEx_SetTxFifoThreshold>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002ec6:	f7fe ff2b 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eca:	2100      	movs	r1, #0
 8002ecc:	4808      	ldr	r0, [pc, #32]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ece:	f00a fcb2 	bl	800d836 <HAL_UARTEx_SetRxFifoThreshold>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002ed8:	f7fe ff22 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <MX_USART1_UART_Init+0x90>)
 8002ede:	f00a fc33 	bl	800d748 <HAL_UARTEx_DisableFifoMode>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002ee8:	f7fe ff1a 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	24000aa8 	.word	0x24000aa8
 8002ef4:	40011000 	.word	0x40011000

08002ef8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002efc:	4b22      	ldr	r3, [pc, #136]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002efe:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <MX_USART3_UART_Init+0x94>)
 8002f00:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f08:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f10:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f1e:	220c      	movs	r2, #12
 8002f20:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f22:	4b19      	ldr	r3, [pc, #100]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f28:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f2e:	4b16      	ldr	r3, [pc, #88]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f34:	4b14      	ldr	r3, [pc, #80]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f3a:	4b13      	ldr	r3, [pc, #76]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f40:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f42:	f009 fa97 	bl	800c474 <HAL_UART_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002f4c:	f7fe fee8 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f50:	2100      	movs	r1, #0
 8002f52:	480d      	ldr	r0, [pc, #52]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f54:	f00a fc31 	bl	800d7ba <HAL_UARTEx_SetTxFifoThreshold>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002f5e:	f7fe fedf 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f62:	2100      	movs	r1, #0
 8002f64:	4808      	ldr	r0, [pc, #32]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f66:	f00a fc66 	bl	800d836 <HAL_UARTEx_SetRxFifoThreshold>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002f70:	f7fe fed6 	bl	8001d20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002f74:	4804      	ldr	r0, [pc, #16]	@ (8002f88 <MX_USART3_UART_Init+0x90>)
 8002f76:	f00a fbe7 	bl	800d748 <HAL_UARTEx_DisableFifoMode>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002f80:	f7fe fece 	bl	8001d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	24000b3c 	.word	0x24000b3c
 8002f8c:	40004800 	.word	0x40004800

08002f90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	@ 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 0318 	add.w	r3, r7, #24
 8002fac:	22b8      	movs	r2, #184	@ 0xb8
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f00e f85a 	bl	801106a <memset>
  if(uartHandle->Instance==USART1)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4d      	ldr	r2, [pc, #308]	@ (80030f0 <HAL_UART_MspInit+0x160>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d147      	bne.n	8003050 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002fc0:	f04f 0201 	mov.w	r2, #1
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd2:	f107 0318 	add.w	r3, r7, #24
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f005 fbc2 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002fe2:	f7fe fe9d 	bl	8001d20 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fe6:	4b43      	ldr	r3, [pc, #268]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8002fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002fec:	4a41      	ldr	r2, [pc, #260]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8002fee:	f043 0310 	orr.w	r3, r3, #16
 8002ff2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8002ff8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002ffc:	f003 0310 	and.w	r3, r3, #16
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003004:	4b3b      	ldr	r3, [pc, #236]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800300a:	4a3a      	ldr	r2, [pc, #232]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003014:	4b37      	ldr	r3, [pc, #220]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8003022:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003036:	2300      	movs	r3, #0
 8003038:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800303c:	2304      	movs	r3, #4
 800303e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003042:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003046:	4619      	mov	r1, r3
 8003048:	482b      	ldr	r0, [pc, #172]	@ (80030f8 <HAL_UART_MspInit+0x168>)
 800304a:	f002 ff05 	bl	8005e58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800304e:	e04b      	b.n	80030e8 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a29      	ldr	r2, [pc, #164]	@ (80030fc <HAL_UART_MspInit+0x16c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d146      	bne.n	80030e8 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800305a:	f04f 0202 	mov.w	r2, #2
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	4618      	mov	r0, r3
 8003072:	f005 fb75 	bl	8008760 <HAL_RCCEx_PeriphCLKConfig>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800307c:	f7fe fe50 	bl	8001d20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003080:	4b1c      	ldr	r3, [pc, #112]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8003082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003086:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8003088:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800308c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003090:	4b18      	ldr	r3, [pc, #96]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030a4:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 80030a6:	f043 0308 	orr.w	r3, r3, #8
 80030aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030ae:	4b11      	ldr	r3, [pc, #68]	@ (80030f4 <HAL_UART_MspInit+0x164>)
 80030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030b4:	f003 0308 	and.w	r3, r3, #8
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80030bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80030c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80030d6:	2307      	movs	r3, #7
 80030d8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030dc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030e0:	4619      	mov	r1, r3
 80030e2:	4807      	ldr	r0, [pc, #28]	@ (8003100 <HAL_UART_MspInit+0x170>)
 80030e4:	f002 feb8 	bl	8005e58 <HAL_GPIO_Init>
}
 80030e8:	bf00      	nop
 80030ea:	37e8      	adds	r7, #232	@ 0xe8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40011000 	.word	0x40011000
 80030f4:	58024400 	.word	0x58024400
 80030f8:	58020400 	.word	0x58020400
 80030fc:	40004800 	.word	0x40004800
 8003100:	58020c00 	.word	0x58020c00

08003104 <Print_Temperature_Log>:
  }
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef Print_Temperature_Log(int *array){
 8003104:	b580      	push	{r7, lr}
 8003106:	b092      	sub	sp, #72	@ 0x48
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	char buffer[50];

	for(int n = 0; n < 10; n++){
 8003112:	2300      	movs	r3, #0
 8003114:	643b      	str	r3, [r7, #64]	@ 0x40
 8003116:	e020      	b.n	800315a <Print_Temperature_Log+0x56>
		sprintf(buffer, "%d: %d\r\n", n+1, array[n]);
 8003118:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311a:	1c59      	adds	r1, r3, #1
 800311c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4413      	add	r3, r2
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f107 000c 	add.w	r0, r7, #12
 800312a:	460a      	mov	r2, r1
 800312c:	490f      	ldr	r1, [pc, #60]	@ (800316c <Print_Temperature_Log+0x68>)
 800312e:	f00d ff39 	bl	8010fa4 <siprintf>
		status = HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), 0xFFFF);
 8003132:	f107 030c 	add.w	r3, r7, #12
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f93a 	bl	80003b0 <strlen>
 800313c:	4603      	mov	r3, r0
 800313e:	b29a      	uxth	r2, r3
 8003140:	f107 010c 	add.w	r1, r7, #12
 8003144:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003148:	4809      	ldr	r0, [pc, #36]	@ (8003170 <Print_Temperature_Log+0x6c>)
 800314a:	f009 f9e3 	bl	800c514 <HAL_UART_Transmit>
 800314e:	4603      	mov	r3, r0
 8003150:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	for(int n = 0; n < 10; n++){
 8003154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003156:	3301      	adds	r3, #1
 8003158:	643b      	str	r3, [r7, #64]	@ 0x40
 800315a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800315c:	2b09      	cmp	r3, #9
 800315e:	dddb      	ble.n	8003118 <Print_Temperature_Log+0x14>
	}

	return status;
 8003160:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8003164:	4618      	mov	r0, r3
 8003166:	3748      	adds	r7, #72	@ 0x48
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	080131fc 	.word	0x080131fc
 8003170:	24000b3c 	.word	0x24000b3c

08003174 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80031bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003188:	f7ff fb9a 	bl	80028c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800318c:	480c      	ldr	r0, [pc, #48]	@ (80031c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800318e:	490d      	ldr	r1, [pc, #52]	@ (80031c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003190:	4a0d      	ldr	r2, [pc, #52]	@ (80031c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003194:	e002      	b.n	800319c <LoopCopyDataInit>

08003196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800319a:	3304      	adds	r3, #4

0800319c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800319c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800319e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031a0:	d3f9      	bcc.n	8003196 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031a2:	4a0a      	ldr	r2, [pc, #40]	@ (80031cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031a4:	4c0a      	ldr	r4, [pc, #40]	@ (80031d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a8:	e001      	b.n	80031ae <LoopFillZerobss>

080031aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031ac:	3204      	adds	r2, #4

080031ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031b0:	d3fb      	bcc.n	80031aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031b2:	f00e f809 	bl	80111c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031b6:	f7fe fccb 	bl	8001b50 <main>
  bx  lr
 80031ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031bc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80031c0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031c4:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80031c8:	080136c4 	.word	0x080136c4
  ldr r2, =_sbss
 80031cc:	2400029c 	.word	0x2400029c
  ldr r4, =_ebss
 80031d0:	24005708 	.word	0x24005708

080031d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031d4:	e7fe      	b.n	80031d4 <ADC3_IRQHandler>
	...

080031d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031de:	2003      	movs	r0, #3
 80031e0:	f001 fca1 	bl	8004b26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031e4:	f005 f8a4 	bl	8008330 <HAL_RCC_GetSysClockFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b15      	ldr	r3, [pc, #84]	@ (8003240 <HAL_Init+0x68>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 030f 	and.w	r3, r3, #15
 80031f4:	4913      	ldr	r1, [pc, #76]	@ (8003244 <HAL_Init+0x6c>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003200:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003202:	4b0f      	ldr	r3, [pc, #60]	@ (8003240 <HAL_Init+0x68>)
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	4a0e      	ldr	r2, [pc, #56]	@ (8003244 <HAL_Init+0x6c>)
 800320c:	5cd3      	ldrb	r3, [r2, r3]
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	fa22 f303 	lsr.w	r3, r2, r3
 8003218:	4a0b      	ldr	r2, [pc, #44]	@ (8003248 <HAL_Init+0x70>)
 800321a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800321c:	4a0b      	ldr	r2, [pc, #44]	@ (800324c <HAL_Init+0x74>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003222:	200f      	movs	r0, #15
 8003224:	f7ff f9ea 	bl	80025fc <HAL_InitTick>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e002      	b.n	8003238 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003232:	f7ff f9c5 	bl	80025c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	58024400 	.word	0x58024400
 8003244:	080132b4 	.word	0x080132b4
 8003248:	24000004 	.word	0x24000004
 800324c:	24000000 	.word	0x24000000

08003250 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003254:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <HAL_IncTick+0x20>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	461a      	mov	r2, r3
 800325a:	4b06      	ldr	r3, [pc, #24]	@ (8003274 <HAL_IncTick+0x24>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4413      	add	r3, r2
 8003260:	4a04      	ldr	r2, [pc, #16]	@ (8003274 <HAL_IncTick+0x24>)
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	2400000c 	.word	0x2400000c
 8003274:	24000bd0 	.word	0x24000bd0

08003278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return uwTick;
 800327c:	4b03      	ldr	r3, [pc, #12]	@ (800328c <HAL_GetTick+0x14>)
 800327e:	681b      	ldr	r3, [r3, #0]
}
 8003280:	4618      	mov	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	24000bd0 	.word	0x24000bd0

08003290 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003298:	4b06      	ldr	r3, [pc, #24]	@ (80032b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80032a0:	4904      	ldr	r1, [pc, #16]	@ (80032b4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	604b      	str	r3, [r1, #4]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	58000400 	.word	0x58000400

080032b8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80032c2:	4b07      	ldr	r3, [pc, #28]	@ (80032e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	401a      	ands	r2, r3
 80032cc:	4904      	ldr	r1, [pc, #16]	@ (80032e0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	58000400 	.word	0x58000400

080032e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	609a      	str	r2, [r3, #8]
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
 8003312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	3360      	adds	r3, #96	@ 0x60
 800335e:	461a      	mov	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a10      	ldr	r2, [pc, #64]	@ (80033ac <LL_ADC_SetOffset+0x60>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10b      	bne.n	8003388 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	4313      	orrs	r3, r2
 800337e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003386:	e00b      	b.n	80033a0 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	431a      	orrs	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	58026000 	.word	0x58026000

080033b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3360      	adds	r3, #96	@ 0x60
 80033be:	461a      	mov	r2, r3
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	611a      	str	r2, [r3, #16]
}
 8003402:	bf00      	nop
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003410:	b480      	push	{r7}
 8003412:	b087      	sub	sp, #28
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4a0c      	ldr	r2, [pc, #48]	@ (8003450 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	3360      	adds	r3, #96	@ 0x60
 8003428:	461a      	mov	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	431a      	orrs	r2, r3
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	601a      	str	r2, [r3, #0]
  }
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	58026000 	.word	0x58026000

08003454 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003454:	b480      	push	{r7}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a0c      	ldr	r2, [pc, #48]	@ (8003494 <LL_ADC_SetOffsetSaturation+0x40>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d10e      	bne.n	8003486 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3360      	adds	r3, #96	@ 0x60
 800346c:	461a      	mov	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	431a      	orrs	r2, r3
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	58026000 	.word	0x58026000

08003498 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4a0c      	ldr	r2, [pc, #48]	@ (80034d8 <LL_ADC_SetOffsetSign+0x40>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d10e      	bne.n	80034ca <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	3360      	adds	r3, #96	@ 0x60
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	431a      	orrs	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80034ca:	bf00      	nop
 80034cc:	371c      	adds	r7, #28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	58026000 	.word	0x58026000

080034dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3360      	adds	r3, #96	@ 0x60
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a0c      	ldr	r2, [pc, #48]	@ (800352c <LL_ADC_SetOffsetState+0x50>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d108      	bne.n	8003510 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	431a      	orrs	r2, r3
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800350e:	e007      	b.n	8003520 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	431a      	orrs	r2, r3
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	601a      	str	r2, [r3, #0]
}
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	58026000 	.word	0x58026000

08003530 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003530:	b480      	push	{r7}
 8003532:	b087      	sub	sp, #28
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	3330      	adds	r3, #48	@ 0x30
 8003540:	461a      	mov	r2, r3
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	0a1b      	lsrs	r3, r3, #8
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	f003 030c 	and.w	r3, r3, #12
 800354c:	4413      	add	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	211f      	movs	r1, #31
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	401a      	ands	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	f003 011f 	and.w	r1, r3, #31
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	f003 031f 	and.w	r3, r3, #31
 8003572:	fa01 f303 	lsl.w	r3, r1, r3
 8003576:	431a      	orrs	r2, r3
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003588:	b480      	push	{r7}
 800358a:	b087      	sub	sp, #28
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3314      	adds	r3, #20
 8003598:	461a      	mov	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0e5b      	lsrs	r3, r3, #25
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	4413      	add	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	0d1b      	lsrs	r3, r3, #20
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	2107      	movs	r1, #7
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	401a      	ands	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	0d1b      	lsrs	r3, r3, #20
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	431a      	orrs	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003658 <LL_ADC_SetChannelSingleDiff+0x78>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d115      	bne.n	8003620 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003600:	43db      	mvns	r3, r3
 8003602:	401a      	ands	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f003 0318 	and.w	r3, r3, #24
 800360a:	4914      	ldr	r1, [pc, #80]	@ (800365c <LL_ADC_SetChannelSingleDiff+0x7c>)
 800360c:	40d9      	lsrs	r1, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	400b      	ands	r3, r1
 8003612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003616:	431a      	orrs	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800361e:	e014      	b.n	800364a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800362c:	43db      	mvns	r3, r3
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f003 0318 	and.w	r3, r3, #24
 8003636:	4909      	ldr	r1, [pc, #36]	@ (800365c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003638:	40d9      	lsrs	r1, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	400b      	ands	r3, r1
 800363e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003642:	431a      	orrs	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800364a:	bf00      	nop
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	58026000 	.word	0x58026000
 800365c:	000fffff 	.word	0x000fffff

08003660 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <LL_ADC_DisableDeepPowerDown+0x20>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6093      	str	r3, [r2, #8]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	5fffffc0 	.word	0x5fffffc0

08003684 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003694:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003698:	d101      	bne.n	800369e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b05      	ldr	r3, [pc, #20]	@ (80036d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	6fffffc0 	.word	0x6fffffc0

080036d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036e8:	d101      	bne.n	80036ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ee:	2300      	movs	r3, #0
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <LL_ADC_IsEnabled+0x18>
 8003710:	2301      	movs	r3, #1
 8003712:	e000      	b.n	8003716 <LL_ADC_IsEnabled+0x1a>
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0304 	and.w	r3, r3, #4
 8003732:	2b04      	cmp	r3, #4
 8003734:	d101      	bne.n	800373a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b08      	cmp	r3, #8
 800375a:	d101      	bne.n	8003760 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
	...

08003770 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	@ 0x24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003778:	2300      	movs	r3, #0
 800377a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e1ee      	b.n	8003b68 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7fd f8dd 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7ff ff67 	bl	8003684 <LL_ADC_IsDeepPowerDownEnabled>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f7ff ff4d 	bl	8003660 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff82 	bl	80036d4 <LL_ADC_IsInternalRegulatorEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d114      	bne.n	8003800 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ff66 	bl	80036ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e0:	4b8e      	ldr	r3, [pc, #568]	@ (8003a1c <HAL_ADC_Init+0x2ac>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	4a8e      	ldr	r2, [pc, #568]	@ (8003a20 <HAL_ADC_Init+0x2b0>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	099b      	lsrs	r3, r3, #6
 80037ee:	3301      	adds	r3, #1
 80037f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037f2:	e002      	b.n	80037fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f9      	bne.n	80037f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff65 	bl	80036d4 <LL_ADC_IsInternalRegulatorEnabled>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10d      	bne.n	800382c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003814:	f043 0210 	orr.w	r2, r3, #16
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003820:	f043 0201 	orr.w	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff ff76 	bl	8003722 <LL_ADC_REG_IsConversionOngoing>
 8003836:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 8188 	bne.w	8003b56 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	f040 8184 	bne.w	8003b56 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003852:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003856:	f043 0202 	orr.w	r2, r3, #2
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff ff4a 	bl	80036fc <LL_ADC_IsEnabled>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d136      	bne.n	80038dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a6c      	ldr	r2, [pc, #432]	@ (8003a24 <HAL_ADC_Init+0x2b4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d004      	beq.n	8003882 <HAL_ADC_Init+0x112>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a6a      	ldr	r2, [pc, #424]	@ (8003a28 <HAL_ADC_Init+0x2b8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10e      	bne.n	80038a0 <HAL_ADC_Init+0x130>
 8003882:	4868      	ldr	r0, [pc, #416]	@ (8003a24 <HAL_ADC_Init+0x2b4>)
 8003884:	f7ff ff3a 	bl	80036fc <LL_ADC_IsEnabled>
 8003888:	4604      	mov	r4, r0
 800388a:	4867      	ldr	r0, [pc, #412]	@ (8003a28 <HAL_ADC_Init+0x2b8>)
 800388c:	f7ff ff36 	bl	80036fc <LL_ADC_IsEnabled>
 8003890:	4603      	mov	r3, r0
 8003892:	4323      	orrs	r3, r4
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e008      	b.n	80038b2 <HAL_ADC_Init+0x142>
 80038a0:	4862      	ldr	r0, [pc, #392]	@ (8003a2c <HAL_ADC_Init+0x2bc>)
 80038a2:	f7ff ff2b 	bl	80036fc <LL_ADC_IsEnabled>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5a      	ldr	r2, [pc, #360]	@ (8003a24 <HAL_ADC_Init+0x2b4>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_ADC_Init+0x15a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a58      	ldr	r2, [pc, #352]	@ (8003a28 <HAL_ADC_Init+0x2b8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d101      	bne.n	80038ce <HAL_ADC_Init+0x15e>
 80038ca:	4a59      	ldr	r2, [pc, #356]	@ (8003a30 <HAL_ADC_Init+0x2c0>)
 80038cc:	e000      	b.n	80038d0 <HAL_ADC_Init+0x160>
 80038ce:	4a59      	ldr	r2, [pc, #356]	@ (8003a34 <HAL_ADC_Init+0x2c4>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f7ff fd04 	bl	80032e4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a52      	ldr	r2, [pc, #328]	@ (8003a2c <HAL_ADC_Init+0x2bc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d129      	bne.n	800393a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	7e5b      	ldrb	r3, [r3, #25]
 80038ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80038f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2b08      	cmp	r3, #8
 80038fe:	d013      	beq.n	8003928 <HAL_ADC_Init+0x1b8>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	2b0c      	cmp	r3, #12
 8003906:	d00d      	beq.n	8003924 <HAL_ADC_Init+0x1b4>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b1c      	cmp	r3, #28
 800390e:	d007      	beq.n	8003920 <HAL_ADC_Init+0x1b0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b18      	cmp	r3, #24
 8003916:	d101      	bne.n	800391c <HAL_ADC_Init+0x1ac>
 8003918:	2318      	movs	r3, #24
 800391a:	e006      	b.n	800392a <HAL_ADC_Init+0x1ba>
 800391c:	2300      	movs	r3, #0
 800391e:	e004      	b.n	800392a <HAL_ADC_Init+0x1ba>
 8003920:	2310      	movs	r3, #16
 8003922:	e002      	b.n	800392a <HAL_ADC_Init+0x1ba>
 8003924:	2308      	movs	r3, #8
 8003926:	e000      	b.n	800392a <HAL_ADC_Init+0x1ba>
 8003928:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800392a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003932:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e00e      	b.n	8003958 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7e5b      	ldrb	r3, [r3, #25]
 800393e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003944:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800394a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003952:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003954:	4313      	orrs	r3, r2
 8003956:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d106      	bne.n	8003970 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003966:	3b01      	subs	r3, #1
 8003968:	045b      	lsls	r3, r3, #17
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4313      	orrs	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	d009      	beq.n	800398c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a26      	ldr	r2, [pc, #152]	@ (8003a2c <HAL_ADC_Init+0x2bc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d115      	bne.n	80039c2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	4b26      	ldr	r3, [pc, #152]	@ (8003a38 <HAL_ADC_Init+0x2c8>)
 800399e:	4013      	ands	r3, r2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	430b      	orrs	r3, r1
 80039a8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	611a      	str	r2, [r3, #16]
 80039c0:	e009      	b.n	80039d6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	4b1c      	ldr	r3, [pc, #112]	@ (8003a3c <HAL_ADC_Init+0x2cc>)
 80039ca:	4013      	ands	r3, r2
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	69b9      	ldr	r1, [r7, #24]
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fea1 	bl	8003722 <LL_ADC_REG_IsConversionOngoing>
 80039e0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff feae 	bl	8003748 <LL_ADC_INJ_IsConversionOngoing>
 80039ec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 808e 	bne.w	8003b12 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	f040 808a 	bne.w	8003b12 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a0a      	ldr	r2, [pc, #40]	@ (8003a2c <HAL_ADC_Init+0x2bc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d11b      	bne.n	8003a40 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	7e1b      	ldrb	r3, [r3, #24]
 8003a0c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a14:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003a16:	4313      	orrs	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
 8003a1a:	e018      	b.n	8003a4e <HAL_ADC_Init+0x2de>
 8003a1c:	24000000 	.word	0x24000000
 8003a20:	053e2d63 	.word	0x053e2d63
 8003a24:	40022000 	.word	0x40022000
 8003a28:	40022100 	.word	0x40022100
 8003a2c:	58026000 	.word	0x58026000
 8003a30:	40022300 	.word	0x40022300
 8003a34:	58026300 	.word	0x58026300
 8003a38:	fff04007 	.word	0xfff04007
 8003a3c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	7e1b      	ldrb	r3, [r3, #24]
 8003a44:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	4b46      	ldr	r3, [pc, #280]	@ (8003b70 <HAL_ADC_Init+0x400>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	69b9      	ldr	r1, [r7, #24]
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d137      	bne.n	8003adc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a3f      	ldr	r2, [pc, #252]	@ (8003b74 <HAL_ADC_Init+0x404>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d116      	bne.n	8003aaa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	4b3d      	ldr	r3, [pc, #244]	@ (8003b78 <HAL_ADC_Init+0x408>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a8e:	4311      	orrs	r1, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	611a      	str	r2, [r3, #16]
 8003aa8:	e020      	b.n	8003aec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	4b32      	ldr	r3, [pc, #200]	@ (8003b7c <HAL_ADC_Init+0x40c>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	0411      	lsls	r1, r2, #16
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003ac0:	4311      	orrs	r1, r2
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ac6:	4311      	orrs	r1, r2
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003acc:	430a      	orrs	r2, r1
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f042 0201 	orr.w	r2, r2, #1
 8003ad8:	611a      	str	r2, [r3, #16]
 8003ada:	e007      	b.n	8003aec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	430a      	orrs	r2, r1
 8003b00:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <HAL_ADC_Init+0x404>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d002      	beq.n	8003b12 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fd67 	bl	80045e0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d10c      	bne.n	8003b34 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b20:	f023 010f 	bic.w	r1, r3, #15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
 8003b28:	1e5a      	subs	r2, r3, #1
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b32:	e007      	b.n	8003b44 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 020f 	bic.w	r2, r2, #15
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b48:	f023 0303 	bic.w	r3, r3, #3
 8003b4c:	f043 0201 	orr.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b54:	e007      	b.n	8003b66 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b5a:	f043 0210 	orr.w	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3724      	adds	r7, #36	@ 0x24
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd90      	pop	{r4, r7, pc}
 8003b70:	ffffbffc 	.word	0xffffbffc
 8003b74:	58026000 	.word	0x58026000
 8003b78:	fc00f81f 	.word	0xfc00f81f
 8003b7c:	fc00f81e 	.word	0xfc00f81e

08003b80 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b0b9      	sub	sp, #228	@ 0xe4
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b9a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4aab      	ldr	r2, [pc, #684]	@ (8003e50 <HAL_ADC_ConfigChannel+0x2d0>)
 8003ba2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x34>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	f000 bcfe 	b.w	80045b0 <HAL_ADC_ConfigChannel+0xa30>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7ff fdae 	bl	8003722 <LL_ADC_REG_IsConversionOngoing>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 84e2 	bne.w	8004592 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db38      	blt.n	8003c48 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a9e      	ldr	r2, [pc, #632]	@ (8003e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d033      	beq.n	8003c48 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <HAL_ADC_ConfigChannel+0x7e>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	f003 031f 	and.w	r3, r3, #31
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	e01d      	b.n	8003c3a <HAL_ADC_ConfigChannel+0xba>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003c0a:	fa93 f3a3 	rbit	r3, r3
 8003c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003c22:	2320      	movs	r3, #32
 8003c24:	e004      	b.n	8003c30 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003c26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003c2a:	fab3 f383 	clz	r3, r3
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f003 031f 	and.w	r3, r3, #31
 8003c34:	2201      	movs	r2, #1
 8003c36:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	69d1      	ldr	r1, [r2, #28]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	430b      	orrs	r3, r1
 8003c46:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6818      	ldr	r0, [r3, #0]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	6859      	ldr	r1, [r3, #4]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	461a      	mov	r2, r3
 8003c56:	f7ff fc6b 	bl	8003530 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7ff fd5f 	bl	8003722 <LL_ADC_REG_IsConversionOngoing>
 8003c64:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fd6b 	bl	8003748 <LL_ADC_INJ_IsConversionOngoing>
 8003c72:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f040 8270 	bne.w	8004160 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f040 826b 	bne.w	8004160 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6819      	ldr	r1, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f7ff fc76 	bl	8003588 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a6c      	ldr	r2, [pc, #432]	@ (8003e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10d      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	005b      	lsls	r3, r3, #1
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003cc0:	e032      	b.n	8003d28 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_ADC_ConfigChannel+0x2d8>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003cca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cce:	d10b      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x168>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	089b      	lsrs	r3, r3, #2
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce6:	e01d      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x1a4>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	f003 0310 	and.w	r3, r3, #16
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <HAL_ADC_ConfigChannel+0x18e>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	e00a      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x1a4>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	695a      	ldr	r2, [r3, #20]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	089b      	lsrs	r3, r3, #2
 8003d1a:	f003 0304 	and.w	r3, r3, #4
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d048      	beq.n	8003dc2 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6818      	ldr	r0, [r3, #0]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	6919      	ldr	r1, [r3, #16]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003d40:	f7ff fb04 	bl	800334c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a42      	ldr	r2, [pc, #264]	@ (8003e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d119      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6818      	ldr	r0, [r3, #0]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	6919      	ldr	r1, [r3, #16]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f7ff fb9c 	bl	8003498 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6919      	ldr	r1, [r3, #16]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d102      	bne.n	8003d78 <HAL_ADC_ConfigChannel+0x1f8>
 8003d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d76:	e000      	b.n	8003d7a <HAL_ADC_ConfigChannel+0x1fa>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	f7ff fb6a 	bl	8003454 <LL_ADC_SetOffsetSaturation>
 8003d80:	e1ee      	b.n	8004160 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	6919      	ldr	r1, [r3, #16]
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d102      	bne.n	8003d9a <HAL_ADC_ConfigChannel+0x21a>
 8003d94:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d98:	e000      	b.n	8003d9c <HAL_ADC_ConfigChannel+0x21c>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f7ff fb37 	bl	8003410 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7e1b      	ldrb	r3, [r3, #24]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x238>
 8003db2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003db6:	e000      	b.n	8003dba <HAL_ADC_ConfigChannel+0x23a>
 8003db8:	2300      	movs	r3, #0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7ff fb0e 	bl	80033dc <LL_ADC_SetDataRightShift>
 8003dc0:	e1ce      	b.n	8004160 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a23      	ldr	r2, [pc, #140]	@ (8003e54 <HAL_ADC_ConfigChannel+0x2d4>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	f040 8181 	bne.w	80040d0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff faeb 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <HAL_ADC_ConfigChannel+0x27a>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2100      	movs	r1, #0
 8003dea:	4618      	mov	r0, r3
 8003dec:	f7ff fae0 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003df0:	4603      	mov	r3, r0
 8003df2:	0e9b      	lsrs	r3, r3, #26
 8003df4:	f003 021f 	and.w	r2, r3, #31
 8003df8:	e01e      	b.n	8003e38 <HAL_ADC_ConfigChannel+0x2b8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fad5 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003e06:	4603      	mov	r3, r0
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e1c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003e20:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003e28:	2320      	movs	r3, #32
 8003e2a:	e004      	b.n	8003e36 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003e2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x2dc>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	0e9b      	lsrs	r3, r3, #26
 8003e4a:	f003 031f 	and.w	r3, r3, #31
 8003e4e:	e01e      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x30e>
 8003e50:	47ff0000 	.word	0x47ff0000
 8003e54:	58026000 	.word	0x58026000
 8003e58:	5c001000 	.word	0x5c001000
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8003e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8003e78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e004      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8003e84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d106      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7ff fb1e 	bl	80034dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fa82 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x34c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2101      	movs	r1, #1
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fa77 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	f003 021f 	and.w	r2, r3, #31
 8003eca:	e01e      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x38a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff fa6c 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003eee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8003ef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8003efa:	2320      	movs	r3, #32
 8003efc:	e004      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8003efe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x3a2>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	0e9b      	lsrs	r3, r3, #26
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	e018      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x3d4>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003f36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003f3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8003f46:	2320      	movs	r3, #32
 8003f48:	e004      	b.n	8003f54 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8003f4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f4e:	fab3 f383 	clz	r3, r3
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d106      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	2101      	movs	r1, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fabb 	bl	80034dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa1f 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_ADC_ConfigChannel+0x412>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2102      	movs	r1, #2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fa14 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	0e9b      	lsrs	r3, r3, #26
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	e01e      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x450>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fa09 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003fa8:	fa93 f3a3 	rbit	r3, r3
 8003fac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8003fb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fb4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8003fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8003fc0:	2320      	movs	r3, #32
 8003fc2:	e004      	b.n	8003fce <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8003fc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003fc8:	fab3 f383 	clz	r3, r3
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	461a      	mov	r2, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_ADC_ConfigChannel+0x468>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	0e9b      	lsrs	r3, r3, #26
 8003fe2:	f003 031f 	and.w	r3, r3, #31
 8003fe6:	e014      	b.n	8004012 <HAL_ADC_ConfigChannel+0x492>
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003ff6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ff8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	d101      	bne.n	8004008 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004004:	2320      	movs	r3, #32
 8004006:	e004      	b.n	8004012 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8004008:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800400c:	fab3 f383 	clz	r3, r3
 8004010:	b2db      	uxtb	r3, r3
 8004012:	429a      	cmp	r2, r3
 8004014:	d106      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2200      	movs	r2, #0
 800401c:	2102      	movs	r1, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff fa5c 	bl	80034dc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2103      	movs	r1, #3
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f9c0 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x4d0>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2103      	movs	r1, #3
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff f9b5 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 8004046:	4603      	mov	r3, r0
 8004048:	0e9b      	lsrs	r3, r3, #26
 800404a:	f003 021f 	and.w	r2, r3, #31
 800404e:	e017      	b.n	8004080 <HAL_ADC_ConfigChannel+0x500>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2103      	movs	r1, #3
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff f9aa 	bl	80033b0 <LL_ADC_GetOffsetChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004060:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004062:	fa93 f3a3 	rbit	r3, r3
 8004066:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800406a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800406c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004072:	2320      	movs	r3, #32
 8004074:	e003      	b.n	800407e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004088:	2b00      	cmp	r3, #0
 800408a:	d105      	bne.n	8004098 <HAL_ADC_ConfigChannel+0x518>
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	0e9b      	lsrs	r3, r3, #26
 8004092:	f003 031f 	and.w	r3, r3, #31
 8004096:	e011      	b.n	80040bc <HAL_ADC_ConfigChannel+0x53c>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a0:	fa93 f3a3 	rbit	r3, r3
 80040a4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80040a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040a8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80040aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 80040b0:	2320      	movs	r3, #32
 80040b2:	e003      	b.n	80040bc <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 80040b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	429a      	cmp	r2, r3
 80040be:	d14f      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	2200      	movs	r2, #0
 80040c6:	2103      	movs	r1, #3
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fa07 	bl	80034dc <LL_ADC_SetOffsetState>
 80040ce:	e047      	b.n	8004160 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d107      	bne.n	80040f4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80040f2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	069b      	lsls	r3, r3, #26
 8004104:	429a      	cmp	r2, r3
 8004106:	d107      	bne.n	8004118 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8004116:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	069b      	lsls	r3, r3, #26
 8004128:	429a      	cmp	r2, r3
 800412a:	d107      	bne.n	800413c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800413a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004142:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	069b      	lsls	r3, r3, #26
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800415e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff fac9 	bl	80036fc <LL_ADC_IsEnabled>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	f040 8219 	bne.w	80045a4 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6819      	ldr	r1, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	461a      	mov	r2, r3
 8004180:	f7ff fa2e 	bl	80035e0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4aa1      	ldr	r2, [pc, #644]	@ (8004410 <HAL_ADC_ConfigChannel+0x890>)
 800418a:	4293      	cmp	r3, r2
 800418c:	f040 812e 	bne.w	80043ec <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10b      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x638>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	0e9b      	lsrs	r3, r3, #26
 80041a6:	3301      	adds	r3, #1
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	bf94      	ite	ls
 80041b0:	2301      	movls	r3, #1
 80041b2:	2300      	movhi	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e019      	b.n	80041ec <HAL_ADC_ConfigChannel+0x66c>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80041c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80041ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80041d0:	2320      	movs	r3, #32
 80041d2:	e003      	b.n	80041dc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80041d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d6:	fab3 f383 	clz	r3, r3
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	3301      	adds	r3, #1
 80041de:	f003 031f 	and.w	r3, r3, #31
 80041e2:	2b09      	cmp	r3, #9
 80041e4:	bf94      	ite	ls
 80041e6:	2301      	movls	r3, #1
 80041e8:	2300      	movhi	r3, #0
 80041ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d079      	beq.n	80042e4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <HAL_ADC_ConfigChannel+0x68c>
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	0e9b      	lsrs	r3, r3, #26
 8004202:	3301      	adds	r3, #1
 8004204:	069b      	lsls	r3, r3, #26
 8004206:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800420a:	e015      	b.n	8004238 <HAL_ADC_ConfigChannel+0x6b8>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800421a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800421e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8004224:	2320      	movs	r3, #32
 8004226:	e003      	b.n	8004230 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8004228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800422a:	fab3 f383 	clz	r3, r3
 800422e:	b2db      	uxtb	r3, r3
 8004230:	3301      	adds	r3, #1
 8004232:	069b      	lsls	r3, r3, #26
 8004234:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004240:	2b00      	cmp	r3, #0
 8004242:	d109      	bne.n	8004258 <HAL_ADC_ConfigChannel+0x6d8>
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	0e9b      	lsrs	r3, r3, #26
 800424a:	3301      	adds	r3, #1
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2101      	movs	r1, #1
 8004252:	fa01 f303 	lsl.w	r3, r1, r3
 8004256:	e017      	b.n	8004288 <HAL_ADC_ConfigChannel+0x708>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004260:	fa93 f3a3 	rbit	r3, r3
 8004264:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004268:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800426a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004270:	2320      	movs	r3, #32
 8004272:	e003      	b.n	800427c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004274:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004276:	fab3 f383 	clz	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	3301      	adds	r3, #1
 800427e:	f003 031f 	and.w	r3, r3, #31
 8004282:	2101      	movs	r1, #1
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	ea42 0103 	orr.w	r1, r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10a      	bne.n	80042ae <HAL_ADC_ConfigChannel+0x72e>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	0e9b      	lsrs	r3, r3, #26
 800429e:	3301      	adds	r3, #1
 80042a0:	f003 021f 	and.w	r2, r3, #31
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	051b      	lsls	r3, r3, #20
 80042ac:	e018      	b.n	80042e0 <HAL_ADC_ConfigChannel+0x760>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b6:	fa93 f3a3 	rbit	r3, r3
 80042ba:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80042bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80042c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 80042c6:	2320      	movs	r3, #32
 80042c8:	e003      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 80042ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	3301      	adds	r3, #1
 80042d4:	f003 021f 	and.w	r2, r3, #31
 80042d8:	4613      	mov	r3, r2
 80042da:	005b      	lsls	r3, r3, #1
 80042dc:	4413      	add	r3, r2
 80042de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042e0:	430b      	orrs	r3, r1
 80042e2:	e07e      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d107      	bne.n	8004300 <HAL_ADC_ConfigChannel+0x780>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0e9b      	lsrs	r3, r3, #26
 80042f6:	3301      	adds	r3, #1
 80042f8:	069b      	lsls	r3, r3, #26
 80042fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042fe:	e015      	b.n	800432c <HAL_ADC_ConfigChannel+0x7ac>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	fa93 f3a3 	rbit	r3, r3
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8004312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8004318:	2320      	movs	r3, #32
 800431a:	e003      	b.n	8004324 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 800431c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800431e:	fab3 f383 	clz	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	3301      	adds	r3, #1
 8004326:	069b      	lsls	r3, r3, #26
 8004328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004334:	2b00      	cmp	r3, #0
 8004336:	d109      	bne.n	800434c <HAL_ADC_ConfigChannel+0x7cc>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	0e9b      	lsrs	r3, r3, #26
 800433e:	3301      	adds	r3, #1
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2101      	movs	r1, #1
 8004346:	fa01 f303 	lsl.w	r3, r1, r3
 800434a:	e017      	b.n	800437c <HAL_ADC_ConfigChannel+0x7fc>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	fa93 f3a3 	rbit	r3, r3
 8004358:	61bb      	str	r3, [r7, #24]
  return result;
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800435e:	6a3b      	ldr	r3, [r7, #32]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004364:	2320      	movs	r3, #32
 8004366:	e003      	b.n	8004370 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	fab3 f383 	clz	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	2101      	movs	r1, #1
 8004378:	fa01 f303 	lsl.w	r3, r1, r3
 800437c:	ea42 0103 	orr.w	r1, r2, r3
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x828>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	f003 021f 	and.w	r2, r3, #31
 8004398:	4613      	mov	r3, r2
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	3b1e      	subs	r3, #30
 80043a0:	051b      	lsls	r3, r3, #20
 80043a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80043a6:	e01b      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x860>
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	60fb      	str	r3, [r7, #12]
  return result;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d101      	bne.n	80043c4 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 80043c0:	2320      	movs	r3, #32
 80043c2:	e003      	b.n	80043cc <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	3301      	adds	r3, #1
 80043ce:	f003 021f 	and.w	r2, r3, #31
 80043d2:	4613      	mov	r3, r2
 80043d4:	005b      	lsls	r3, r3, #1
 80043d6:	4413      	add	r3, r2
 80043d8:	3b1e      	subs	r3, #30
 80043da:	051b      	lsls	r3, r3, #20
 80043dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043e0:	430b      	orrs	r3, r1
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	6892      	ldr	r2, [r2, #8]
 80043e6:	4619      	mov	r1, r3
 80043e8:	f7ff f8ce 	bl	8003588 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f280 80d7 	bge.w	80045a4 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a06      	ldr	r2, [pc, #24]	@ (8004414 <HAL_ADC_ConfigChannel+0x894>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_ADC_ConfigChannel+0x88a>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a04      	ldr	r2, [pc, #16]	@ (8004418 <HAL_ADC_ConfigChannel+0x898>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10a      	bne.n	8004420 <HAL_ADC_ConfigChannel+0x8a0>
 800440a:	4b04      	ldr	r3, [pc, #16]	@ (800441c <HAL_ADC_ConfigChannel+0x89c>)
 800440c:	e009      	b.n	8004422 <HAL_ADC_ConfigChannel+0x8a2>
 800440e:	bf00      	nop
 8004410:	47ff0000 	.word	0x47ff0000
 8004414:	40022000 	.word	0x40022000
 8004418:	40022100 	.word	0x40022100
 800441c:	40022300 	.word	0x40022300
 8004420:	4b65      	ldr	r3, [pc, #404]	@ (80045b8 <HAL_ADC_ConfigChannel+0xa38>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7fe ff84 	bl	8003330 <LL_ADC_GetCommonPathInternalCh>
 8004428:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a62      	ldr	r2, [pc, #392]	@ (80045bc <HAL_ADC_ConfigChannel+0xa3c>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d004      	beq.n	8004440 <HAL_ADC_ConfigChannel+0x8c0>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a61      	ldr	r2, [pc, #388]	@ (80045c0 <HAL_ADC_ConfigChannel+0xa40>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d10e      	bne.n	800445e <HAL_ADC_ConfigChannel+0x8de>
 8004440:	485e      	ldr	r0, [pc, #376]	@ (80045bc <HAL_ADC_ConfigChannel+0xa3c>)
 8004442:	f7ff f95b 	bl	80036fc <LL_ADC_IsEnabled>
 8004446:	4604      	mov	r4, r0
 8004448:	485d      	ldr	r0, [pc, #372]	@ (80045c0 <HAL_ADC_ConfigChannel+0xa40>)
 800444a:	f7ff f957 	bl	80036fc <LL_ADC_IsEnabled>
 800444e:	4603      	mov	r3, r0
 8004450:	4323      	orrs	r3, r4
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf0c      	ite	eq
 8004456:	2301      	moveq	r3, #1
 8004458:	2300      	movne	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	e008      	b.n	8004470 <HAL_ADC_ConfigChannel+0x8f0>
 800445e:	4859      	ldr	r0, [pc, #356]	@ (80045c4 <HAL_ADC_ConfigChannel+0xa44>)
 8004460:	f7ff f94c 	bl	80036fc <LL_ADC_IsEnabled>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8084 	beq.w	800457e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a53      	ldr	r2, [pc, #332]	@ (80045c8 <HAL_ADC_ConfigChannel+0xa48>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d132      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x966>
 8004480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004484:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d12c      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a4c      	ldr	r2, [pc, #304]	@ (80045c4 <HAL_ADC_ConfigChannel+0xa44>)
 8004492:	4293      	cmp	r3, r2
 8004494:	f040 8086 	bne.w	80045a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a47      	ldr	r2, [pc, #284]	@ (80045bc <HAL_ADC_ConfigChannel+0xa3c>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_ADC_ConfigChannel+0x92c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a46      	ldr	r2, [pc, #280]	@ (80045c0 <HAL_ADC_ConfigChannel+0xa40>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d101      	bne.n	80044b0 <HAL_ADC_ConfigChannel+0x930>
 80044ac:	4a47      	ldr	r2, [pc, #284]	@ (80045cc <HAL_ADC_ConfigChannel+0xa4c>)
 80044ae:	e000      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x932>
 80044b0:	4a41      	ldr	r2, [pc, #260]	@ (80045b8 <HAL_ADC_ConfigChannel+0xa38>)
 80044b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fe ff24 	bl	800330a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044c2:	4b43      	ldr	r3, [pc, #268]	@ (80045d0 <HAL_ADC_ConfigChannel+0xa50>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	099b      	lsrs	r3, r3, #6
 80044c8:	4a42      	ldr	r2, [pc, #264]	@ (80045d4 <HAL_ADC_ConfigChannel+0xa54>)
 80044ca:	fba2 2303 	umull	r2, r3, r2, r3
 80044ce:	099b      	lsrs	r3, r3, #6
 80044d0:	3301      	adds	r3, #1
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044d6:	e002      	b.n	80044de <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	3b01      	subs	r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f9      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e4:	e05e      	b.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a3b      	ldr	r2, [pc, #236]	@ (80045d8 <HAL_ADC_ConfigChannel+0xa58>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d120      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x9b2>
 80044f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11a      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a30      	ldr	r2, [pc, #192]	@ (80045c4 <HAL_ADC_ConfigChannel+0xa44>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d14e      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a2c      	ldr	r2, [pc, #176]	@ (80045bc <HAL_ADC_ConfigChannel+0xa3c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d004      	beq.n	800451a <HAL_ADC_ConfigChannel+0x99a>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2a      	ldr	r2, [pc, #168]	@ (80045c0 <HAL_ADC_ConfigChannel+0xa40>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d101      	bne.n	800451e <HAL_ADC_ConfigChannel+0x99e>
 800451a:	4a2c      	ldr	r2, [pc, #176]	@ (80045cc <HAL_ADC_ConfigChannel+0xa4c>)
 800451c:	e000      	b.n	8004520 <HAL_ADC_ConfigChannel+0x9a0>
 800451e:	4a26      	ldr	r2, [pc, #152]	@ (80045b8 <HAL_ADC_ConfigChannel+0xa38>)
 8004520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004524:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe feed 	bl	800330a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004530:	e038      	b.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a29      	ldr	r2, [pc, #164]	@ (80045dc <HAL_ADC_ConfigChannel+0xa5c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d133      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
 800453c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004540:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d12d      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1d      	ldr	r2, [pc, #116]	@ (80045c4 <HAL_ADC_ConfigChannel+0xa44>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d128      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a19      	ldr	r2, [pc, #100]	@ (80045bc <HAL_ADC_ConfigChannel+0xa3c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_ADC_ConfigChannel+0x9e6>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <HAL_ADC_ConfigChannel+0xa40>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_ADC_ConfigChannel+0x9ea>
 8004566:	4a19      	ldr	r2, [pc, #100]	@ (80045cc <HAL_ADC_ConfigChannel+0xa4c>)
 8004568:	e000      	b.n	800456c <HAL_ADC_ConfigChannel+0x9ec>
 800456a:	4a13      	ldr	r2, [pc, #76]	@ (80045b8 <HAL_ADC_ConfigChannel+0xa38>)
 800456c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004574:	4619      	mov	r1, r3
 8004576:	4610      	mov	r0, r2
 8004578:	f7fe fec7 	bl	800330a <LL_ADC_SetCommonPathInternalCh>
 800457c:	e012      	b.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004582:	f043 0220 	orr.w	r2, r3, #32
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004590:	e008      	b.n	80045a4 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045ac:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	37e4      	adds	r7, #228	@ 0xe4
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd90      	pop	{r4, r7, pc}
 80045b8:	58026300 	.word	0x58026300
 80045bc:	40022000 	.word	0x40022000
 80045c0:	40022100 	.word	0x40022100
 80045c4:	58026000 	.word	0x58026000
 80045c8:	c7520000 	.word	0xc7520000
 80045cc:	40022300 	.word	0x40022300
 80045d0:	24000000 	.word	0x24000000
 80045d4:	053e2d63 	.word	0x053e2d63
 80045d8:	c3210000 	.word	0xc3210000
 80045dc:	cb840000 	.word	0xcb840000

080045e0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a6c      	ldr	r2, [pc, #432]	@ (80047a0 <ADC_ConfigureBoostMode+0x1c0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d004      	beq.n	80045fc <ADC_ConfigureBoostMode+0x1c>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a6b      	ldr	r2, [pc, #428]	@ (80047a4 <ADC_ConfigureBoostMode+0x1c4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d109      	bne.n	8004610 <ADC_ConfigureBoostMode+0x30>
 80045fc:	4b6a      	ldr	r3, [pc, #424]	@ (80047a8 <ADC_ConfigureBoostMode+0x1c8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf14      	ite	ne
 8004608:	2301      	movne	r3, #1
 800460a:	2300      	moveq	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e008      	b.n	8004622 <ADC_ConfigureBoostMode+0x42>
 8004610:	4b66      	ldr	r3, [pc, #408]	@ (80047ac <ADC_ConfigureBoostMode+0x1cc>)
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01c      	beq.n	8004660 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004626:	f003 fffd 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800462a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004634:	d010      	beq.n	8004658 <ADC_ConfigureBoostMode+0x78>
 8004636:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800463a:	d873      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x144>
 800463c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004640:	d002      	beq.n	8004648 <ADC_ConfigureBoostMode+0x68>
 8004642:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004646:	d16d      	bne.n	8004724 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	0c1b      	lsrs	r3, r3, #16
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	fbb2 f3f3 	udiv	r3, r2, r3
 8004654:	60fb      	str	r3, [r7, #12]
        break;
 8004656:	e068      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	60fb      	str	r3, [r7, #12]
        break;
 800465e:	e064      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004660:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004664:	f04f 0100 	mov.w	r1, #0
 8004668:	f005 fa1a 	bl	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800466c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004676:	d051      	beq.n	800471c <ADC_ConfigureBoostMode+0x13c>
 8004678:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800467c:	d854      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 800467e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004682:	d047      	beq.n	8004714 <ADC_ConfigureBoostMode+0x134>
 8004684:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004688:	d84e      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 800468a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800468e:	d03d      	beq.n	800470c <ADC_ConfigureBoostMode+0x12c>
 8004690:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004694:	d848      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 8004696:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800469a:	d033      	beq.n	8004704 <ADC_ConfigureBoostMode+0x124>
 800469c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046a0:	d842      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046a2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046a6:	d029      	beq.n	80046fc <ADC_ConfigureBoostMode+0x11c>
 80046a8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046ac:	d83c      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046ae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046b2:	d01a      	beq.n	80046ea <ADC_ConfigureBoostMode+0x10a>
 80046b4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046b8:	d836      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046ba:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046be:	d014      	beq.n	80046ea <ADC_ConfigureBoostMode+0x10a>
 80046c0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046c4:	d830      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ca:	d00e      	beq.n	80046ea <ADC_ConfigureBoostMode+0x10a>
 80046cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046d0:	d82a      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046d2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046d6:	d008      	beq.n	80046ea <ADC_ConfigureBoostMode+0x10a>
 80046d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046dc:	d824      	bhi.n	8004728 <ADC_ConfigureBoostMode+0x148>
 80046de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046e2:	d002      	beq.n	80046ea <ADC_ConfigureBoostMode+0x10a>
 80046e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046e8:	d11e      	bne.n	8004728 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	0c9b      	lsrs	r3, r3, #18
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	60fb      	str	r3, [r7, #12]
        break;
 80046fa:	e016      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	60fb      	str	r3, [r7, #12]
        break;
 8004702:	e012      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	60fb      	str	r3, [r7, #12]
        break;
 800470a:	e00e      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	099b      	lsrs	r3, r3, #6
 8004710:	60fb      	str	r3, [r7, #12]
        break;
 8004712:	e00a      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	09db      	lsrs	r3, r3, #7
 8004718:	60fb      	str	r3, [r7, #12]
        break;
 800471a:	e006      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	0a1b      	lsrs	r3, r3, #8
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e002      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004724:	bf00      	nop
 8004726:	e000      	b.n	800472a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004728:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	085b      	lsrs	r3, r3, #1
 800472e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4a1f      	ldr	r2, [pc, #124]	@ (80047b0 <ADC_ConfigureBoostMode+0x1d0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d808      	bhi.n	800474a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004746:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004748:	e025      	b.n	8004796 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4a19      	ldr	r2, [pc, #100]	@ (80047b4 <ADC_ConfigureBoostMode+0x1d4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d80a      	bhi.n	8004768 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004764:	609a      	str	r2, [r3, #8]
}
 8004766:	e016      	b.n	8004796 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a13      	ldr	r2, [pc, #76]	@ (80047b8 <ADC_ConfigureBoostMode+0x1d8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d80a      	bhi.n	8004786 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	e007      	b.n	8004796 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004794:	609a      	str	r2, [r3, #8]
}
 8004796:	bf00      	nop
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40022000 	.word	0x40022000
 80047a4:	40022100 	.word	0x40022100
 80047a8:	40022300 	.word	0x40022300
 80047ac:	58026300 	.word	0x58026300
 80047b0:	005f5e10 	.word	0x005f5e10
 80047b4:	00bebc20 	.word	0x00bebc20
 80047b8:	017d7840 	.word	0x017d7840

080047bc <LL_ADC_IsEnabled>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0301 	and.w	r3, r3, #1
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <LL_ADC_IsEnabled+0x18>
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <LL_ADC_IsEnabled+0x1a>
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d101      	bne.n	80047fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004808:	b590      	push	{r4, r7, lr}
 800480a:	b0a3      	sub	sp, #140	@ 0x8c
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004812:	2300      	movs	r3, #0
 8004814:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004822:	2302      	movs	r3, #2
 8004824:	e0c1      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800482e:	2300      	movs	r3, #0
 8004830:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004832:	2300      	movs	r3, #0
 8004834:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a5e      	ldr	r2, [pc, #376]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d102      	bne.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004840:	4b5d      	ldr	r3, [pc, #372]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	e001      	b.n	800484a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10b      	bne.n	8004868 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004854:	f043 0220 	orr.w	r2, r3, #32
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e0a0      	b.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4618      	mov	r0, r3
 800486c:	f7ff ffb9 	bl	80047e2 <LL_ADC_REG_IsConversionOngoing>
 8004870:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff ffb2 	bl	80047e2 <LL_ADC_REG_IsConversionOngoing>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	f040 8081 	bne.w	8004988 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004886:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800488a:	2b00      	cmp	r3, #0
 800488c:	d17c      	bne.n	8004988 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a48      	ldr	r2, [pc, #288]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a46      	ldr	r2, [pc, #280]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d101      	bne.n	80048a6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80048a2:	4b46      	ldr	r3, [pc, #280]	@ (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048a4:	e000      	b.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048a6:	4b46      	ldr	r3, [pc, #280]	@ (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048a8:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d039      	beq.n	8004926 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	431a      	orrs	r2, r3
 80048c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a3a      	ldr	r2, [pc, #232]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a39      	ldr	r2, [pc, #228]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d10e      	bne.n	80048f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80048d8:	4836      	ldr	r0, [pc, #216]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048da:	f7ff ff6f 	bl	80047bc <LL_ADC_IsEnabled>
 80048de:	4604      	mov	r4, r0
 80048e0:	4835      	ldr	r0, [pc, #212]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048e2:	f7ff ff6b 	bl	80047bc <LL_ADC_IsEnabled>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4323      	orrs	r3, r4
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bf0c      	ite	eq
 80048ee:	2301      	moveq	r3, #1
 80048f0:	2300      	movne	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e008      	b.n	8004908 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80048f6:	4833      	ldr	r0, [pc, #204]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80048f8:	f7ff ff60 	bl	80047bc <LL_ADC_IsEnabled>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf0c      	ite	eq
 8004902:	2301      	moveq	r3, #1
 8004904:	2300      	movne	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d047      	beq.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800490c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b2d      	ldr	r3, [pc, #180]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004912:	4013      	ands	r3, r2
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	6811      	ldr	r1, [r2, #0]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	6892      	ldr	r2, [r2, #8]
 800491c:	430a      	orrs	r2, r1
 800491e:	431a      	orrs	r2, r3
 8004920:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004922:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004924:	e03a      	b.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004926:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800492e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004930:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1f      	ldr	r2, [pc, #124]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d004      	beq.n	8004946 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1d      	ldr	r2, [pc, #116]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10e      	bne.n	8004964 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004946:	481b      	ldr	r0, [pc, #108]	@ (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004948:	f7ff ff38 	bl	80047bc <LL_ADC_IsEnabled>
 800494c:	4604      	mov	r4, r0
 800494e:	481a      	ldr	r0, [pc, #104]	@ (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004950:	f7ff ff34 	bl	80047bc <LL_ADC_IsEnabled>
 8004954:	4603      	mov	r3, r0
 8004956:	4323      	orrs	r3, r4
 8004958:	2b00      	cmp	r3, #0
 800495a:	bf0c      	ite	eq
 800495c:	2301      	moveq	r3, #1
 800495e:	2300      	movne	r3, #0
 8004960:	b2db      	uxtb	r3, r3
 8004962:	e008      	b.n	8004976 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004964:	4817      	ldr	r0, [pc, #92]	@ (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004966:	f7ff ff29 	bl	80047bc <LL_ADC_IsEnabled>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	bf0c      	ite	eq
 8004970:	2301      	moveq	r3, #1
 8004972:	2300      	movne	r3, #0
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d010      	beq.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800497a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800497c:	689a      	ldr	r2, [r3, #8]
 800497e:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004980:	4013      	ands	r3, r2
 8004982:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004984:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004986:	e009      	b.n	800499c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800499a:	e000      	b.n	800499e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800499c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049a6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	378c      	adds	r7, #140	@ 0x8c
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd90      	pop	{r4, r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40022000 	.word	0x40022000
 80049b8:	40022100 	.word	0x40022100
 80049bc:	40022300 	.word	0x40022300
 80049c0:	58026300 	.word	0x58026300
 80049c4:	58026000 	.word	0x58026000
 80049c8:	fffff0e0 	.word	0xfffff0e0

080049cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049dc:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <__NVIC_SetPriorityGrouping+0x40>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80049e8:	4013      	ands	r3, r2
 80049ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <__NVIC_SetPriorityGrouping+0x44>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049fa:	4a04      	ldr	r2, [pc, #16]	@ (8004a0c <__NVIC_SetPriorityGrouping+0x40>)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	60d3      	str	r3, [r2, #12]
}
 8004a00:	bf00      	nop
 8004a02:	3714      	adds	r7, #20
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	e000ed00 	.word	0xe000ed00
 8004a10:	05fa0000 	.word	0x05fa0000

08004a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a18:	4b04      	ldr	r3, [pc, #16]	@ (8004a2c <__NVIC_GetPriorityGrouping+0x18>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	0a1b      	lsrs	r3, r3, #8
 8004a1e:	f003 0307 	and.w	r3, r3, #7
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	e000ed00 	.word	0xe000ed00

08004a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	db0b      	blt.n	8004a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a42:	88fb      	ldrh	r3, [r7, #6]
 8004a44:	f003 021f 	and.w	r2, r3, #31
 8004a48:	4907      	ldr	r1, [pc, #28]	@ (8004a68 <__NVIC_EnableIRQ+0x38>)
 8004a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2001      	movs	r0, #1
 8004a52:	fa00 f202 	lsl.w	r2, r0, r2
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000e100 	.word	0xe000e100

08004a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db0a      	blt.n	8004a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	490c      	ldr	r1, [pc, #48]	@ (8004ab8 <__NVIC_SetPriority+0x4c>)
 8004a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a94:	e00a      	b.n	8004aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4908      	ldr	r1, [pc, #32]	@ (8004abc <__NVIC_SetPriority+0x50>)
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	761a      	strb	r2, [r3, #24]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b089      	sub	sp, #36	@ 0x24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0307 	and.w	r3, r3, #7
 8004ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f1c3 0307 	rsb	r3, r3, #7
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	bf28      	it	cs
 8004ade:	2304      	movcs	r3, #4
 8004ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2b06      	cmp	r3, #6
 8004ae8:	d902      	bls.n	8004af0 <NVIC_EncodePriority+0x30>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3b03      	subs	r3, #3
 8004aee:	e000      	b.n	8004af2 <NVIC_EncodePriority+0x32>
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004af4:	f04f 32ff 	mov.w	r2, #4294967295
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	fa02 f303 	lsl.w	r3, r2, r3
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	401a      	ands	r2, r3
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b08:	f04f 31ff 	mov.w	r1, #4294967295
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b12:	43d9      	mvns	r1, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b18:	4313      	orrs	r3, r2
         );
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3724      	adds	r7, #36	@ 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff ff4c 	bl	80049cc <__NVIC_SetPriorityGrouping>
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	4603      	mov	r3, r0
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
 8004b48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b4a:	f7ff ff63 	bl	8004a14 <__NVIC_GetPriorityGrouping>
 8004b4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	68b9      	ldr	r1, [r7, #8]
 8004b54:	6978      	ldr	r0, [r7, #20]
 8004b56:	f7ff ffb3 	bl	8004ac0 <NVIC_EncodePriority>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b60:	4611      	mov	r1, r2
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff ff82 	bl	8004a6c <__NVIC_SetPriority>
}
 8004b68:	bf00      	nop
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	4603      	mov	r3, r0
 8004b78:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff ff56 	bl	8004a30 <__NVIC_EnableIRQ>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e014      	b.n	8004bc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	791b      	ldrb	r3, [r3, #4]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fb fffa 	bl	8000ba8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004be6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d01d      	beq.n	8004c2e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d018      	beq.n	8004c2e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2204      	movs	r2, #4
 8004c00:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f043 0201 	orr.w	r2, r3, #1
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004c16:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c26:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f000 f827 	bl	8004c7c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d01d      	beq.n	8004c74 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d018      	beq.n	8004c74 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f043 0202 	orr.w	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004c5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f950 	bl	8004f14 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08a      	sub	sp, #40	@ 0x28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_DAC_ConfigChannel+0x1e>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e12a      	b.n	8004f08 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	795b      	ldrb	r3, [r3, #5]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_DAC_ConfigChannel+0x2e>
 8004cba:	2302      	movs	r3, #2
 8004cbc:	e124      	b.n	8004f08 <HAL_DAC_ConfigChannel+0x278>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d17a      	bne.n	8004dc8 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004cd2:	f7fe fad1 	bl	8003278 <HAL_GetTick>
 8004cd6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d13d      	bne.n	8004d5a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cde:	e018      	b.n	8004d12 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ce0:	f7fe faca 	bl	8003278 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d911      	bls.n	8004d12 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cf4:	4b86      	ldr	r3, [pc, #536]	@ (8004f10 <HAL_DAC_ConfigChannel+0x280>)
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f043 0208 	orr.w	r2, r3, #8
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e0fa      	b.n	8004f08 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d18:	4b7d      	ldr	r3, [pc, #500]	@ (8004f10 <HAL_DAC_ConfigChannel+0x280>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1df      	bne.n	8004ce0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	6992      	ldr	r2, [r2, #24]
 8004d28:	641a      	str	r2, [r3, #64]	@ 0x40
 8004d2a:	e020      	b.n	8004d6e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d2c:	f7fe faa4 	bl	8003278 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d90f      	bls.n	8004d5a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da0a      	bge.n	8004d5a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2203      	movs	r2, #3
 8004d54:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e0d6      	b.n	8004f08 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	dbe3      	blt.n	8004d2c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	6992      	ldr	r2, [r2, #24]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0310 	and.w	r3, r3, #16
 8004d7a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d82:	43db      	mvns	r3, r3
 8004d84:	ea02 0103 	and.w	r1, r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f003 0310 	and.w	r3, r3, #16
 8004d92:	409a      	lsls	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f003 0310 	and.w	r3, r3, #16
 8004da8:	21ff      	movs	r1, #255	@ 0xff
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	ea02 0103 	and.w	r1, r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	6a1a      	ldr	r2, [r3, #32]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d11d      	bne.n	8004e0c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f003 0310 	and.w	r3, r3, #16
 8004dde:	221f      	movs	r2, #31
 8004de0:	fa02 f303 	lsl.w	r3, r2, r3
 8004de4:	43db      	mvns	r3, r3
 8004de6:	69ba      	ldr	r2, [r7, #24]
 8004de8:	4013      	ands	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f003 0310 	and.w	r3, r3, #16
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e12:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2207      	movs	r2, #7
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69ba      	ldr	r2, [r7, #24]
 8004e24:	4013      	ands	r3, r2
 8004e26:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d102      	bne.n	8004e36 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e34:	e00f      	b.n	8004e56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d102      	bne.n	8004e44 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e42:	e008      	b.n	8004e56 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e50:	e001      	b.n	8004e56 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	697a      	ldr	r2, [r7, #20]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004e90:	fa02 f303 	lsl.w	r3, r2, r3
 8004e94:	43da      	mvns	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f003 0310 	and.w	r3, r3, #16
 8004eac:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	4013      	ands	r3, r2
 8004eba:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f003 0310 	and.w	r3, r3, #16
 8004ec8:	697a      	ldr	r2, [r7, #20]
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6819      	ldr	r1, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	22c0      	movs	r2, #192	@ 0xc0
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	43da      	mvns	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	400a      	ands	r2, r1
 8004ef6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2200      	movs	r2, #0
 8004f02:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004f04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3728      	adds	r7, #40	@ 0x28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	20008000 	.word	0x20008000

08004f14 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0e3      	b.n	8005102 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2223      	movs	r2, #35	@ 0x23
 8004f48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f7fb fec5 	bl	8000cdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	4b6e      	ldr	r3, [pc, #440]	@ (800510c <HAL_ETH_Init+0x1e4>)
 8004f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f58:	4a6c      	ldr	r2, [pc, #432]	@ (800510c <HAL_ETH_Init+0x1e4>)
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004f62:	4b6a      	ldr	r3, [pc, #424]	@ (800510c <HAL_ETH_Init+0x1e4>)
 8004f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7a1b      	ldrb	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fe f989 	bl	8003290 <HAL_SYSCFG_ETHInterfaceSelect>
 8004f7e:	e003      	b.n	8004f88 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f80:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8004f84:	f7fe f984 	bl	8003290 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004f88:	4b61      	ldr	r3, [pc, #388]	@ (8005110 <HAL_ETH_Init+0x1e8>)
 8004f8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004fa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa4:	f7fe f968 	bl	8003278 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004faa:	e011      	b.n	8004fd0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fac:	f7fe f964 	bl	8003278 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004fba:	d909      	bls.n	8004fd0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	22e0      	movs	r2, #224	@ 0xe0
 8004fc8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e098      	b.n	8005102 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e4      	bne.n	8004fac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f89e 	bl	8005124 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fe8:	f003 fb1c 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4a49      	ldr	r2, [pc, #292]	@ (8005114 <HAL_ETH_Init+0x1ec>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	0c9a      	lsrs	r2, r3, #18
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fa81 	bl	8005508 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800500e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8005012:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800501e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005022:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	22e0      	movs	r2, #224	@ 0xe0
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e05d      	b.n	8005102 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800504e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005052:	4b31      	ldr	r3, [pc, #196]	@ (8005118 <HAL_ETH_Init+0x1f0>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6952      	ldr	r2, [r2, #20]
 800505a:	0051      	lsls	r1, r2, #1
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	430b      	orrs	r3, r1
 8005062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005066:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fae9 	bl	8005642 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 fb2f 	bl	80056d4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	3305      	adds	r3, #5
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	3303      	adds	r3, #3
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	061a      	lsls	r2, r3, #24
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	3302      	adds	r3, #2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_ETH_Init+0x1f4>)
 80050d6:	430b      	orrs	r3, r1
 80050d8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b0d      	ldr	r3, [pc, #52]	@ (8005120 <HAL_ETH_Init+0x1f8>)
 80050ea:	430b      	orrs	r3, r1
 80050ec:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2210      	movs	r2, #16
 80050fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	58024400 	.word	0x58024400
 8005110:	58000400 	.word	0x58000400
 8005114:	431bde83 	.word	0x431bde83
 8005118:	ffff8001 	.word	0xffff8001
 800511c:	0c020060 	.word	0x0c020060
 8005120:	0c20c000 	.word	0x0c20c000

08005124 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005134:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800513c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800513e:	f003 fa71 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 8005142:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4a1a      	ldr	r2, [pc, #104]	@ (80051b0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d804      	bhi.n	8005156 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	e022      	b.n	800519c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d204      	bcs.n	8005168 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e019      	b.n	800519c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	4a13      	ldr	r2, [pc, #76]	@ (80051b8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d915      	bls.n	800519c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4a12      	ldr	r2, [pc, #72]	@ (80051bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d804      	bhi.n	8005182 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e00c      	b.n	800519c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a0e      	ldr	r2, [pc, #56]	@ (80051c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d804      	bhi.n	8005194 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005190:	60fb      	str	r3, [r7, #12]
 8005192:	e003      	b.n	800519c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800519a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	02160ebf 	.word	0x02160ebf
 80051b4:	03938700 	.word	0x03938700
 80051b8:	05f5e0ff 	.word	0x05f5e0ff
 80051bc:	08f0d17f 	.word	0x08f0d17f
 80051c0:	0ee6b27f 	.word	0x0ee6b27f

080051c4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80051d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	791b      	ldrb	r3, [r3, #4]
 80051dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80051de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	7b1b      	ldrb	r3, [r3, #12]
 80051e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80051e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	7b5b      	ldrb	r3, [r3, #13]
 80051ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80051ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	7b9b      	ldrb	r3, [r3, #14]
 80051f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80051f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	7bdb      	ldrb	r3, [r3, #15]
 80051fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80051fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	7c12      	ldrb	r2, [r2, #16]
 8005204:	2a00      	cmp	r2, #0
 8005206:	d102      	bne.n	800520e <ETH_SetMACConfig+0x4a>
 8005208:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800520c:	e000      	b.n	8005210 <ETH_SetMACConfig+0x4c>
 800520e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005210:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	7c52      	ldrb	r2, [r2, #17]
 8005216:	2a00      	cmp	r2, #0
 8005218:	d102      	bne.n	8005220 <ETH_SetMACConfig+0x5c>
 800521a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800521e:	e000      	b.n	8005222 <ETH_SetMACConfig+0x5e>
 8005220:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7c9b      	ldrb	r3, [r3, #18]
 8005228:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800522a:	431a      	orrs	r2, r3
               macconf->Speed |
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005230:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005236:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	7f1b      	ldrb	r3, [r3, #28]
 800523c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800523e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	7f5b      	ldrb	r3, [r3, #29]
 8005244:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005246:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	7f92      	ldrb	r2, [r2, #30]
 800524c:	2a00      	cmp	r2, #0
 800524e:	d102      	bne.n	8005256 <ETH_SetMACConfig+0x92>
 8005250:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005254:	e000      	b.n	8005258 <ETH_SetMACConfig+0x94>
 8005256:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005258:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	7fdb      	ldrb	r3, [r3, #31]
 800525e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005260:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005268:	2a00      	cmp	r2, #0
 800526a:	d102      	bne.n	8005272 <ETH_SetMACConfig+0xae>
 800526c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005270:	e000      	b.n	8005274 <ETH_SetMACConfig+0xb0>
 8005272:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005274:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800527a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005282:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005284:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	4b56      	ldr	r3, [pc, #344]	@ (80053f0 <ETH_SetMACConfig+0x22c>)
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	68f9      	ldr	r1, [r7, #12]
 800529e:	430b      	orrs	r3, r1
 80052a0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052ae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80052b8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80052ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052c2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80052c4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80052cc:	2a00      	cmp	r2, #0
 80052ce:	d102      	bne.n	80052d6 <ETH_SetMACConfig+0x112>
 80052d0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80052d4:	e000      	b.n	80052d8 <ETH_SetMACConfig+0x114>
 80052d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80052d8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	4b42      	ldr	r3, [pc, #264]	@ (80053f4 <ETH_SetMACConfig+0x230>)
 80052ea:	4013      	ands	r3, r2
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	6812      	ldr	r2, [r2, #0]
 80052f0:	68f9      	ldr	r1, [r7, #12]
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68da      	ldr	r2, [r3, #12]
 800530c:	4b3a      	ldr	r3, [pc, #232]	@ (80053f8 <ETH_SetMACConfig+0x234>)
 800530e:	4013      	ands	r3, r2
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	68f9      	ldr	r1, [r7, #12]
 8005316:	430b      	orrs	r3, r1
 8005318:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005320:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005326:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800532e:	2a00      	cmp	r2, #0
 8005330:	d101      	bne.n	8005336 <ETH_SetMACConfig+0x172>
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	e000      	b.n	8005338 <ETH_SetMACConfig+0x174>
 8005336:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005338:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800533e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005340:	4313      	orrs	r3, r2
 8005342:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800534a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800534e:	4013      	ands	r3, r2
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	430b      	orrs	r3, r1
 8005358:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005360:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005368:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005376:	f023 0103 	bic.w	r1, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	430a      	orrs	r2, r1
 8005382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800538e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053a4:	683a      	ldr	r2, [r7, #0]
 80053a6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d101      	bne.n	80053b2 <ETH_SetMACConfig+0x1ee>
 80053ae:	2240      	movs	r2, #64	@ 0x40
 80053b0:	e000      	b.n	80053b4 <ETH_SetMACConfig+0x1f0>
 80053b2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80053b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80053bc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80053be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80053c6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80053c8:	4313      	orrs	r3, r2
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80053d4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	430a      	orrs	r2, r1
 80053e0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80053e4:	bf00      	nop
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	00048083 	.word	0x00048083
 80053f4:	c0f88000 	.word	0xc0f88000
 80053f8:	fffffef0 	.word	0xfffffef0

080053fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	4b38      	ldr	r3, [pc, #224]	@ (80054f4 <ETH_SetDMAConfig+0xf8>)
 8005412:	4013      	ands	r3, r2
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	6811      	ldr	r1, [r2, #0]
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6812      	ldr	r2, [r2, #0]
 800541c:	430b      	orrs	r3, r1
 800541e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005422:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	791b      	ldrb	r3, [r3, #4]
 8005428:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800542e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	7b1b      	ldrb	r3, [r3, #12]
 8005434:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005436:	4313      	orrs	r3, r2
 8005438:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005442:	685a      	ldr	r2, [r3, #4]
 8005444:	4b2c      	ldr	r3, [pc, #176]	@ (80054f8 <ETH_SetDMAConfig+0xfc>)
 8005446:	4013      	ands	r3, r2
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6812      	ldr	r2, [r2, #0]
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	430b      	orrs	r3, r1
 8005450:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005454:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	7b5b      	ldrb	r3, [r3, #13]
 800545a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005460:	4313      	orrs	r3, r2
 8005462:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800546c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005470:	4b22      	ldr	r3, [pc, #136]	@ (80054fc <ETH_SetDMAConfig+0x100>)
 8005472:	4013      	ands	r3, r2
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6812      	ldr	r2, [r2, #0]
 8005478:	68f9      	ldr	r1, [r7, #12]
 800547a:	430b      	orrs	r3, r1
 800547c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005480:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	7d1b      	ldrb	r3, [r3, #20]
 800548c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800548e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	7f5b      	ldrb	r3, [r3, #29]
 8005494:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80054a6:	4b16      	ldr	r3, [pc, #88]	@ (8005500 <ETH_SetDMAConfig+0x104>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6812      	ldr	r2, [r2, #0]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	430b      	orrs	r3, r1
 80054b2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054b6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	7f1b      	ldrb	r3, [r3, #28]
 80054be:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054d0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005504 <ETH_SetDMAConfig+0x108>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6812      	ldr	r2, [r2, #0]
 80054dc:	68f9      	ldr	r1, [r7, #12]
 80054de:	430b      	orrs	r3, r1
 80054e0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054e4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80054e8:	bf00      	nop
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	ffff87fd 	.word	0xffff87fd
 80054f8:	ffff2ffe 	.word	0xffff2ffe
 80054fc:	fffec000 	.word	0xfffec000
 8005500:	ffc0efef 	.word	0xffc0efef
 8005504:	7fc0ffff 	.word	0x7fc0ffff

08005508 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b0a4      	sub	sp, #144	@ 0x90
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005510:	2301      	movs	r3, #1
 8005512:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005516:	2300      	movs	r3, #0
 8005518:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800551a:	2300      	movs	r3, #0
 800551c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005520:	2300      	movs	r3, #0
 8005522:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800552c:	2301      	movs	r3, #1
 800552e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005532:	2301      	movs	r3, #1
 8005534:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005544:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005548:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800554a:	2300      	movs	r3, #0
 800554c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005550:	2300      	movs	r3, #0
 8005552:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005560:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005564:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005566:	2300      	movs	r3, #0
 8005568:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800556c:	2300      	movs	r3, #0
 800556e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005570:	2301      	movs	r3, #1
 8005572:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005576:	2300      	movs	r3, #0
 8005578:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800557c:	2300      	movs	r3, #0
 800557e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005582:	2300      	movs	r3, #0
 8005584:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005586:	2300      	movs	r3, #0
 8005588:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800558a:	2300      	movs	r3, #0
 800558c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800558e:	2300      	movs	r3, #0
 8005590:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005594:	2300      	movs	r3, #0
 8005596:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800559a:	2301      	movs	r3, #1
 800559c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80055a0:	2320      	movs	r3, #32
 80055a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80055b2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80055b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80055bc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80055be:	2300      	movs	r3, #0
 80055c0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80055c4:	2302      	movs	r3, #2
 80055c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80055d0:	2300      	movs	r3, #0
 80055d2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80055d6:	2300      	movs	r3, #0
 80055d8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80055e2:	2300      	movs	r3, #0
 80055e4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80055e6:	2301      	movs	r3, #1
 80055e8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80055ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80055f0:	4619      	mov	r1, r3
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7ff fde6 	bl	80051c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80055fc:	2301      	movs	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005600:	2300      	movs	r3, #0
 8005602:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005604:	2300      	movs	r3, #0
 8005606:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800560a:	2300      	movs	r3, #0
 800560c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800560e:	2300      	movs	r3, #0
 8005610:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005612:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005616:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800561c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005620:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005622:	2300      	movs	r3, #0
 8005624:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005628:	f44f 7306 	mov.w	r3, #536	@ 0x218
 800562c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800562e:	f107 0308 	add.w	r3, r7, #8
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fee1 	bl	80053fc <ETH_SetDMAConfig>
}
 800563a:	bf00      	nop
 800563c:	3790      	adds	r7, #144	@ 0x90
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800564a:	2300      	movs	r3, #0
 800564c:	60fb      	str	r3, [r7, #12]
 800564e:	e01d      	b.n	800568c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	68d9      	ldr	r1, [r3, #12]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	4613      	mov	r3, r2
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4413      	add	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	440b      	add	r3, r1
 8005660:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2200      	movs	r2, #0
 8005678:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	3206      	adds	r2, #6
 8005682:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	3301      	adds	r3, #1
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d9de      	bls.n	8005650 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a0:	461a      	mov	r2, r3
 80056a2:	2303      	movs	r3, #3
 80056a4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056b4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056c4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr

080056d4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056dc:	2300      	movs	r3, #0
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e023      	b.n	800572a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6919      	ldr	r1, [r3, #16]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4613      	mov	r3, r2
 80056ea:	005b      	lsls	r3, r3, #1
 80056ec:	4413      	add	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	440b      	add	r3, r1
 80056f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2200      	movs	r2, #0
 80056fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2200      	movs	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2200      	movs	r2, #0
 8005716:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005718:	68b9      	ldr	r1, [r7, #8]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	3212      	adds	r2, #18
 8005720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	3301      	adds	r3, #1
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2b03      	cmp	r3, #3
 800572e:	d9d8      	bls.n	80056e2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2200      	movs	r2, #0
 8005734:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005756:	461a      	mov	r2, r3
 8005758:	2303      	movs	r3, #3
 800575a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800576a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800577e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005782:	bf00      	nop
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
	...

08005790 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b098      	sub	sp, #96	@ 0x60
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005798:	4a84      	ldr	r2, [pc, #528]	@ (80059ac <HAL_FDCAN_Init+0x21c>)
 800579a:	f107 030c 	add.w	r3, r7, #12
 800579e:	4611      	mov	r1, r2
 80057a0:	224c      	movs	r2, #76	@ 0x4c
 80057a2:	4618      	mov	r0, r3
 80057a4:	f00b fd37 	bl	8011216 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e1c6      	b.n	8005b40 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a7e      	ldr	r2, [pc, #504]	@ (80059b0 <HAL_FDCAN_Init+0x220>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d106      	bne.n	80057ca <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80057c4:	461a      	mov	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f7fb fbf0 	bl	8000fc4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699a      	ldr	r2, [r3, #24]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 0210 	bic.w	r2, r2, #16
 80057f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057f4:	f7fd fd40 	bl	8003278 <HAL_GetTick>
 80057f8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80057fa:	e014      	b.n	8005826 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80057fc:	f7fd fd3c 	bl	8003278 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b0a      	cmp	r3, #10
 8005808:	d90d      	bls.n	8005826 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2203      	movs	r2, #3
 800581e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e18c      	b.n	8005b40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	f003 0308 	and.w	r3, r3, #8
 8005830:	2b08      	cmp	r3, #8
 8005832:	d0e3      	beq.n	80057fc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005844:	f7fd fd18 	bl	8003278 <HAL_GetTick>
 8005848:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800584a:	e014      	b.n	8005876 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800584c:	f7fd fd14 	bl	8003278 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b0a      	cmp	r3, #10
 8005858:	d90d      	bls.n	8005876 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2203      	movs	r2, #3
 800586e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e164      	b.n	8005b40 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699b      	ldr	r3, [r3, #24]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d0e3      	beq.n	800584c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f042 0202 	orr.w	r2, r2, #2
 8005892:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	7c1b      	ldrb	r3, [r3, #16]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d108      	bne.n	80058ae <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058aa:	619a      	str	r2, [r3, #24]
 80058ac:	e007      	b.n	80058be <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	699a      	ldr	r2, [r3, #24]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058bc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	7c5b      	ldrb	r3, [r3, #17]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d108      	bne.n	80058d8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058d4:	619a      	str	r2, [r3, #24]
 80058d6:	e007      	b.n	80058e8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699a      	ldr	r2, [r3, #24]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80058e6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	7c9b      	ldrb	r3, [r3, #18]
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d108      	bne.n	8005902 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	699a      	ldr	r2, [r3, #24]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058fe:	619a      	str	r2, [r3, #24]
 8005900:	e007      	b.n	8005912 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699a      	ldr	r2, [r3, #24]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005910:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005936:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	691a      	ldr	r2, [r3, #16]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0210 	bic.w	r2, r2, #16
 8005946:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d108      	bne.n	8005962 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0204 	orr.w	r2, r2, #4
 800595e:	619a      	str	r2, [r3, #24]
 8005960:	e030      	b.n	80059c4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02c      	beq.n	80059c4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	2b02      	cmp	r3, #2
 8005970:	d020      	beq.n	80059b4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005980:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0210 	orr.w	r2, r2, #16
 8005990:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	2b03      	cmp	r3, #3
 8005998:	d114      	bne.n	80059c4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0220 	orr.w	r2, r2, #32
 80059a8:	619a      	str	r2, [r3, #24]
 80059aa:	e00b      	b.n	80059c4 <HAL_FDCAN_Init+0x234>
 80059ac:	08013208 	.word	0x08013208
 80059b0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f042 0220 	orr.w	r2, r2, #32
 80059c2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	69db      	ldr	r3, [r3, #28]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059d4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80059dc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80059ec:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80059ee:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80059f8:	d115      	bne.n	8005a26 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fe:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a04:	3b01      	subs	r3, #1
 8005a06:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a08:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005a12:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005a22:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005a24:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a4c:	4413      	add	r3, r2
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d011      	beq.n	8005a76 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005a5a:	f023 0107 	bic.w	r1, r3, #7
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	3360      	adds	r3, #96	@ 0x60
 8005a66:	443b      	add	r3, r7
 8005a68:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d011      	beq.n	8005aa2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005a86:	f023 0107 	bic.w	r1, r3, #7
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3360      	adds	r3, #96	@ 0x60
 8005a92:	443b      	add	r3, r7
 8005a94:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d012      	beq.n	8005ad0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ab2:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	3360      	adds	r3, #96	@ 0x60
 8005abe:	443b      	add	r3, r7
 8005ac0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005ac4:	011a      	lsls	r2, r3, #4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d012      	beq.n	8005afe <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005ae0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	3360      	adds	r3, #96	@ 0x60
 8005aec:	443b      	add	r3, r7
 8005aee:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005af2:	021a      	lsls	r2, r3, #8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a11      	ldr	r2, [pc, #68]	@ (8005b48 <HAL_FDCAN_Init+0x3b8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d107      	bne.n	8005b18 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f022 0203 	bic.w	r2, r2, #3
 8005b16:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f80b 	bl	8005b4c <FDCAN_CalcultateRamBlockAddresses>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005b3c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3760      	adds	r7, #96	@ 0x60
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	4000a000 	.word	0x4000a000

08005b4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005b62:	4ba7      	ldr	r3, [pc, #668]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005b64:	4013      	ands	r3, r2
 8005b66:	68ba      	ldr	r2, [r7, #8]
 8005b68:	0091      	lsls	r1, r2, #2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005b7c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b84:	041a      	lsls	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	4413      	add	r3, r2
 8005b98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005ba2:	4b97      	ldr	r3, [pc, #604]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	68ba      	ldr	r2, [r7, #8]
 8005ba8:	0091      	lsls	r1, r2, #2
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	6812      	ldr	r2, [r2, #0]
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc4:	041a      	lsls	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	4413      	add	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005be4:	4b86      	ldr	r3, [pc, #536]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	0091      	lsls	r1, r2, #2
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	430b      	orrs	r3, r1
 8005bf2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005bfe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c06:	041a      	lsls	r2, r3, #16
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005c2c:	4b74      	ldr	r3, [pc, #464]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c2e:	4013      	ands	r3, r2
 8005c30:	68ba      	ldr	r2, [r7, #8]
 8005c32:	0091      	lsls	r1, r2, #2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c46:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c4e:	041a      	lsls	r2, r3, #16
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005c62:	fb02 f303 	mul.w	r3, r2, r3
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	4413      	add	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005c74:	4b62      	ldr	r3, [pc, #392]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	0091      	lsls	r1, r2, #2
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6812      	ldr	r2, [r2, #0]
 8005c80:	430b      	orrs	r3, r1
 8005c82:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4413      	add	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005ca0:	4b57      	ldr	r3, [pc, #348]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	0091      	lsls	r1, r2, #2
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6812      	ldr	r2, [r2, #0]
 8005cac:	430b      	orrs	r3, r1
 8005cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005cba:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	041a      	lsls	r2, r3, #16
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005ce2:	4b47      	ldr	r3, [pc, #284]	@ (8005e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	68ba      	ldr	r2, [r7, #8]
 8005ce8:	0091      	lsls	r1, r2, #2
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6812      	ldr	r2, [r2, #0]
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005cfc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	041a      	lsls	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d18:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d20:	061a      	lsls	r2, r3, #24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d30:	4b34      	ldr	r3, [pc, #208]	@ (8005e04 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005d32:	4413      	add	r3, r2
 8005d34:	009a      	lsls	r2, r3, #2
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	441a      	add	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005d66:	fb01 f303 	mul.w	r3, r1, r3
 8005d6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005d6c:	441a      	add	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005d7e:	fb01 f303 	mul.w	r3, r1, r3
 8005d82:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005d84:	441a      	add	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005d96:	fb01 f303 	mul.w	r3, r1, r3
 8005d9a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005d9c:	441a      	add	r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	441a      	add	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc2:	6879      	ldr	r1, [r7, #4]
 8005dc4:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005dc6:	fb01 f303 	mul.w	r3, r1, r3
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	441a      	add	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005de8:	441a      	add	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df6:	4a04      	ldr	r2, [pc, #16]	@ (8005e08 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d915      	bls.n	8005e28 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005dfc:	e006      	b.n	8005e0c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005dfe:	bf00      	nop
 8005e00:	ffff0003 	.word	0xffff0003
 8005e04:	10002b00 	.word	0x10002b00
 8005e08:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2203      	movs	r2, #3
 8005e20:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e010      	b.n	8005e4a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e2c:	60fb      	str	r3, [r7, #12]
 8005e2e:	e005      	b.n	8005e3c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d3f3      	bcc.n	8005e30 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop

08005e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b089      	sub	sp, #36	@ 0x24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005e66:	4b86      	ldr	r3, [pc, #536]	@ (8006080 <HAL_GPIO_Init+0x228>)
 8005e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005e6a:	e18c      	b.n	8006186 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2101      	movs	r1, #1
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	4013      	ands	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 817e 	beq.w	8006180 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d005      	beq.n	8005e9c <HAL_GPIO_Init+0x44>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 0303 	and.w	r3, r3, #3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d130      	bne.n	8005efe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	005b      	lsls	r3, r3, #1
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	69ba      	ldr	r2, [r7, #24]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	69ba      	ldr	r2, [r7, #24]
 8005eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eda:	43db      	mvns	r3, r3
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	f003 0201 	and.w	r2, r3, #1
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef2:	69ba      	ldr	r2, [r7, #24]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	69ba      	ldr	r2, [r7, #24]
 8005efc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0303 	and.w	r3, r3, #3
 8005f06:	2b03      	cmp	r3, #3
 8005f08:	d017      	beq.n	8005f3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	2203      	movs	r2, #3
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	43db      	mvns	r3, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d123      	bne.n	8005f8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	08da      	lsrs	r2, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	3208      	adds	r2, #8
 8005f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	220f      	movs	r2, #15
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f003 0307 	and.w	r3, r3, #7
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	69ba      	ldr	r2, [r7, #24]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	08da      	lsrs	r2, r3, #3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	3208      	adds	r2, #8
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	2203      	movs	r2, #3
 8005f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9e:	43db      	mvns	r3, r3
 8005fa0:	69ba      	ldr	r2, [r7, #24]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f003 0203 	and.w	r2, r3, #3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	69ba      	ldr	r2, [r7, #24]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80d8 	beq.w	8006180 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8006084 <HAL_GPIO_Init+0x22c>)
 8005fd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fd6:	4a2b      	ldr	r2, [pc, #172]	@ (8006084 <HAL_GPIO_Init+0x22c>)
 8005fd8:	f043 0302 	orr.w	r3, r3, #2
 8005fdc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005fe0:	4b28      	ldr	r3, [pc, #160]	@ (8006084 <HAL_GPIO_Init+0x22c>)
 8005fe2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	60fb      	str	r3, [r7, #12]
 8005fec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005fee:	4a26      	ldr	r2, [pc, #152]	@ (8006088 <HAL_GPIO_Init+0x230>)
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	089b      	lsrs	r3, r3, #2
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	220f      	movs	r2, #15
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43db      	mvns	r3, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4013      	ands	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a1d      	ldr	r2, [pc, #116]	@ (800608c <HAL_GPIO_Init+0x234>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d04a      	beq.n	80060b0 <HAL_GPIO_Init+0x258>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <HAL_GPIO_Init+0x238>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02b      	beq.n	800607a <HAL_GPIO_Init+0x222>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <HAL_GPIO_Init+0x23c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d025      	beq.n	8006076 <HAL_GPIO_Init+0x21e>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a1a      	ldr	r2, [pc, #104]	@ (8006098 <HAL_GPIO_Init+0x240>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d01f      	beq.n	8006072 <HAL_GPIO_Init+0x21a>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a19      	ldr	r2, [pc, #100]	@ (800609c <HAL_GPIO_Init+0x244>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d019      	beq.n	800606e <HAL_GPIO_Init+0x216>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a18      	ldr	r2, [pc, #96]	@ (80060a0 <HAL_GPIO_Init+0x248>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_GPIO_Init+0x212>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a17      	ldr	r2, [pc, #92]	@ (80060a4 <HAL_GPIO_Init+0x24c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00d      	beq.n	8006066 <HAL_GPIO_Init+0x20e>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a16      	ldr	r2, [pc, #88]	@ (80060a8 <HAL_GPIO_Init+0x250>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d007      	beq.n	8006062 <HAL_GPIO_Init+0x20a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a15      	ldr	r2, [pc, #84]	@ (80060ac <HAL_GPIO_Init+0x254>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d101      	bne.n	800605e <HAL_GPIO_Init+0x206>
 800605a:	2309      	movs	r3, #9
 800605c:	e029      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 800605e:	230a      	movs	r3, #10
 8006060:	e027      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 8006062:	2307      	movs	r3, #7
 8006064:	e025      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 8006066:	2306      	movs	r3, #6
 8006068:	e023      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 800606a:	2305      	movs	r3, #5
 800606c:	e021      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 800606e:	2304      	movs	r3, #4
 8006070:	e01f      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 8006072:	2303      	movs	r3, #3
 8006074:	e01d      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 8006076:	2302      	movs	r3, #2
 8006078:	e01b      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 800607a:	2301      	movs	r3, #1
 800607c:	e019      	b.n	80060b2 <HAL_GPIO_Init+0x25a>
 800607e:	bf00      	nop
 8006080:	58000080 	.word	0x58000080
 8006084:	58024400 	.word	0x58024400
 8006088:	58000400 	.word	0x58000400
 800608c:	58020000 	.word	0x58020000
 8006090:	58020400 	.word	0x58020400
 8006094:	58020800 	.word	0x58020800
 8006098:	58020c00 	.word	0x58020c00
 800609c:	58021000 	.word	0x58021000
 80060a0:	58021400 	.word	0x58021400
 80060a4:	58021800 	.word	0x58021800
 80060a8:	58021c00 	.word	0x58021c00
 80060ac:	58022400 	.word	0x58022400
 80060b0:	2300      	movs	r3, #0
 80060b2:	69fa      	ldr	r2, [r7, #28]
 80060b4:	f002 0203 	and.w	r2, r2, #3
 80060b8:	0092      	lsls	r2, r2, #2
 80060ba:	4093      	lsls	r3, r2
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060c2:	4938      	ldr	r1, [pc, #224]	@ (80061a4 <HAL_GPIO_Init+0x34c>)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	089b      	lsrs	r3, r3, #2
 80060c8:	3302      	adds	r3, #2
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	43db      	mvns	r3, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4013      	ands	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80060f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	43db      	mvns	r3, r3
 800610a:	69ba      	ldr	r2, [r7, #24]
 800610c:	4013      	ands	r3, r2
 800610e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d003      	beq.n	8006124 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4313      	orrs	r3, r2
 8006122:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006124:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	43db      	mvns	r3, r3
 8006136:	69ba      	ldr	r2, [r7, #24]
 8006138:	4013      	ands	r3, r2
 800613a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	43db      	mvns	r3, r3
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4013      	ands	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4313      	orrs	r3, r2
 8006178:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	3301      	adds	r3, #1
 8006184:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	fa22 f303 	lsr.w	r3, r2, r3
 8006190:	2b00      	cmp	r3, #0
 8006192:	f47f ae6b 	bne.w	8005e6c <HAL_GPIO_Init+0x14>
  }
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	3724      	adds	r7, #36	@ 0x24
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	58000400 	.word	0x58000400

080061a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	460b      	mov	r3, r1
 80061b2:	807b      	strh	r3, [r7, #2]
 80061b4:	4613      	mov	r3, r2
 80061b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80061b8:	787b      	ldrb	r3, [r7, #1]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061be:	887a      	ldrh	r2, [r7, #2]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80061c4:	e003      	b.n	80061ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80061c6:	887b      	ldrh	r3, [r7, #2]
 80061c8:	041a      	lsls	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	619a      	str	r2, [r3, #24]
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e08b      	b.n	8006306 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d106      	bne.n	8006208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f7fb f9fe 	bl	8001604 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2224      	movs	r2, #36	@ 0x24
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0201 	bic.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800622c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	689a      	ldr	r2, [r3, #8]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800623c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d107      	bne.n	8006256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006252:	609a      	str	r2, [r3, #8]
 8006254:	e006      	b.n	8006264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d108      	bne.n	800627e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800627a:	605a      	str	r2, [r3, #4]
 800627c:	e007      	b.n	800628e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800628c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	6859      	ldr	r1, [r3, #4]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	4b1d      	ldr	r3, [pc, #116]	@ (8006310 <HAL_I2C_Init+0x134>)
 800629a:	430b      	orrs	r3, r1
 800629c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68da      	ldr	r2, [r3, #12]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	699b      	ldr	r3, [r3, #24]
 80062be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	430a      	orrs	r2, r1
 80062c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	69d9      	ldr	r1, [r3, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1a      	ldr	r2, [r3, #32]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2220      	movs	r2, #32
 80062f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	02008000 	.word	0x02008000

08006314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b20      	cmp	r3, #32
 8006328:	d138      	bne.n	800639c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006334:	2302      	movs	r3, #2
 8006336:	e032      	b.n	800639e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2224      	movs	r2, #36	@ 0x24
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0201 	bic.w	r2, r2, #1
 8006356:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006366:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6819      	ldr	r1, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	683a      	ldr	r2, [r7, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2220      	movs	r2, #32
 800638c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e000      	b.n	800639e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800639c:	2302      	movs	r3, #2
  }
}
 800639e:	4618      	mov	r0, r3
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr

080063aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b085      	sub	sp, #20
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
 80063b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b20      	cmp	r3, #32
 80063be:	d139      	bne.n	8006434 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e033      	b.n	8006436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2224      	movs	r2, #36	@ 0x24
 80063da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0201 	bic.w	r2, r2, #1
 80063ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f042 0201 	orr.w	r2, r2, #1
 800641e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006430:	2300      	movs	r3, #0
 8006432:	e000      	b.n	8006436 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006434:	2302      	movs	r3, #2
  }
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
	...

08006444 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e0bf      	b.n	80065d6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d106      	bne.n	8006470 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb f9e6 	bl	800183c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006486:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	6999      	ldr	r1, [r3, #24]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800649c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	6899      	ldr	r1, [r3, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	4b4a      	ldr	r3, [pc, #296]	@ (80065e0 <HAL_LTDC_Init+0x19c>)
 80064b8:	400b      	ands	r3, r1
 80064ba:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	041b      	lsls	r3, r3, #16
 80064c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6899      	ldr	r1, [r3, #8]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	699a      	ldr	r2, [r3, #24]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	431a      	orrs	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	430a      	orrs	r2, r1
 80064d8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68d9      	ldr	r1, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	4b3e      	ldr	r3, [pc, #248]	@ (80065e0 <HAL_LTDC_Init+0x19c>)
 80064e6:	400b      	ands	r3, r1
 80064e8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	68d9      	ldr	r1, [r3, #12]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	431a      	orrs	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	6919      	ldr	r1, [r3, #16]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b33      	ldr	r3, [pc, #204]	@ (80065e0 <HAL_LTDC_Init+0x19c>)
 8006514:	400b      	ands	r3, r1
 8006516:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	041b      	lsls	r3, r3, #16
 800651e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6919      	ldr	r1, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	430a      	orrs	r2, r1
 8006534:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6959      	ldr	r1, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b27      	ldr	r3, [pc, #156]	@ (80065e0 <HAL_LTDC_Init+0x19c>)
 8006542:	400b      	ands	r3, r1
 8006544:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654a:	041b      	lsls	r3, r3, #16
 800654c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	6959      	ldr	r1, [r3, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800656a:	021b      	lsls	r3, r3, #8
 800656c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006586:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4313      	orrs	r3, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800659a:	431a      	orrs	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f042 0206 	orr.w	r2, r2, #6
 80065b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	699a      	ldr	r2, [r3, #24]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f042 0201 	orr.w	r2, r2, #1
 80065c2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	f000f800 	.word	0xf000f800

080065e4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80065e4:	b5b0      	push	{r4, r5, r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_LTDC_ConfigLayer+0x1a>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e02c      	b.n	8006658 <HAL_LTDC_ConfigLayer+0x74>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2202      	movs	r2, #2
 800660a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2134      	movs	r1, #52	@ 0x34
 8006614:	fb01 f303 	mul.w	r3, r1, r3
 8006618:	4413      	add	r3, r2
 800661a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	4614      	mov	r4, r2
 8006622:	461d      	mov	r5, r3
 8006624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800662e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	68b9      	ldr	r1, [r7, #8]
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f000 f811 	bl	8006660 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2201      	movs	r2, #1
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bdb0      	pop	{r4, r5, r7, pc}

08006660 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006660:	b480      	push	{r7}
 8006662:	b089      	sub	sp, #36	@ 0x24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	0c1b      	lsrs	r3, r3, #16
 8006678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800667c:	4413      	add	r3, r2
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	01db      	lsls	r3, r3, #7
 800668c:	4413      	add	r3, r2
 800668e:	3384      	adds	r3, #132	@ 0x84
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	6812      	ldr	r2, [r2, #0]
 8006696:	4611      	mov	r1, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	01d2      	lsls	r2, r2, #7
 800669c:	440a      	add	r2, r1
 800669e:	3284      	adds	r2, #132	@ 0x84
 80066a0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80066a4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	0c1b      	lsrs	r3, r3, #16
 80066b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066b6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066b8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4619      	mov	r1, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	01db      	lsls	r3, r3, #7
 80066c4:	440b      	add	r3, r1
 80066c6:	3384      	adds	r3, #132	@ 0x84
 80066c8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80066ce:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066de:	4413      	add	r3, r2
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	01db      	lsls	r3, r3, #7
 80066ee:	4413      	add	r3, r2
 80066f0:	3384      	adds	r3, #132	@ 0x84
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	4611      	mov	r1, r2
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	01d2      	lsls	r2, r2, #7
 80066fe:	440a      	add	r2, r1
 8006700:	3284      	adds	r2, #132	@ 0x84
 8006702:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006706:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006716:	4413      	add	r3, r2
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4619      	mov	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	01db      	lsls	r3, r3, #7
 8006724:	440b      	add	r3, r1
 8006726:	3384      	adds	r3, #132	@ 0x84
 8006728:	4619      	mov	r1, r3
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4313      	orrs	r3, r2
 800672e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	01db      	lsls	r3, r3, #7
 800673a:	4413      	add	r3, r2
 800673c:	3384      	adds	r3, #132	@ 0x84
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6812      	ldr	r2, [r2, #0]
 8006744:	4611      	mov	r1, r2
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	01d2      	lsls	r2, r2, #7
 800674a:	440a      	add	r2, r1
 800674c:	3284      	adds	r2, #132	@ 0x84
 800674e:	f023 0307 	bic.w	r3, r3, #7
 8006752:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	461a      	mov	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	01db      	lsls	r3, r3, #7
 800675e:	4413      	add	r3, r2
 8006760:	3384      	adds	r3, #132	@ 0x84
 8006762:	461a      	mov	r2, r3
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006770:	021b      	lsls	r3, r3, #8
 8006772:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	061b      	lsls	r3, r3, #24
 8006784:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	461a      	mov	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	01db      	lsls	r3, r3, #7
 8006790:	4413      	add	r3, r2
 8006792:	3384      	adds	r3, #132	@ 0x84
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	01db      	lsls	r3, r3, #7
 80067a0:	4413      	add	r3, r2
 80067a2:	3384      	adds	r3, #132	@ 0x84
 80067a4:	461a      	mov	r2, r3
 80067a6:	2300      	movs	r3, #0
 80067a8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80067b0:	461a      	mov	r2, r3
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	431a      	orrs	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	01db      	lsls	r3, r3, #7
 80067c4:	440b      	add	r3, r1
 80067c6:	3384      	adds	r3, #132	@ 0x84
 80067c8:	4619      	mov	r1, r3
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	01db      	lsls	r3, r3, #7
 80067da:	4413      	add	r3, r2
 80067dc:	3384      	adds	r3, #132	@ 0x84
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	6812      	ldr	r2, [r2, #0]
 80067e4:	4611      	mov	r1, r2
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	01d2      	lsls	r2, r2, #7
 80067ea:	440a      	add	r2, r1
 80067ec:	3284      	adds	r2, #132	@ 0x84
 80067ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80067f2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	01db      	lsls	r3, r3, #7
 80067fe:	4413      	add	r3, r2
 8006800:	3384      	adds	r3, #132	@ 0x84
 8006802:	461a      	mov	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	01db      	lsls	r3, r3, #7
 8006814:	4413      	add	r3, r2
 8006816:	3384      	adds	r3, #132	@ 0x84
 8006818:	69da      	ldr	r2, [r3, #28]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4619      	mov	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	01db      	lsls	r3, r3, #7
 8006824:	440b      	add	r3, r1
 8006826:	3384      	adds	r3, #132	@ 0x84
 8006828:	4619      	mov	r1, r3
 800682a:	4b58      	ldr	r3, [pc, #352]	@ (800698c <LTDC_SetConfig+0x32c>)
 800682c:	4013      	ands	r3, r2
 800682e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	69da      	ldr	r2, [r3, #28]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	68f9      	ldr	r1, [r7, #12]
 800683a:	6809      	ldr	r1, [r1, #0]
 800683c:	4608      	mov	r0, r1
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	01c9      	lsls	r1, r1, #7
 8006842:	4401      	add	r1, r0
 8006844:	3184      	adds	r1, #132	@ 0x84
 8006846:	4313      	orrs	r3, r2
 8006848:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	01db      	lsls	r3, r3, #7
 8006854:	4413      	add	r3, r2
 8006856:	3384      	adds	r3, #132	@ 0x84
 8006858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	01db      	lsls	r3, r3, #7
 8006864:	4413      	add	r3, r2
 8006866:	3384      	adds	r3, #132	@ 0x84
 8006868:	461a      	mov	r2, r3
 800686a:	2300      	movs	r3, #0
 800686c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	01db      	lsls	r3, r3, #7
 8006878:	4413      	add	r3, r2
 800687a:	3384      	adds	r3, #132	@ 0x84
 800687c:	461a      	mov	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006882:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d102      	bne.n	8006892 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800688c:	2304      	movs	r3, #4
 800688e:	61fb      	str	r3, [r7, #28]
 8006890:	e01b      	b.n	80068ca <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d102      	bne.n	80068a0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800689a:	2303      	movs	r3, #3
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e014      	b.n	80068ca <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d00b      	beq.n	80068c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d007      	beq.n	80068c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d003      	beq.n	80068c0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80068bc:	2b07      	cmp	r3, #7
 80068be:	d102      	bne.n	80068c6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80068c0:	2302      	movs	r3, #2
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	e001      	b.n	80068ca <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80068c6:	2301      	movs	r3, #1
 80068c8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	01db      	lsls	r3, r3, #7
 80068d4:	4413      	add	r3, r2
 80068d6:	3384      	adds	r3, #132	@ 0x84
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	4611      	mov	r1, r2
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	01d2      	lsls	r2, r2, #7
 80068e4:	440a      	add	r2, r1
 80068e6:	3284      	adds	r2, #132	@ 0x84
 80068e8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80068ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6859      	ldr	r1, [r3, #4]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	1acb      	subs	r3, r1, r3
 8006904:	69f9      	ldr	r1, [r7, #28]
 8006906:	fb01 f303 	mul.w	r3, r1, r3
 800690a:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800690c:	68f9      	ldr	r1, [r7, #12]
 800690e:	6809      	ldr	r1, [r1, #0]
 8006910:	4608      	mov	r0, r1
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	01c9      	lsls	r1, r1, #7
 8006916:	4401      	add	r1, r0
 8006918:	3184      	adds	r1, #132	@ 0x84
 800691a:	4313      	orrs	r3, r2
 800691c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	01db      	lsls	r3, r3, #7
 8006928:	4413      	add	r3, r2
 800692a:	3384      	adds	r3, #132	@ 0x84
 800692c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	01db      	lsls	r3, r3, #7
 8006938:	440b      	add	r3, r1
 800693a:	3384      	adds	r3, #132	@ 0x84
 800693c:	4619      	mov	r1, r3
 800693e:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <LTDC_SetConfig+0x330>)
 8006940:	4013      	ands	r3, r2
 8006942:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	01db      	lsls	r3, r3, #7
 800694e:	4413      	add	r3, r2
 8006950:	3384      	adds	r3, #132	@ 0x84
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006958:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	461a      	mov	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	01db      	lsls	r3, r3, #7
 8006964:	4413      	add	r3, r2
 8006966:	3384      	adds	r3, #132	@ 0x84
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68fa      	ldr	r2, [r7, #12]
 800696c:	6812      	ldr	r2, [r2, #0]
 800696e:	4611      	mov	r1, r2
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	01d2      	lsls	r2, r2, #7
 8006974:	440a      	add	r2, r1
 8006976:	3284      	adds	r2, #132	@ 0x84
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	6013      	str	r3, [r2, #0]
}
 800697e:	bf00      	nop
 8006980:	3724      	adds	r7, #36	@ 0x24
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	fffff8f8 	.word	0xfffff8f8
 8006990:	fffff800 	.word	0xfffff800

08006994 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7fc fc6a 	bl	8003278 <HAL_GetTick>
 80069a4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d102      	bne.n	80069b2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
 80069b0:	e0a5      	b.n	8006afe <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 809e 	bne.w	8006afe <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7fb fa98 	bl	8001ef8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80069c8:	f241 3188 	movw	r1, #5000	@ 0x1388
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 f8dc 	bl	8006b8a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	4b4b      	ldr	r3, [pc, #300]	@ (8006b08 <HAL_OSPI_Init+0x174>)
 80069da:	4013      	ands	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	68d1      	ldr	r1, [r2, #12]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6912      	ldr	r2, [r2, #16]
 80069e4:	3a01      	subs	r2, #1
 80069e6:	0412      	lsls	r2, r2, #16
 80069e8:	4311      	orrs	r1, r2
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	6952      	ldr	r2, [r2, #20]
 80069ee:	3a01      	subs	r2, #1
 80069f0:	0212      	lsls	r2, r2, #8
 80069f2:	4311      	orrs	r1, r2
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069f8:	4311      	orrs	r1, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	69d2      	ldr	r2, [r2, #28]
 80069fe:	4311      	orrs	r1, r2
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1a      	ldr	r2, [r3, #32]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a22:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006a38:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	021a      	lsls	r2, r3, #8
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2120      	movs	r1, #32
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f000 fd89 	bl	8007578 <OSPI_WaitFlagStateUntilTimeout>
 8006a66:	4603      	mov	r3, r0
 8006a68:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d146      	bne.n	8006afe <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a7e:	1e5a      	subs	r2, r3, #1
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689a      	ldr	r2, [r3, #8]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006aa6:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab2:	431a      	orrs	r2, r3
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	430a      	orrs	r2, r1
 8006aba:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0201 	orr.w	r2, r2, #1
 8006acc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	699b      	ldr	r3, [r3, #24]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d107      	bne.n	8006ae6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f042 0202 	orr.w	r2, r2, #2
 8006ae4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aee:	d103      	bne.n	8006af8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	651a      	str	r2, [r3, #80]	@ 0x50
 8006af6:	e002      	b.n	8006afe <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	f8e0f8f4 	.word	0xf8e0f8f4

08006b0c <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	@ 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006b18:	f7fc fbae 	bl	8003278 <HAL_GetTick>
 8006b1c:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b22:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d002      	beq.n	8006b30 <HAL_OSPI_HyperbusCfg+0x24>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d122      	bne.n	8006b76 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	2200      	movs	r2, #0
 8006b38:	2120      	movs	r1, #32
 8006b3a:	68f8      	ldr	r0, [r7, #12]
 8006b3c:	f000 fd1c 	bl	8007578 <OSPI_WaitFlagStateUntilTimeout>
 8006b40:	4603      	mov	r3, r0
 8006b42:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006b44:	7ffb      	ldrb	r3, [r7, #31]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d11a      	bne.n	8006b80 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	041a      	lsls	r2, r3, #16
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	431a      	orrs	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	ea42 0103 	orr.w	r1, r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2202      	movs	r2, #2
 8006b72:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006b74:	e004      	b.n	8006b80 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2210      	movs	r2, #16
 8006b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006b80:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b094      	sub	sp, #80	@ 0x50
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a9d      	ldr	r2, [pc, #628]	@ (8006e3c <HAL_OSPIM_Config+0x294>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d105      	bne.n	8006bd6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006bd4:	e004      	b.n	8006be0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006be6:	e01d      	b.n	8006c24 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006be8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006bec:	3301      	adds	r3, #1
 8006bee:	b2d8      	uxtb	r0, r3
 8006bf0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006bf4:	f107 0114 	add.w	r1, r7, #20
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	4413      	add	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	440b      	add	r3, r1
 8006c02:	4619      	mov	r1, r3
 8006c04:	f000 fcf0 	bl	80075e8 <OSPIM_GetConfig>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d005      	beq.n	8006c1a <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2208      	movs	r2, #8
 8006c18:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006c1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006c1e:	3301      	adds	r3, #1
 8006c20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006c24:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d9dd      	bls.n	8006be8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006c2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f040 8495 	bne.w	8007560 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006c36:	4b81      	ldr	r3, [pc, #516]	@ (8006e3c <HAL_OSPIM_Config+0x294>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006c42:	4b7e      	ldr	r3, [pc, #504]	@ (8006e3c <HAL_OSPIM_Config+0x294>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a7d      	ldr	r2, [pc, #500]	@ (8006e3c <HAL_OSPIM_Config+0x294>)
 8006c48:	f023 0301 	bic.w	r3, r3, #1
 8006c4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006c4e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006c52:	f043 0301 	orr.w	r3, r3, #1
 8006c56:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006c5a:	4b79      	ldr	r3, [pc, #484]	@ (8006e40 <HAL_OSPIM_Config+0x298>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00b      	beq.n	8006c7e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006c66:	4b76      	ldr	r3, [pc, #472]	@ (8006e40 <HAL_OSPIM_Config+0x298>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a75      	ldr	r2, [pc, #468]	@ (8006e40 <HAL_OSPIM_Config+0x298>)
 8006c6c:	f023 0301 	bic.w	r3, r3, #1
 8006c70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006c72:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006c76:	f043 0302 	orr.w	r3, r3, #2
 8006c7a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006c7e:	4971      	ldr	r1, [pc, #452]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006c80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c82:	4613      	mov	r3, r2
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4413      	add	r3, r2
 8006c88:	00db      	lsls	r3, r3, #3
 8006c8a:	3350      	adds	r3, #80	@ 0x50
 8006c8c:	443b      	add	r3, r7
 8006c8e:	3b34      	subs	r3, #52	@ 0x34
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3b01      	subs	r3, #1
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	440b      	add	r3, r1
 8006c98:	6859      	ldr	r1, [r3, #4]
 8006c9a:	486a      	ldr	r0, [pc, #424]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006c9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	3350      	adds	r3, #80	@ 0x50
 8006ca8:	443b      	add	r3, r7
 8006caa:	3b34      	subs	r3, #52	@ 0x34
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4403      	add	r3, r0
 8006cb8:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006cba:	4b62      	ldr	r3, [pc, #392]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80c0 	beq.w	8006e48 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006cce:	f023 0301 	bic.w	r3, r3, #1
 8006cd2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006cd4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	f040 8162 	bne.w	8006fa2 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006cde:	4959      	ldr	r1, [pc, #356]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006ce0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	3350      	adds	r3, #80	@ 0x50
 8006cee:	443b      	add	r3, r7
 8006cf0:	3b3c      	subs	r3, #60	@ 0x3c
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	6859      	ldr	r1, [r3, #4]
 8006cfc:	4851      	ldr	r0, [pc, #324]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006cfe:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	00db      	lsls	r3, r3, #3
 8006d0a:	3350      	adds	r3, #80	@ 0x50
 8006d0c:	443b      	add	r3, r7
 8006d0e:	3b3c      	subs	r3, #60	@ 0x3c
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	f041 0202 	orr.w	r2, r1, #2
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	4403      	add	r3, r0
 8006d1c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006d1e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d22:	4613      	mov	r3, r2
 8006d24:	005b      	lsls	r3, r3, #1
 8006d26:	4413      	add	r3, r2
 8006d28:	00db      	lsls	r3, r3, #3
 8006d2a:	3350      	adds	r3, #80	@ 0x50
 8006d2c:	443b      	add	r3, r7
 8006d2e:	3b38      	subs	r3, #56	@ 0x38
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01f      	beq.n	8006d76 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006d36:	4943      	ldr	r1, [pc, #268]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006d38:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	005b      	lsls	r3, r3, #1
 8006d40:	4413      	add	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	3350      	adds	r3, #80	@ 0x50
 8006d46:	443b      	add	r3, r7
 8006d48:	3b38      	subs	r3, #56	@ 0x38
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	6859      	ldr	r1, [r3, #4]
 8006d54:	483b      	ldr	r0, [pc, #236]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006d56:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	3350      	adds	r3, #80	@ 0x50
 8006d64:	443b      	add	r3, r7
 8006d66:	3b38      	subs	r3, #56	@ 0x38
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	f041 0220 	orr.w	r2, r1, #32
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4403      	add	r3, r0
 8006d74:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006d76:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	005b      	lsls	r3, r3, #1
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	3350      	adds	r3, #80	@ 0x50
 8006d84:	443b      	add	r3, r7
 8006d86:	3b30      	subs	r3, #48	@ 0x30
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d023      	beq.n	8006dd6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006d8e:	492d      	ldr	r1, [pc, #180]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006d90:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006d94:	4613      	mov	r3, r2
 8006d96:	005b      	lsls	r3, r3, #1
 8006d98:	4413      	add	r3, r2
 8006d9a:	00db      	lsls	r3, r3, #3
 8006d9c:	3350      	adds	r3, #80	@ 0x50
 8006d9e:	443b      	add	r3, r7
 8006da0:	3b30      	subs	r3, #48	@ 0x30
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	440b      	add	r3, r1
 8006dae:	6859      	ldr	r1, [r3, #4]
 8006db0:	4824      	ldr	r0, [pc, #144]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006db2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006db6:	4613      	mov	r3, r2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	4413      	add	r3, r2
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	3350      	adds	r3, #80	@ 0x50
 8006dc0:	443b      	add	r3, r7
 8006dc2:	3b30      	subs	r3, #48	@ 0x30
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	f003 0301 	and.w	r3, r3, #1
 8006dcc:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	4403      	add	r3, r0
 8006dd4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006dd6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006dda:	4613      	mov	r3, r2
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	4413      	add	r3, r2
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	3350      	adds	r3, #80	@ 0x50
 8006de4:	443b      	add	r3, r7
 8006de6:	3b2c      	subs	r3, #44	@ 0x2c
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	f000 80d9 	beq.w	8006fa2 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006df0:	4914      	ldr	r1, [pc, #80]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006df2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006df6:	4613      	mov	r3, r2
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	4413      	add	r3, r2
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	3350      	adds	r3, #80	@ 0x50
 8006e00:	443b      	add	r3, r7
 8006e02:	3b2c      	subs	r3, #44	@ 0x2c
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	440b      	add	r3, r1
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	480c      	ldr	r0, [pc, #48]	@ (8006e44 <HAL_OSPIM_Config+0x29c>)
 8006e14:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006e18:	4613      	mov	r3, r2
 8006e1a:	005b      	lsls	r3, r3, #1
 8006e1c:	4413      	add	r3, r2
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	3350      	adds	r3, #80	@ 0x50
 8006e22:	443b      	add	r3, r7
 8006e24:	3b2c      	subs	r3, #44	@ 0x2c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4403      	add	r3, r0
 8006e36:	605a      	str	r2, [r3, #4]
 8006e38:	e0b3      	b.n	8006fa2 <HAL_OSPIM_Config+0x3fa>
 8006e3a:	bf00      	nop
 8006e3c:	52005000 	.word	0x52005000
 8006e40:	5200a000 	.word	0x5200a000
 8006e44:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8006e48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	4413      	add	r3, r2
 8006e50:	00db      	lsls	r3, r3, #3
 8006e52:	3350      	adds	r3, #80	@ 0x50
 8006e54:	443b      	add	r3, r7
 8006e56:	3b3c      	subs	r3, #60	@ 0x3c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 80a1 	beq.w	8006fa2 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8006e60:	4993      	ldr	r1, [pc, #588]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e64:	4613      	mov	r3, r2
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	4413      	add	r3, r2
 8006e6a:	00db      	lsls	r3, r3, #3
 8006e6c:	3350      	adds	r3, #80	@ 0x50
 8006e6e:	443b      	add	r3, r7
 8006e70:	3b3c      	subs	r3, #60	@ 0x3c
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	440b      	add	r3, r1
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	488c      	ldr	r0, [pc, #560]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006e7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e80:	4613      	mov	r3, r2
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	4413      	add	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	3350      	adds	r3, #80	@ 0x50
 8006e8a:	443b      	add	r3, r7
 8006e8c:	3b3c      	subs	r3, #60	@ 0x3c
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	f021 0201 	bic.w	r2, r1, #1
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4403      	add	r3, r0
 8006e9a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8006e9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	00db      	lsls	r3, r3, #3
 8006ea6:	3350      	adds	r3, #80	@ 0x50
 8006ea8:	443b      	add	r3, r7
 8006eaa:	3b38      	subs	r3, #56	@ 0x38
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01d      	beq.n	8006eee <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8006eb2:	497f      	ldr	r1, [pc, #508]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006eb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	3350      	adds	r3, #80	@ 0x50
 8006ec0:	443b      	add	r3, r7
 8006ec2:	3b38      	subs	r3, #56	@ 0x38
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	440b      	add	r3, r1
 8006ecc:	6859      	ldr	r1, [r3, #4]
 8006ece:	4878      	ldr	r0, [pc, #480]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006ed0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	3350      	adds	r3, #80	@ 0x50
 8006edc:	443b      	add	r3, r7
 8006ede:	3b38      	subs	r3, #56	@ 0x38
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f021 0210 	bic.w	r2, r1, #16
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4403      	add	r3, r0
 8006eec:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006eee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	005b      	lsls	r3, r3, #1
 8006ef4:	4413      	add	r3, r2
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	3350      	adds	r3, #80	@ 0x50
 8006efa:	443b      	add	r3, r7
 8006efc:	3b30      	subs	r3, #48	@ 0x30
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d021      	beq.n	8006f48 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8006f04:	496a      	ldr	r1, [pc, #424]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006f06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f08:	4613      	mov	r3, r2
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	4413      	add	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	3350      	adds	r3, #80	@ 0x50
 8006f12:	443b      	add	r3, r7
 8006f14:	3b30      	subs	r3, #48	@ 0x30
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	f003 0301 	and.w	r3, r3, #1
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	4862      	ldr	r0, [pc, #392]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006f26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f28:	4613      	mov	r3, r2
 8006f2a:	005b      	lsls	r3, r3, #1
 8006f2c:	4413      	add	r3, r2
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	3350      	adds	r3, #80	@ 0x50
 8006f32:	443b      	add	r3, r7
 8006f34:	3b30      	subs	r3, #48	@ 0x30
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4403      	add	r3, r0
 8006f46:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	3350      	adds	r3, #80	@ 0x50
 8006f54:	443b      	add	r3, r7
 8006f56:	3b2c      	subs	r3, #44	@ 0x2c
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d021      	beq.n	8006fa2 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8006f5e:	4954      	ldr	r1, [pc, #336]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f62:	4613      	mov	r3, r2
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	4413      	add	r3, r2
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	3350      	adds	r3, #80	@ 0x50
 8006f6c:	443b      	add	r3, r7
 8006f6e:	3b2c      	subs	r3, #44	@ 0x2c
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	440b      	add	r3, r1
 8006f7c:	6859      	ldr	r1, [r3, #4]
 8006f7e:	484c      	ldr	r0, [pc, #304]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 8006f80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f82:	4613      	mov	r3, r2
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	4413      	add	r3, r2
 8006f88:	00db      	lsls	r3, r3, #3
 8006f8a:	3350      	adds	r3, #80	@ 0x50
 8006f8c:	443b      	add	r3, r7
 8006f8e:	3b2c      	subs	r3, #44	@ 0x2c
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4403      	add	r3, r0
 8006fa0:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	6819      	ldr	r1, [r3, #0]
 8006fa6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	3350      	adds	r3, #80	@ 0x50
 8006fb4:	443b      	add	r3, r7
 8006fb6:	3b3c      	subs	r3, #60	@ 0x3c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4299      	cmp	r1, r3
 8006fbc:	d038      	beq.n	8007030 <HAL_OSPIM_Config+0x488>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	3350      	adds	r3, #80	@ 0x50
 8006fd0:	443b      	add	r3, r7
 8006fd2:	3b38      	subs	r3, #56	@ 0x38
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4299      	cmp	r1, r3
 8006fd8:	d02a      	beq.n	8007030 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6899      	ldr	r1, [r3, #8]
 8006fde:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	4413      	add	r3, r2
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	3350      	adds	r3, #80	@ 0x50
 8006fec:	443b      	add	r3, r7
 8006fee:	3b34      	subs	r3, #52	@ 0x34
 8006ff0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8006ff2:	4299      	cmp	r1, r3
 8006ff4:	d01c      	beq.n	8007030 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	68d9      	ldr	r1, [r3, #12]
 8006ffa:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ffe:	4613      	mov	r3, r2
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	4413      	add	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	3350      	adds	r3, #80	@ 0x50
 8007008:	443b      	add	r3, r7
 800700a:	3b30      	subs	r3, #48	@ 0x30
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4299      	cmp	r1, r3
 8007010:	d00e      	beq.n	8007030 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6919      	ldr	r1, [r3, #16]
 8007016:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	3350      	adds	r3, #80	@ 0x50
 8007024:	443b      	add	r3, r7
 8007026:	3b2c      	subs	r3, #44	@ 0x2c
 8007028:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800702a:	4299      	cmp	r1, r3
 800702c:	f040 810e 	bne.w	800724c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007038:	4613      	mov	r3, r2
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	4413      	add	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	3350      	adds	r3, #80	@ 0x50
 8007042:	443b      	add	r3, r7
 8007044:	3b3c      	subs	r3, #60	@ 0x3c
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4299      	cmp	r1, r3
 800704a:	d133      	bne.n	80070b4 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	6859      	ldr	r1, [r3, #4]
 8007050:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007054:	4613      	mov	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	4413      	add	r3, r2
 800705a:	00db      	lsls	r3, r3, #3
 800705c:	3350      	adds	r3, #80	@ 0x50
 800705e:	443b      	add	r3, r7
 8007060:	3b38      	subs	r3, #56	@ 0x38
 8007062:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007064:	4299      	cmp	r1, r3
 8007066:	d125      	bne.n	80070b4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	68d9      	ldr	r1, [r3, #12]
 800706c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007070:	4613      	mov	r3, r2
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	4413      	add	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	3350      	adds	r3, #80	@ 0x50
 800707a:	443b      	add	r3, r7
 800707c:	3b30      	subs	r3, #48	@ 0x30
 800707e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007080:	4299      	cmp	r1, r3
 8007082:	d117      	bne.n	80070b4 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	6919      	ldr	r1, [r3, #16]
 8007088:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800708c:	4613      	mov	r3, r2
 800708e:	005b      	lsls	r3, r3, #1
 8007090:	4413      	add	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	3350      	adds	r3, #80	@ 0x50
 8007096:	443b      	add	r3, r7
 8007098:	3b2c      	subs	r3, #44	@ 0x2c
 800709a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800709c:	4299      	cmp	r1, r3
 800709e:	d109      	bne.n	80070b4 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80070a0:	4b03      	ldr	r3, [pc, #12]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <HAL_OSPIM_Config+0x508>)
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	6013      	str	r3, [r2, #0]
 80070ac:	e0ce      	b.n	800724c <HAL_OSPIM_Config+0x6a4>
 80070ae:	bf00      	nop
 80070b0:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80070b4:	49bb      	ldr	r1, [pc, #748]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80070b6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070ba:	4613      	mov	r3, r2
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	4413      	add	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	3350      	adds	r3, #80	@ 0x50
 80070c4:	443b      	add	r3, r7
 80070c6:	3b3c      	subs	r3, #60	@ 0x3c
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	440b      	add	r3, r1
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	48b4      	ldr	r0, [pc, #720]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80070d4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	3350      	adds	r3, #80	@ 0x50
 80070e2:	443b      	add	r3, r7
 80070e4:	3b3c      	subs	r3, #60	@ 0x3c
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f021 0201 	bic.w	r2, r1, #1
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4403      	add	r3, r0
 80070f2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80070f4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3350      	adds	r3, #80	@ 0x50
 8007102:	443b      	add	r3, r7
 8007104:	3b38      	subs	r3, #56	@ 0x38
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01f      	beq.n	800714c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800710c:	49a5      	ldr	r1, [pc, #660]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800710e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007112:	4613      	mov	r3, r2
 8007114:	005b      	lsls	r3, r3, #1
 8007116:	4413      	add	r3, r2
 8007118:	00db      	lsls	r3, r3, #3
 800711a:	3350      	adds	r3, #80	@ 0x50
 800711c:	443b      	add	r3, r7
 800711e:	3b38      	subs	r3, #56	@ 0x38
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3b01      	subs	r3, #1
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	440b      	add	r3, r1
 8007128:	6859      	ldr	r1, [r3, #4]
 800712a:	489e      	ldr	r0, [pc, #632]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800712c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007130:	4613      	mov	r3, r2
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	4413      	add	r3, r2
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	3350      	adds	r3, #80	@ 0x50
 800713a:	443b      	add	r3, r7
 800713c:	3b38      	subs	r3, #56	@ 0x38
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3b01      	subs	r3, #1
 8007142:	f021 0210 	bic.w	r2, r1, #16
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	4403      	add	r3, r0
 800714a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800714c:	4995      	ldr	r1, [pc, #596]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800714e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007152:	4613      	mov	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	3350      	adds	r3, #80	@ 0x50
 800715c:	443b      	add	r3, r7
 800715e:	3b34      	subs	r3, #52	@ 0x34
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	440b      	add	r3, r1
 8007168:	6859      	ldr	r1, [r3, #4]
 800716a:	488e      	ldr	r0, [pc, #568]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800716c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007170:	4613      	mov	r3, r2
 8007172:	005b      	lsls	r3, r3, #1
 8007174:	4413      	add	r3, r2
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	3350      	adds	r3, #80	@ 0x50
 800717a:	443b      	add	r3, r7
 800717c:	3b34      	subs	r3, #52	@ 0x34
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	3b01      	subs	r3, #1
 8007182:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007186:	009b      	lsls	r3, r3, #2
 8007188:	4403      	add	r3, r0
 800718a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800718c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007190:	4613      	mov	r3, r2
 8007192:	005b      	lsls	r3, r3, #1
 8007194:	4413      	add	r3, r2
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	3350      	adds	r3, #80	@ 0x50
 800719a:	443b      	add	r3, r7
 800719c:	3b30      	subs	r3, #48	@ 0x30
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d023      	beq.n	80071ec <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80071a4:	497f      	ldr	r1, [pc, #508]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80071a6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071aa:	4613      	mov	r3, r2
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	4413      	add	r3, r2
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	3350      	adds	r3, #80	@ 0x50
 80071b4:	443b      	add	r3, r7
 80071b6:	3b30      	subs	r3, #48	@ 0x30
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	6859      	ldr	r1, [r3, #4]
 80071c6:	4877      	ldr	r0, [pc, #476]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80071c8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071cc:	4613      	mov	r3, r2
 80071ce:	005b      	lsls	r3, r3, #1
 80071d0:	4413      	add	r3, r2
 80071d2:	00db      	lsls	r3, r3, #3
 80071d4:	3350      	adds	r3, #80	@ 0x50
 80071d6:	443b      	add	r3, r7
 80071d8:	3b30      	subs	r3, #48	@ 0x30
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	3b01      	subs	r3, #1
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4403      	add	r3, r0
 80071ea:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80071ec:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071f0:	4613      	mov	r3, r2
 80071f2:	005b      	lsls	r3, r3, #1
 80071f4:	4413      	add	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	3350      	adds	r3, #80	@ 0x50
 80071fa:	443b      	add	r3, r7
 80071fc:	3b2c      	subs	r3, #44	@ 0x2c
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d023      	beq.n	800724c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007204:	4967      	ldr	r1, [pc, #412]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007206:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	00db      	lsls	r3, r3, #3
 8007212:	3350      	adds	r3, #80	@ 0x50
 8007214:	443b      	add	r3, r7
 8007216:	3b2c      	subs	r3, #44	@ 0x2c
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3b01      	subs	r3, #1
 800721c:	f003 0301 	and.w	r3, r3, #1
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	6859      	ldr	r1, [r3, #4]
 8007226:	485f      	ldr	r0, [pc, #380]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007228:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800722c:	4613      	mov	r3, r2
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	4413      	add	r3, r2
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	3350      	adds	r3, #80	@ 0x50
 8007236:	443b      	add	r3, r7
 8007238:	3b2c      	subs	r3, #44	@ 0x2c
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4403      	add	r3, r0
 800724a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800724c:	4a55      	ldr	r2, [pc, #340]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	3b01      	subs	r3, #1
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800725e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007260:	025b      	lsls	r3, r3, #9
 8007262:	431a      	orrs	r2, r3
 8007264:	494f      	ldr	r1, [pc, #316]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	3b01      	subs	r3, #1
 800726c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	1e5a      	subs	r2, r3, #1
 800727c:	4b49      	ldr	r3, [pc, #292]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	0c1b      	lsrs	r3, r3, #16
 8007282:	b2db      	uxtb	r3, r3
 8007284:	429a      	cmp	r2, r3
 8007286:	d90a      	bls.n	800729e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007288:	4b46      	ldr	r3, [pc, #280]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	3b01      	subs	r3, #1
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	4942      	ldr	r1, [pc, #264]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800729a:	4313      	orrs	r3, r2
 800729c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800729e:	4b41      	ldr	r3, [pc, #260]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	f000 809a 	beq.w	80073e0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80072ac:	4a3d      	ldr	r2, [pc, #244]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	4413      	add	r3, r2
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	4939      	ldr	r1, [pc, #228]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	f042 0201 	orr.w	r2, r2, #1
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d011      	beq.n	80072fc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80072d8:	4a32      	ldr	r2, [pc, #200]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	3b01      	subs	r3, #1
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	685b      	ldr	r3, [r3, #4]
 80072e6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80072ea:	492e      	ldr	r1, [pc, #184]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	3b01      	subs	r3, #1
 80072f2:	f042 0210 	orr.w	r2, r2, #16
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007304:	2b00      	cmp	r3, #0
 8007306:	d016      	beq.n	8007336 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007308:	4a26      	ldr	r2, [pc, #152]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	3b01      	subs	r3, #1
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800731e:	4921      	ldr	r1, [pc, #132]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	3b01      	subs	r3, #1
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	605a      	str	r2, [r3, #4]
 8007334:	e019      	b.n	800736a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d015      	beq.n	800736a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800733e:	4a19      	ldr	r2, [pc, #100]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	3b01      	subs	r3, #1
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007354:	4913      	ldr	r1, [pc, #76]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	3b01      	subs	r3, #1
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	440b      	add	r3, r1
 8007368:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007372:	2b00      	cmp	r3, #0
 8007374:	d018      	beq.n	80073a8 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007376:	4a0b      	ldr	r2, [pc, #44]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	3b01      	subs	r3, #1
 800737e:	f003 0301 	and.w	r3, r3, #1
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	4413      	add	r3, r2
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800738c:	4905      	ldr	r1, [pc, #20]	@ (80073a4 <HAL_OSPIM_Config+0x7fc>)
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	691b      	ldr	r3, [r3, #16]
 8007392:	3b01      	subs	r3, #1
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	440b      	add	r3, r1
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	e0c5      	b.n	8007530 <HAL_OSPIM_Config+0x988>
 80073a4:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f000 80bf 	beq.w	8007530 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073b2:	4a6e      	ldr	r2, [pc, #440]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	3b01      	subs	r3, #1
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80073c8:	4968      	ldr	r1, [pc, #416]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80073d8:	009b      	lsls	r3, r3, #2
 80073da:	440b      	add	r3, r1
 80073dc:	605a      	str	r2, [r3, #4]
 80073de:	e0a7      	b.n	8007530 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80073e0:	4a62      	ldr	r2, [pc, #392]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3b01      	subs	r3, #1
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f023 0203 	bic.w	r2, r3, #3
 80073f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	431a      	orrs	r2, r3
 80073f8:	495c      	ldr	r1, [pc, #368]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	3b01      	subs	r3, #1
 8007400:	f042 0201 	orr.w	r2, r2, #1
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d014      	beq.n	800743c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8007412:	4a56      	ldr	r2, [pc, #344]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	3b01      	subs	r3, #1
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007424:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007426:	015b      	lsls	r3, r3, #5
 8007428:	431a      	orrs	r2, r3
 800742a:	4950      	ldr	r1, [pc, #320]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	3b01      	subs	r3, #1
 8007432:	f042 0210 	orr.w	r2, r2, #16
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d019      	beq.n	800747c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007448:	4a48      	ldr	r2, [pc, #288]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	3b01      	subs	r3, #1
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800745e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007460:	049b      	lsls	r3, r3, #18
 8007462:	431a      	orrs	r2, r3
 8007464:	4941      	ldr	r1, [pc, #260]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	3b01      	subs	r3, #1
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	440b      	add	r3, r1
 8007478:	605a      	str	r2, [r3, #4]
 800747a:	e01c      	b.n	80074b6 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d018      	beq.n	80074b6 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007484:	4a39      	ldr	r2, [pc, #228]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	3b01      	subs	r3, #1
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800749a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800749c:	069b      	lsls	r3, r3, #26
 800749e:	431a      	orrs	r2, r3
 80074a0:	4932      	ldr	r1, [pc, #200]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	440b      	add	r3, r1
 80074b4:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d019      	beq.n	80074f6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074c2:	4a2a      	ldr	r2, [pc, #168]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80074d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074da:	049b      	lsls	r3, r3, #18
 80074dc:	431a      	orrs	r2, r3
 80074de:	4923      	ldr	r1, [pc, #140]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	605a      	str	r2, [r3, #4]
 80074f4:	e01c      	b.n	8007530 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d018      	beq.n	8007530 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074fe:	4a1b      	ldr	r2, [pc, #108]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	3b01      	subs	r3, #1
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007516:	069b      	lsls	r3, r3, #26
 8007518:	431a      	orrs	r2, r3
 800751a:	4914      	ldr	r1, [pc, #80]	@ (800756c <HAL_OSPIM_Config+0x9c4>)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	3b01      	subs	r3, #1
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	440b      	add	r3, r1
 800752e:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007530:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800753c:	4b0c      	ldr	r3, [pc, #48]	@ (8007570 <HAL_OSPIM_Config+0x9c8>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a0b      	ldr	r2, [pc, #44]	@ (8007570 <HAL_OSPIM_Config+0x9c8>)
 8007542:	f043 0301 	orr.w	r3, r3, #1
 8007546:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007548:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007554:	4b07      	ldr	r3, [pc, #28]	@ (8007574 <HAL_OSPIM_Config+0x9cc>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a06      	ldr	r2, [pc, #24]	@ (8007574 <HAL_OSPIM_Config+0x9cc>)
 800755a:	f043 0301 	orr.w	r3, r3, #1
 800755e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007560:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007564:	4618      	mov	r0, r3
 8007566:	3750      	adds	r7, #80	@ 0x50
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	5200b400 	.word	0x5200b400
 8007570:	52005000 	.word	0x52005000
 8007574:	5200a000 	.word	0x5200a000

08007578 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	4613      	mov	r3, r2
 8007586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007588:	e01a      	b.n	80075c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d016      	beq.n	80075c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007592:	f7fb fe71 	bl	8003278 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d302      	bcc.n	80075a8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80075ae:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b4:	f043 0201 	orr.w	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e00e      	b.n	80075de <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6a1a      	ldr	r2, [r3, #32]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	4013      	ands	r3, r2
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	bf14      	ite	ne
 80075ce:	2301      	movne	r3, #1
 80075d0:	2300      	moveq	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d1d6      	bne.n	800758a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	4603      	mov	r3, r0
 80075f0:	6039      	str	r1, [r7, #0]
 80075f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80075f4:	2300      	movs	r3, #0
 80075f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80075f8:	2300      	movs	r3, #0
 80075fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d005      	beq.n	800760e <OSPIM_GetConfig+0x26>
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d802      	bhi.n	800760e <OSPIM_GetConfig+0x26>
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d102      	bne.n	8007614 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
 8007612:	e098      	b.n	8007746 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	2200      	movs	r2, #0
 8007618:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2200      	movs	r2, #0
 800761e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2200      	movs	r2, #0
 800762a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007632:	79fb      	ldrb	r3, [r7, #7]
 8007634:	2b02      	cmp	r3, #2
 8007636:	d10b      	bne.n	8007650 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007638:	4b46      	ldr	r3, [pc, #280]	@ (8007754 <OSPIM_GetConfig+0x16c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b00      	cmp	r3, #0
 8007642:	d102      	bne.n	800764a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007644:	4b44      	ldr	r3, [pc, #272]	@ (8007758 <OSPIM_GetConfig+0x170>)
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	e002      	b.n	8007650 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800764a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800764e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007650:	2300      	movs	r3, #0
 8007652:	60fb      	str	r3, [r7, #12]
 8007654:	e074      	b.n	8007740 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007656:	4a3f      	ldr	r2, [pc, #252]	@ (8007754 <OSPIM_GetConfig+0x16c>)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800766c:	68ba      	ldr	r2, [r7, #8]
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	4053      	eors	r3, r2
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00a      	beq.n	80076a2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4053      	eors	r3, r2
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d103      	bne.n	80076a2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1c5a      	adds	r2, r3, #1
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00a      	beq.n	80076c2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80076ac:	68ba      	ldr	r2, [r7, #8]
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	4053      	eors	r3, r2
 80076b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d018      	beq.n	80076fe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80076cc:	68ba      	ldr	r2, [r7, #8]
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	4053      	eors	r3, r2
 80076d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d111      	bne.n	80076fe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d106      	bne.n	80076f2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	3301      	adds	r3, #1
 80076e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	60da      	str	r2, [r3, #12]
 80076f0:	e005      	b.n	80076fe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d018      	beq.n	800773a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	4053      	eors	r3, r2
 800770e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007712:	2b00      	cmp	r3, #0
 8007714:	d111      	bne.n	800773a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d106      	bne.n	800772e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	611a      	str	r2, [r3, #16]
 800772c:	e005      	b.n	800773a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d987      	bls.n	8007656 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007746:	7dfb      	ldrb	r3, [r7, #23]
}
 8007748:	4618      	mov	r0, r3
 800774a:	371c      	adds	r7, #28
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr
 8007754:	5200b400 	.word	0x5200b400
 8007758:	04040222 	.word	0x04040222

0800775c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007764:	4b29      	ldr	r3, [pc, #164]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0307 	and.w	r3, r3, #7
 800776c:	2b06      	cmp	r3, #6
 800776e:	d00a      	beq.n	8007786 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007770:	4b26      	ldr	r3, [pc, #152]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	429a      	cmp	r2, r3
 800777c:	d001      	beq.n	8007782 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
 8007780:	e03f      	b.n	8007802 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	e03d      	b.n	8007802 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007786:	4b21      	ldr	r3, [pc, #132]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800778e:	491f      	ldr	r1, [pc, #124]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4313      	orrs	r3, r2
 8007794:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007796:	f7fb fd6f 	bl	8003278 <HAL_GetTick>
 800779a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800779c:	e009      	b.n	80077b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800779e:	f7fb fd6b 	bl	8003278 <HAL_GetTick>
 80077a2:	4602      	mov	r2, r0
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ac:	d901      	bls.n	80077b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e027      	b.n	8007802 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077b2:	4b16      	ldr	r3, [pc, #88]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077be:	d1ee      	bne.n	800779e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b1e      	cmp	r3, #30
 80077c4:	d008      	beq.n	80077d8 <HAL_PWREx_ConfigSupply+0x7c>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80077ca:	d005      	beq.n	80077d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b1d      	cmp	r3, #29
 80077d0:	d002      	beq.n	80077d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80077d6:	d113      	bne.n	8007800 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80077d8:	f7fb fd4e 	bl	8003278 <HAL_GetTick>
 80077dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80077de:	e009      	b.n	80077f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077e0:	f7fb fd4a 	bl	8003278 <HAL_GetTick>
 80077e4:	4602      	mov	r2, r0
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ee:	d901      	bls.n	80077f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e006      	b.n	8007802 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80077f4:	4b05      	ldr	r3, [pc, #20]	@ (800780c <HAL_PWREx_ConfigSupply+0xb0>)
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f003 0311 	and.w	r3, r3, #17
 80077fc:	2b11      	cmp	r3, #17
 80077fe:	d1ef      	bne.n	80077e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	58024800 	.word	0x58024800

08007810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08c      	sub	sp, #48	@ 0x30
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	e3c8      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 8087 	beq.w	800793e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007830:	4b88      	ldr	r3, [pc, #544]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800783a:	4b86      	ldr	r3, [pc, #536]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800783c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007842:	2b10      	cmp	r3, #16
 8007844:	d007      	beq.n	8007856 <HAL_RCC_OscConfig+0x46>
 8007846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007848:	2b18      	cmp	r3, #24
 800784a:	d110      	bne.n	800786e <HAL_RCC_OscConfig+0x5e>
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	f003 0303 	and.w	r3, r3, #3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d10b      	bne.n	800786e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007856:	4b7f      	ldr	r3, [pc, #508]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800785e:	2b00      	cmp	r3, #0
 8007860:	d06c      	beq.n	800793c <HAL_RCC_OscConfig+0x12c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d168      	bne.n	800793c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e3a2      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007876:	d106      	bne.n	8007886 <HAL_RCC_OscConfig+0x76>
 8007878:	4b76      	ldr	r3, [pc, #472]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a75      	ldr	r2, [pc, #468]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800787e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	e02e      	b.n	80078e4 <HAL_RCC_OscConfig+0xd4>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10c      	bne.n	80078a8 <HAL_RCC_OscConfig+0x98>
 800788e:	4b71      	ldr	r3, [pc, #452]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a70      	ldr	r2, [pc, #448]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007894:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	4b6e      	ldr	r3, [pc, #440]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a6d      	ldr	r2, [pc, #436]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078a4:	6013      	str	r3, [r2, #0]
 80078a6:	e01d      	b.n	80078e4 <HAL_RCC_OscConfig+0xd4>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078b0:	d10c      	bne.n	80078cc <HAL_RCC_OscConfig+0xbc>
 80078b2:	4b68      	ldr	r3, [pc, #416]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a67      	ldr	r2, [pc, #412]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078bc:	6013      	str	r3, [r2, #0]
 80078be:	4b65      	ldr	r3, [pc, #404]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a64      	ldr	r2, [pc, #400]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	e00b      	b.n	80078e4 <HAL_RCC_OscConfig+0xd4>
 80078cc:	4b61      	ldr	r3, [pc, #388]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a60      	ldr	r2, [pc, #384]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	4b5e      	ldr	r3, [pc, #376]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a5d      	ldr	r2, [pc, #372]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80078de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d013      	beq.n	8007914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ec:	f7fb fcc4 	bl	8003278 <HAL_GetTick>
 80078f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078f2:	e008      	b.n	8007906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f4:	f7fb fcc0 	bl	8003278 <HAL_GetTick>
 80078f8:	4602      	mov	r2, r0
 80078fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fc:	1ad3      	subs	r3, r2, r3
 80078fe:	2b64      	cmp	r3, #100	@ 0x64
 8007900:	d901      	bls.n	8007906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007902:	2303      	movs	r3, #3
 8007904:	e356      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007906:	4b53      	ldr	r3, [pc, #332]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d0f0      	beq.n	80078f4 <HAL_RCC_OscConfig+0xe4>
 8007912:	e014      	b.n	800793e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007914:	f7fb fcb0 	bl	8003278 <HAL_GetTick>
 8007918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800791a:	e008      	b.n	800792e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800791c:	f7fb fcac 	bl	8003278 <HAL_GetTick>
 8007920:	4602      	mov	r2, r0
 8007922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	2b64      	cmp	r3, #100	@ 0x64
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e342      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800792e:	4b49      	ldr	r3, [pc, #292]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f0      	bne.n	800791c <HAL_RCC_OscConfig+0x10c>
 800793a:	e000      	b.n	800793e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800793c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	f000 808c 	beq.w	8007a64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800794c:	4b41      	ldr	r3, [pc, #260]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007954:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007956:	4b3f      	ldr	r3, [pc, #252]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d007      	beq.n	8007972 <HAL_RCC_OscConfig+0x162>
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	2b18      	cmp	r3, #24
 8007966:	d137      	bne.n	80079d8 <HAL_RCC_OscConfig+0x1c8>
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	f003 0303 	and.w	r3, r3, #3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d132      	bne.n	80079d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007972:	4b38      	ldr	r3, [pc, #224]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d005      	beq.n	800798a <HAL_RCC_OscConfig+0x17a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e314      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800798a:	4b32      	ldr	r3, [pc, #200]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f023 0219 	bic.w	r2, r3, #25
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	492f      	ldr	r1, [pc, #188]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007998:	4313      	orrs	r3, r2
 800799a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fb fc6c 	bl	8003278 <HAL_GetTick>
 80079a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a4:	f7fb fc68 	bl	8003278 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e2fe      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b6:	4b27      	ldr	r3, [pc, #156]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f0      	beq.n	80079a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c2:	4b24      	ldr	r3, [pc, #144]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	061b      	lsls	r3, r3, #24
 80079d0:	4920      	ldr	r1, [pc, #128]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079d6:	e045      	b.n	8007a64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d026      	beq.n	8007a2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f023 0219 	bic.w	r2, r3, #25
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	4919      	ldr	r1, [pc, #100]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f2:	f7fb fc41 	bl	8003278 <HAL_GetTick>
 80079f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079fa:	f7fb fc3d 	bl	8003278 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e2d3      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a0c:	4b11      	ldr	r3, [pc, #68]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a18:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	061b      	lsls	r3, r3, #24
 8007a26:	490b      	ldr	r1, [pc, #44]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]
 8007a2c:	e01a      	b.n	8007a64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a2e:	4b09      	ldr	r3, [pc, #36]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a08      	ldr	r2, [pc, #32]	@ (8007a54 <HAL_RCC_OscConfig+0x244>)
 8007a34:	f023 0301 	bic.w	r3, r3, #1
 8007a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a3a:	f7fb fc1d 	bl	8003278 <HAL_GetTick>
 8007a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a40:	e00a      	b.n	8007a58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a42:	f7fb fc19 	bl	8003278 <HAL_GetTick>
 8007a46:	4602      	mov	r2, r0
 8007a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a4a:	1ad3      	subs	r3, r2, r3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d903      	bls.n	8007a58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e2af      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
 8007a54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a58:	4b96      	ldr	r3, [pc, #600]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0304 	and.w	r3, r3, #4
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1ee      	bne.n	8007a42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0310 	and.w	r3, r3, #16
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d06a      	beq.n	8007b46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a70:	4b90      	ldr	r3, [pc, #576]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a7a:	4b8e      	ldr	r3, [pc, #568]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	2b08      	cmp	r3, #8
 8007a84:	d007      	beq.n	8007a96 <HAL_RCC_OscConfig+0x286>
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	2b18      	cmp	r3, #24
 8007a8a:	d11b      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x2b4>
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d116      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a96:	4b87      	ldr	r3, [pc, #540]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_RCC_OscConfig+0x29e>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	2b80      	cmp	r3, #128	@ 0x80
 8007aa8:	d001      	beq.n	8007aae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e282      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aae:	4b81      	ldr	r3, [pc, #516]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	061b      	lsls	r3, r3, #24
 8007abc:	497d      	ldr	r1, [pc, #500]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ac2:	e040      	b.n	8007b46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	69db      	ldr	r3, [r3, #28]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d023      	beq.n	8007b14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007acc:	4b79      	ldr	r3, [pc, #484]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a78      	ldr	r2, [pc, #480]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7fb fbce 	bl	8003278 <HAL_GetTick>
 8007adc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ae0:	f7fb fbca 	bl	8003278 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e260      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007af2:	4b70      	ldr	r3, [pc, #448]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0f0      	beq.n	8007ae0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007afe:	4b6d      	ldr	r3, [pc, #436]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	061b      	lsls	r3, r3, #24
 8007b0c:	4969      	ldr	r1, [pc, #420]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60cb      	str	r3, [r1, #12]
 8007b12:	e018      	b.n	8007b46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007b14:	4b67      	ldr	r3, [pc, #412]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a66      	ldr	r2, [pc, #408]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fb fbaa 	bl	8003278 <HAL_GetTick>
 8007b24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007b28:	f7fb fba6 	bl	8003278 <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e23c      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007b3a:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1f0      	bne.n	8007b28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0308 	and.w	r3, r3, #8
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d036      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d019      	beq.n	8007b8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b5a:	4b56      	ldr	r3, [pc, #344]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b5e:	4a55      	ldr	r2, [pc, #340]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b60:	f043 0301 	orr.w	r3, r3, #1
 8007b64:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b66:	f7fb fb87 	bl	8003278 <HAL_GetTick>
 8007b6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b6c:	e008      	b.n	8007b80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b6e:	f7fb fb83 	bl	8003278 <HAL_GetTick>
 8007b72:	4602      	mov	r2, r0
 8007b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d901      	bls.n	8007b80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007b7c:	2303      	movs	r3, #3
 8007b7e:	e219      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b80:	4b4c      	ldr	r3, [pc, #304]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d0f0      	beq.n	8007b6e <HAL_RCC_OscConfig+0x35e>
 8007b8c:	e018      	b.n	8007bc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b8e:	4b49      	ldr	r3, [pc, #292]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b92:	4a48      	ldr	r2, [pc, #288]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007b94:	f023 0301 	bic.w	r3, r3, #1
 8007b98:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b9a:	f7fb fb6d 	bl	8003278 <HAL_GetTick>
 8007b9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ba0:	e008      	b.n	8007bb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ba2:	f7fb fb69 	bl	8003278 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d901      	bls.n	8007bb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e1ff      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007bb4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007bb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1f0      	bne.n	8007ba2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d036      	beq.n	8007c3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d019      	beq.n	8007c08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bd4:	4b37      	ldr	r3, [pc, #220]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a36      	ldr	r2, [pc, #216]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007bda:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007bde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007be0:	f7fb fb4a 	bl	8003278 <HAL_GetTick>
 8007be4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be8:	f7fb fb46 	bl	8003278 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e1dc      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bfa:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0f0      	beq.n	8007be8 <HAL_RCC_OscConfig+0x3d8>
 8007c06:	e018      	b.n	8007c3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c08:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a29      	ldr	r2, [pc, #164]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c14:	f7fb fb30 	bl	8003278 <HAL_GetTick>
 8007c18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c1a:	e008      	b.n	8007c2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c1c:	f7fb fb2c 	bl	8003278 <HAL_GetTick>
 8007c20:	4602      	mov	r2, r0
 8007c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d901      	bls.n	8007c2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e1c2      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007c2e:	4b21      	ldr	r3, [pc, #132]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1f0      	bne.n	8007c1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0304 	and.w	r3, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8086 	beq.w	8007d54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c48:	4b1b      	ldr	r3, [pc, #108]	@ (8007cb8 <HAL_RCC_OscConfig+0x4a8>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007cb8 <HAL_RCC_OscConfig+0x4a8>)
 8007c4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c54:	f7fb fb10 	bl	8003278 <HAL_GetTick>
 8007c58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c5c:	f7fb fb0c 	bl	8003278 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b64      	cmp	r3, #100	@ 0x64
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e1a2      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c6e:	4b12      	ldr	r3, [pc, #72]	@ (8007cb8 <HAL_RCC_OscConfig+0x4a8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d106      	bne.n	8007c90 <HAL_RCC_OscConfig+0x480>
 8007c82:	4b0c      	ldr	r3, [pc, #48]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c86:	4a0b      	ldr	r2, [pc, #44]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c8e:	e032      	b.n	8007cf6 <HAL_RCC_OscConfig+0x4e6>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d111      	bne.n	8007cbc <HAL_RCC_OscConfig+0x4ac>
 8007c98:	4b06      	ldr	r3, [pc, #24]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9c:	4a05      	ldr	r2, [pc, #20]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007c9e:	f023 0301 	bic.w	r3, r3, #1
 8007ca2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca4:	4b03      	ldr	r3, [pc, #12]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ca8:	4a02      	ldr	r2, [pc, #8]	@ (8007cb4 <HAL_RCC_OscConfig+0x4a4>)
 8007caa:	f023 0304 	bic.w	r3, r3, #4
 8007cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb0:	e021      	b.n	8007cf6 <HAL_RCC_OscConfig+0x4e6>
 8007cb2:	bf00      	nop
 8007cb4:	58024400 	.word	0x58024400
 8007cb8:	58024800 	.word	0x58024800
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	2b05      	cmp	r3, #5
 8007cc2:	d10c      	bne.n	8007cde <HAL_RCC_OscConfig+0x4ce>
 8007cc4:	4b83      	ldr	r3, [pc, #524]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc8:	4a82      	ldr	r2, [pc, #520]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cca:	f043 0304 	orr.w	r3, r3, #4
 8007cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cd0:	4b80      	ldr	r3, [pc, #512]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd4:	4a7f      	ldr	r2, [pc, #508]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cd6:	f043 0301 	orr.w	r3, r3, #1
 8007cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cdc:	e00b      	b.n	8007cf6 <HAL_RCC_OscConfig+0x4e6>
 8007cde:	4b7d      	ldr	r3, [pc, #500]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cea:	4b7a      	ldr	r3, [pc, #488]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cee:	4a79      	ldr	r2, [pc, #484]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007cf0:	f023 0304 	bic.w	r3, r3, #4
 8007cf4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d015      	beq.n	8007d2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfe:	f7fb fabb 	bl	8003278 <HAL_GetTick>
 8007d02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d04:	e00a      	b.n	8007d1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d06:	f7fb fab7 	bl	8003278 <HAL_GetTick>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0e:	1ad3      	subs	r3, r2, r3
 8007d10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e14b      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d1c:	4b6d      	ldr	r3, [pc, #436]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0ee      	beq.n	8007d06 <HAL_RCC_OscConfig+0x4f6>
 8007d28:	e014      	b.n	8007d54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d2a:	f7fb faa5 	bl	8003278 <HAL_GetTick>
 8007d2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d30:	e00a      	b.n	8007d48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d32:	f7fb faa1 	bl	8003278 <HAL_GetTick>
 8007d36:	4602      	mov	r2, r0
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e135      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d48:	4b62      	ldr	r3, [pc, #392]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d4c:	f003 0302 	and.w	r3, r3, #2
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1ee      	bne.n	8007d32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	f000 812a 	beq.w	8007fb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d66:	2b18      	cmp	r3, #24
 8007d68:	f000 80ba 	beq.w	8007ee0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	f040 8095 	bne.w	8007ea0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d76:	4b57      	ldr	r3, [pc, #348]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a56      	ldr	r2, [pc, #344]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d82:	f7fb fa79 	bl	8003278 <HAL_GetTick>
 8007d86:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d88:	e008      	b.n	8007d9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d8a:	f7fb fa75 	bl	8003278 <HAL_GetTick>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	2b02      	cmp	r3, #2
 8007d96:	d901      	bls.n	8007d9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007d98:	2303      	movs	r3, #3
 8007d9a:	e10b      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1f0      	bne.n	8007d8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007da8:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007daa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dac:	4b4a      	ldr	r3, [pc, #296]	@ (8007ed8 <HAL_RCC_OscConfig+0x6c8>)
 8007dae:	4013      	ands	r3, r2
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007db8:	0112      	lsls	r2, r2, #4
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	4945      	ldr	r1, [pc, #276]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	628b      	str	r3, [r1, #40]	@ 0x28
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	025b      	lsls	r3, r3, #9
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	041b      	lsls	r3, r3, #16
 8007de0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dea:	3b01      	subs	r3, #1
 8007dec:	061b      	lsls	r3, r3, #24
 8007dee:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007df2:	4938      	ldr	r1, [pc, #224]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007df8:	4b36      	ldr	r3, [pc, #216]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	4a35      	ldr	r2, [pc, #212]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007dfe:	f023 0301 	bic.w	r3, r3, #1
 8007e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e04:	4b33      	ldr	r3, [pc, #204]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e08:	4b34      	ldr	r3, [pc, #208]	@ (8007edc <HAL_RCC_OscConfig+0x6cc>)
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007e10:	00d2      	lsls	r2, r2, #3
 8007e12:	4930      	ldr	r1, [pc, #192]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e14:	4313      	orrs	r3, r2
 8007e16:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007e18:	4b2e      	ldr	r3, [pc, #184]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1c:	f023 020c 	bic.w	r2, r3, #12
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e24:	492b      	ldr	r1, [pc, #172]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e26:	4313      	orrs	r3, r2
 8007e28:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2e:	f023 0202 	bic.w	r2, r3, #2
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e36:	4927      	ldr	r1, [pc, #156]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007e3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e40:	4a24      	ldr	r2, [pc, #144]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e48:	4b22      	ldr	r3, [pc, #136]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e4c:	4a21      	ldr	r2, [pc, #132]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e54:	4b1f      	ldr	r3, [pc, #124]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e58:	4a1e      	ldr	r2, [pc, #120]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e5a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e60:	4b1c      	ldr	r3, [pc, #112]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e64:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e66:	f043 0301 	orr.w	r3, r3, #1
 8007e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e6c:	4b19      	ldr	r3, [pc, #100]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a18      	ldr	r2, [pc, #96]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e78:	f7fb f9fe 	bl	8003278 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e80:	f7fb f9fa 	bl	8003278 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e090      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e92:	4b10      	ldr	r3, [pc, #64]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d0f0      	beq.n	8007e80 <HAL_RCC_OscConfig+0x670>
 8007e9e:	e088      	b.n	8007fb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a0b      	ldr	r2, [pc, #44]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007ea6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eac:	f7fb f9e4 	bl	8003278 <HAL_GetTick>
 8007eb0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb4:	f7fb f9e0 	bl	8003278 <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e076      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ec6:	4b03      	ldr	r3, [pc, #12]	@ (8007ed4 <HAL_RCC_OscConfig+0x6c4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1f0      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x6a4>
 8007ed2:	e06e      	b.n	8007fb2 <HAL_RCC_OscConfig+0x7a2>
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	fffffc0c 	.word	0xfffffc0c
 8007edc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007ee0:	4b36      	ldr	r3, [pc, #216]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ee6:	4b35      	ldr	r3, [pc, #212]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d031      	beq.n	8007f58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ef4:	693b      	ldr	r3, [r7, #16]
 8007ef6:	f003 0203 	and.w	r2, r3, #3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d12a      	bne.n	8007f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	091b      	lsrs	r3, r3, #4
 8007f06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d122      	bne.n	8007f58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d11a      	bne.n	8007f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	0a5b      	lsrs	r3, r3, #9
 8007f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d111      	bne.n	8007f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	0c1b      	lsrs	r3, r3, #16
 8007f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d108      	bne.n	8007f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	0e1b      	lsrs	r3, r3, #24
 8007f4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d001      	beq.n	8007f5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e02b      	b.n	8007fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f5c:	4b17      	ldr	r3, [pc, #92]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f60:	08db      	lsrs	r3, r3, #3
 8007f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d01f      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f72:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	4a11      	ldr	r2, [pc, #68]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007f78:	f023 0301 	bic.w	r3, r3, #1
 8007f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f7e:	f7fb f97b 	bl	8003278 <HAL_GetTick>
 8007f82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f84:	bf00      	nop
 8007f86:	f7fb f977 	bl	8003278 <HAL_GetTick>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d0f9      	beq.n	8007f86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f92:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f96:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc0 <HAL_RCC_OscConfig+0x7b0>)
 8007f98:	4013      	ands	r3, r2
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f9e:	00d2      	lsls	r2, r2, #3
 8007fa0:	4906      	ldr	r1, [pc, #24]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007faa:	4a04      	ldr	r2, [pc, #16]	@ (8007fbc <HAL_RCC_OscConfig+0x7ac>)
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3730      	adds	r7, #48	@ 0x30
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	58024400 	.word	0x58024400
 8007fc0:	ffff0007 	.word	0xffff0007

08007fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e19c      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd8:	4b8a      	ldr	r3, [pc, #552]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 030f 	and.w	r3, r3, #15
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d910      	bls.n	8008008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe6:	4b87      	ldr	r3, [pc, #540]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f023 020f 	bic.w	r2, r3, #15
 8007fee:	4985      	ldr	r1, [pc, #532]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff6:	4b83      	ldr	r3, [pc, #524]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 030f 	and.w	r3, r3, #15
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d001      	beq.n	8008008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e184      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 0304 	and.w	r3, r3, #4
 8008010:	2b00      	cmp	r3, #0
 8008012:	d010      	beq.n	8008036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691a      	ldr	r2, [r3, #16]
 8008018:	4b7b      	ldr	r3, [pc, #492]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008020:	429a      	cmp	r2, r3
 8008022:	d908      	bls.n	8008036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008024:	4b78      	ldr	r3, [pc, #480]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	4975      	ldr	r1, [pc, #468]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008032:	4313      	orrs	r3, r2
 8008034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d010      	beq.n	8008064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	695a      	ldr	r2, [r3, #20]
 8008046:	4b70      	ldr	r3, [pc, #448]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008048:	69db      	ldr	r3, [r3, #28]
 800804a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800804e:	429a      	cmp	r2, r3
 8008050:	d908      	bls.n	8008064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008052:	4b6d      	ldr	r3, [pc, #436]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008054:	69db      	ldr	r3, [r3, #28]
 8008056:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	496a      	ldr	r1, [pc, #424]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008060:	4313      	orrs	r3, r2
 8008062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f003 0310 	and.w	r3, r3, #16
 800806c:	2b00      	cmp	r3, #0
 800806e:	d010      	beq.n	8008092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	4b64      	ldr	r3, [pc, #400]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800807c:	429a      	cmp	r2, r3
 800807e:	d908      	bls.n	8008092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008080:	4b61      	ldr	r3, [pc, #388]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	495e      	ldr	r1, [pc, #376]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 800808e:	4313      	orrs	r3, r2
 8008090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0320 	and.w	r3, r3, #32
 800809a:	2b00      	cmp	r3, #0
 800809c:	d010      	beq.n	80080c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69da      	ldr	r2, [r3, #28]
 80080a2:	4b59      	ldr	r3, [pc, #356]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d908      	bls.n	80080c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80080ae:	4b56      	ldr	r3, [pc, #344]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	4953      	ldr	r1, [pc, #332]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d010      	beq.n	80080ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68da      	ldr	r2, [r3, #12]
 80080d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	f003 030f 	and.w	r3, r3, #15
 80080d8:	429a      	cmp	r2, r3
 80080da:	d908      	bls.n	80080ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080dc:	4b4a      	ldr	r3, [pc, #296]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f023 020f 	bic.w	r2, r3, #15
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	4947      	ldr	r1, [pc, #284]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080ea:	4313      	orrs	r3, r2
 80080ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d055      	beq.n	80081a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080fa:	4b43      	ldr	r3, [pc, #268]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	4940      	ldr	r1, [pc, #256]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008108:	4313      	orrs	r3, r2
 800810a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	2b02      	cmp	r3, #2
 8008112:	d107      	bne.n	8008124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008114:	4b3c      	ldr	r3, [pc, #240]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d121      	bne.n	8008164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0f6      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d107      	bne.n	800813c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800812c:	4b36      	ldr	r3, [pc, #216]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008134:	2b00      	cmp	r3, #0
 8008136:	d115      	bne.n	8008164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0ea      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d107      	bne.n	8008154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008144:	4b30      	ldr	r3, [pc, #192]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800814c:	2b00      	cmp	r3, #0
 800814e:	d109      	bne.n	8008164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	e0de      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008154:	4b2c      	ldr	r3, [pc, #176]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d101      	bne.n	8008164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e0d6      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008164:	4b28      	ldr	r3, [pc, #160]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008166:	691b      	ldr	r3, [r3, #16]
 8008168:	f023 0207 	bic.w	r2, r3, #7
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	4925      	ldr	r1, [pc, #148]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008172:	4313      	orrs	r3, r2
 8008174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008176:	f7fb f87f 	bl	8003278 <HAL_GetTick>
 800817a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800817c:	e00a      	b.n	8008194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800817e:	f7fb f87b 	bl	8003278 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e0be      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008194:	4b1c      	ldr	r3, [pc, #112]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d1eb      	bne.n	800817e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d010      	beq.n	80081d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	4b14      	ldr	r3, [pc, #80]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	f003 030f 	and.w	r3, r3, #15
 80081be:	429a      	cmp	r2, r3
 80081c0:	d208      	bcs.n	80081d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081c2:	4b11      	ldr	r3, [pc, #68]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f023 020f 	bic.w	r2, r3, #15
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	490e      	ldr	r1, [pc, #56]	@ (8008208 <HAL_RCC_ClockConfig+0x244>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80081d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f003 030f 	and.w	r3, r3, #15
 80081dc:	683a      	ldr	r2, [r7, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d214      	bcs.n	800820c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081e2:	4b08      	ldr	r3, [pc, #32]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f023 020f 	bic.w	r2, r3, #15
 80081ea:	4906      	ldr	r1, [pc, #24]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081f2:	4b04      	ldr	r3, [pc, #16]	@ (8008204 <HAL_RCC_ClockConfig+0x240>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 030f 	and.w	r3, r3, #15
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d005      	beq.n	800820c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e086      	b.n	8008312 <HAL_RCC_ClockConfig+0x34e>
 8008204:	52002000 	.word	0x52002000
 8008208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0304 	and.w	r3, r3, #4
 8008214:	2b00      	cmp	r3, #0
 8008216:	d010      	beq.n	800823a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	691a      	ldr	r2, [r3, #16]
 800821c:	4b3f      	ldr	r3, [pc, #252]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008224:	429a      	cmp	r2, r3
 8008226:	d208      	bcs.n	800823a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008228:	4b3c      	ldr	r3, [pc, #240]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	4939      	ldr	r1, [pc, #228]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 8008236:	4313      	orrs	r3, r2
 8008238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d010      	beq.n	8008268 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	695a      	ldr	r2, [r3, #20]
 800824a:	4b34      	ldr	r3, [pc, #208]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 800824c:	69db      	ldr	r3, [r3, #28]
 800824e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008252:	429a      	cmp	r2, r3
 8008254:	d208      	bcs.n	8008268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008256:	4b31      	ldr	r3, [pc, #196]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 8008258:	69db      	ldr	r3, [r3, #28]
 800825a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	492e      	ldr	r1, [pc, #184]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 8008264:	4313      	orrs	r3, r2
 8008266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	d010      	beq.n	8008296 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	4b28      	ldr	r3, [pc, #160]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 800827a:	69db      	ldr	r3, [r3, #28]
 800827c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008280:	429a      	cmp	r2, r3
 8008282:	d208      	bcs.n	8008296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008284:	4b25      	ldr	r3, [pc, #148]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	699b      	ldr	r3, [r3, #24]
 8008290:	4922      	ldr	r1, [pc, #136]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 8008292:	4313      	orrs	r3, r2
 8008294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0320 	and.w	r3, r3, #32
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	69da      	ldr	r2, [r3, #28]
 80082a6:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d208      	bcs.n	80082c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082b2:	4b1a      	ldr	r3, [pc, #104]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 80082b4:	6a1b      	ldr	r3, [r3, #32]
 80082b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	4917      	ldr	r1, [pc, #92]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 80082c0:	4313      	orrs	r3, r2
 80082c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80082c4:	f000 f834 	bl	8008330 <HAL_RCC_GetSysClockFreq>
 80082c8:	4602      	mov	r2, r0
 80082ca:	4b14      	ldr	r3, [pc, #80]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	0a1b      	lsrs	r3, r3, #8
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	4912      	ldr	r1, [pc, #72]	@ (8008320 <HAL_RCC_ClockConfig+0x35c>)
 80082d6:	5ccb      	ldrb	r3, [r1, r3]
 80082d8:	f003 031f 	and.w	r3, r3, #31
 80082dc:	fa22 f303 	lsr.w	r3, r2, r3
 80082e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80082e2:	4b0e      	ldr	r3, [pc, #56]	@ (800831c <HAL_RCC_ClockConfig+0x358>)
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	4a0d      	ldr	r2, [pc, #52]	@ (8008320 <HAL_RCC_ClockConfig+0x35c>)
 80082ec:	5cd3      	ldrb	r3, [r2, r3]
 80082ee:	f003 031f 	and.w	r3, r3, #31
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	fa22 f303 	lsr.w	r3, r2, r3
 80082f8:	4a0a      	ldr	r2, [pc, #40]	@ (8008324 <HAL_RCC_ClockConfig+0x360>)
 80082fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082fc:	4a0a      	ldr	r2, [pc, #40]	@ (8008328 <HAL_RCC_ClockConfig+0x364>)
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008302:	4b0a      	ldr	r3, [pc, #40]	@ (800832c <HAL_RCC_ClockConfig+0x368>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f7fa f978 	bl	80025fc <HAL_InitTick>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3718      	adds	r7, #24
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	58024400 	.word	0x58024400
 8008320:	080132b4 	.word	0x080132b4
 8008324:	24000004 	.word	0x24000004
 8008328:	24000000 	.word	0x24000000
 800832c:	24000008 	.word	0x24000008

08008330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008330:	b480      	push	{r7}
 8008332:	b089      	sub	sp, #36	@ 0x24
 8008334:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008336:	4bb3      	ldr	r3, [pc, #716]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800833e:	2b18      	cmp	r3, #24
 8008340:	f200 8155 	bhi.w	80085ee <HAL_RCC_GetSysClockFreq+0x2be>
 8008344:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834a:	bf00      	nop
 800834c:	080083b1 	.word	0x080083b1
 8008350:	080085ef 	.word	0x080085ef
 8008354:	080085ef 	.word	0x080085ef
 8008358:	080085ef 	.word	0x080085ef
 800835c:	080085ef 	.word	0x080085ef
 8008360:	080085ef 	.word	0x080085ef
 8008364:	080085ef 	.word	0x080085ef
 8008368:	080085ef 	.word	0x080085ef
 800836c:	080083d7 	.word	0x080083d7
 8008370:	080085ef 	.word	0x080085ef
 8008374:	080085ef 	.word	0x080085ef
 8008378:	080085ef 	.word	0x080085ef
 800837c:	080085ef 	.word	0x080085ef
 8008380:	080085ef 	.word	0x080085ef
 8008384:	080085ef 	.word	0x080085ef
 8008388:	080085ef 	.word	0x080085ef
 800838c:	080083dd 	.word	0x080083dd
 8008390:	080085ef 	.word	0x080085ef
 8008394:	080085ef 	.word	0x080085ef
 8008398:	080085ef 	.word	0x080085ef
 800839c:	080085ef 	.word	0x080085ef
 80083a0:	080085ef 	.word	0x080085ef
 80083a4:	080085ef 	.word	0x080085ef
 80083a8:	080085ef 	.word	0x080085ef
 80083ac:	080083e3 	.word	0x080083e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083b0:	4b94      	ldr	r3, [pc, #592]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0320 	and.w	r3, r3, #32
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d009      	beq.n	80083d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80083bc:	4b91      	ldr	r3, [pc, #580]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	08db      	lsrs	r3, r3, #3
 80083c2:	f003 0303 	and.w	r3, r3, #3
 80083c6:	4a90      	ldr	r2, [pc, #576]	@ (8008608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083c8:	fa22 f303 	lsr.w	r3, r2, r3
 80083cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80083ce:	e111      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80083d0:	4b8d      	ldr	r3, [pc, #564]	@ (8008608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80083d2:	61bb      	str	r3, [r7, #24]
      break;
 80083d4:	e10e      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80083d6:	4b8d      	ldr	r3, [pc, #564]	@ (800860c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80083d8:	61bb      	str	r3, [r7, #24]
      break;
 80083da:	e10b      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80083dc:	4b8c      	ldr	r3, [pc, #560]	@ (8008610 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80083de:	61bb      	str	r3, [r7, #24]
      break;
 80083e0:	e108      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083e2:	4b88      	ldr	r3, [pc, #544]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e6:	f003 0303 	and.w	r3, r3, #3
 80083ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083ec:	4b85      	ldr	r3, [pc, #532]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f0:	091b      	lsrs	r3, r3, #4
 80083f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083f8:	4b82      	ldr	r3, [pc, #520]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083fc:	f003 0301 	and.w	r3, r3, #1
 8008400:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008402:	4b80      	ldr	r3, [pc, #512]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008406:	08db      	lsrs	r3, r3, #3
 8008408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	fb02 f303 	mul.w	r3, r2, r3
 8008412:	ee07 3a90 	vmov	s15, r3
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800841e:	693b      	ldr	r3, [r7, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	f000 80e1 	beq.w	80085e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2b02      	cmp	r3, #2
 800842a:	f000 8083 	beq.w	8008534 <HAL_RCC_GetSysClockFreq+0x204>
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b02      	cmp	r3, #2
 8008432:	f200 80a1 	bhi.w	8008578 <HAL_RCC_GetSysClockFreq+0x248>
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_RCC_GetSysClockFreq+0x114>
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d056      	beq.n	80084f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008442:	e099      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008444:	4b6f      	ldr	r3, [pc, #444]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0320 	and.w	r3, r3, #32
 800844c:	2b00      	cmp	r3, #0
 800844e:	d02d      	beq.n	80084ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008450:	4b6c      	ldr	r3, [pc, #432]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	08db      	lsrs	r3, r3, #3
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	4a6b      	ldr	r2, [pc, #428]	@ (8008608 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800845c:	fa22 f303 	lsr.w	r3, r2, r3
 8008460:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	ee07 3a90 	vmov	s15, r3
 8008468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	ee07 3a90 	vmov	s15, r3
 8008472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	4b62      	ldr	r3, [pc, #392]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a02 	vldr	s12, [r7, #8]
 800848e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008614 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80084aa:	e087      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008618 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084be:	4b51      	ldr	r3, [pc, #324]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80084d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084ee:	e065      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800861c <HAL_RCC_GetSysClockFreq+0x2ec>
 80084fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008502:	4b40      	ldr	r3, [pc, #256]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008512:	ed97 6a02 	vldr	s12, [r7, #8]
 8008516:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800851a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008532:	e043      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008620 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008546:	4b2f      	ldr	r3, [pc, #188]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008556:	ed97 6a02 	vldr	s12, [r7, #8]
 800855a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008614 <HAL_RCC_GetSysClockFreq+0x2e4>
 800855e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800856a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008576:	e021      	b.n	80085bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008582:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800861c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800858a:	4b1e      	ldr	r3, [pc, #120]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800858c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008592:	ee07 3a90 	vmov	s15, r3
 8008596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800859a:	ed97 6a02 	vldr	s12, [r7, #8]
 800859e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008614 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80085bc:	4b11      	ldr	r3, [pc, #68]	@ (8008604 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c0:	0a5b      	lsrs	r3, r3, #9
 80085c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c6:	3301      	adds	r3, #1
 80085c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	ee07 3a90 	vmov	s15, r3
 80085d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80085d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80085d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e0:	ee17 3a90 	vmov	r3, s15
 80085e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085e6:	e005      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61bb      	str	r3, [r7, #24]
      break;
 80085ec:	e002      	b.n	80085f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085ee:	4b07      	ldr	r3, [pc, #28]	@ (800860c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085f0:	61bb      	str	r3, [r7, #24]
      break;
 80085f2:	bf00      	nop
  }

  return sysclockfreq;
 80085f4:	69bb      	ldr	r3, [r7, #24]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3724      	adds	r7, #36	@ 0x24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	58024400 	.word	0x58024400
 8008608:	03d09000 	.word	0x03d09000
 800860c:	003d0900 	.word	0x003d0900
 8008610:	017d7840 	.word	0x017d7840
 8008614:	46000000 	.word	0x46000000
 8008618:	4c742400 	.word	0x4c742400
 800861c:	4a742400 	.word	0x4a742400
 8008620:	4bbebc20 	.word	0x4bbebc20

08008624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b082      	sub	sp, #8
 8008628:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800862a:	f7ff fe81 	bl	8008330 <HAL_RCC_GetSysClockFreq>
 800862e:	4602      	mov	r2, r0
 8008630:	4b10      	ldr	r3, [pc, #64]	@ (8008674 <HAL_RCC_GetHCLKFreq+0x50>)
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	490f      	ldr	r1, [pc, #60]	@ (8008678 <HAL_RCC_GetHCLKFreq+0x54>)
 800863c:	5ccb      	ldrb	r3, [r1, r3]
 800863e:	f003 031f 	and.w	r3, r3, #31
 8008642:	fa22 f303 	lsr.w	r3, r2, r3
 8008646:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008648:	4b0a      	ldr	r3, [pc, #40]	@ (8008674 <HAL_RCC_GetHCLKFreq+0x50>)
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	4a09      	ldr	r2, [pc, #36]	@ (8008678 <HAL_RCC_GetHCLKFreq+0x54>)
 8008652:	5cd3      	ldrb	r3, [r2, r3]
 8008654:	f003 031f 	and.w	r3, r3, #31
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	fa22 f303 	lsr.w	r3, r2, r3
 800865e:	4a07      	ldr	r2, [pc, #28]	@ (800867c <HAL_RCC_GetHCLKFreq+0x58>)
 8008660:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008662:	4a07      	ldr	r2, [pc, #28]	@ (8008680 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008668:	4b04      	ldr	r3, [pc, #16]	@ (800867c <HAL_RCC_GetHCLKFreq+0x58>)
 800866a:	681b      	ldr	r3, [r3, #0]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	58024400 	.word	0x58024400
 8008678:	080132b4 	.word	0x080132b4
 800867c:	24000004 	.word	0x24000004
 8008680:	24000000 	.word	0x24000000

08008684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008688:	f7ff ffcc 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800868c:	4602      	mov	r2, r0
 800868e:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	f003 0307 	and.w	r3, r3, #7
 8008698:	4904      	ldr	r1, [pc, #16]	@ (80086ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800869a:	5ccb      	ldrb	r3, [r1, r3]
 800869c:	f003 031f 	and.w	r3, r3, #31
 80086a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	58024400 	.word	0x58024400
 80086ac:	080132b4 	.word	0x080132b4

080086b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086b4:	f7ff ffb6 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 80086b8:	4602      	mov	r2, r0
 80086ba:	4b06      	ldr	r3, [pc, #24]	@ (80086d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086bc:	69db      	ldr	r3, [r3, #28]
 80086be:	0a1b      	lsrs	r3, r3, #8
 80086c0:	f003 0307 	and.w	r3, r3, #7
 80086c4:	4904      	ldr	r1, [pc, #16]	@ (80086d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80086c6:	5ccb      	ldrb	r3, [r1, r3]
 80086c8:	f003 031f 	and.w	r3, r3, #31
 80086cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	58024400 	.word	0x58024400
 80086d8:	080132b4 	.word	0x080132b4

080086dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	223f      	movs	r2, #63	@ 0x3f
 80086ea:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80086ec:	4b1a      	ldr	r3, [pc, #104]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	f003 0207 	and.w	r2, r3, #7
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80086f8:	4b17      	ldr	r3, [pc, #92]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8008704:	4b14      	ldr	r3, [pc, #80]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	f003 020f 	and.w	r2, r3, #15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8008710:	4b11      	ldr	r3, [pc, #68]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800871c:	4b0e      	ldr	r3, [pc, #56]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8008728:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 800872a:	69db      	ldr	r3, [r3, #28]
 800872c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008734:	4b08      	ldr	r3, [pc, #32]	@ (8008758 <HAL_RCC_GetClockConfig+0x7c>)
 8008736:	6a1b      	ldr	r3, [r3, #32]
 8008738:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008740:	4b06      	ldr	r3, [pc, #24]	@ (800875c <HAL_RCC_GetClockConfig+0x80>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	601a      	str	r2, [r3, #0]
}
 800874c:	bf00      	nop
 800874e:	370c      	adds	r7, #12
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	58024400 	.word	0x58024400
 800875c:	52002000 	.word	0x52002000

08008760 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008764:	b0c6      	sub	sp, #280	@ 0x118
 8008766:	af00      	add	r7, sp, #0
 8008768:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800876c:	2300      	movs	r3, #0
 800876e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008772:	2300      	movs	r3, #0
 8008774:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008784:	2500      	movs	r5, #0
 8008786:	ea54 0305 	orrs.w	r3, r4, r5
 800878a:	d049      	beq.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800878c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008790:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008792:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008796:	d02f      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008798:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800879c:	d828      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800879e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a2:	d01a      	beq.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80087a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087a8:	d822      	bhi.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80087ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b2:	d007      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80087b4:	e01c      	b.n	80087f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087b6:	4bab      	ldr	r3, [pc, #684]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ba:	4aaa      	ldr	r2, [pc, #680]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087c2:	e01a      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c8:	3308      	adds	r3, #8
 80087ca:	2102      	movs	r1, #2
 80087cc:	4618      	mov	r0, r3
 80087ce:	f002 fa49 	bl	800ac64 <RCCEx_PLL2_Config>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087d8:	e00f      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80087da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087de:	3328      	adds	r3, #40	@ 0x28
 80087e0:	2102      	movs	r1, #2
 80087e2:	4618      	mov	r0, r3
 80087e4:	f002 faf0 	bl	800adc8 <RCCEx_PLL3_Config>
 80087e8:	4603      	mov	r3, r0
 80087ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80087ee:	e004      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087f6:	e000      	b.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80087f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d10a      	bne.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008802:	4b98      	ldr	r3, [pc, #608]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008806:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800880a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008810:	4a94      	ldr	r2, [pc, #592]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008812:	430b      	orrs	r3, r1
 8008814:	6513      	str	r3, [r2, #80]	@ 0x50
 8008816:	e003      	b.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008818:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800881c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800882c:	f04f 0900 	mov.w	r9, #0
 8008830:	ea58 0309 	orrs.w	r3, r8, r9
 8008834:	d047      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800883a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800883c:	2b04      	cmp	r3, #4
 800883e:	d82a      	bhi.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008840:	a201      	add	r2, pc, #4	@ (adr r2, 8008848 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	0800885d 	.word	0x0800885d
 800884c:	0800886b 	.word	0x0800886b
 8008850:	08008881 	.word	0x08008881
 8008854:	0800889f 	.word	0x0800889f
 8008858:	0800889f 	.word	0x0800889f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885c:	4b81      	ldr	r3, [pc, #516]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	4a80      	ldr	r2, [pc, #512]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008862:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008866:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008868:	e01a      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800886a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800886e:	3308      	adds	r3, #8
 8008870:	2100      	movs	r1, #0
 8008872:	4618      	mov	r0, r3
 8008874:	f002 f9f6 	bl	800ac64 <RCCEx_PLL2_Config>
 8008878:	4603      	mov	r3, r0
 800887a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800887e:	e00f      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008884:	3328      	adds	r3, #40	@ 0x28
 8008886:	2100      	movs	r1, #0
 8008888:	4618      	mov	r0, r3
 800888a:	f002 fa9d 	bl	800adc8 <RCCEx_PLL3_Config>
 800888e:	4603      	mov	r3, r0
 8008890:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008894:	e004      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800889c:	e000      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800889e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d10a      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80088a8:	4b6e      	ldr	r3, [pc, #440]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ac:	f023 0107 	bic.w	r1, r3, #7
 80088b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088b6:	4a6b      	ldr	r2, [pc, #428]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088b8:	430b      	orrs	r3, r1
 80088ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80088bc:	e003      	b.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80088d2:	f04f 0b00 	mov.w	fp, #0
 80088d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80088da:	d05b      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80088dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80088e4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80088e8:	d03b      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80088ea:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80088ee:	d834      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80088f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088f4:	d037      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80088f6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80088fa:	d82e      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80088fc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008900:	d033      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008902:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008906:	d828      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008908:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800890c:	d01a      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800890e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008912:	d822      	bhi.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008914:	2b00      	cmp	r3, #0
 8008916:	d003      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008918:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800891c:	d007      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800891e:	e01c      	b.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008920:	4b50      	ldr	r3, [pc, #320]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008924:	4a4f      	ldr	r2, [pc, #316]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008926:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800892a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800892c:	e01e      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800892e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008932:	3308      	adds	r3, #8
 8008934:	2100      	movs	r1, #0
 8008936:	4618      	mov	r0, r3
 8008938:	f002 f994 	bl	800ac64 <RCCEx_PLL2_Config>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008942:	e013      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008948:	3328      	adds	r3, #40	@ 0x28
 800894a:	2100      	movs	r1, #0
 800894c:	4618      	mov	r0, r3
 800894e:	f002 fa3b 	bl	800adc8 <RCCEx_PLL3_Config>
 8008952:	4603      	mov	r3, r0
 8008954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008958:	e008      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008960:	e004      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800896a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800896c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008970:	2b00      	cmp	r3, #0
 8008972:	d10b      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008974:	4b3b      	ldr	r3, [pc, #236]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008978:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800897c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008980:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008984:	4a37      	ldr	r2, [pc, #220]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008986:	430b      	orrs	r3, r1
 8008988:	6593      	str	r3, [r2, #88]	@ 0x58
 800898a:	e003      	b.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800898c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008990:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80089a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80089a4:	2300      	movs	r3, #0
 80089a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80089aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80089ae:	460b      	mov	r3, r1
 80089b0:	4313      	orrs	r3, r2
 80089b2:	d05d      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089b8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80089bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80089c0:	d03b      	beq.n	8008a3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80089c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80089c6:	d834      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089cc:	d037      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80089ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80089d2:	d82e      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089d8:	d033      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80089da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80089de:	d828      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089e4:	d01a      	beq.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80089e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80089ea:	d822      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d003      	beq.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089f4:	d007      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80089f6:	e01c      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089fc:	4a19      	ldr	r2, [pc, #100]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a04:	e01e      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	2100      	movs	r1, #0
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f002 f928 	bl	800ac64 <RCCEx_PLL2_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a1a:	e013      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a20:	3328      	adds	r3, #40	@ 0x28
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f002 f9cf 	bl	800adc8 <RCCEx_PLL3_Config>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a30:	e008      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a38:	e004      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a3a:	bf00      	nop
 8008a3c:	e002      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a3e:	bf00      	nop
 8008a40:	e000      	b.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008a42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d10d      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008a4c:	4b05      	ldr	r3, [pc, #20]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a5c:	4a01      	ldr	r2, [pc, #4]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a5e:	430b      	orrs	r3, r1
 8008a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a62:	e005      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008a7c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008a86:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	d03a      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a96:	2b30      	cmp	r3, #48	@ 0x30
 8008a98:	d01f      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008a9a:	2b30      	cmp	r3, #48	@ 0x30
 8008a9c:	d819      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d00c      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d815      	bhi.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d019      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008aaa:	2b10      	cmp	r3, #16
 8008aac:	d111      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aae:	4baa      	ldr	r3, [pc, #680]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab2:	4aa9      	ldr	r2, [pc, #676]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008aba:	e011      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac0:	3308      	adds	r3, #8
 8008ac2:	2102      	movs	r1, #2
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f002 f8cd 	bl	800ac64 <RCCEx_PLL2_Config>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ad0:	e006      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ad8:	e002      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008ada:	bf00      	nop
 8008adc:	e000      	b.n	8008ae0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ae0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10a      	bne.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008ae8:	4b9b      	ldr	r3, [pc, #620]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008aec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af6:	4a98      	ldr	r2, [pc, #608]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008af8:	430b      	orrs	r3, r1
 8008afa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008afc:	e003      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008afe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008b12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008b16:	2300      	movs	r3, #0
 8008b18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008b1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008b20:	460b      	mov	r3, r1
 8008b22:	4313      	orrs	r3, r2
 8008b24:	d051      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b30:	d035      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008b32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b36:	d82e      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b38:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b3c:	d031      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008b3e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008b42:	d828      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b48:	d01a      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008b4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008b4e:	d822      	bhi.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008b54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b58:	d007      	beq.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008b5a:	e01c      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5c:	4b7e      	ldr	r3, [pc, #504]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b60:	4a7d      	ldr	r2, [pc, #500]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b68:	e01c      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b6e:	3308      	adds	r3, #8
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f002 f876 	bl	800ac64 <RCCEx_PLL2_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b7e:	e011      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b84:	3328      	adds	r3, #40	@ 0x28
 8008b86:	2100      	movs	r1, #0
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f002 f91d 	bl	800adc8 <RCCEx_PLL3_Config>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008b94:	e006      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b9c:	e002      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008bac:	4b6a      	ldr	r3, [pc, #424]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bb0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bba:	4a67      	ldr	r2, [pc, #412]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bbc:	430b      	orrs	r3, r1
 8008bbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008bc0:	e003      	b.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bc6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008be0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008be4:	460b      	mov	r3, r1
 8008be6:	4313      	orrs	r3, r2
 8008be8:	d053      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bf0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bf4:	d033      	beq.n	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008bf6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bfa:	d82c      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008bfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c00:	d02f      	beq.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008c02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c06:	d826      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c08:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c0c:	d02b      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c12:	d820      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c18:	d012      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008c1a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c1e:	d81a      	bhi.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d022      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c28:	d115      	bne.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c2e:	3308      	adds	r3, #8
 8008c30:	2101      	movs	r1, #1
 8008c32:	4618      	mov	r0, r3
 8008c34:	f002 f816 	bl	800ac64 <RCCEx_PLL2_Config>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c3e:	e015      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c44:	3328      	adds	r3, #40	@ 0x28
 8008c46:	2101      	movs	r1, #1
 8008c48:	4618      	mov	r0, r3
 8008c4a:	f002 f8bd 	bl	800adc8 <RCCEx_PLL3_Config>
 8008c4e:	4603      	mov	r3, r0
 8008c50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008c54:	e00a      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c5c:	e006      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c5e:	bf00      	nop
 8008c60:	e004      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c62:	bf00      	nop
 8008c64:	e002      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c66:	bf00      	nop
 8008c68:	e000      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10a      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008c74:	4b38      	ldr	r3, [pc, #224]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c78:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c82:	4a35      	ldr	r2, [pc, #212]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c84:	430b      	orrs	r3, r1
 8008c86:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c88:	e003      	b.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c8e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008c92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ca8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008cac:	460b      	mov	r3, r1
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	d058      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cb6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cbe:	d033      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008cc4:	d82c      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cca:	d02f      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cd0:	d826      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cd6:	d02b      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008cd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008cdc:	d820      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce2:	d012      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ce8:	d81a      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d022      	beq.n	8008d34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008cf2:	d115      	bne.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf8:	3308      	adds	r3, #8
 8008cfa:	2101      	movs	r1, #1
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f001 ffb1 	bl	800ac64 <RCCEx_PLL2_Config>
 8008d02:	4603      	mov	r3, r0
 8008d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d08:	e015      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0e:	3328      	adds	r3, #40	@ 0x28
 8008d10:	2101      	movs	r1, #1
 8008d12:	4618      	mov	r0, r3
 8008d14:	f002 f858 	bl	800adc8 <RCCEx_PLL3_Config>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008d1e:	e00a      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d26:	e006      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d28:	bf00      	nop
 8008d2a:	e004      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d2c:	bf00      	nop
 8008d2e:	e002      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d30:	bf00      	nop
 8008d32:	e000      	b.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008d34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d10e      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008d3e:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d42:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d4a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d4e:	4a02      	ldr	r2, [pc, #8]	@ (8008d58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d50:	430b      	orrs	r3, r1
 8008d52:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d54:	e006      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008d56:	bf00      	nop
 8008d58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008d74:	2300      	movs	r3, #0
 8008d76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008d7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008d7e:	460b      	mov	r3, r1
 8008d80:	4313      	orrs	r3, r2
 8008d82:	d037      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d8e:	d00e      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d94:	d816      	bhi.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d018      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d9e:	d111      	bne.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da0:	4bc4      	ldr	r3, [pc, #784]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	4ac3      	ldr	r2, [pc, #780]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008daa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dac:	e00f      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db2:	3308      	adds	r3, #8
 8008db4:	2101      	movs	r1, #1
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 ff54 	bl	800ac64 <RCCEx_PLL2_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008dc2:	e004      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008dca:	e000      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008dd6:	4bb7      	ldr	r3, [pc, #732]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008dd8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dda:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de4:	4ab3      	ldr	r2, [pc, #716]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008de6:	430b      	orrs	r3, r1
 8008de8:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dea:	e003      	b.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008e00:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e04:	2300      	movs	r3, #0
 8008e06:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008e0a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d039      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e1a:	2b03      	cmp	r3, #3
 8008e1c:	d81c      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e24 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e24:	08008e61 	.word	0x08008e61
 8008e28:	08008e35 	.word	0x08008e35
 8008e2c:	08008e43 	.word	0x08008e43
 8008e30:	08008e61 	.word	0x08008e61
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e34:	4b9f      	ldr	r3, [pc, #636]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e38:	4a9e      	ldr	r2, [pc, #632]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e40:	e00f      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e46:	3308      	adds	r3, #8
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f001 ff0a 	bl	800ac64 <RCCEx_PLL2_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008e56:	e004      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e5e:	e000      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008e6a:	4b92      	ldr	r3, [pc, #584]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e6e:	f023 0103 	bic.w	r1, r3, #3
 8008e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008e78:	4a8e      	ldr	r2, [pc, #568]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e7e:	e003      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e84:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008e94:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e98:	2300      	movs	r3, #0
 8008e9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e9e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ea2:	460b      	mov	r3, r1
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f000 8099 	beq.w	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008eaa:	4b83      	ldr	r3, [pc, #524]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a82      	ldr	r2, [pc, #520]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008eb6:	f7fa f9df 	bl	8003278 <HAL_GetTick>
 8008eba:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ebe:	e00b      	b.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ec0:	f7fa f9da 	bl	8003278 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	2b64      	cmp	r3, #100	@ 0x64
 8008ece:	d903      	bls.n	8008ed8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ed6:	e005      	b.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ed8:	4b77      	ldr	r3, [pc, #476]	@ (80090b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0ed      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008ee4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d173      	bne.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008eec:	4b71      	ldr	r3, [pc, #452]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008eee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ef8:	4053      	eors	r3, r2
 8008efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d015      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008f02:	4b6c      	ldr	r3, [pc, #432]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f0a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008f0e:	4b69      	ldr	r3, [pc, #420]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f12:	4a68      	ldr	r2, [pc, #416]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f18:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008f1a:	4b66      	ldr	r3, [pc, #408]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f1e:	4a65      	ldr	r2, [pc, #404]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f24:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008f26:	4a63      	ldr	r2, [pc, #396]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008f2c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f3a:	d118      	bne.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f3c:	f7fa f99c 	bl	8003278 <HAL_GetTick>
 8008f40:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f44:	e00d      	b.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f46:	f7fa f997 	bl	8003278 <HAL_GetTick>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008f50:	1ad2      	subs	r2, r2, r3
 8008f52:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d903      	bls.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008f60:	e005      	b.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f62:	4b54      	ldr	r3, [pc, #336]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f66:	f003 0302 	and.w	r3, r3, #2
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d0eb      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008f6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d129      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f86:	d10e      	bne.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008f88:	4b4a      	ldr	r3, [pc, #296]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f8a:	691b      	ldr	r3, [r3, #16]
 8008f8c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008f98:	091a      	lsrs	r2, r3, #4
 8008f9a:	4b48      	ldr	r3, [pc, #288]	@ (80090bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	4a45      	ldr	r2, [pc, #276]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	6113      	str	r3, [r2, #16]
 8008fa4:	e005      	b.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008fa6:	4b43      	ldr	r3, [pc, #268]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fa8:	691b      	ldr	r3, [r3, #16]
 8008faa:	4a42      	ldr	r2, [pc, #264]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008fb0:	6113      	str	r3, [r2, #16]
 8008fb2:	4b40      	ldr	r3, [pc, #256]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fb4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fc2:	4a3c      	ldr	r2, [pc, #240]	@ (80090b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fc4:	430b      	orrs	r3, r1
 8008fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8008fc8:	e008      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008fca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fd8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	f002 0301 	and.w	r3, r2, #1
 8008fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ff2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f000 808f 	beq.w	800911c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009004:	2b28      	cmp	r3, #40	@ 0x28
 8009006:	d871      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8009008:	a201      	add	r2, pc, #4	@ (adr r2, 8009010 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800900a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800900e:	bf00      	nop
 8009010:	080090f5 	.word	0x080090f5
 8009014:	080090ed 	.word	0x080090ed
 8009018:	080090ed 	.word	0x080090ed
 800901c:	080090ed 	.word	0x080090ed
 8009020:	080090ed 	.word	0x080090ed
 8009024:	080090ed 	.word	0x080090ed
 8009028:	080090ed 	.word	0x080090ed
 800902c:	080090ed 	.word	0x080090ed
 8009030:	080090c1 	.word	0x080090c1
 8009034:	080090ed 	.word	0x080090ed
 8009038:	080090ed 	.word	0x080090ed
 800903c:	080090ed 	.word	0x080090ed
 8009040:	080090ed 	.word	0x080090ed
 8009044:	080090ed 	.word	0x080090ed
 8009048:	080090ed 	.word	0x080090ed
 800904c:	080090ed 	.word	0x080090ed
 8009050:	080090d7 	.word	0x080090d7
 8009054:	080090ed 	.word	0x080090ed
 8009058:	080090ed 	.word	0x080090ed
 800905c:	080090ed 	.word	0x080090ed
 8009060:	080090ed 	.word	0x080090ed
 8009064:	080090ed 	.word	0x080090ed
 8009068:	080090ed 	.word	0x080090ed
 800906c:	080090ed 	.word	0x080090ed
 8009070:	080090f5 	.word	0x080090f5
 8009074:	080090ed 	.word	0x080090ed
 8009078:	080090ed 	.word	0x080090ed
 800907c:	080090ed 	.word	0x080090ed
 8009080:	080090ed 	.word	0x080090ed
 8009084:	080090ed 	.word	0x080090ed
 8009088:	080090ed 	.word	0x080090ed
 800908c:	080090ed 	.word	0x080090ed
 8009090:	080090f5 	.word	0x080090f5
 8009094:	080090ed 	.word	0x080090ed
 8009098:	080090ed 	.word	0x080090ed
 800909c:	080090ed 	.word	0x080090ed
 80090a0:	080090ed 	.word	0x080090ed
 80090a4:	080090ed 	.word	0x080090ed
 80090a8:	080090ed 	.word	0x080090ed
 80090ac:	080090ed 	.word	0x080090ed
 80090b0:	080090f5 	.word	0x080090f5
 80090b4:	58024400 	.word	0x58024400
 80090b8:	58024800 	.word	0x58024800
 80090bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	3308      	adds	r3, #8
 80090c6:	2101      	movs	r1, #1
 80090c8:	4618      	mov	r0, r3
 80090ca:	f001 fdcb 	bl	800ac64 <RCCEx_PLL2_Config>
 80090ce:	4603      	mov	r3, r0
 80090d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090d4:	e00f      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090da:	3328      	adds	r3, #40	@ 0x28
 80090dc:	2101      	movs	r1, #1
 80090de:	4618      	mov	r0, r3
 80090e0:	f001 fe72 	bl	800adc8 <RCCEx_PLL3_Config>
 80090e4:	4603      	mov	r3, r0
 80090e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80090ea:	e004      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090f2:	e000      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80090f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d10a      	bne.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80090fe:	4bbf      	ldr	r3, [pc, #764]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009102:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800910c:	4abb      	ldr	r2, [pc, #748]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800910e:	430b      	orrs	r3, r1
 8009110:	6553      	str	r3, [r2, #84]	@ 0x54
 8009112:	e003      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800911c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009124:	f002 0302 	and.w	r3, r2, #2
 8009128:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800912c:	2300      	movs	r3, #0
 800912e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009132:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009136:	460b      	mov	r3, r1
 8009138:	4313      	orrs	r3, r2
 800913a:	d041      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800913c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009140:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009142:	2b05      	cmp	r3, #5
 8009144:	d824      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009146:	a201      	add	r2, pc, #4	@ (adr r2, 800914c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800914c:	08009199 	.word	0x08009199
 8009150:	08009165 	.word	0x08009165
 8009154:	0800917b 	.word	0x0800917b
 8009158:	08009199 	.word	0x08009199
 800915c:	08009199 	.word	0x08009199
 8009160:	08009199 	.word	0x08009199
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009164:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009168:	3308      	adds	r3, #8
 800916a:	2101      	movs	r1, #1
 800916c:	4618      	mov	r0, r3
 800916e:	f001 fd79 	bl	800ac64 <RCCEx_PLL2_Config>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800917a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800917e:	3328      	adds	r3, #40	@ 0x28
 8009180:	2101      	movs	r1, #1
 8009182:	4618      	mov	r0, r3
 8009184:	f001 fe20 	bl	800adc8 <RCCEx_PLL3_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80091a2:	4b96      	ldr	r3, [pc, #600]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80091a6:	f023 0107 	bic.w	r1, r3, #7
 80091aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091b0:	4a92      	ldr	r2, [pc, #584]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80091c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f002 0304 	and.w	r3, r2, #4
 80091cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80091d6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091da:	460b      	mov	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	d044      	beq.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80091e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e8:	2b05      	cmp	r3, #5
 80091ea:	d825      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80091ec:	a201      	add	r2, pc, #4	@ (adr r2, 80091f4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80091ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f2:	bf00      	nop
 80091f4:	08009241 	.word	0x08009241
 80091f8:	0800920d 	.word	0x0800920d
 80091fc:	08009223 	.word	0x08009223
 8009200:	08009241 	.word	0x08009241
 8009204:	08009241 	.word	0x08009241
 8009208:	08009241 	.word	0x08009241
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800920c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009210:	3308      	adds	r3, #8
 8009212:	2101      	movs	r1, #1
 8009214:	4618      	mov	r0, r3
 8009216:	f001 fd25 	bl	800ac64 <RCCEx_PLL2_Config>
 800921a:	4603      	mov	r3, r0
 800921c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009220:	e00f      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009222:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009226:	3328      	adds	r3, #40	@ 0x28
 8009228:	2101      	movs	r1, #1
 800922a:	4618      	mov	r0, r3
 800922c:	f001 fdcc 	bl	800adc8 <RCCEx_PLL3_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800924a:	4b6c      	ldr	r3, [pc, #432]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800924c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800924e:	f023 0107 	bic.w	r1, r3, #7
 8009252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925a:	4a68      	ldr	r2, [pc, #416]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800925c:	430b      	orrs	r3, r1
 800925e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009260:	e003      	b.n	800926a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009262:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009266:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f002 0320 	and.w	r3, r2, #32
 8009276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800927a:	2300      	movs	r3, #0
 800927c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009280:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009284:	460b      	mov	r3, r1
 8009286:	4313      	orrs	r3, r2
 8009288:	d055      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800928a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009296:	d033      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800929c:	d82c      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800929e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a2:	d02f      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80092a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80092a8:	d826      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80092ae:	d02b      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80092b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80092b4:	d820      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092ba:	d012      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80092bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80092c0:	d81a      	bhi.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d022      	beq.n	800930c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80092c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80092ca:	d115      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092d0:	3308      	adds	r3, #8
 80092d2:	2100      	movs	r1, #0
 80092d4:	4618      	mov	r0, r3
 80092d6:	f001 fcc5 	bl	800ac64 <RCCEx_PLL2_Config>
 80092da:	4603      	mov	r3, r0
 80092dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092e0:	e015      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80092e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092e6:	3328      	adds	r3, #40	@ 0x28
 80092e8:	2102      	movs	r1, #2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f001 fd6c 	bl	800adc8 <RCCEx_PLL3_Config>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80092f6:	e00a      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092fe:	e006      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009300:	bf00      	nop
 8009302:	e004      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009304:	bf00      	nop
 8009306:	e002      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800930c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800930e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009312:	2b00      	cmp	r3, #0
 8009314:	d10b      	bne.n	800932e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009316:	4b39      	ldr	r3, [pc, #228]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800931a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800931e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009322:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009326:	4a35      	ldr	r2, [pc, #212]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009328:	430b      	orrs	r3, r1
 800932a:	6553      	str	r3, [r2, #84]	@ 0x54
 800932c:	e003      	b.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800932e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009332:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800933a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009342:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009346:	2300      	movs	r3, #0
 8009348:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800934c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009350:	460b      	mov	r3, r1
 8009352:	4313      	orrs	r3, r2
 8009354:	d058      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800935a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800935e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009362:	d033      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009364:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009368:	d82c      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800936a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800936e:	d02f      	beq.n	80093d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009374:	d826      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800937a:	d02b      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800937c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009380:	d820      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009386:	d012      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009388:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800938c:	d81a      	bhi.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d022      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009396:	d115      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939c:	3308      	adds	r3, #8
 800939e:	2100      	movs	r1, #0
 80093a0:	4618      	mov	r0, r3
 80093a2:	f001 fc5f 	bl	800ac64 <RCCEx_PLL2_Config>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093ac:	e015      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b2:	3328      	adds	r3, #40	@ 0x28
 80093b4:	2102      	movs	r1, #2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f001 fd06 	bl	800adc8 <RCCEx_PLL3_Config>
 80093bc:	4603      	mov	r3, r0
 80093be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80093c2:	e00a      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80093ca:	e006      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093cc:	bf00      	nop
 80093ce:	e004      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093d0:	bf00      	nop
 80093d2:	e002      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093d4:	bf00      	nop
 80093d6:	e000      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80093d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d10e      	bne.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80093e2:	4b06      	ldr	r3, [pc, #24]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80093ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093f2:	4a02      	ldr	r2, [pc, #8]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80093f4:	430b      	orrs	r3, r1
 80093f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80093f8:	e006      	b.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80093fa:	bf00      	nop
 80093fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009400:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009404:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800940c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009410:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009418:	2300      	movs	r3, #0
 800941a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800941e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009422:	460b      	mov	r3, r1
 8009424:	4313      	orrs	r3, r2
 8009426:	d055      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800942c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009430:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009434:	d033      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009436:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800943a:	d82c      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800943c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009440:	d02f      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009446:	d826      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009448:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800944c:	d02b      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800944e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009452:	d820      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009454:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009458:	d012      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800945a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800945e:	d81a      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d022      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009468:	d115      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800946a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800946e:	3308      	adds	r3, #8
 8009470:	2100      	movs	r1, #0
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fbf6 	bl	800ac64 <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800947e:	e015      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009480:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009484:	3328      	adds	r3, #40	@ 0x28
 8009486:	2102      	movs	r1, #2
 8009488:	4618      	mov	r0, r3
 800948a:	f001 fc9d 	bl	800adc8 <RCCEx_PLL3_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009494:	e00a      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800949e:	bf00      	nop
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80094aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10b      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80094b4:	4ba0      	ldr	r3, [pc, #640]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80094bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094c4:	4a9c      	ldr	r2, [pc, #624]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094c6:	430b      	orrs	r3, r1
 80094c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80094ca:	e003      	b.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80094d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094dc:	f002 0308 	and.w	r3, r2, #8
 80094e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80094e4:	2300      	movs	r3, #0
 80094e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80094ea:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80094ee:	460b      	mov	r3, r1
 80094f0:	4313      	orrs	r3, r2
 80094f2:	d01e      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80094f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009500:	d10c      	bne.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009506:	3328      	adds	r3, #40	@ 0x28
 8009508:	2102      	movs	r1, #2
 800950a:	4618      	mov	r0, r3
 800950c:	f001 fc5c 	bl	800adc8 <RCCEx_PLL3_Config>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d002      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800951c:	4b86      	ldr	r3, [pc, #536]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800951e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009520:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009528:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800952c:	4a82      	ldr	r2, [pc, #520]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800952e:	430b      	orrs	r3, r1
 8009530:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f002 0310 	and.w	r3, r2, #16
 800953e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009548:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800954c:	460b      	mov	r3, r1
 800954e:	4313      	orrs	r3, r2
 8009550:	d01e      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009556:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800955a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800955e:	d10c      	bne.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	3328      	adds	r3, #40	@ 0x28
 8009566:	2102      	movs	r1, #2
 8009568:	4618      	mov	r0, r3
 800956a:	f001 fc2d 	bl	800adc8 <RCCEx_PLL3_Config>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d002      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009574:	2301      	movs	r3, #1
 8009576:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800957a:	4b6f      	ldr	r3, [pc, #444]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800957c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800957e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800958a:	4a6b      	ldr	r2, [pc, #428]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800958c:	430b      	orrs	r3, r1
 800958e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009598:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800959c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800959e:	2300      	movs	r3, #0
 80095a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095a2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80095a6:	460b      	mov	r3, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	d03e      	beq.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095b8:	d022      	beq.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80095ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095be:	d81b      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80095c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095c8:	d00b      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80095ca:	e015      	b.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095d0:	3308      	adds	r3, #8
 80095d2:	2100      	movs	r1, #0
 80095d4:	4618      	mov	r0, r3
 80095d6:	f001 fb45 	bl	800ac64 <RCCEx_PLL2_Config>
 80095da:	4603      	mov	r3, r0
 80095dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095e0:	e00f      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e6:	3328      	adds	r3, #40	@ 0x28
 80095e8:	2102      	movs	r1, #2
 80095ea:	4618      	mov	r0, r3
 80095ec:	f001 fbec 	bl	800adc8 <RCCEx_PLL3_Config>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80095f6:	e004      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80095fe:	e000      	b.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009602:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800960a:	4b4b      	ldr	r3, [pc, #300]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009616:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800961a:	4a47      	ldr	r2, [pc, #284]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800961c:	430b      	orrs	r3, r1
 800961e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009620:	e003      	b.n	800962a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009622:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009626:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800962a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009636:	673b      	str	r3, [r7, #112]	@ 0x70
 8009638:	2300      	movs	r3, #0
 800963a:	677b      	str	r3, [r7, #116]	@ 0x74
 800963c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009640:	460b      	mov	r3, r1
 8009642:	4313      	orrs	r3, r2
 8009644:	d03b      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800964a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800964e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009652:	d01f      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009654:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009658:	d818      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800965a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800965e:	d003      	beq.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009664:	d007      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009666:	e011      	b.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009668:	4b33      	ldr	r3, [pc, #204]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800966a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800966c:	4a32      	ldr	r2, [pc, #200]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800966e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009674:	e00f      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800967a:	3328      	adds	r3, #40	@ 0x28
 800967c:	2101      	movs	r1, #1
 800967e:	4618      	mov	r0, r3
 8009680:	f001 fba2 	bl	800adc8 <RCCEx_PLL3_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800968a:	e004      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009692:	e000      	b.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009696:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10b      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800969e:	4b26      	ldr	r3, [pc, #152]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80096a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80096ae:	4a22      	ldr	r2, [pc, #136]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80096b4:	e003      	b.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096ba:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80096ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 80096cc:	2300      	movs	r3, #0
 80096ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80096d0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80096d4:	460b      	mov	r3, r1
 80096d6:	4313      	orrs	r3, r2
 80096d8:	d034      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80096da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d003      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80096e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096e8:	d007      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80096ea:	e011      	b.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ec:	4b12      	ldr	r3, [pc, #72]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f0:	4a11      	ldr	r2, [pc, #68]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80096f8:	e00e      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80096fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096fe:	3308      	adds	r3, #8
 8009700:	2102      	movs	r1, #2
 8009702:	4618      	mov	r0, r3
 8009704:	f001 faae 	bl	800ac64 <RCCEx_PLL2_Config>
 8009708:	4603      	mov	r3, r0
 800970a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800970e:	e003      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10d      	bne.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009720:	4b05      	ldr	r3, [pc, #20]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009724:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800972e:	4a02      	ldr	r2, [pc, #8]	@ (8009738 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009730:	430b      	orrs	r3, r1
 8009732:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009734:	e006      	b.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009736:	bf00      	nop
 8009738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009750:	663b      	str	r3, [r7, #96]	@ 0x60
 8009752:	2300      	movs	r3, #0
 8009754:	667b      	str	r3, [r7, #100]	@ 0x64
 8009756:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800975a:	460b      	mov	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	d00c      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	3328      	adds	r3, #40	@ 0x28
 8009766:	2102      	movs	r1, #2
 8009768:	4618      	mov	r0, r3
 800976a:	f001 fb2d 	bl	800adc8 <RCCEx_PLL3_Config>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d002      	beq.n	800977a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800977a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009786:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009788:	2300      	movs	r3, #0
 800978a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800978c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009790:	460b      	mov	r3, r1
 8009792:	4313      	orrs	r3, r2
 8009794:	d036      	beq.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800979a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800979c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097a0:	d018      	beq.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80097a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097a6:	d811      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097ac:	d014      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80097ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097b2:	d80b      	bhi.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d011      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80097b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097bc:	d106      	bne.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097be:	4bb7      	ldr	r3, [pc, #732]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097c2:	4ab6      	ldr	r2, [pc, #728]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80097ca:	e008      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097d2:	e004      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80097d4:	bf00      	nop
 80097d6:	e002      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80097d8:	bf00      	nop
 80097da:	e000      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80097dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10a      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097e6:	4bad      	ldr	r3, [pc, #692]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80097f4:	4aa9      	ldr	r2, [pc, #676]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80097f6:	430b      	orrs	r3, r1
 80097f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80097fa:	e003      	b.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009810:	653b      	str	r3, [r7, #80]	@ 0x50
 8009812:	2300      	movs	r3, #0
 8009814:	657b      	str	r3, [r7, #84]	@ 0x54
 8009816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800981a:	460b      	mov	r3, r1
 800981c:	4313      	orrs	r3, r2
 800981e:	d009      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009820:	4b9e      	ldr	r3, [pc, #632]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009824:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800982c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800982e:	4a9b      	ldr	r2, [pc, #620]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009830:	430b      	orrs	r3, r1
 8009832:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009840:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009842:	2300      	movs	r3, #0
 8009844:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009846:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800984a:	460b      	mov	r3, r1
 800984c:	4313      	orrs	r3, r2
 800984e:	d009      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009850:	4b92      	ldr	r3, [pc, #584]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009854:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800985c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800985e:	4a8f      	ldr	r2, [pc, #572]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009860:	430b      	orrs	r3, r1
 8009862:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800986c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009870:	643b      	str	r3, [r7, #64]	@ 0x40
 8009872:	2300      	movs	r3, #0
 8009874:	647b      	str	r3, [r7, #68]	@ 0x44
 8009876:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800987a:	460b      	mov	r3, r1
 800987c:	4313      	orrs	r3, r2
 800987e:	d00e      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009880:	4b86      	ldr	r3, [pc, #536]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	4a85      	ldr	r2, [pc, #532]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009886:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800988a:	6113      	str	r3, [r2, #16]
 800988c:	4b83      	ldr	r3, [pc, #524]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800988e:	6919      	ldr	r1, [r3, #16]
 8009890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009898:	4a80      	ldr	r2, [pc, #512]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800989a:	430b      	orrs	r3, r1
 800989c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800989e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80098aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80098ac:	2300      	movs	r3, #0
 80098ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80098b0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80098b4:	460b      	mov	r3, r1
 80098b6:	4313      	orrs	r3, r2
 80098b8:	d009      	beq.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80098ba:	4b78      	ldr	r3, [pc, #480]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098be:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80098c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c8:	4a74      	ldr	r2, [pc, #464]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ca:	430b      	orrs	r3, r1
 80098cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80098ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80098da:	633b      	str	r3, [r7, #48]	@ 0x30
 80098dc:	2300      	movs	r3, #0
 80098de:	637b      	str	r3, [r7, #52]	@ 0x34
 80098e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80098e4:	460b      	mov	r3, r1
 80098e6:	4313      	orrs	r3, r2
 80098e8:	d00a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80098ea:	4b6c      	ldr	r3, [pc, #432]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ee:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80098f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098fa:	4a68      	ldr	r2, [pc, #416]	@ (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80098fc:	430b      	orrs	r3, r1
 80098fe:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009908:	2100      	movs	r1, #0
 800990a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009912:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009916:	460b      	mov	r3, r1
 8009918:	4313      	orrs	r3, r2
 800991a:	d011      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	3308      	adds	r3, #8
 8009922:	2100      	movs	r1, #0
 8009924:	4618      	mov	r0, r3
 8009926:	f001 f99d 	bl	800ac64 <RCCEx_PLL2_Config>
 800992a:	4603      	mov	r3, r0
 800992c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009930:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009938:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800993c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009940:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	2100      	movs	r1, #0
 800994a:	6239      	str	r1, [r7, #32]
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	627b      	str	r3, [r7, #36]	@ 0x24
 8009952:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009956:	460b      	mov	r3, r1
 8009958:	4313      	orrs	r3, r2
 800995a:	d011      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800995c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009960:	3308      	adds	r3, #8
 8009962:	2101      	movs	r1, #1
 8009964:	4618      	mov	r0, r3
 8009966:	f001 f97d 	bl	800ac64 <RCCEx_PLL2_Config>
 800996a:	4603      	mov	r3, r0
 800996c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009970:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009978:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800997c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009980:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	2100      	movs	r1, #0
 800998a:	61b9      	str	r1, [r7, #24]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	61fb      	str	r3, [r7, #28]
 8009992:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d011      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a0:	3308      	adds	r3, #8
 80099a2:	2102      	movs	r1, #2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f001 f95d 	bl	800ac64 <RCCEx_PLL2_Config>
 80099aa:	4603      	mov	r3, r0
 80099ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80099b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d003      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	2100      	movs	r1, #0
 80099ca:	6139      	str	r1, [r7, #16]
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	617b      	str	r3, [r7, #20]
 80099d2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80099d6:	460b      	mov	r3, r1
 80099d8:	4313      	orrs	r3, r2
 80099da:	d011      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099e0:	3328      	adds	r3, #40	@ 0x28
 80099e2:	2100      	movs	r1, #0
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 f9ef 	bl	800adc8 <RCCEx_PLL3_Config>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80099f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	2100      	movs	r1, #0
 8009a0a:	60b9      	str	r1, [r7, #8]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	60fb      	str	r3, [r7, #12]
 8009a12:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009a16:	460b      	mov	r3, r1
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	d011      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a20:	3328      	adds	r3, #40	@ 0x28
 8009a22:	2101      	movs	r1, #1
 8009a24:	4618      	mov	r0, r3
 8009a26:	f001 f9cf 	bl	800adc8 <RCCEx_PLL3_Config>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d003      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a48:	2100      	movs	r1, #0
 8009a4a:	6039      	str	r1, [r7, #0]
 8009a4c:	f003 0320 	and.w	r3, r3, #32
 8009a50:	607b      	str	r3, [r7, #4]
 8009a52:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009a56:	460b      	mov	r3, r1
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	d011      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a60:	3328      	adds	r3, #40	@ 0x28
 8009a62:	2102      	movs	r1, #2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f001 f9af 	bl	800adc8 <RCCEx_PLL3_Config>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d003      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009a7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009a80:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d101      	bne.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	e000      	b.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009a94:	46bd      	mov	sp, r7
 8009a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a9a:	bf00      	nop
 8009a9c:	58024400 	.word	0x58024400

08009aa0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b090      	sub	sp, #64	@ 0x40
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aae:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009ab2:	430b      	orrs	r3, r1
 8009ab4:	f040 8094 	bne.w	8009be0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ab8:	4b9b      	ldr	r3, [pc, #620]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009aba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	f200 8087 	bhi.w	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009aca:	a201      	add	r2, pc, #4	@ (adr r2, 8009ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad0:	08009ae5 	.word	0x08009ae5
 8009ad4:	08009b0d 	.word	0x08009b0d
 8009ad8:	08009b35 	.word	0x08009b35
 8009adc:	08009bd1 	.word	0x08009bd1
 8009ae0:	08009b5d 	.word	0x08009b5d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ae4:	4b90      	ldr	r3, [pc, #576]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009aec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009af0:	d108      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009af6:	4618      	mov	r0, r3
 8009af8:	f000 ff62 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b00:	f000 bc93 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b08:	f000 bc8f 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009b0c:	4b86      	ldr	r3, [pc, #536]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b18:	d108      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b1a:	f107 0318 	add.w	r3, r7, #24
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 fca6 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b28:	f000 bc7f 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b30:	f000 bc7b 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b34:	4b7c      	ldr	r3, [pc, #496]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b40:	d108      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b42:	f107 030c 	add.w	r3, r7, #12
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 fde6 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b50:	f000 bc6b 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b58:	f000 bc67 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b5c:	4b72      	ldr	r3, [pc, #456]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b60:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009b64:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b66:	4b70      	ldr	r3, [pc, #448]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0304 	and.w	r3, r3, #4
 8009b6e:	2b04      	cmp	r3, #4
 8009b70:	d10c      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009b72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d109      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b78:	4b6b      	ldr	r3, [pc, #428]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	08db      	lsrs	r3, r3, #3
 8009b7e:	f003 0303 	and.w	r3, r3, #3
 8009b82:	4a6a      	ldr	r2, [pc, #424]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009b84:	fa22 f303 	lsr.w	r3, r2, r3
 8009b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b8a:	e01f      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b8c:	4b66      	ldr	r3, [pc, #408]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b98:	d106      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ba0:	d102      	bne.n	8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ba2:	4b63      	ldr	r3, [pc, #396]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba6:	e011      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ba8:	4b5f      	ldr	r3, [pc, #380]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bb0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bb4:	d106      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bbc:	d102      	bne.n	8009bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009bbe:	4b5d      	ldr	r3, [pc, #372]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009bc2:	e003      	b.n	8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009bc8:	f000 bc2f 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009bcc:	f000 bc2d 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009bd0:	4b59      	ldr	r3, [pc, #356]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd4:	f000 bc29 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bdc:	f000 bc25 	b.w	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009be8:	430b      	orrs	r3, r1
 8009bea:	f040 80a7 	bne.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009bee:	4b4e      	ldr	r3, [pc, #312]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009bf2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009bf6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009bfe:	d054      	beq.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c06:	f200 808b 	bhi.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c10:	f000 8083 	beq.w	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009c1a:	f200 8081 	bhi.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c24:	d02f      	beq.n	8009c86 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c2c:	d878      	bhi.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d004      	beq.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c3a:	d012      	beq.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009c3c:	e070      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c4a:	d107      	bne.n	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c50:	4618      	mov	r0, r3
 8009c52:	f000 feb5 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c5a:	e3e6      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c60:	e3e3      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c62:	4b31      	ldr	r3, [pc, #196]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c6e:	d107      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c70:	f107 0318 	add.w	r3, r7, #24
 8009c74:	4618      	mov	r0, r3
 8009c76:	f000 fbfb 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7e:	e3d4      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c84:	e3d1      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c86:	4b28      	ldr	r3, [pc, #160]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c92:	d107      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c94:	f107 030c 	add.w	r3, r7, #12
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 fd3d 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca2:	e3c2      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ca8:	e3bf      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009caa:	4b1f      	ldr	r3, [pc, #124]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009cb2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d10c      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d109      	bne.n	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cc6:	4b18      	ldr	r3, [pc, #96]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	08db      	lsrs	r3, r3, #3
 8009ccc:	f003 0303 	and.w	r3, r3, #3
 8009cd0:	4a16      	ldr	r2, [pc, #88]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd8:	e01e      	b.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cda:	4b13      	ldr	r3, [pc, #76]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ce6:	d106      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cee:	d102      	bne.n	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cf4:	e010      	b.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d02:	d106      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d0a:	d102      	bne.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d0c:	4b09      	ldr	r3, [pc, #36]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d10:	e002      	b.n	8009d18 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d12:	2300      	movs	r3, #0
 8009d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d16:	e388      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d18:	e387      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d1a:	4b07      	ldr	r3, [pc, #28]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d1e:	e384      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009d20:	2300      	movs	r3, #0
 8009d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d24:	e381      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d26:	bf00      	nop
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	03d09000 	.word	0x03d09000
 8009d30:	003d0900 	.word	0x003d0900
 8009d34:	017d7840 	.word	0x017d7840
 8009d38:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009d3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d40:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009d44:	430b      	orrs	r3, r1
 8009d46:	f040 809c 	bne.w	8009e82 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009d4a:	4b9e      	ldr	r3, [pc, #632]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009d4e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009d52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d5a:	d054      	beq.n	8009e06 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d62:	f200 808b 	bhi.w	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d6c:	f000 8083 	beq.w	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d72:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009d76:	f200 8081 	bhi.w	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d80:	d02f      	beq.n	8009de2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d88:	d878      	bhi.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d004      	beq.n	8009d9a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d96:	d012      	beq.n	8009dbe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009d98:	e070      	b.n	8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d9a:	4b8a      	ldr	r3, [pc, #552]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009da2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009da6:	d107      	bne.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 fe07 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009db6:	e338      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dbc:	e335      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dbe:	4b81      	ldr	r3, [pc, #516]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dca:	d107      	bne.n	8009ddc <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dcc:	f107 0318 	add.w	r3, r7, #24
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f000 fb4d 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dd6:	69bb      	ldr	r3, [r7, #24]
 8009dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dda:	e326      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009de0:	e323      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009de2:	4b78      	ldr	r3, [pc, #480]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009dea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009dee:	d107      	bne.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009df0:	f107 030c 	add.w	r3, r7, #12
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 fc8f 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dfe:	e314      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e04:	e311      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e06:	4b6f      	ldr	r3, [pc, #444]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e0a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e0e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e10:	4b6c      	ldr	r3, [pc, #432]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0304 	and.w	r3, r3, #4
 8009e18:	2b04      	cmp	r3, #4
 8009e1a:	d10c      	bne.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e22:	4b68      	ldr	r3, [pc, #416]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	08db      	lsrs	r3, r3, #3
 8009e28:	f003 0303 	and.w	r3, r3, #3
 8009e2c:	4a66      	ldr	r2, [pc, #408]	@ (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e34:	e01e      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e36:	4b63      	ldr	r3, [pc, #396]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e42:	d106      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e4a:	d102      	bne.n	8009e52 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e4c:	4b5f      	ldr	r3, [pc, #380]	@ (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e50:	e010      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e52:	4b5c      	ldr	r3, [pc, #368]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e5e:	d106      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8009e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e66:	d102      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e68:	4b59      	ldr	r3, [pc, #356]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e6c:	e002      	b.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e72:	e2da      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009e74:	e2d9      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e76:	4b57      	ldr	r3, [pc, #348]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e7a:	e2d6      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e80:	e2d3      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e86:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8009e8a:	430b      	orrs	r3, r1
 8009e8c:	f040 80a7 	bne.w	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009e90:	4b4c      	ldr	r3, [pc, #304]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009e98:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ea0:	d055      	beq.n	8009f4e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8009ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ea8:	f200 8096 	bhi.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009eb2:	f000 8084 	beq.w	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ebc:	f200 808c 	bhi.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ec6:	d030      	beq.n	8009f2a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8009ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ece:	f200 8083 	bhi.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d004      	beq.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8009ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ede:	d012      	beq.n	8009f06 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8009ee0:	e07a      	b.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ee2:	4b38      	ldr	r3, [pc, #224]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009eea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009eee:	d107      	bne.n	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ef0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 fd63 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009efe:	e294      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f04:	e291      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f06:	4b2f      	ldr	r3, [pc, #188]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f12:	d107      	bne.n	8009f24 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f14:	f107 0318 	add.w	r3, r7, #24
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 faa9 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f1e:	69bb      	ldr	r3, [r7, #24]
 8009f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f22:	e282      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f28:	e27f      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f2a:	4b26      	ldr	r3, [pc, #152]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f36:	d107      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f000 fbeb 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f46:	e270      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	e26d      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f52:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f56:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f58:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b04      	cmp	r3, #4
 8009f62:	d10c      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8009f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d109      	bne.n	8009f7e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f6a:	4b16      	ldr	r3, [pc, #88]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	08db      	lsrs	r3, r3, #3
 8009f70:	f003 0303 	and.w	r3, r3, #3
 8009f74:	4a14      	ldr	r2, [pc, #80]	@ (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009f76:	fa22 f303 	lsr.w	r3, r2, r3
 8009f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f7c:	e01e      	b.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f7e:	4b11      	ldr	r3, [pc, #68]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f8a:	d106      	bne.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8009f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f92:	d102      	bne.n	8009f9a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f94:	4b0d      	ldr	r3, [pc, #52]	@ (8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8009f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f98:	e010      	b.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa6:	d106      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8009fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009faa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fae:	d102      	bne.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fb0:	4b07      	ldr	r3, [pc, #28]	@ (8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fb4:	e002      	b.n	8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fba:	e236      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fbc:	e235      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fbe:	4b05      	ldr	r3, [pc, #20]	@ (8009fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fc2:	e232      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009fc4:	58024400 	.word	0x58024400
 8009fc8:	03d09000 	.word	0x03d09000
 8009fcc:	003d0900 	.word	0x003d0900
 8009fd0:	017d7840 	.word	0x017d7840
 8009fd4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fdc:	e225      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8009fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	f040 8085 	bne.w	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009fec:	4b9c      	ldr	r3, [pc, #624]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8009fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ff0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009ffc:	d06b      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8009ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a000:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a004:	d874      	bhi.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a008:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a00c:	d056      	beq.n	800a0bc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a00e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a010:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a014:	d86c      	bhi.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a01c:	d03b      	beq.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a024:	d864      	bhi.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a028:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a02c:	d021      	beq.n	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a030:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a034:	d85c      	bhi.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d004      	beq.n	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a03c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a03e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a042:	d004      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a044:	e054      	b.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a046:	f7fe fb1d 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 800a04a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a04c:	e1ed      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a04e:	4b84      	ldr	r3, [pc, #528]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a056:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a05a:	d107      	bne.n	800a06c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05c:	f107 0318 	add.w	r3, r7, #24
 800a060:	4618      	mov	r0, r3
 800a062:	f000 fa05 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06a:	e1de      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a070:	e1db      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a072:	4b7b      	ldr	r3, [pc, #492]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a07e:	d107      	bne.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a080:	f107 030c 	add.w	r3, r7, #12
 800a084:	4618      	mov	r0, r3
 800a086:	f000 fb47 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a08e:	e1cc      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a094:	e1c9      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a096:	4b72      	ldr	r3, [pc, #456]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0304 	and.w	r3, r3, #4
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d109      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0a2:	4b6f      	ldr	r3, [pc, #444]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	4a6d      	ldr	r2, [pc, #436]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0b4:	e1b9      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ba:	e1b6      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a0bc:	4b68      	ldr	r3, [pc, #416]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a0c8:	d102      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a0ca:	4b67      	ldr	r3, [pc, #412]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ce:	e1ac      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	e1a9      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a0d6:	4b62      	ldr	r3, [pc, #392]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0e2:	d102      	bne.n	800a0ea <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a0e4:	4b61      	ldr	r3, [pc, #388]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0e8:	e19f      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ee:	e19c      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f4:	e199      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a0f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0fa:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a0fe:	430b      	orrs	r3, r1
 800a100:	d173      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a102:	4b57      	ldr	r3, [pc, #348]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a10a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a112:	d02f      	beq.n	800a174 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11a:	d863      	bhi.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d004      	beq.n	800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a128:	d012      	beq.n	800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a12a:	e05b      	b.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a12c:	4b4c      	ldr	r3, [pc, #304]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a134:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a138:	d107      	bne.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a13a:	f107 0318 	add.w	r3, r7, #24
 800a13e:	4618      	mov	r0, r3
 800a140:	f000 f996 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a144:	69bb      	ldr	r3, [r7, #24]
 800a146:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a148:	e16f      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a14a:	2300      	movs	r3, #0
 800a14c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14e:	e16c      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a150:	4b43      	ldr	r3, [pc, #268]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a158:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a15c:	d107      	bne.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a15e:	f107 030c 	add.w	r3, r7, #12
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fad8 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a168:	697b      	ldr	r3, [r7, #20]
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a16c:	e15d      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a172:	e15a      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a174:	4b3a      	ldr	r3, [pc, #232]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a178:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a17c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a17e:	4b38      	ldr	r3, [pc, #224]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0304 	and.w	r3, r3, #4
 800a186:	2b04      	cmp	r3, #4
 800a188:	d10c      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a18a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d109      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a190:	4b33      	ldr	r3, [pc, #204]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	08db      	lsrs	r3, r3, #3
 800a196:	f003 0303 	and.w	r3, r3, #3
 800a19a:	4a32      	ldr	r2, [pc, #200]	@ (800a264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a19c:	fa22 f303 	lsr.w	r3, r2, r3
 800a1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1a2:	e01e      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1a4:	4b2e      	ldr	r3, [pc, #184]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1b0:	d106      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a1b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1b8:	d102      	bne.n	800a1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1ba:	4b2b      	ldr	r3, [pc, #172]	@ (800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1be:	e010      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1c0:	4b27      	ldr	r3, [pc, #156]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1cc:	d106      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1d4:	d102      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1d6:	4b25      	ldr	r3, [pc, #148]	@ (800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1da:	e002      	b.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1e0:	e123      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a1e2:	e122      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e8:	e11f      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a1ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ee:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a1f2:	430b      	orrs	r3, r1
 800a1f4:	d13c      	bne.n	800a270 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a1fe:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a202:	2b00      	cmp	r3, #0
 800a204:	d004      	beq.n	800a210 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a20c:	d012      	beq.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a20e:	e023      	b.n	800a258 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a210:	4b13      	ldr	r3, [pc, #76]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a21c:	d107      	bne.n	800a22e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a21e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a222:	4618      	mov	r0, r3
 800a224:	f000 fbcc 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a22c:	e0fd      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a22e:	2300      	movs	r3, #0
 800a230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a232:	e0fa      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a234:	4b0a      	ldr	r3, [pc, #40]	@ (800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a23c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a240:	d107      	bne.n	800a252 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a242:	f107 0318 	add.w	r3, r7, #24
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f912 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a24c:	6a3b      	ldr	r3, [r7, #32]
 800a24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a250:	e0eb      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a256:	e0e8      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a258:	2300      	movs	r3, #0
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a25c:	e0e5      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a25e:	bf00      	nop
 800a260:	58024400 	.word	0x58024400
 800a264:	03d09000 	.word	0x03d09000
 800a268:	003d0900 	.word	0x003d0900
 800a26c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a270:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a274:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a278:	430b      	orrs	r3, r1
 800a27a:	f040 8085 	bne.w	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a27e:	4b6d      	ldr	r3, [pc, #436]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a282:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a286:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a28a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a28e:	d06b      	beq.n	800a368 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a290:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a296:	d874      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a29e:	d056      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2a6:	d86c      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2ae:	d03b      	beq.n	800a328 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a2b6:	d864      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2be:	d021      	beq.n	800a304 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2c6:	d85c      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d004      	beq.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a2ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a2d4:	d004      	beq.n	800a2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a2d6:	e054      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a2d8:	f000 f8b4 	bl	800a444 <HAL_RCCEx_GetD3PCLK1Freq>
 800a2dc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a2de:	e0a4      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2e0:	4b54      	ldr	r3, [pc, #336]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2ec:	d107      	bne.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2ee:	f107 0318 	add.w	r3, r7, #24
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f000 f8bc 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2fc:	e095      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2fe:	2300      	movs	r3, #0
 800a300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a302:	e092      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a304:	4b4b      	ldr	r3, [pc, #300]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a310:	d107      	bne.n	800a322 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a312:	f107 030c 	add.w	r3, r7, #12
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f9fe 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a320:	e083      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a322:	2300      	movs	r3, #0
 800a324:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a326:	e080      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a328:	4b42      	ldr	r3, [pc, #264]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f003 0304 	and.w	r3, r3, #4
 800a330:	2b04      	cmp	r3, #4
 800a332:	d109      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a334:	4b3f      	ldr	r3, [pc, #252]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	08db      	lsrs	r3, r3, #3
 800a33a:	f003 0303 	and.w	r3, r3, #3
 800a33e:	4a3e      	ldr	r2, [pc, #248]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a346:	e070      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e06d      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a34e:	4b39      	ldr	r3, [pc, #228]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a35a:	d102      	bne.n	800a362 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a35c:	4b37      	ldr	r3, [pc, #220]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a35e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a360:	e063      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a362:	2300      	movs	r3, #0
 800a364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a366:	e060      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a368:	4b32      	ldr	r3, [pc, #200]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a374:	d102      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a376:	4b32      	ldr	r3, [pc, #200]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a37a:	e056      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a380:	e053      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a386:	e050      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a38c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a390:	430b      	orrs	r3, r1
 800a392:	d148      	bne.n	800a426 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a394:	4b27      	ldr	r3, [pc, #156]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a398:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a39c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d02a      	beq.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ac:	d838      	bhi.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3ba:	d00d      	beq.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a3bc:	e030      	b.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3be:	4b1d      	ldr	r3, [pc, #116]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ca:	d102      	bne.n	800a3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a3cc:	4b1c      	ldr	r3, [pc, #112]	@ (800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d0:	e02b      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d6:	e028      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3d8:	4b16      	ldr	r3, [pc, #88]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3e4:	d107      	bne.n	800a3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fae8 	bl	800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f4:	e019      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fa:	e016      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a408:	d107      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a40a:	f107 0318 	add.w	r3, r7, #24
 800a40e:	4618      	mov	r0, r3
 800a410:	f000 f82e 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a418:	e007      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a41a:	2300      	movs	r3, #0
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a41e:	e004      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a420:	2300      	movs	r3, #0
 800a422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a424:	e001      	b.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a426:	2300      	movs	r3, #0
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a42a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3740      	adds	r7, #64	@ 0x40
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	58024400 	.word	0x58024400
 800a438:	03d09000 	.word	0x03d09000
 800a43c:	003d0900 	.word	0x003d0900
 800a440:	017d7840 	.word	0x017d7840

0800a444 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a448:	f7fe f8ec 	bl	8008624 <HAL_RCC_GetHCLKFreq>
 800a44c:	4602      	mov	r2, r0
 800a44e:	4b06      	ldr	r3, [pc, #24]	@ (800a468 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	091b      	lsrs	r3, r3, #4
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	4904      	ldr	r1, [pc, #16]	@ (800a46c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a45a:	5ccb      	ldrb	r3, [r1, r3]
 800a45c:	f003 031f 	and.w	r3, r3, #31
 800a460:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a464:	4618      	mov	r0, r3
 800a466:	bd80      	pop	{r7, pc}
 800a468:	58024400 	.word	0x58024400
 800a46c:	080132b4 	.word	0x080132b4

0800a470 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a470:	b480      	push	{r7}
 800a472:	b089      	sub	sp, #36	@ 0x24
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a478:	4ba1      	ldr	r3, [pc, #644]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47c:	f003 0303 	and.w	r3, r3, #3
 800a480:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a482:	4b9f      	ldr	r3, [pc, #636]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a486:	0b1b      	lsrs	r3, r3, #12
 800a488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a48c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a48e:	4b9c      	ldr	r3, [pc, #624]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a492:	091b      	lsrs	r3, r3, #4
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a49a:	4b99      	ldr	r3, [pc, #612]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a49c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a49e:	08db      	lsrs	r3, r3, #3
 800a4a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a4a4:	693a      	ldr	r2, [r7, #16]
 800a4a6:	fb02 f303 	mul.w	r3, r2, r3
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 8111 	beq.w	800a6e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	f000 8083 	beq.w	800a5cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	f200 80a1 	bhi.w	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a4ce:	69bb      	ldr	r3, [r7, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d003      	beq.n	800a4dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a4d4:	69bb      	ldr	r3, [r7, #24]
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d056      	beq.n	800a588 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a4da:	e099      	b.n	800a610 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4dc:	4b88      	ldr	r3, [pc, #544]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f003 0320 	and.w	r3, r3, #32
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d02d      	beq.n	800a544 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e8:	4b85      	ldr	r3, [pc, #532]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	08db      	lsrs	r3, r3, #3
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	4a84      	ldr	r2, [pc, #528]	@ (800a704 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	ee07 3a90 	vmov	s15, r3
 800a500:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	ee07 3a90 	vmov	s15, r3
 800a50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a50e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a512:	4b7b      	ldr	r3, [pc, #492]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51a:	ee07 3a90 	vmov	s15, r3
 800a51e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a522:	ed97 6a03 	vldr	s12, [r7, #12]
 800a526:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a52a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a52e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a53a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a542:	e087      	b.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a54e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a70c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a556:	4b6a      	ldr	r3, [pc, #424]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a566:	ed97 6a03 	vldr	s12, [r7, #12]
 800a56a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a56e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a576:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a57a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a586:	e065      	b.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a592:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a59a:	4b59      	ldr	r3, [pc, #356]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5a2:	ee07 3a90 	vmov	s15, r3
 800a5a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5ca:	e043      	b.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a5da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5de:	4b48      	ldr	r3, [pc, #288]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a5e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5e6:	ee07 3a90 	vmov	s15, r3
 800a5ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a5f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a60a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a60e:	e021      	b.n	800a654 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a61a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a710 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a61e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a622:	4b37      	ldr	r3, [pc, #220]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a62a:	ee07 3a90 	vmov	s15, r3
 800a62e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a632:	ed97 6a03 	vldr	s12, [r7, #12]
 800a636:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a708 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a63a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a63e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a64a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a64e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a652:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a654:	4b2a      	ldr	r3, [pc, #168]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	0a5b      	lsrs	r3, r3, #9
 800a65a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a67a:	ee17 2a90 	vmov	r2, s15
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a682:	4b1f      	ldr	r3, [pc, #124]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	0c1b      	lsrs	r3, r3, #16
 800a688:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a68c:	ee07 3a90 	vmov	s15, r3
 800a690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a694:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a698:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a69c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6a8:	ee17 2a90 	vmov	r2, s15
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a6b0:	4b13      	ldr	r3, [pc, #76]	@ (800a700 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	0e1b      	lsrs	r3, r3, #24
 800a6b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6ba:	ee07 3a90 	vmov	s15, r3
 800a6be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a6ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800a6ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a6d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a6d6:	ee17 2a90 	vmov	r2, s15
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a6de:	e008      	b.n	800a6f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]
}
 800a6f2:	bf00      	nop
 800a6f4:	3724      	adds	r7, #36	@ 0x24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	58024400 	.word	0x58024400
 800a704:	03d09000 	.word	0x03d09000
 800a708:	46000000 	.word	0x46000000
 800a70c:	4c742400 	.word	0x4c742400
 800a710:	4a742400 	.word	0x4a742400
 800a714:	4bbebc20 	.word	0x4bbebc20

0800a718 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a718:	b480      	push	{r7}
 800a71a:	b089      	sub	sp, #36	@ 0x24
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a720:	4ba1      	ldr	r3, [pc, #644]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a724:	f003 0303 	and.w	r3, r3, #3
 800a728:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a72a:	4b9f      	ldr	r3, [pc, #636]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72e:	0d1b      	lsrs	r3, r3, #20
 800a730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a734:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a736:	4b9c      	ldr	r3, [pc, #624]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73a:	0a1b      	lsrs	r3, r3, #8
 800a73c:	f003 0301 	and.w	r3, r3, #1
 800a740:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a742:	4b99      	ldr	r3, [pc, #612]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a746:	08db      	lsrs	r3, r3, #3
 800a748:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	fb02 f303 	mul.w	r3, r2, r3
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 8111 	beq.w	800a988 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	2b02      	cmp	r3, #2
 800a76a:	f000 8083 	beq.w	800a874 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	2b02      	cmp	r3, #2
 800a772:	f200 80a1 	bhi.w	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a77c:	69bb      	ldr	r3, [r7, #24]
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d056      	beq.n	800a830 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a782:	e099      	b.n	800a8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a784:	4b88      	ldr	r3, [pc, #544]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 0320 	and.w	r3, r3, #32
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d02d      	beq.n	800a7ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a790:	4b85      	ldr	r3, [pc, #532]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	08db      	lsrs	r3, r3, #3
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	4a84      	ldr	r2, [pc, #528]	@ (800a9ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a79c:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7a2:	68bb      	ldr	r3, [r7, #8]
 800a7a4:	ee07 3a90 	vmov	s15, r3
 800a7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ba:	4b7b      	ldr	r3, [pc, #492]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c2:	ee07 3a90 	vmov	s15, r3
 800a7c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a7d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7ea:	e087      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b6a      	ldr	r3, [pc, #424]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a812:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a82e:	e065      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a842:	4b59      	ldr	r3, [pc, #356]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a03 	vldr	s12, [r7, #12]
 800a856:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a872:	e043      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b48      	ldr	r3, [pc, #288]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8b6:	e021      	b.n	800a8fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b37      	ldr	r3, [pc, #220]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a8fc:	4b2a      	ldr	r3, [pc, #168]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a900:	0a5b      	lsrs	r3, r3, #9
 800a902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a916:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a922:	ee17 2a90 	vmov	r2, s15
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a92a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a92c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a92e:	0c1b      	lsrs	r3, r3, #16
 800a930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a934:	ee07 3a90 	vmov	s15, r3
 800a938:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a940:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a944:	edd7 6a07 	vldr	s13, [r7, #28]
 800a948:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a950:	ee17 2a90 	vmov	r2, s15
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a958:	4b13      	ldr	r3, [pc, #76]	@ (800a9a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95c:	0e1b      	lsrs	r3, r3, #24
 800a95e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a96e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a972:	edd7 6a07 	vldr	s13, [r7, #28]
 800a976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a97e:	ee17 2a90 	vmov	r2, s15
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a986:	e008      	b.n	800a99a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2200      	movs	r2, #0
 800a992:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	609a      	str	r2, [r3, #8]
}
 800a99a:	bf00      	nop
 800a99c:	3724      	adds	r7, #36	@ 0x24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	58024400 	.word	0x58024400
 800a9ac:	03d09000 	.word	0x03d09000
 800a9b0:	46000000 	.word	0x46000000
 800a9b4:	4c742400 	.word	0x4c742400
 800a9b8:	4a742400 	.word	0x4a742400
 800a9bc:	4bbebc20 	.word	0x4bbebc20

0800a9c0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b089      	sub	sp, #36	@ 0x24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9c8:	4ba0      	ldr	r3, [pc, #640]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9cc:	f003 0303 	and.w	r3, r3, #3
 800a9d0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a9d2:	4b9e      	ldr	r3, [pc, #632]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9d6:	091b      	lsrs	r3, r3, #4
 800a9d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a9dc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a9de:	4b9b      	ldr	r3, [pc, #620]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e2:	f003 0301 	and.w	r3, r3, #1
 800a9e6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9e8:	4b98      	ldr	r3, [pc, #608]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	fb02 f303 	mul.w	r3, r2, r3
 800a9f8:	ee07 3a90 	vmov	s15, r3
 800a9fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	f000 8111 	beq.w	800ac2e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	f000 8083 	beq.w	800ab1a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	f200 80a1 	bhi.w	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d056      	beq.n	800aad6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aa28:	e099      	b.n	800ab5e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa2a:	4b88      	ldr	r3, [pc, #544]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	f003 0320 	and.w	r3, r3, #32
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d02d      	beq.n	800aa92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa36:	4b85      	ldr	r3, [pc, #532]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	08db      	lsrs	r3, r3, #3
 800aa3c:	f003 0303 	and.w	r3, r3, #3
 800aa40:	4a83      	ldr	r2, [pc, #524]	@ (800ac50 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800aa42:	fa22 f303 	lsr.w	r3, r2, r3
 800aa46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	ee07 3a90 	vmov	s15, r3
 800aa58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa60:	4b7a      	ldr	r3, [pc, #488]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aa62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa70:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa74:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ac54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aa78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa90:	e087      	b.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	ee07 3a90 	vmov	s15, r3
 800aa98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa9c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ac58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800aaa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaa4:	4b69      	ldr	r3, [pc, #420]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaac:	ee07 3a90 	vmov	s15, r3
 800aab0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aab4:	ed97 6a03 	vldr	s12, [r7, #12]
 800aab8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ac54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aabc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aac4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aac8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aad4:	e065      	b.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aad6:	697b      	ldr	r3, [r7, #20]
 800aad8:	ee07 3a90 	vmov	s15, r3
 800aadc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ac5c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800aae4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aae8:	4b58      	ldr	r3, [pc, #352]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aaea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf0:	ee07 3a90 	vmov	s15, r3
 800aaf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800aafc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ac54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab18:	e043      	b.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	ee07 3a90 	vmov	s15, r3
 800ab20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab24:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ac60 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ab28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab2c:	4b47      	ldr	r3, [pc, #284]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab34:	ee07 3a90 	vmov	s15, r3
 800ab38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab40:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ac54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab5c:	e021      	b.n	800aba2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	ee07 3a90 	vmov	s15, r3
 800ab64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab68:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ac58 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ab6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab70:	4b36      	ldr	r3, [pc, #216]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab78:	ee07 3a90 	vmov	s15, r3
 800ab7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab84:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ac54 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ab88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aba0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800aba2:	4b2a      	ldr	r3, [pc, #168]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba6:	0a5b      	lsrs	r3, r3, #9
 800aba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abac:	ee07 3a90 	vmov	s15, r3
 800abb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abbc:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abc8:	ee17 2a90 	vmov	r2, s15
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800abd0:	4b1e      	ldr	r3, [pc, #120]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abd4:	0c1b      	lsrs	r3, r3, #16
 800abd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abda:	ee07 3a90 	vmov	s15, r3
 800abde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abea:	edd7 6a07 	vldr	s13, [r7, #28]
 800abee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abf6:	ee17 2a90 	vmov	r2, s15
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800abfe:	4b13      	ldr	r3, [pc, #76]	@ (800ac4c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac02:	0e1b      	lsrs	r3, r3, #24
 800ac04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac08:	ee07 3a90 	vmov	s15, r3
 800ac0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac14:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac18:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac24:	ee17 2a90 	vmov	r2, s15
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ac2c:	e008      	b.n	800ac40 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	609a      	str	r2, [r3, #8]
}
 800ac40:	bf00      	nop
 800ac42:	3724      	adds	r7, #36	@ 0x24
 800ac44:	46bd      	mov	sp, r7
 800ac46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4a:	4770      	bx	lr
 800ac4c:	58024400 	.word	0x58024400
 800ac50:	03d09000 	.word	0x03d09000
 800ac54:	46000000 	.word	0x46000000
 800ac58:	4c742400 	.word	0x4c742400
 800ac5c:	4a742400 	.word	0x4a742400
 800ac60:	4bbebc20 	.word	0x4bbebc20

0800ac64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac72:	4b53      	ldr	r3, [pc, #332]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ac74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac76:	f003 0303 	and.w	r3, r3, #3
 800ac7a:	2b03      	cmp	r3, #3
 800ac7c:	d101      	bne.n	800ac82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e099      	b.n	800adb6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac82:	4b4f      	ldr	r3, [pc, #316]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a4e      	ldr	r2, [pc, #312]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ac88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ac8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac8e:	f7f8 faf3 	bl	8003278 <HAL_GetTick>
 800ac92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac94:	e008      	b.n	800aca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ac96:	f7f8 faef 	bl	8003278 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	2b02      	cmp	r3, #2
 800aca2:	d901      	bls.n	800aca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e086      	b.n	800adb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aca8:	4b45      	ldr	r3, [pc, #276]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1f0      	bne.n	800ac96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800acb4:	4b42      	ldr	r3, [pc, #264]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800acb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acb8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	031b      	lsls	r3, r3, #12
 800acc2:	493f      	ldr	r1, [pc, #252]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800acc4:	4313      	orrs	r3, r2
 800acc6:	628b      	str	r3, [r1, #40]	@ 0x28
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	3b01      	subs	r3, #1
 800acce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	025b      	lsls	r3, r3, #9
 800acda:	b29b      	uxth	r3, r3
 800acdc:	431a      	orrs	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	3b01      	subs	r3, #1
 800ace4:	041b      	lsls	r3, r3, #16
 800ace6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	3b01      	subs	r3, #1
 800acf2:	061b      	lsls	r3, r3, #24
 800acf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800acf8:	4931      	ldr	r1, [pc, #196]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800acfe:	4b30      	ldr	r3, [pc, #192]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	695b      	ldr	r3, [r3, #20]
 800ad0a:	492d      	ldr	r1, [pc, #180]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ad10:	4b2b      	ldr	r3, [pc, #172]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad14:	f023 0220 	bic.w	r2, r3, #32
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699b      	ldr	r3, [r3, #24]
 800ad1c:	4928      	ldr	r1, [pc, #160]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ad22:	4b27      	ldr	r3, [pc, #156]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad26:	4a26      	ldr	r2, [pc, #152]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad28:	f023 0310 	bic.w	r3, r3, #16
 800ad2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ad2e:	4b24      	ldr	r3, [pc, #144]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad32:	4b24      	ldr	r3, [pc, #144]	@ (800adc4 <RCCEx_PLL2_Config+0x160>)
 800ad34:	4013      	ands	r3, r2
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	69d2      	ldr	r2, [r2, #28]
 800ad3a:	00d2      	lsls	r2, r2, #3
 800ad3c:	4920      	ldr	r1, [pc, #128]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ad42:	4b1f      	ldr	r3, [pc, #124]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad46:	4a1e      	ldr	r2, [pc, #120]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad48:	f043 0310 	orr.w	r3, r3, #16
 800ad4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d106      	bne.n	800ad62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ad54:	4b1a      	ldr	r3, [pc, #104]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad58:	4a19      	ldr	r2, [pc, #100]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad60:	e00f      	b.n	800ad82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d106      	bne.n	800ad76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad68:	4b15      	ldr	r3, [pc, #84]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6c:	4a14      	ldr	r2, [pc, #80]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ad74:	e005      	b.n	800ad82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad76:	4b12      	ldr	r3, [pc, #72]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad7a:	4a11      	ldr	r2, [pc, #68]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ad80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad82:	4b0f      	ldr	r3, [pc, #60]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a0e      	ldr	r2, [pc, #56]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800ad88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad8e:	f7f8 fa73 	bl	8003278 <HAL_GetTick>
 800ad92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad94:	e008      	b.n	800ada8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad96:	f7f8 fa6f 	bl	8003278 <HAL_GetTick>
 800ad9a:	4602      	mov	r2, r0
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d901      	bls.n	800ada8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e006      	b.n	800adb6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ada8:	4b05      	ldr	r3, [pc, #20]	@ (800adc0 <RCCEx_PLL2_Config+0x15c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d0f0      	beq.n	800ad96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800adb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	58024400 	.word	0x58024400
 800adc4:	ffff0007 	.word	0xffff0007

0800adc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800add2:	2300      	movs	r3, #0
 800add4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800add6:	4b53      	ldr	r3, [pc, #332]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800add8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800adda:	f003 0303 	and.w	r3, r3, #3
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d101      	bne.n	800ade6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e099      	b.n	800af1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ade6:	4b4f      	ldr	r3, [pc, #316]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a4e      	ldr	r2, [pc, #312]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800adec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800adf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adf2:	f7f8 fa41 	bl	8003278 <HAL_GetTick>
 800adf6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adf8:	e008      	b.n	800ae0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800adfa:	f7f8 fa3d 	bl	8003278 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d901      	bls.n	800ae0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae08:	2303      	movs	r3, #3
 800ae0a:	e086      	b.n	800af1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae0c:	4b45      	ldr	r3, [pc, #276]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d1f0      	bne.n	800adfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ae18:	4b42      	ldr	r3, [pc, #264]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	051b      	lsls	r3, r3, #20
 800ae26:	493f      	ldr	r1, [pc, #252]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	3b01      	subs	r3, #1
 800ae32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	025b      	lsls	r3, r3, #9
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	431a      	orrs	r2, r3
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	68db      	ldr	r3, [r3, #12]
 800ae46:	3b01      	subs	r3, #1
 800ae48:	041b      	lsls	r3, r3, #16
 800ae4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	691b      	ldr	r3, [r3, #16]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	061b      	lsls	r3, r3, #24
 800ae58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ae5c:	4931      	ldr	r1, [pc, #196]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae62:	4b30      	ldr	r3, [pc, #192]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	695b      	ldr	r3, [r3, #20]
 800ae6e:	492d      	ldr	r1, [pc, #180]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae70:	4313      	orrs	r3, r2
 800ae72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae74:	4b2b      	ldr	r3, [pc, #172]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	699b      	ldr	r3, [r3, #24]
 800ae80:	4928      	ldr	r1, [pc, #160]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae86:	4b27      	ldr	r3, [pc, #156]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8a:	4a26      	ldr	r2, [pc, #152]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae92:	4b24      	ldr	r3, [pc, #144]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800ae94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae96:	4b24      	ldr	r3, [pc, #144]	@ (800af28 <RCCEx_PLL3_Config+0x160>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	69d2      	ldr	r2, [r2, #28]
 800ae9e:	00d2      	lsls	r2, r2, #3
 800aea0:	4920      	ldr	r1, [pc, #128]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800aea6:	4b1f      	ldr	r3, [pc, #124]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeaa:	4a1e      	ldr	r2, [pc, #120]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aeac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d106      	bne.n	800aec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800aeb8:	4b1a      	ldr	r3, [pc, #104]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aeba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aebc:	4a19      	ldr	r2, [pc, #100]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800aec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aec4:	e00f      	b.n	800aee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d106      	bne.n	800aeda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aecc:	4b15      	ldr	r3, [pc, #84]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	4a14      	ldr	r2, [pc, #80]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aed2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800aed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800aed8:	e005      	b.n	800aee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aeda:	4b12      	ldr	r3, [pc, #72]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aedc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aede:	4a11      	ldr	r2, [pc, #68]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aee6:	4b0f      	ldr	r3, [pc, #60]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a0e      	ldr	r2, [pc, #56]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800aeec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aef2:	f7f8 f9c1 	bl	8003278 <HAL_GetTick>
 800aef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aef8:	e008      	b.n	800af0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aefa:	f7f8 f9bd 	bl	8003278 <HAL_GetTick>
 800aefe:	4602      	mov	r2, r0
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	2b02      	cmp	r3, #2
 800af06:	d901      	bls.n	800af0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af08:	2303      	movs	r3, #3
 800af0a:	e006      	b.n	800af1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af0c:	4b05      	ldr	r3, [pc, #20]	@ (800af24 <RCCEx_PLL3_Config+0x15c>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af14:	2b00      	cmp	r3, #0
 800af16:	d0f0      	beq.n	800aefa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3710      	adds	r7, #16
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}
 800af22:	bf00      	nop
 800af24:	58024400 	.word	0x58024400
 800af28:	ffff0007 	.word	0xffff0007

0800af2c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	@ 0x28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d101      	bne.n	800af3e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	e201      	b.n	800b342 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800af44:	2b01      	cmp	r3, #1
 800af46:	d113      	bne.n	800af70 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	4a99      	ldr	r2, [pc, #612]	@ (800b1b4 <HAL_SAI_Init+0x288>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d004      	beq.n	800af5c <HAL_SAI_Init+0x30>
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a98      	ldr	r2, [pc, #608]	@ (800b1b8 <HAL_SAI_Init+0x28c>)
 800af58:	4293      	cmp	r3, r2
 800af5a:	d107      	bne.n	800af6c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800af60:	2b01      	cmp	r3, #1
 800af62:	d103      	bne.n	800af6c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	e1e8      	b.n	800b342 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a8f      	ldr	r2, [pc, #572]	@ (800b1b4 <HAL_SAI_Init+0x288>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d004      	beq.n	800af84 <HAL_SAI_Init+0x58>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	4a8f      	ldr	r2, [pc, #572]	@ (800b1bc <HAL_SAI_Init+0x290>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d102      	bne.n	800af8a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800af84:	4b8e      	ldr	r3, [pc, #568]	@ (800b1c0 <HAL_SAI_Init+0x294>)
 800af86:	61bb      	str	r3, [r7, #24]
 800af88:	e00e      	b.n	800afa8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a8a      	ldr	r2, [pc, #552]	@ (800b1b8 <HAL_SAI_Init+0x28c>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d004      	beq.n	800af9e <HAL_SAI_Init+0x72>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a8a      	ldr	r2, [pc, #552]	@ (800b1c4 <HAL_SAI_Init+0x298>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d102      	bne.n	800afa4 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800af9e:	4b8a      	ldr	r3, [pc, #552]	@ (800b1c8 <HAL_SAI_Init+0x29c>)
 800afa0:	61bb      	str	r3, [r7, #24]
 800afa2:	e001      	b.n	800afa8 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800afa4:	2301      	movs	r3, #1
 800afa6:	e1cc      	b.n	800b342 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7f7 fa5b 	bl	8002478 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 f9cc 	bl	800b360 <SAI_Disable>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d001      	beq.n	800afd2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e1b7      	b.n	800b342 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d00c      	beq.n	800affc <HAL_SAI_Init+0xd0>
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d80d      	bhi.n	800b002 <HAL_SAI_Init+0xd6>
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d002      	beq.n	800aff0 <HAL_SAI_Init+0xc4>
 800afea:	2b01      	cmp	r3, #1
 800afec:	d003      	beq.n	800aff6 <HAL_SAI_Init+0xca>
 800afee:	e008      	b.n	800b002 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800aff4:	e008      	b.n	800b008 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800aff6:	2310      	movs	r3, #16
 800aff8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800affa:	e005      	b.n	800b008 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800affc:	2320      	movs	r3, #32
 800affe:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b000:	e002      	b.n	800b008 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800b002:	2300      	movs	r3, #0
 800b004:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b006:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b05      	cmp	r3, #5
 800b00e:	d822      	bhi.n	800b056 <HAL_SAI_Init+0x12a>
 800b010:	a201      	add	r2, pc, #4	@ (adr r2, 800b018 <HAL_SAI_Init+0xec>)
 800b012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b016:	bf00      	nop
 800b018:	0800b031 	.word	0x0800b031
 800b01c:	0800b037 	.word	0x0800b037
 800b020:	0800b03f 	.word	0x0800b03f
 800b024:	0800b057 	.word	0x0800b057
 800b028:	0800b057 	.word	0x0800b057
 800b02c:	0800b047 	.word	0x0800b047
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b030:	2300      	movs	r3, #0
 800b032:	61fb      	str	r3, [r7, #28]
      break;
 800b034:	e012      	b.n	800b05c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b03a:	61fb      	str	r3, [r7, #28]
      break;
 800b03c:	e00e      	b.n	800b05c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b03e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b042:	61fb      	str	r3, [r7, #28]
      break;
 800b044:	e00a      	b.n	800b05c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b046:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b04a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b04e:	f043 0303 	orr.w	r3, r3, #3
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b054:	e002      	b.n	800b05c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	61fb      	str	r3, [r7, #28]
      break;
 800b05a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b060:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6a1b      	ldr	r3, [r3, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 808a 	beq.w	800b180 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a4f      	ldr	r2, [pc, #316]	@ (800b1b4 <HAL_SAI_Init+0x288>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d004      	beq.n	800b084 <HAL_SAI_Init+0x158>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a4f      	ldr	r2, [pc, #316]	@ (800b1bc <HAL_SAI_Init+0x290>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d106      	bne.n	800b092 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b084:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b088:	f04f 0100 	mov.w	r1, #0
 800b08c:	f7fe fd08 	bl	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b090:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a48      	ldr	r2, [pc, #288]	@ (800b1b8 <HAL_SAI_Init+0x28c>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d106      	bne.n	800b0aa <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b09c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b0a0:	f04f 0100 	mov.w	r1, #0
 800b0a4:	f7fe fcfc 	bl	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0a8:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	4a45      	ldr	r2, [pc, #276]	@ (800b1c4 <HAL_SAI_Init+0x298>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d106      	bne.n	800b0c2 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b0b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b0b8:	f04f 0100 	mov.w	r1, #0
 800b0bc:	f7fe fcf0 	bl	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq>
 800b0c0:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	699b      	ldr	r3, [r3, #24]
 800b0c6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b0ca:	d120      	bne.n	800b10e <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0d0:	2b04      	cmp	r3, #4
 800b0d2:	d102      	bne.n	800b0da <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b0d4:	2340      	movs	r3, #64	@ 0x40
 800b0d6:	60fb      	str	r3, [r7, #12]
 800b0d8:	e00a      	b.n	800b0f0 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0de:	2b08      	cmp	r3, #8
 800b0e0:	d103      	bne.n	800b0ea <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b0e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e002      	b.n	800b0f0 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0ee:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	4613      	mov	r3, r2
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	4413      	add	r3, r2
 800b0f8:	005b      	lsls	r3, r3, #1
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6a1b      	ldr	r3, [r3, #32]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	fbb1 f3f3 	udiv	r3, r1, r3
 800b10a:	613b      	str	r3, [r7, #16]
 800b10c:	e017      	b.n	800b13e <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b112:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b116:	d101      	bne.n	800b11c <HAL_SAI_Init+0x1f0>
 800b118:	2302      	movs	r3, #2
 800b11a:	e000      	b.n	800b11e <HAL_SAI_Init+0x1f2>
 800b11c:	2301      	movs	r3, #1
 800b11e:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b120:	697a      	ldr	r2, [r7, #20]
 800b122:	4613      	mov	r3, r2
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	005b      	lsls	r3, r3, #1
 800b12a:	4619      	mov	r1, r3
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a1b      	ldr	r3, [r3, #32]
 800b130:	68ba      	ldr	r2, [r7, #8]
 800b132:	fb02 f303 	mul.w	r3, r2, r3
 800b136:	021b      	lsls	r3, r3, #8
 800b138:	fbb1 f3f3 	udiv	r3, r1, r3
 800b13c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	4a22      	ldr	r2, [pc, #136]	@ (800b1cc <HAL_SAI_Init+0x2a0>)
 800b142:	fba2 2303 	umull	r2, r3, r2, r3
 800b146:	08da      	lsrs	r2, r3, #3
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b14c:	6939      	ldr	r1, [r7, #16]
 800b14e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1cc <HAL_SAI_Init+0x2a0>)
 800b150:	fba3 2301 	umull	r2, r3, r3, r1
 800b154:	08da      	lsrs	r2, r3, #3
 800b156:	4613      	mov	r3, r2
 800b158:	009b      	lsls	r3, r3, #2
 800b15a:	4413      	add	r3, r2
 800b15c:	005b      	lsls	r3, r3, #1
 800b15e:	1aca      	subs	r2, r1, r3
 800b160:	2a08      	cmp	r2, #8
 800b162:	d904      	bls.n	800b16e <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b172:	2b04      	cmp	r3, #4
 800b174:	d104      	bne.n	800b180 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17a:	085a      	lsrs	r2, r3, #1
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <HAL_SAI_Init+0x264>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d109      	bne.n	800b1a4 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b194:	2b01      	cmp	r3, #1
 800b196:	d101      	bne.n	800b19c <HAL_SAI_Init+0x270>
 800b198:	2300      	movs	r3, #0
 800b19a:	e001      	b.n	800b1a0 <HAL_SAI_Init+0x274>
 800b19c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1a0:	623b      	str	r3, [r7, #32]
 800b1a2:	e017      	b.n	800b1d4 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d111      	bne.n	800b1d0 <HAL_SAI_Init+0x2a4>
 800b1ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b1b0:	e00f      	b.n	800b1d2 <HAL_SAI_Init+0x2a6>
 800b1b2:	bf00      	nop
 800b1b4:	40015804 	.word	0x40015804
 800b1b8:	58005404 	.word	0x58005404
 800b1bc:	40015824 	.word	0x40015824
 800b1c0:	40015800 	.word	0x40015800
 800b1c4:	58005424 	.word	0x58005424
 800b1c8:	58005400 	.word	0x58005400
 800b1cc:	cccccccd 	.word	0xcccccccd
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6819      	ldr	r1, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681a      	ldr	r2, [r3, #0]
 800b1de:	4b5b      	ldr	r3, [pc, #364]	@ (800b34c <HAL_SAI_Init+0x420>)
 800b1e0:	400b      	ands	r3, r1
 800b1e2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6819      	ldr	r1, [r3, #0]
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685a      	ldr	r2, [r3, #4]
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1f2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b1f8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1fe:	431a      	orrs	r2, r3
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800b20c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b218:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b21e:	051b      	lsls	r3, r3, #20
 800b220:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b226:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	430a      	orrs	r2, r1
 800b234:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	6859      	ldr	r1, [r3, #4]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681a      	ldr	r2, [r3, #0]
 800b240:	4b43      	ldr	r3, [pc, #268]	@ (800b350 <HAL_SAI_Init+0x424>)
 800b242:	400b      	ands	r3, r1
 800b244:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	6859      	ldr	r1, [r3, #4]
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	69da      	ldr	r2, [r3, #28]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b254:	431a      	orrs	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b25a:	431a      	orrs	r2, r3
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	430a      	orrs	r2, r1
 800b262:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6899      	ldr	r1, [r3, #8]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681a      	ldr	r2, [r3, #0]
 800b26e:	4b39      	ldr	r3, [pc, #228]	@ (800b354 <HAL_SAI_Init+0x428>)
 800b270:	400b      	ands	r3, r1
 800b272:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6899      	ldr	r1, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b27e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b284:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b28a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b290:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b296:	3b01      	subs	r3, #1
 800b298:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b29a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	430a      	orrs	r2, r1
 800b2a2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	68d9      	ldr	r1, [r3, #12]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b2b2:	400b      	ands	r3, r1
 800b2b4:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	68d9      	ldr	r1, [r3, #12]
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c4:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ca:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2cc:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	021b      	lsls	r3, r3, #8
 800b2d6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	430a      	orrs	r2, r1
 800b2de:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a1c      	ldr	r2, [pc, #112]	@ (800b358 <HAL_SAI_Init+0x42c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d004      	beq.n	800b2f4 <HAL_SAI_Init+0x3c8>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a1b      	ldr	r2, [pc, #108]	@ (800b35c <HAL_SAI_Init+0x430>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	d119      	bne.n	800b328 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2f8:	f023 0201 	bic.w	r2, r3, #1
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b306:	2b01      	cmp	r3, #1
 800b308:	d10e      	bne.n	800b328 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b312:	3b01      	subs	r3, #1
 800b314:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b316:	431a      	orrs	r2, r3
 800b318:	69bb      	ldr	r3, [r7, #24]
 800b31a:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b320:	f043 0201 	orr.w	r2, r3, #1
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b340:	2300      	movs	r3, #0
}
 800b342:	4618      	mov	r0, r3
 800b344:	3728      	adds	r7, #40	@ 0x28
 800b346:	46bd      	mov	sp, r7
 800b348:	bd80      	pop	{r7, pc}
 800b34a:	bf00      	nop
 800b34c:	f005c010 	.word	0xf005c010
 800b350:	ffff1ff0 	.word	0xffff1ff0
 800b354:	fff88000 	.word	0xfff88000
 800b358:	40015804 	.word	0x40015804
 800b35c:	58005404 	.word	0x58005404

0800b360 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b368:	4b18      	ldr	r3, [pc, #96]	@ (800b3cc <SAI_Disable+0x6c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a18      	ldr	r2, [pc, #96]	@ (800b3d0 <SAI_Disable+0x70>)
 800b36e:	fba2 2303 	umull	r2, r3, r2, r3
 800b372:	0b1b      	lsrs	r3, r3, #12
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b38a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b398:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3a6:	e009      	b.n	800b3bc <SAI_Disable+0x5c>
    }
    count--;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e7      	bne.n	800b38c <SAI_Disable+0x2c>

  return status;
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr
 800b3ca:	bf00      	nop
 800b3cc:	24000000 	.word	0x24000000
 800b3d0:	95cbec1b 	.word	0x95cbec1b

0800b3d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	e049      	b.n	800b47a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d106      	bne.n	800b400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f000 f841 	bl	800b482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3304      	adds	r3, #4
 800b410:	4619      	mov	r1, r3
 800b412:	4610      	mov	r0, r2
 800b414:	f000 fb60 	bl	800bad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2201      	movs	r2, #1
 800b41c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3708      	adds	r7, #8
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}

0800b482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b482:	b480      	push	{r7}
 800b484:	b083      	sub	sp, #12
 800b486:	af00      	add	r7, sp, #0
 800b488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b48a:	bf00      	nop
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
	...

0800b498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b498:	b480      	push	{r7}
 800b49a:	b085      	sub	sp, #20
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d001      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e05e      	b.n	800b56e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68da      	ldr	r2, [r3, #12]
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f042 0201 	orr.w	r2, r2, #1
 800b4c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a2b      	ldr	r2, [pc, #172]	@ (800b57c <HAL_TIM_Base_Start_IT+0xe4>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d02c      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4da:	d027      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a27      	ldr	r2, [pc, #156]	@ (800b580 <HAL_TIM_Base_Start_IT+0xe8>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d022      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	4a26      	ldr	r2, [pc, #152]	@ (800b584 <HAL_TIM_Base_Start_IT+0xec>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d01d      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4a24      	ldr	r2, [pc, #144]	@ (800b588 <HAL_TIM_Base_Start_IT+0xf0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d018      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4a23      	ldr	r2, [pc, #140]	@ (800b58c <HAL_TIM_Base_Start_IT+0xf4>)
 800b500:	4293      	cmp	r3, r2
 800b502:	d013      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a21      	ldr	r2, [pc, #132]	@ (800b590 <HAL_TIM_Base_Start_IT+0xf8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d00e      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	4a20      	ldr	r2, [pc, #128]	@ (800b594 <HAL_TIM_Base_Start_IT+0xfc>)
 800b514:	4293      	cmp	r3, r2
 800b516:	d009      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a1e      	ldr	r2, [pc, #120]	@ (800b598 <HAL_TIM_Base_Start_IT+0x100>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d004      	beq.n	800b52c <HAL_TIM_Base_Start_IT+0x94>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a1d      	ldr	r2, [pc, #116]	@ (800b59c <HAL_TIM_Base_Start_IT+0x104>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d115      	bne.n	800b558 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	689a      	ldr	r2, [r3, #8]
 800b532:	4b1b      	ldr	r3, [pc, #108]	@ (800b5a0 <HAL_TIM_Base_Start_IT+0x108>)
 800b534:	4013      	ands	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	2b06      	cmp	r3, #6
 800b53c:	d015      	beq.n	800b56a <HAL_TIM_Base_Start_IT+0xd2>
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b544:	d011      	beq.n	800b56a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f042 0201 	orr.w	r2, r2, #1
 800b554:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b556:	e008      	b.n	800b56a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f042 0201 	orr.w	r2, r2, #1
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	e000      	b.n	800b56c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b56a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b56c:	2300      	movs	r3, #0
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3714      	adds	r7, #20
 800b572:	46bd      	mov	sp, r7
 800b574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b578:	4770      	bx	lr
 800b57a:	bf00      	nop
 800b57c:	40010000 	.word	0x40010000
 800b580:	40000400 	.word	0x40000400
 800b584:	40000800 	.word	0x40000800
 800b588:	40000c00 	.word	0x40000c00
 800b58c:	40010400 	.word	0x40010400
 800b590:	40001800 	.word	0x40001800
 800b594:	40014000 	.word	0x40014000
 800b598:	4000e000 	.word	0x4000e000
 800b59c:	4000e400 	.word	0x4000e400
 800b5a0:	00010007 	.word	0x00010007

0800b5a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e049      	b.n	800b64a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7f7 fb48 	bl	8002c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f000 fa78 	bl	800bad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b652:	b580      	push	{r7, lr}
 800b654:	b084      	sub	sp, #16
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	f003 0302 	and.w	r3, r3, #2
 800b670:	2b00      	cmp	r3, #0
 800b672:	d020      	beq.n	800b6b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d01b      	beq.n	800b6b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	f06f 0202 	mvn.w	r2, #2
 800b686:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2201      	movs	r2, #1
 800b68c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	699b      	ldr	r3, [r3, #24]
 800b694:	f003 0303 	and.w	r3, r3, #3
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d003      	beq.n	800b6a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f000 f9fd 	bl	800ba9c <HAL_TIM_IC_CaptureCallback>
 800b6a2:	e005      	b.n	800b6b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6a4:	6878      	ldr	r0, [r7, #4]
 800b6a6:	f000 f9ef 	bl	800ba88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 fa00 	bl	800bab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	f003 0304 	and.w	r3, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d020      	beq.n	800b702 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d01b      	beq.n	800b702 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f06f 0204 	mvn.w	r2, #4
 800b6d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f9d7 	bl	800ba9c <HAL_TIM_IC_CaptureCallback>
 800b6ee:	e005      	b.n	800b6fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6f0:	6878      	ldr	r0, [r7, #4]
 800b6f2:	f000 f9c9 	bl	800ba88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 f9da 	bl	800bab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f003 0308 	and.w	r3, r3, #8
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d020      	beq.n	800b74e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f003 0308 	and.w	r3, r3, #8
 800b712:	2b00      	cmp	r3, #0
 800b714:	d01b      	beq.n	800b74e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f06f 0208 	mvn.w	r2, #8
 800b71e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2204      	movs	r2, #4
 800b724:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	f003 0303 	and.w	r3, r3, #3
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f9b1 	bl	800ba9c <HAL_TIM_IC_CaptureCallback>
 800b73a:	e005      	b.n	800b748 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f9a3 	bl	800ba88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9b4 	bl	800bab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2200      	movs	r2, #0
 800b74c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f003 0310 	and.w	r3, r3, #16
 800b754:	2b00      	cmp	r3, #0
 800b756:	d020      	beq.n	800b79a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f003 0310 	and.w	r3, r3, #16
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01b      	beq.n	800b79a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f06f 0210 	mvn.w	r2, #16
 800b76a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2208      	movs	r2, #8
 800b770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d003      	beq.n	800b788 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f98b 	bl	800ba9c <HAL_TIM_IC_CaptureCallback>
 800b786:	e005      	b.n	800b794 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f97d 	bl	800ba88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 f98e 	bl	800bab0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2200      	movs	r2, #0
 800b798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	f003 0301 	and.w	r3, r3, #1
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d00c      	beq.n	800b7be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	f003 0301 	and.w	r3, r3, #1
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d007      	beq.n	800b7be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f06f 0201 	mvn.w	r2, #1
 800b7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f7f6 fa9f 	bl	8001cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d104      	bne.n	800b7d2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00c      	beq.n	800b7ec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d007      	beq.n	800b7ec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 fe30 	bl	800c44c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d00c      	beq.n	800b810 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d007      	beq.n	800b810 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fe28 	bl	800c460 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00c      	beq.n	800b834 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b820:	2b00      	cmp	r3, #0
 800b822:	d007      	beq.n	800b834 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b82c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f948 	bl	800bac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b834:	68bb      	ldr	r3, [r7, #8]
 800b836:	f003 0320 	and.w	r3, r3, #32
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00c      	beq.n	800b858 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f003 0320 	and.w	r3, r3, #32
 800b844:	2b00      	cmp	r3, #0
 800b846:	d007      	beq.n	800b858 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f06f 0220 	mvn.w	r2, #32
 800b850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f000 fdf0 	bl	800c438 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b086      	sub	sp, #24
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b86c:	2300      	movs	r3, #0
 800b86e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b876:	2b01      	cmp	r3, #1
 800b878:	d101      	bne.n	800b87e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b87a:	2302      	movs	r3, #2
 800b87c:	e0ff      	b.n	800ba7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b14      	cmp	r3, #20
 800b88a:	f200 80f0 	bhi.w	800ba6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b88e:	a201      	add	r2, pc, #4	@ (adr r2, 800b894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b894:	0800b8e9 	.word	0x0800b8e9
 800b898:	0800ba6f 	.word	0x0800ba6f
 800b89c:	0800ba6f 	.word	0x0800ba6f
 800b8a0:	0800ba6f 	.word	0x0800ba6f
 800b8a4:	0800b929 	.word	0x0800b929
 800b8a8:	0800ba6f 	.word	0x0800ba6f
 800b8ac:	0800ba6f 	.word	0x0800ba6f
 800b8b0:	0800ba6f 	.word	0x0800ba6f
 800b8b4:	0800b96b 	.word	0x0800b96b
 800b8b8:	0800ba6f 	.word	0x0800ba6f
 800b8bc:	0800ba6f 	.word	0x0800ba6f
 800b8c0:	0800ba6f 	.word	0x0800ba6f
 800b8c4:	0800b9ab 	.word	0x0800b9ab
 800b8c8:	0800ba6f 	.word	0x0800ba6f
 800b8cc:	0800ba6f 	.word	0x0800ba6f
 800b8d0:	0800ba6f 	.word	0x0800ba6f
 800b8d4:	0800b9ed 	.word	0x0800b9ed
 800b8d8:	0800ba6f 	.word	0x0800ba6f
 800b8dc:	0800ba6f 	.word	0x0800ba6f
 800b8e0:	0800ba6f 	.word	0x0800ba6f
 800b8e4:	0800ba2d 	.word	0x0800ba2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	68b9      	ldr	r1, [r7, #8]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f000 f9a4 	bl	800bc3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	699a      	ldr	r2, [r3, #24]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0208 	orr.w	r2, r2, #8
 800b902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	699a      	ldr	r2, [r3, #24]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0204 	bic.w	r2, r2, #4
 800b912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	6999      	ldr	r1, [r3, #24]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	691a      	ldr	r2, [r3, #16]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	619a      	str	r2, [r3, #24]
      break;
 800b926:	e0a5      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68b9      	ldr	r1, [r7, #8]
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 fa14 	bl	800bd5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699a      	ldr	r2, [r3, #24]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	699a      	ldr	r2, [r3, #24]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	6999      	ldr	r1, [r3, #24]
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	691b      	ldr	r3, [r3, #16]
 800b95e:	021a      	lsls	r2, r3, #8
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	430a      	orrs	r2, r1
 800b966:	619a      	str	r2, [r3, #24]
      break;
 800b968:	e084      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68b9      	ldr	r1, [r7, #8]
 800b970:	4618      	mov	r0, r3
 800b972:	f000 fa7d 	bl	800be70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	69da      	ldr	r2, [r3, #28]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f042 0208 	orr.w	r2, r2, #8
 800b984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69da      	ldr	r2, [r3, #28]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f022 0204 	bic.w	r2, r2, #4
 800b994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	69d9      	ldr	r1, [r3, #28]
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	691a      	ldr	r2, [r3, #16]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	430a      	orrs	r2, r1
 800b9a6:	61da      	str	r2, [r3, #28]
      break;
 800b9a8:	e064      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68b9      	ldr	r1, [r7, #8]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f000 fae5 	bl	800bf80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69da      	ldr	r2, [r3, #28]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b9c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	69da      	ldr	r2, [r3, #28]
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b9d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	69d9      	ldr	r1, [r3, #28]
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	021a      	lsls	r2, r3, #8
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	61da      	str	r2, [r3, #28]
      break;
 800b9ea:	e043      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68b9      	ldr	r1, [r7, #8]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 fb2e 	bl	800c054 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f042 0208 	orr.w	r2, r2, #8
 800ba06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f022 0204 	bic.w	r2, r2, #4
 800ba16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	691a      	ldr	r2, [r3, #16]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	430a      	orrs	r2, r1
 800ba28:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ba2a:	e023      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	68b9      	ldr	r1, [r7, #8]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 fb72 	bl	800c11c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ba46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	021a      	lsls	r2, r3, #8
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	430a      	orrs	r2, r1
 800ba6a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800ba6c:	e002      	b.n	800ba74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	75fb      	strb	r3, [r7, #23]
      break;
 800ba72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ba7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3718      	adds	r7, #24
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop

0800ba88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba90:	bf00      	nop
 800ba92:	370c      	adds	r7, #12
 800ba94:	46bd      	mov	sp, r7
 800ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9a:	4770      	bx	lr

0800ba9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800baa4:	bf00      	nop
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b083      	sub	sp, #12
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr

0800bad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	4a4a      	ldr	r2, [pc, #296]	@ (800bc14 <TIM_Base_SetConfig+0x13c>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d013      	beq.n	800bb18 <TIM_Base_SetConfig+0x40>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800baf6:	d00f      	beq.n	800bb18 <TIM_Base_SetConfig+0x40>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	4a47      	ldr	r2, [pc, #284]	@ (800bc18 <TIM_Base_SetConfig+0x140>)
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d00b      	beq.n	800bb18 <TIM_Base_SetConfig+0x40>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	4a46      	ldr	r2, [pc, #280]	@ (800bc1c <TIM_Base_SetConfig+0x144>)
 800bb04:	4293      	cmp	r3, r2
 800bb06:	d007      	beq.n	800bb18 <TIM_Base_SetConfig+0x40>
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4a45      	ldr	r2, [pc, #276]	@ (800bc20 <TIM_Base_SetConfig+0x148>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d003      	beq.n	800bb18 <TIM_Base_SetConfig+0x40>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a44      	ldr	r2, [pc, #272]	@ (800bc24 <TIM_Base_SetConfig+0x14c>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d108      	bne.n	800bb2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	685b      	ldr	r3, [r3, #4]
 800bb24:	68fa      	ldr	r2, [r7, #12]
 800bb26:	4313      	orrs	r3, r2
 800bb28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	4a39      	ldr	r2, [pc, #228]	@ (800bc14 <TIM_Base_SetConfig+0x13c>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d027      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb38:	d023      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a36      	ldr	r2, [pc, #216]	@ (800bc18 <TIM_Base_SetConfig+0x140>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d01f      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	4a35      	ldr	r2, [pc, #212]	@ (800bc1c <TIM_Base_SetConfig+0x144>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d01b      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	4a34      	ldr	r2, [pc, #208]	@ (800bc20 <TIM_Base_SetConfig+0x148>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	d017      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4a33      	ldr	r2, [pc, #204]	@ (800bc24 <TIM_Base_SetConfig+0x14c>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d013      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	4a32      	ldr	r2, [pc, #200]	@ (800bc28 <TIM_Base_SetConfig+0x150>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d00f      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a31      	ldr	r2, [pc, #196]	@ (800bc2c <TIM_Base_SetConfig+0x154>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d00b      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	4a30      	ldr	r2, [pc, #192]	@ (800bc30 <TIM_Base_SetConfig+0x158>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d007      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	4a2f      	ldr	r2, [pc, #188]	@ (800bc34 <TIM_Base_SetConfig+0x15c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d003      	beq.n	800bb82 <TIM_Base_SetConfig+0xaa>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4a2e      	ldr	r2, [pc, #184]	@ (800bc38 <TIM_Base_SetConfig+0x160>)
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d108      	bne.n	800bb94 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	4313      	orrs	r3, r2
 800bb92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	689a      	ldr	r2, [r3, #8]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	4a16      	ldr	r2, [pc, #88]	@ (800bc14 <TIM_Base_SetConfig+0x13c>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d00f      	beq.n	800bbe0 <TIM_Base_SetConfig+0x108>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	4a18      	ldr	r2, [pc, #96]	@ (800bc24 <TIM_Base_SetConfig+0x14c>)
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d00b      	beq.n	800bbe0 <TIM_Base_SetConfig+0x108>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4a17      	ldr	r2, [pc, #92]	@ (800bc28 <TIM_Base_SetConfig+0x150>)
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d007      	beq.n	800bbe0 <TIM_Base_SetConfig+0x108>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4a16      	ldr	r2, [pc, #88]	@ (800bc2c <TIM_Base_SetConfig+0x154>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d003      	beq.n	800bbe0 <TIM_Base_SetConfig+0x108>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	4a15      	ldr	r2, [pc, #84]	@ (800bc30 <TIM_Base_SetConfig+0x158>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d103      	bne.n	800bbe8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	691a      	ldr	r2, [r3, #16]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	f003 0301 	and.w	r3, r3, #1
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d105      	bne.n	800bc06 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	691b      	ldr	r3, [r3, #16]
 800bbfe:	f023 0201 	bic.w	r2, r3, #1
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	611a      	str	r2, [r3, #16]
  }
}
 800bc06:	bf00      	nop
 800bc08:	3714      	adds	r7, #20
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc10:	4770      	bx	lr
 800bc12:	bf00      	nop
 800bc14:	40010000 	.word	0x40010000
 800bc18:	40000400 	.word	0x40000400
 800bc1c:	40000800 	.word	0x40000800
 800bc20:	40000c00 	.word	0x40000c00
 800bc24:	40010400 	.word	0x40010400
 800bc28:	40014000 	.word	0x40014000
 800bc2c:	40014400 	.word	0x40014400
 800bc30:	40014800 	.word	0x40014800
 800bc34:	4000e000 	.word	0x4000e000
 800bc38:	4000e400 	.word	0x4000e400

0800bc3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b087      	sub	sp, #28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6a1b      	ldr	r3, [r3, #32]
 800bc4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	f023 0201 	bic.w	r2, r3, #1
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	699b      	ldr	r3, [r3, #24]
 800bc62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	4b37      	ldr	r3, [pc, #220]	@ (800bd44 <TIM_OC1_SetConfig+0x108>)
 800bc68:	4013      	ands	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f023 0303 	bic.w	r3, r3, #3
 800bc72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	68fa      	ldr	r2, [r7, #12]
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	f023 0302 	bic.w	r3, r3, #2
 800bc84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	697a      	ldr	r2, [r7, #20]
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	4a2d      	ldr	r2, [pc, #180]	@ (800bd48 <TIM_OC1_SetConfig+0x10c>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d00f      	beq.n	800bcb8 <TIM_OC1_SetConfig+0x7c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	4a2c      	ldr	r2, [pc, #176]	@ (800bd4c <TIM_OC1_SetConfig+0x110>)
 800bc9c:	4293      	cmp	r3, r2
 800bc9e:	d00b      	beq.n	800bcb8 <TIM_OC1_SetConfig+0x7c>
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	4a2b      	ldr	r2, [pc, #172]	@ (800bd50 <TIM_OC1_SetConfig+0x114>)
 800bca4:	4293      	cmp	r3, r2
 800bca6:	d007      	beq.n	800bcb8 <TIM_OC1_SetConfig+0x7c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	4a2a      	ldr	r2, [pc, #168]	@ (800bd54 <TIM_OC1_SetConfig+0x118>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d003      	beq.n	800bcb8 <TIM_OC1_SetConfig+0x7c>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a29      	ldr	r2, [pc, #164]	@ (800bd58 <TIM_OC1_SetConfig+0x11c>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d10c      	bne.n	800bcd2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	f023 0308 	bic.w	r3, r3, #8
 800bcbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f023 0304 	bic.w	r3, r3, #4
 800bcd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	4a1c      	ldr	r2, [pc, #112]	@ (800bd48 <TIM_OC1_SetConfig+0x10c>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d00f      	beq.n	800bcfa <TIM_OC1_SetConfig+0xbe>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	4a1b      	ldr	r2, [pc, #108]	@ (800bd4c <TIM_OC1_SetConfig+0x110>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d00b      	beq.n	800bcfa <TIM_OC1_SetConfig+0xbe>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	4a1a      	ldr	r2, [pc, #104]	@ (800bd50 <TIM_OC1_SetConfig+0x114>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d007      	beq.n	800bcfa <TIM_OC1_SetConfig+0xbe>
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	4a19      	ldr	r2, [pc, #100]	@ (800bd54 <TIM_OC1_SetConfig+0x118>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d003      	beq.n	800bcfa <TIM_OC1_SetConfig+0xbe>
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a18      	ldr	r2, [pc, #96]	@ (800bd58 <TIM_OC1_SetConfig+0x11c>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d111      	bne.n	800bd1e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bd08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	695b      	ldr	r3, [r3, #20]
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	4313      	orrs	r3, r2
 800bd12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68fa      	ldr	r2, [r7, #12]
 800bd28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	685a      	ldr	r2, [r3, #4]
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	697a      	ldr	r2, [r7, #20]
 800bd36:	621a      	str	r2, [r3, #32]
}
 800bd38:	bf00      	nop
 800bd3a:	371c      	adds	r7, #28
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr
 800bd44:	fffeff8f 	.word	0xfffeff8f
 800bd48:	40010000 	.word	0x40010000
 800bd4c:	40010400 	.word	0x40010400
 800bd50:	40014000 	.word	0x40014000
 800bd54:	40014400 	.word	0x40014400
 800bd58:	40014800 	.word	0x40014800

0800bd5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b087      	sub	sp, #28
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
 800bd64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6a1b      	ldr	r3, [r3, #32]
 800bd6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	f023 0210 	bic.w	r2, r3, #16
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	4b34      	ldr	r3, [pc, #208]	@ (800be58 <TIM_OC2_SetConfig+0xfc>)
 800bd88:	4013      	ands	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	021b      	lsls	r3, r3, #8
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	f023 0320 	bic.w	r3, r3, #32
 800bda6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	011b      	lsls	r3, r3, #4
 800bdae:	697a      	ldr	r2, [r7, #20]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a29      	ldr	r2, [pc, #164]	@ (800be5c <TIM_OC2_SetConfig+0x100>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d003      	beq.n	800bdc4 <TIM_OC2_SetConfig+0x68>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a28      	ldr	r2, [pc, #160]	@ (800be60 <TIM_OC2_SetConfig+0x104>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d10d      	bne.n	800bde0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bdca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	68db      	ldr	r3, [r3, #12]
 800bdd0:	011b      	lsls	r3, r3, #4
 800bdd2:	697a      	ldr	r2, [r7, #20]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdde:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4a1e      	ldr	r2, [pc, #120]	@ (800be5c <TIM_OC2_SetConfig+0x100>)
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d00f      	beq.n	800be08 <TIM_OC2_SetConfig+0xac>
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	4a1d      	ldr	r2, [pc, #116]	@ (800be60 <TIM_OC2_SetConfig+0x104>)
 800bdec:	4293      	cmp	r3, r2
 800bdee:	d00b      	beq.n	800be08 <TIM_OC2_SetConfig+0xac>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	4a1c      	ldr	r2, [pc, #112]	@ (800be64 <TIM_OC2_SetConfig+0x108>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d007      	beq.n	800be08 <TIM_OC2_SetConfig+0xac>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	4a1b      	ldr	r2, [pc, #108]	@ (800be68 <TIM_OC2_SetConfig+0x10c>)
 800bdfc:	4293      	cmp	r3, r2
 800bdfe:	d003      	beq.n	800be08 <TIM_OC2_SetConfig+0xac>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	4a1a      	ldr	r2, [pc, #104]	@ (800be6c <TIM_OC2_SetConfig+0x110>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d113      	bne.n	800be30 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800be10:	693b      	ldr	r3, [r7, #16]
 800be12:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800be16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	695b      	ldr	r3, [r3, #20]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	4313      	orrs	r3, r2
 800be22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	4313      	orrs	r3, r2
 800be2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	693a      	ldr	r2, [r7, #16]
 800be34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	68fa      	ldr	r2, [r7, #12]
 800be3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	685a      	ldr	r2, [r3, #4]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	621a      	str	r2, [r3, #32]
}
 800be4a:	bf00      	nop
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop
 800be58:	feff8fff 	.word	0xfeff8fff
 800be5c:	40010000 	.word	0x40010000
 800be60:	40010400 	.word	0x40010400
 800be64:	40014000 	.word	0x40014000
 800be68:	40014400 	.word	0x40014400
 800be6c:	40014800 	.word	0x40014800

0800be70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a1b      	ldr	r3, [r3, #32]
 800be84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	4b33      	ldr	r3, [pc, #204]	@ (800bf68 <TIM_OC3_SetConfig+0xf8>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f023 0303 	bic.w	r3, r3, #3
 800bea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	4313      	orrs	r3, r2
 800beb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800beb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	689b      	ldr	r3, [r3, #8]
 800bebe:	021b      	lsls	r3, r3, #8
 800bec0:	697a      	ldr	r2, [r7, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	4a28      	ldr	r2, [pc, #160]	@ (800bf6c <TIM_OC3_SetConfig+0xfc>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d003      	beq.n	800bed6 <TIM_OC3_SetConfig+0x66>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	4a27      	ldr	r2, [pc, #156]	@ (800bf70 <TIM_OC3_SetConfig+0x100>)
 800bed2:	4293      	cmp	r3, r2
 800bed4:	d10d      	bne.n	800bef2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bedc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	021b      	lsls	r3, r3, #8
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800beea:	697b      	ldr	r3, [r7, #20]
 800beec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4a1d      	ldr	r2, [pc, #116]	@ (800bf6c <TIM_OC3_SetConfig+0xfc>)
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d00f      	beq.n	800bf1a <TIM_OC3_SetConfig+0xaa>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a1c      	ldr	r2, [pc, #112]	@ (800bf70 <TIM_OC3_SetConfig+0x100>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d00b      	beq.n	800bf1a <TIM_OC3_SetConfig+0xaa>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a1b      	ldr	r2, [pc, #108]	@ (800bf74 <TIM_OC3_SetConfig+0x104>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d007      	beq.n	800bf1a <TIM_OC3_SetConfig+0xaa>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a1a      	ldr	r2, [pc, #104]	@ (800bf78 <TIM_OC3_SetConfig+0x108>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d003      	beq.n	800bf1a <TIM_OC3_SetConfig+0xaa>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a19      	ldr	r2, [pc, #100]	@ (800bf7c <TIM_OC3_SetConfig+0x10c>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d113      	bne.n	800bf42 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bf20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bf28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	695b      	ldr	r3, [r3, #20]
 800bf2e:	011b      	lsls	r3, r3, #4
 800bf30:	693a      	ldr	r2, [r7, #16]
 800bf32:	4313      	orrs	r3, r2
 800bf34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	011b      	lsls	r3, r3, #4
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	693a      	ldr	r2, [r7, #16]
 800bf46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68fa      	ldr	r2, [r7, #12]
 800bf4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	685a      	ldr	r2, [r3, #4]
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	697a      	ldr	r2, [r7, #20]
 800bf5a:	621a      	str	r2, [r3, #32]
}
 800bf5c:	bf00      	nop
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	fffeff8f 	.word	0xfffeff8f
 800bf6c:	40010000 	.word	0x40010000
 800bf70:	40010400 	.word	0x40010400
 800bf74:	40014000 	.word	0x40014000
 800bf78:	40014400 	.word	0x40014400
 800bf7c:	40014800 	.word	0x40014800

0800bf80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6a1b      	ldr	r3, [r3, #32]
 800bf8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a1b      	ldr	r3, [r3, #32]
 800bf94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	69db      	ldr	r3, [r3, #28]
 800bfa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4b24      	ldr	r3, [pc, #144]	@ (800c03c <TIM_OC4_SetConfig+0xbc>)
 800bfac:	4013      	ands	r3, r2
 800bfae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	021b      	lsls	r3, r3, #8
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800bfca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	031b      	lsls	r3, r3, #12
 800bfd2:	693a      	ldr	r2, [r7, #16]
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a19      	ldr	r2, [pc, #100]	@ (800c040 <TIM_OC4_SetConfig+0xc0>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d00f      	beq.n	800c000 <TIM_OC4_SetConfig+0x80>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a18      	ldr	r2, [pc, #96]	@ (800c044 <TIM_OC4_SetConfig+0xc4>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d00b      	beq.n	800c000 <TIM_OC4_SetConfig+0x80>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a17      	ldr	r2, [pc, #92]	@ (800c048 <TIM_OC4_SetConfig+0xc8>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d007      	beq.n	800c000 <TIM_OC4_SetConfig+0x80>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a16      	ldr	r2, [pc, #88]	@ (800c04c <TIM_OC4_SetConfig+0xcc>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d003      	beq.n	800c000 <TIM_OC4_SetConfig+0x80>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a15      	ldr	r2, [pc, #84]	@ (800c050 <TIM_OC4_SetConfig+0xd0>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d109      	bne.n	800c014 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	695b      	ldr	r3, [r3, #20]
 800c00c:	019b      	lsls	r3, r3, #6
 800c00e:	697a      	ldr	r2, [r7, #20]
 800c010:	4313      	orrs	r3, r2
 800c012:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	685a      	ldr	r2, [r3, #4]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	621a      	str	r2, [r3, #32]
}
 800c02e:	bf00      	nop
 800c030:	371c      	adds	r7, #28
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	feff8fff 	.word	0xfeff8fff
 800c040:	40010000 	.word	0x40010000
 800c044:	40010400 	.word	0x40010400
 800c048:	40014000 	.word	0x40014000
 800c04c:	40014400 	.word	0x40014400
 800c050:	40014800 	.word	0x40014800

0800c054 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c054:	b480      	push	{r7}
 800c056:	b087      	sub	sp, #28
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6a1b      	ldr	r3, [r3, #32]
 800c062:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6a1b      	ldr	r3, [r3, #32]
 800c068:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	685b      	ldr	r3, [r3, #4]
 800c074:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c07a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4b21      	ldr	r3, [pc, #132]	@ (800c104 <TIM_OC5_SetConfig+0xb0>)
 800c080:	4013      	ands	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	041b      	lsls	r3, r3, #16
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	4a18      	ldr	r2, [pc, #96]	@ (800c108 <TIM_OC5_SetConfig+0xb4>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d00f      	beq.n	800c0ca <TIM_OC5_SetConfig+0x76>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	4a17      	ldr	r2, [pc, #92]	@ (800c10c <TIM_OC5_SetConfig+0xb8>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d00b      	beq.n	800c0ca <TIM_OC5_SetConfig+0x76>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	4a16      	ldr	r2, [pc, #88]	@ (800c110 <TIM_OC5_SetConfig+0xbc>)
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	d007      	beq.n	800c0ca <TIM_OC5_SetConfig+0x76>
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a15      	ldr	r2, [pc, #84]	@ (800c114 <TIM_OC5_SetConfig+0xc0>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d003      	beq.n	800c0ca <TIM_OC5_SetConfig+0x76>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a14      	ldr	r2, [pc, #80]	@ (800c118 <TIM_OC5_SetConfig+0xc4>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d109      	bne.n	800c0de <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	695b      	ldr	r3, [r3, #20]
 800c0d6:	021b      	lsls	r3, r3, #8
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	4313      	orrs	r3, r2
 800c0dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	697a      	ldr	r2, [r7, #20]
 800c0e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	693a      	ldr	r2, [r7, #16]
 800c0f6:	621a      	str	r2, [r3, #32]
}
 800c0f8:	bf00      	nop
 800c0fa:	371c      	adds	r7, #28
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	fffeff8f 	.word	0xfffeff8f
 800c108:	40010000 	.word	0x40010000
 800c10c:	40010400 	.word	0x40010400
 800c110:	40014000 	.word	0x40014000
 800c114:	40014400 	.word	0x40014400
 800c118:	40014800 	.word	0x40014800

0800c11c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b087      	sub	sp, #28
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6a1b      	ldr	r3, [r3, #32]
 800c130:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	4b22      	ldr	r3, [pc, #136]	@ (800c1d0 <TIM_OC6_SetConfig+0xb4>)
 800c148:	4013      	ands	r3, r2
 800c14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	021b      	lsls	r3, r3, #8
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	4313      	orrs	r3, r2
 800c156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c15e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	689b      	ldr	r3, [r3, #8]
 800c164:	051b      	lsls	r3, r3, #20
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	4313      	orrs	r3, r2
 800c16a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a19      	ldr	r2, [pc, #100]	@ (800c1d4 <TIM_OC6_SetConfig+0xb8>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d00f      	beq.n	800c194 <TIM_OC6_SetConfig+0x78>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a18      	ldr	r2, [pc, #96]	@ (800c1d8 <TIM_OC6_SetConfig+0xbc>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d00b      	beq.n	800c194 <TIM_OC6_SetConfig+0x78>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a17      	ldr	r2, [pc, #92]	@ (800c1dc <TIM_OC6_SetConfig+0xc0>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d007      	beq.n	800c194 <TIM_OC6_SetConfig+0x78>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a16      	ldr	r2, [pc, #88]	@ (800c1e0 <TIM_OC6_SetConfig+0xc4>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d003      	beq.n	800c194 <TIM_OC6_SetConfig+0x78>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a15      	ldr	r2, [pc, #84]	@ (800c1e4 <TIM_OC6_SetConfig+0xc8>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d109      	bne.n	800c1a8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c19a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	029b      	lsls	r3, r3, #10
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685a      	ldr	r2, [r3, #4]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	621a      	str	r2, [r3, #32]
}
 800c1c2:	bf00      	nop
 800c1c4:	371c      	adds	r7, #28
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	feff8fff 	.word	0xfeff8fff
 800c1d4:	40010000 	.word	0x40010000
 800c1d8:	40010400 	.word	0x40010400
 800c1dc:	40014000 	.word	0x40014000
 800c1e0:	40014400 	.word	0x40014400
 800c1e4:	40014800 	.word	0x40014800

0800c1e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d101      	bne.n	800c200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1fc:	2302      	movs	r3, #2
 800c1fe:	e077      	b.n	800c2f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2201      	movs	r2, #1
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2202      	movs	r2, #2
 800c20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a35      	ldr	r2, [pc, #212]	@ (800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d004      	beq.n	800c234 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	4a34      	ldr	r2, [pc, #208]	@ (800c300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d108      	bne.n	800c246 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c23a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	68fa      	ldr	r2, [r7, #12]
 800c242:	4313      	orrs	r3, r2
 800c244:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c24c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4313      	orrs	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a25      	ldr	r2, [pc, #148]	@ (800c2fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d02c      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c272:	d027      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a22      	ldr	r2, [pc, #136]	@ (800c304 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d022      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a21      	ldr	r2, [pc, #132]	@ (800c308 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d01d      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a1f      	ldr	r2, [pc, #124]	@ (800c30c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d018      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a1a      	ldr	r2, [pc, #104]	@ (800c300 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d013      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c310 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00e      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c314 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d009      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a18      	ldr	r2, [pc, #96]	@ (800c318 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d004      	beq.n	800c2c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a17      	ldr	r2, [pc, #92]	@ (800c31c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d10c      	bne.n	800c2de <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	68ba      	ldr	r2, [r7, #8]
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68ba      	ldr	r2, [r7, #8]
 800c2dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2201      	movs	r2, #1
 800c2e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c2ee:	2300      	movs	r3, #0
}
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	3714      	adds	r7, #20
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr
 800c2fc:	40010000 	.word	0x40010000
 800c300:	40010400 	.word	0x40010400
 800c304:	40000400 	.word	0x40000400
 800c308:	40000800 	.word	0x40000800
 800c30c:	40000c00 	.word	0x40000c00
 800c310:	40001800 	.word	0x40001800
 800c314:	40014000 	.word	0x40014000
 800c318:	4000e000 	.word	0x4000e000
 800c31c:	4000e400 	.word	0x4000e400

0800c320 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c320:	b480      	push	{r7}
 800c322:	b085      	sub	sp, #20
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c32a:	2300      	movs	r3, #0
 800c32c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c334:	2b01      	cmp	r3, #1
 800c336:	d101      	bne.n	800c33c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c338:	2302      	movs	r3, #2
 800c33a:	e073      	b.n	800c424 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	68db      	ldr	r3, [r3, #12]
 800c34e:	4313      	orrs	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	4313      	orrs	r3, r2
 800c35e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	4313      	orrs	r3, r2
 800c37a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	4313      	orrs	r3, r2
 800c396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	699b      	ldr	r3, [r3, #24]
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	69db      	ldr	r3, [r3, #28]
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a19      	ldr	r2, [pc, #100]	@ (800c430 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d004      	beq.n	800c3d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a18      	ldr	r2, [pc, #96]	@ (800c434 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d11c      	bne.n	800c412 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e2:	051b      	lsls	r3, r3, #20
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	6a1b      	ldr	r3, [r3, #32]
 800c3f2:	4313      	orrs	r3, r2
 800c3f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c400:	4313      	orrs	r3, r2
 800c402:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c40e:	4313      	orrs	r3, r2
 800c410:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c422:	2300      	movs	r3, #0
}
 800c424:	4618      	mov	r0, r3
 800c426:	3714      	adds	r7, #20
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	40010000 	.word	0x40010000
 800c434:	40010400 	.word	0x40010400

0800c438 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c438:	b480      	push	{r7}
 800c43a:	b083      	sub	sp, #12
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c440:	bf00      	nop
 800c442:	370c      	adds	r7, #12
 800c444:	46bd      	mov	sp, r7
 800c446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44a:	4770      	bx	lr

0800c44c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b083      	sub	sp, #12
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c454:	bf00      	nop
 800c456:	370c      	adds	r7, #12
 800c458:	46bd      	mov	sp, r7
 800c45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45e:	4770      	bx	lr

0800c460 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c468:	bf00      	nop
 800c46a:	370c      	adds	r7, #12
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr

0800c474 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d101      	bne.n	800c486 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c482:	2301      	movs	r3, #1
 800c484:	e042      	b.n	800c50c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d106      	bne.n	800c49e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f7f6 fd79 	bl	8002f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2224      	movs	r2, #36	@ 0x24
 800c4a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	f022 0201 	bic.w	r2, r2, #1
 800c4b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d002      	beq.n	800c4c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 ff22 	bl	800d308 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 f8b3 	bl	800c630 <UART_SetConfig>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d101      	bne.n	800c4d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e01b      	b.n	800c50c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	685a      	ldr	r2, [r3, #4]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	689a      	ldr	r2, [r3, #8]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c4f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	681a      	ldr	r2, [r3, #0]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f042 0201 	orr.w	r2, r2, #1
 800c502:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 ffa1 	bl	800d44c <UART_CheckIdleState>
 800c50a:	4603      	mov	r3, r0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3708      	adds	r7, #8
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08a      	sub	sp, #40	@ 0x28
 800c518:	af02      	add	r7, sp, #8
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	603b      	str	r3, [r7, #0]
 800c520:	4613      	mov	r3, r2
 800c522:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c52a:	2b20      	cmp	r3, #32
 800c52c:	d17b      	bne.n	800c626 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d002      	beq.n	800c53a <HAL_UART_Transmit+0x26>
 800c534:	88fb      	ldrh	r3, [r7, #6]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d101      	bne.n	800c53e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e074      	b.n	800c628 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2221      	movs	r2, #33	@ 0x21
 800c54a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c54e:	f7f6 fe93 	bl	8003278 <HAL_GetTick>
 800c552:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	88fa      	ldrh	r2, [r7, #6]
 800c558:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	88fa      	ldrh	r2, [r7, #6]
 800c560:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	689b      	ldr	r3, [r3, #8]
 800c568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c56c:	d108      	bne.n	800c580 <HAL_UART_Transmit+0x6c>
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	691b      	ldr	r3, [r3, #16]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d104      	bne.n	800c580 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	61bb      	str	r3, [r7, #24]
 800c57e:	e003      	b.n	800c588 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c584:	2300      	movs	r3, #0
 800c586:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c588:	e030      	b.n	800c5ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	2200      	movs	r2, #0
 800c592:	2180      	movs	r1, #128	@ 0x80
 800c594:	68f8      	ldr	r0, [r7, #12]
 800c596:	f001 f803 	bl	800d5a0 <UART_WaitOnFlagUntilTimeout>
 800c59a:	4603      	mov	r3, r0
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d005      	beq.n	800c5ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2220      	movs	r2, #32
 800c5a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c5a8:	2303      	movs	r3, #3
 800c5aa:	e03d      	b.n	800c628 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c5ac:	69fb      	ldr	r3, [r7, #28]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d10b      	bne.n	800c5ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	881b      	ldrh	r3, [r3, #0]
 800c5b6:	461a      	mov	r2, r3
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	3302      	adds	r3, #2
 800c5c6:	61bb      	str	r3, [r7, #24]
 800c5c8:	e007      	b.n	800c5da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5ca:	69fb      	ldr	r3, [r7, #28]
 800c5cc:	781a      	ldrb	r2, [r3, #0]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	b29a      	uxth	r2, r3
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c5f2:	b29b      	uxth	r3, r3
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d1c8      	bne.n	800c58a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	9300      	str	r3, [sp, #0]
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2200      	movs	r2, #0
 800c600:	2140      	movs	r1, #64	@ 0x40
 800c602:	68f8      	ldr	r0, [r7, #12]
 800c604:	f000 ffcc 	bl	800d5a0 <UART_WaitOnFlagUntilTimeout>
 800c608:	4603      	mov	r3, r0
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d005      	beq.n	800c61a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2220      	movs	r2, #32
 800c612:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c616:	2303      	movs	r3, #3
 800c618:	e006      	b.n	800c628 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2220      	movs	r2, #32
 800c61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c622:	2300      	movs	r3, #0
 800c624:	e000      	b.n	800c628 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c626:	2302      	movs	r3, #2
  }
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c634:	b092      	sub	sp, #72	@ 0x48
 800c636:	af00      	add	r7, sp, #0
 800c638:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	689a      	ldr	r2, [r3, #8]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	691b      	ldr	r3, [r3, #16]
 800c648:	431a      	orrs	r2, r3
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	695b      	ldr	r3, [r3, #20]
 800c64e:	431a      	orrs	r2, r3
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	69db      	ldr	r3, [r3, #28]
 800c654:	4313      	orrs	r3, r2
 800c656:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	4bbe      	ldr	r3, [pc, #760]	@ (800c958 <UART_SetConfig+0x328>)
 800c660:	4013      	ands	r3, r2
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	6812      	ldr	r2, [r2, #0]
 800c666:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c668:	430b      	orrs	r3, r1
 800c66a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	68da      	ldr	r2, [r3, #12]
 800c67a:	697b      	ldr	r3, [r7, #20]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	430a      	orrs	r2, r1
 800c680:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	699b      	ldr	r3, [r3, #24]
 800c686:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4ab3      	ldr	r2, [pc, #716]	@ (800c95c <UART_SetConfig+0x32c>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d004      	beq.n	800c69c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c698:	4313      	orrs	r3, r2
 800c69a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	689a      	ldr	r2, [r3, #8]
 800c6a2:	4baf      	ldr	r3, [pc, #700]	@ (800c960 <UART_SetConfig+0x330>)
 800c6a4:	4013      	ands	r3, r2
 800c6a6:	697a      	ldr	r2, [r7, #20]
 800c6a8:	6812      	ldr	r2, [r2, #0]
 800c6aa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c6ac:	430b      	orrs	r3, r1
 800c6ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b6:	f023 010f 	bic.w	r1, r3, #15
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	430a      	orrs	r2, r1
 800c6c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	4aa6      	ldr	r2, [pc, #664]	@ (800c964 <UART_SetConfig+0x334>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d177      	bne.n	800c7c0 <UART_SetConfig+0x190>
 800c6d0:	4ba5      	ldr	r3, [pc, #660]	@ (800c968 <UART_SetConfig+0x338>)
 800c6d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c6d8:	2b28      	cmp	r3, #40	@ 0x28
 800c6da:	d86d      	bhi.n	800c7b8 <UART_SetConfig+0x188>
 800c6dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c6e4 <UART_SetConfig+0xb4>)
 800c6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6e2:	bf00      	nop
 800c6e4:	0800c789 	.word	0x0800c789
 800c6e8:	0800c7b9 	.word	0x0800c7b9
 800c6ec:	0800c7b9 	.word	0x0800c7b9
 800c6f0:	0800c7b9 	.word	0x0800c7b9
 800c6f4:	0800c7b9 	.word	0x0800c7b9
 800c6f8:	0800c7b9 	.word	0x0800c7b9
 800c6fc:	0800c7b9 	.word	0x0800c7b9
 800c700:	0800c7b9 	.word	0x0800c7b9
 800c704:	0800c791 	.word	0x0800c791
 800c708:	0800c7b9 	.word	0x0800c7b9
 800c70c:	0800c7b9 	.word	0x0800c7b9
 800c710:	0800c7b9 	.word	0x0800c7b9
 800c714:	0800c7b9 	.word	0x0800c7b9
 800c718:	0800c7b9 	.word	0x0800c7b9
 800c71c:	0800c7b9 	.word	0x0800c7b9
 800c720:	0800c7b9 	.word	0x0800c7b9
 800c724:	0800c799 	.word	0x0800c799
 800c728:	0800c7b9 	.word	0x0800c7b9
 800c72c:	0800c7b9 	.word	0x0800c7b9
 800c730:	0800c7b9 	.word	0x0800c7b9
 800c734:	0800c7b9 	.word	0x0800c7b9
 800c738:	0800c7b9 	.word	0x0800c7b9
 800c73c:	0800c7b9 	.word	0x0800c7b9
 800c740:	0800c7b9 	.word	0x0800c7b9
 800c744:	0800c7a1 	.word	0x0800c7a1
 800c748:	0800c7b9 	.word	0x0800c7b9
 800c74c:	0800c7b9 	.word	0x0800c7b9
 800c750:	0800c7b9 	.word	0x0800c7b9
 800c754:	0800c7b9 	.word	0x0800c7b9
 800c758:	0800c7b9 	.word	0x0800c7b9
 800c75c:	0800c7b9 	.word	0x0800c7b9
 800c760:	0800c7b9 	.word	0x0800c7b9
 800c764:	0800c7a9 	.word	0x0800c7a9
 800c768:	0800c7b9 	.word	0x0800c7b9
 800c76c:	0800c7b9 	.word	0x0800c7b9
 800c770:	0800c7b9 	.word	0x0800c7b9
 800c774:	0800c7b9 	.word	0x0800c7b9
 800c778:	0800c7b9 	.word	0x0800c7b9
 800c77c:	0800c7b9 	.word	0x0800c7b9
 800c780:	0800c7b9 	.word	0x0800c7b9
 800c784:	0800c7b1 	.word	0x0800c7b1
 800c788:	2301      	movs	r3, #1
 800c78a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c78e:	e326      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c790:	2304      	movs	r3, #4
 800c792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c796:	e322      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c79e:	e31e      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7a6:	e31a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7ae:	e316      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7b0:	2340      	movs	r3, #64	@ 0x40
 800c7b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7b6:	e312      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7b8:	2380      	movs	r3, #128	@ 0x80
 800c7ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7be:	e30e      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	4a69      	ldr	r2, [pc, #420]	@ (800c96c <UART_SetConfig+0x33c>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d130      	bne.n	800c82c <UART_SetConfig+0x1fc>
 800c7ca:	4b67      	ldr	r3, [pc, #412]	@ (800c968 <UART_SetConfig+0x338>)
 800c7cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7ce:	f003 0307 	and.w	r3, r3, #7
 800c7d2:	2b05      	cmp	r3, #5
 800c7d4:	d826      	bhi.n	800c824 <UART_SetConfig+0x1f4>
 800c7d6:	a201      	add	r2, pc, #4	@ (adr r2, 800c7dc <UART_SetConfig+0x1ac>)
 800c7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7dc:	0800c7f5 	.word	0x0800c7f5
 800c7e0:	0800c7fd 	.word	0x0800c7fd
 800c7e4:	0800c805 	.word	0x0800c805
 800c7e8:	0800c80d 	.word	0x0800c80d
 800c7ec:	0800c815 	.word	0x0800c815
 800c7f0:	0800c81d 	.word	0x0800c81d
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c7fa:	e2f0      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c7fc:	2304      	movs	r3, #4
 800c7fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c802:	e2ec      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c804:	2308      	movs	r3, #8
 800c806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c80a:	e2e8      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c80c:	2310      	movs	r3, #16
 800c80e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c812:	e2e4      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c814:	2320      	movs	r3, #32
 800c816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c81a:	e2e0      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c81c:	2340      	movs	r3, #64	@ 0x40
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c822:	e2dc      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c824:	2380      	movs	r3, #128	@ 0x80
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c82a:	e2d8      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4a4f      	ldr	r2, [pc, #316]	@ (800c970 <UART_SetConfig+0x340>)
 800c832:	4293      	cmp	r3, r2
 800c834:	d130      	bne.n	800c898 <UART_SetConfig+0x268>
 800c836:	4b4c      	ldr	r3, [pc, #304]	@ (800c968 <UART_SetConfig+0x338>)
 800c838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c83a:	f003 0307 	and.w	r3, r3, #7
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d826      	bhi.n	800c890 <UART_SetConfig+0x260>
 800c842:	a201      	add	r2, pc, #4	@ (adr r2, 800c848 <UART_SetConfig+0x218>)
 800c844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c848:	0800c861 	.word	0x0800c861
 800c84c:	0800c869 	.word	0x0800c869
 800c850:	0800c871 	.word	0x0800c871
 800c854:	0800c879 	.word	0x0800c879
 800c858:	0800c881 	.word	0x0800c881
 800c85c:	0800c889 	.word	0x0800c889
 800c860:	2300      	movs	r3, #0
 800c862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c866:	e2ba      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c868:	2304      	movs	r3, #4
 800c86a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c86e:	e2b6      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c870:	2308      	movs	r3, #8
 800c872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c876:	e2b2      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c878:	2310      	movs	r3, #16
 800c87a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c87e:	e2ae      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c880:	2320      	movs	r3, #32
 800c882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c886:	e2aa      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c888:	2340      	movs	r3, #64	@ 0x40
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c88e:	e2a6      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c890:	2380      	movs	r3, #128	@ 0x80
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c896:	e2a2      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a35      	ldr	r2, [pc, #212]	@ (800c974 <UART_SetConfig+0x344>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d130      	bne.n	800c904 <UART_SetConfig+0x2d4>
 800c8a2:	4b31      	ldr	r3, [pc, #196]	@ (800c968 <UART_SetConfig+0x338>)
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	2b05      	cmp	r3, #5
 800c8ac:	d826      	bhi.n	800c8fc <UART_SetConfig+0x2cc>
 800c8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b4 <UART_SetConfig+0x284>)
 800c8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b4:	0800c8cd 	.word	0x0800c8cd
 800c8b8:	0800c8d5 	.word	0x0800c8d5
 800c8bc:	0800c8dd 	.word	0x0800c8dd
 800c8c0:	0800c8e5 	.word	0x0800c8e5
 800c8c4:	0800c8ed 	.word	0x0800c8ed
 800c8c8:	0800c8f5 	.word	0x0800c8f5
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8d2:	e284      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8d4:	2304      	movs	r3, #4
 800c8d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8da:	e280      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8dc:	2308      	movs	r3, #8
 800c8de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8e2:	e27c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8e4:	2310      	movs	r3, #16
 800c8e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8ea:	e278      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8ec:	2320      	movs	r3, #32
 800c8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8f2:	e274      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8f4:	2340      	movs	r3, #64	@ 0x40
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c8fa:	e270      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c8fc:	2380      	movs	r3, #128	@ 0x80
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c902:	e26c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	4a1b      	ldr	r2, [pc, #108]	@ (800c978 <UART_SetConfig+0x348>)
 800c90a:	4293      	cmp	r3, r2
 800c90c:	d142      	bne.n	800c994 <UART_SetConfig+0x364>
 800c90e:	4b16      	ldr	r3, [pc, #88]	@ (800c968 <UART_SetConfig+0x338>)
 800c910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c912:	f003 0307 	and.w	r3, r3, #7
 800c916:	2b05      	cmp	r3, #5
 800c918:	d838      	bhi.n	800c98c <UART_SetConfig+0x35c>
 800c91a:	a201      	add	r2, pc, #4	@ (adr r2, 800c920 <UART_SetConfig+0x2f0>)
 800c91c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c920:	0800c939 	.word	0x0800c939
 800c924:	0800c941 	.word	0x0800c941
 800c928:	0800c949 	.word	0x0800c949
 800c92c:	0800c951 	.word	0x0800c951
 800c930:	0800c97d 	.word	0x0800c97d
 800c934:	0800c985 	.word	0x0800c985
 800c938:	2300      	movs	r3, #0
 800c93a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c93e:	e24e      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c940:	2304      	movs	r3, #4
 800c942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c946:	e24a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c948:	2308      	movs	r3, #8
 800c94a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c94e:	e246      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c950:	2310      	movs	r3, #16
 800c952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c956:	e242      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c958:	cfff69f3 	.word	0xcfff69f3
 800c95c:	58000c00 	.word	0x58000c00
 800c960:	11fff4ff 	.word	0x11fff4ff
 800c964:	40011000 	.word	0x40011000
 800c968:	58024400 	.word	0x58024400
 800c96c:	40004400 	.word	0x40004400
 800c970:	40004800 	.word	0x40004800
 800c974:	40004c00 	.word	0x40004c00
 800c978:	40005000 	.word	0x40005000
 800c97c:	2320      	movs	r3, #32
 800c97e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c982:	e22c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c984:	2340      	movs	r3, #64	@ 0x40
 800c986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98a:	e228      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c98c:	2380      	movs	r3, #128	@ 0x80
 800c98e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c992:	e224      	b.n	800cdde <UART_SetConfig+0x7ae>
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	4ab1      	ldr	r2, [pc, #708]	@ (800cc60 <UART_SetConfig+0x630>)
 800c99a:	4293      	cmp	r3, r2
 800c99c:	d176      	bne.n	800ca8c <UART_SetConfig+0x45c>
 800c99e:	4bb1      	ldr	r3, [pc, #708]	@ (800cc64 <UART_SetConfig+0x634>)
 800c9a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c9a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c9a6:	2b28      	cmp	r3, #40	@ 0x28
 800c9a8:	d86c      	bhi.n	800ca84 <UART_SetConfig+0x454>
 800c9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b0 <UART_SetConfig+0x380>)
 800c9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b0:	0800ca55 	.word	0x0800ca55
 800c9b4:	0800ca85 	.word	0x0800ca85
 800c9b8:	0800ca85 	.word	0x0800ca85
 800c9bc:	0800ca85 	.word	0x0800ca85
 800c9c0:	0800ca85 	.word	0x0800ca85
 800c9c4:	0800ca85 	.word	0x0800ca85
 800c9c8:	0800ca85 	.word	0x0800ca85
 800c9cc:	0800ca85 	.word	0x0800ca85
 800c9d0:	0800ca5d 	.word	0x0800ca5d
 800c9d4:	0800ca85 	.word	0x0800ca85
 800c9d8:	0800ca85 	.word	0x0800ca85
 800c9dc:	0800ca85 	.word	0x0800ca85
 800c9e0:	0800ca85 	.word	0x0800ca85
 800c9e4:	0800ca85 	.word	0x0800ca85
 800c9e8:	0800ca85 	.word	0x0800ca85
 800c9ec:	0800ca85 	.word	0x0800ca85
 800c9f0:	0800ca65 	.word	0x0800ca65
 800c9f4:	0800ca85 	.word	0x0800ca85
 800c9f8:	0800ca85 	.word	0x0800ca85
 800c9fc:	0800ca85 	.word	0x0800ca85
 800ca00:	0800ca85 	.word	0x0800ca85
 800ca04:	0800ca85 	.word	0x0800ca85
 800ca08:	0800ca85 	.word	0x0800ca85
 800ca0c:	0800ca85 	.word	0x0800ca85
 800ca10:	0800ca6d 	.word	0x0800ca6d
 800ca14:	0800ca85 	.word	0x0800ca85
 800ca18:	0800ca85 	.word	0x0800ca85
 800ca1c:	0800ca85 	.word	0x0800ca85
 800ca20:	0800ca85 	.word	0x0800ca85
 800ca24:	0800ca85 	.word	0x0800ca85
 800ca28:	0800ca85 	.word	0x0800ca85
 800ca2c:	0800ca85 	.word	0x0800ca85
 800ca30:	0800ca75 	.word	0x0800ca75
 800ca34:	0800ca85 	.word	0x0800ca85
 800ca38:	0800ca85 	.word	0x0800ca85
 800ca3c:	0800ca85 	.word	0x0800ca85
 800ca40:	0800ca85 	.word	0x0800ca85
 800ca44:	0800ca85 	.word	0x0800ca85
 800ca48:	0800ca85 	.word	0x0800ca85
 800ca4c:	0800ca85 	.word	0x0800ca85
 800ca50:	0800ca7d 	.word	0x0800ca7d
 800ca54:	2301      	movs	r3, #1
 800ca56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5a:	e1c0      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca5c:	2304      	movs	r3, #4
 800ca5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca62:	e1bc      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca64:	2308      	movs	r3, #8
 800ca66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca6a:	e1b8      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca6c:	2310      	movs	r3, #16
 800ca6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca72:	e1b4      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca74:	2320      	movs	r3, #32
 800ca76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca7a:	e1b0      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca7c:	2340      	movs	r3, #64	@ 0x40
 800ca7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca82:	e1ac      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca84:	2380      	movs	r3, #128	@ 0x80
 800ca86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca8a:	e1a8      	b.n	800cdde <UART_SetConfig+0x7ae>
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a75      	ldr	r2, [pc, #468]	@ (800cc68 <UART_SetConfig+0x638>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d130      	bne.n	800caf8 <UART_SetConfig+0x4c8>
 800ca96:	4b73      	ldr	r3, [pc, #460]	@ (800cc64 <UART_SetConfig+0x634>)
 800ca98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca9a:	f003 0307 	and.w	r3, r3, #7
 800ca9e:	2b05      	cmp	r3, #5
 800caa0:	d826      	bhi.n	800caf0 <UART_SetConfig+0x4c0>
 800caa2:	a201      	add	r2, pc, #4	@ (adr r2, 800caa8 <UART_SetConfig+0x478>)
 800caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa8:	0800cac1 	.word	0x0800cac1
 800caac:	0800cac9 	.word	0x0800cac9
 800cab0:	0800cad1 	.word	0x0800cad1
 800cab4:	0800cad9 	.word	0x0800cad9
 800cab8:	0800cae1 	.word	0x0800cae1
 800cabc:	0800cae9 	.word	0x0800cae9
 800cac0:	2300      	movs	r3, #0
 800cac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac6:	e18a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cac8:	2304      	movs	r3, #4
 800caca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cace:	e186      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cad0:	2308      	movs	r3, #8
 800cad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad6:	e182      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cad8:	2310      	movs	r3, #16
 800cada:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cade:	e17e      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cae0:	2320      	movs	r3, #32
 800cae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cae6:	e17a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cae8:	2340      	movs	r3, #64	@ 0x40
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caee:	e176      	b.n	800cdde <UART_SetConfig+0x7ae>
 800caf0:	2380      	movs	r3, #128	@ 0x80
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caf6:	e172      	b.n	800cdde <UART_SetConfig+0x7ae>
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4a5b      	ldr	r2, [pc, #364]	@ (800cc6c <UART_SetConfig+0x63c>)
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d130      	bne.n	800cb64 <UART_SetConfig+0x534>
 800cb02:	4b58      	ldr	r3, [pc, #352]	@ (800cc64 <UART_SetConfig+0x634>)
 800cb04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb06:	f003 0307 	and.w	r3, r3, #7
 800cb0a:	2b05      	cmp	r3, #5
 800cb0c:	d826      	bhi.n	800cb5c <UART_SetConfig+0x52c>
 800cb0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cb14 <UART_SetConfig+0x4e4>)
 800cb10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb14:	0800cb2d 	.word	0x0800cb2d
 800cb18:	0800cb35 	.word	0x0800cb35
 800cb1c:	0800cb3d 	.word	0x0800cb3d
 800cb20:	0800cb45 	.word	0x0800cb45
 800cb24:	0800cb4d 	.word	0x0800cb4d
 800cb28:	0800cb55 	.word	0x0800cb55
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb32:	e154      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb34:	2304      	movs	r3, #4
 800cb36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb3a:	e150      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb3c:	2308      	movs	r3, #8
 800cb3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb42:	e14c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb44:	2310      	movs	r3, #16
 800cb46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb4a:	e148      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e144      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb54:	2340      	movs	r3, #64	@ 0x40
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5a:	e140      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb5c:	2380      	movs	r3, #128	@ 0x80
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e13c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a41      	ldr	r2, [pc, #260]	@ (800cc70 <UART_SetConfig+0x640>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	f040 8082 	bne.w	800cc74 <UART_SetConfig+0x644>
 800cb70:	4b3c      	ldr	r3, [pc, #240]	@ (800cc64 <UART_SetConfig+0x634>)
 800cb72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb78:	2b28      	cmp	r3, #40	@ 0x28
 800cb7a:	d86d      	bhi.n	800cc58 <UART_SetConfig+0x628>
 800cb7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <UART_SetConfig+0x554>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cc29 	.word	0x0800cc29
 800cb88:	0800cc59 	.word	0x0800cc59
 800cb8c:	0800cc59 	.word	0x0800cc59
 800cb90:	0800cc59 	.word	0x0800cc59
 800cb94:	0800cc59 	.word	0x0800cc59
 800cb98:	0800cc59 	.word	0x0800cc59
 800cb9c:	0800cc59 	.word	0x0800cc59
 800cba0:	0800cc59 	.word	0x0800cc59
 800cba4:	0800cc31 	.word	0x0800cc31
 800cba8:	0800cc59 	.word	0x0800cc59
 800cbac:	0800cc59 	.word	0x0800cc59
 800cbb0:	0800cc59 	.word	0x0800cc59
 800cbb4:	0800cc59 	.word	0x0800cc59
 800cbb8:	0800cc59 	.word	0x0800cc59
 800cbbc:	0800cc59 	.word	0x0800cc59
 800cbc0:	0800cc59 	.word	0x0800cc59
 800cbc4:	0800cc39 	.word	0x0800cc39
 800cbc8:	0800cc59 	.word	0x0800cc59
 800cbcc:	0800cc59 	.word	0x0800cc59
 800cbd0:	0800cc59 	.word	0x0800cc59
 800cbd4:	0800cc59 	.word	0x0800cc59
 800cbd8:	0800cc59 	.word	0x0800cc59
 800cbdc:	0800cc59 	.word	0x0800cc59
 800cbe0:	0800cc59 	.word	0x0800cc59
 800cbe4:	0800cc41 	.word	0x0800cc41
 800cbe8:	0800cc59 	.word	0x0800cc59
 800cbec:	0800cc59 	.word	0x0800cc59
 800cbf0:	0800cc59 	.word	0x0800cc59
 800cbf4:	0800cc59 	.word	0x0800cc59
 800cbf8:	0800cc59 	.word	0x0800cc59
 800cbfc:	0800cc59 	.word	0x0800cc59
 800cc00:	0800cc59 	.word	0x0800cc59
 800cc04:	0800cc49 	.word	0x0800cc49
 800cc08:	0800cc59 	.word	0x0800cc59
 800cc0c:	0800cc59 	.word	0x0800cc59
 800cc10:	0800cc59 	.word	0x0800cc59
 800cc14:	0800cc59 	.word	0x0800cc59
 800cc18:	0800cc59 	.word	0x0800cc59
 800cc1c:	0800cc59 	.word	0x0800cc59
 800cc20:	0800cc59 	.word	0x0800cc59
 800cc24:	0800cc51 	.word	0x0800cc51
 800cc28:	2301      	movs	r3, #1
 800cc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2e:	e0d6      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc30:	2304      	movs	r3, #4
 800cc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc36:	e0d2      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc38:	2308      	movs	r3, #8
 800cc3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3e:	e0ce      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc40:	2310      	movs	r3, #16
 800cc42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc46:	e0ca      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc48:	2320      	movs	r3, #32
 800cc4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4e:	e0c6      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc50:	2340      	movs	r3, #64	@ 0x40
 800cc52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc56:	e0c2      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc58:	2380      	movs	r3, #128	@ 0x80
 800cc5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5e:	e0be      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cc60:	40011400 	.word	0x40011400
 800cc64:	58024400 	.word	0x58024400
 800cc68:	40007800 	.word	0x40007800
 800cc6c:	40007c00 	.word	0x40007c00
 800cc70:	40011800 	.word	0x40011800
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	4aad      	ldr	r2, [pc, #692]	@ (800cf30 <UART_SetConfig+0x900>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d176      	bne.n	800cd6c <UART_SetConfig+0x73c>
 800cc7e:	4bad      	ldr	r3, [pc, #692]	@ (800cf34 <UART_SetConfig+0x904>)
 800cc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cc86:	2b28      	cmp	r3, #40	@ 0x28
 800cc88:	d86c      	bhi.n	800cd64 <UART_SetConfig+0x734>
 800cc8a:	a201      	add	r2, pc, #4	@ (adr r2, 800cc90 <UART_SetConfig+0x660>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800cd35 	.word	0x0800cd35
 800cc94:	0800cd65 	.word	0x0800cd65
 800cc98:	0800cd65 	.word	0x0800cd65
 800cc9c:	0800cd65 	.word	0x0800cd65
 800cca0:	0800cd65 	.word	0x0800cd65
 800cca4:	0800cd65 	.word	0x0800cd65
 800cca8:	0800cd65 	.word	0x0800cd65
 800ccac:	0800cd65 	.word	0x0800cd65
 800ccb0:	0800cd3d 	.word	0x0800cd3d
 800ccb4:	0800cd65 	.word	0x0800cd65
 800ccb8:	0800cd65 	.word	0x0800cd65
 800ccbc:	0800cd65 	.word	0x0800cd65
 800ccc0:	0800cd65 	.word	0x0800cd65
 800ccc4:	0800cd65 	.word	0x0800cd65
 800ccc8:	0800cd65 	.word	0x0800cd65
 800cccc:	0800cd65 	.word	0x0800cd65
 800ccd0:	0800cd45 	.word	0x0800cd45
 800ccd4:	0800cd65 	.word	0x0800cd65
 800ccd8:	0800cd65 	.word	0x0800cd65
 800ccdc:	0800cd65 	.word	0x0800cd65
 800cce0:	0800cd65 	.word	0x0800cd65
 800cce4:	0800cd65 	.word	0x0800cd65
 800cce8:	0800cd65 	.word	0x0800cd65
 800ccec:	0800cd65 	.word	0x0800cd65
 800ccf0:	0800cd4d 	.word	0x0800cd4d
 800ccf4:	0800cd65 	.word	0x0800cd65
 800ccf8:	0800cd65 	.word	0x0800cd65
 800ccfc:	0800cd65 	.word	0x0800cd65
 800cd00:	0800cd65 	.word	0x0800cd65
 800cd04:	0800cd65 	.word	0x0800cd65
 800cd08:	0800cd65 	.word	0x0800cd65
 800cd0c:	0800cd65 	.word	0x0800cd65
 800cd10:	0800cd55 	.word	0x0800cd55
 800cd14:	0800cd65 	.word	0x0800cd65
 800cd18:	0800cd65 	.word	0x0800cd65
 800cd1c:	0800cd65 	.word	0x0800cd65
 800cd20:	0800cd65 	.word	0x0800cd65
 800cd24:	0800cd65 	.word	0x0800cd65
 800cd28:	0800cd65 	.word	0x0800cd65
 800cd2c:	0800cd65 	.word	0x0800cd65
 800cd30:	0800cd5d 	.word	0x0800cd5d
 800cd34:	2301      	movs	r3, #1
 800cd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3a:	e050      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd3c:	2304      	movs	r3, #4
 800cd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd42:	e04c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd44:	2308      	movs	r3, #8
 800cd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4a:	e048      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd52:	e044      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd54:	2320      	movs	r3, #32
 800cd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5a:	e040      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd5c:	2340      	movs	r3, #64	@ 0x40
 800cd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd62:	e03c      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd64:	2380      	movs	r3, #128	@ 0x80
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6a:	e038      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	4a71      	ldr	r2, [pc, #452]	@ (800cf38 <UART_SetConfig+0x908>)
 800cd72:	4293      	cmp	r3, r2
 800cd74:	d130      	bne.n	800cdd8 <UART_SetConfig+0x7a8>
 800cd76:	4b6f      	ldr	r3, [pc, #444]	@ (800cf34 <UART_SetConfig+0x904>)
 800cd78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd7a:	f003 0307 	and.w	r3, r3, #7
 800cd7e:	2b05      	cmp	r3, #5
 800cd80:	d826      	bhi.n	800cdd0 <UART_SetConfig+0x7a0>
 800cd82:	a201      	add	r2, pc, #4	@ (adr r2, 800cd88 <UART_SetConfig+0x758>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cda1 	.word	0x0800cda1
 800cd8c:	0800cda9 	.word	0x0800cda9
 800cd90:	0800cdb1 	.word	0x0800cdb1
 800cd94:	0800cdb9 	.word	0x0800cdb9
 800cd98:	0800cdc1 	.word	0x0800cdc1
 800cd9c:	0800cdc9 	.word	0x0800cdc9
 800cda0:	2302      	movs	r3, #2
 800cda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cda6:	e01a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cda8:	2304      	movs	r3, #4
 800cdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdae:	e016      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdb0:	2308      	movs	r3, #8
 800cdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb6:	e012      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdb8:	2310      	movs	r3, #16
 800cdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdbe:	e00e      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdc0:	2320      	movs	r3, #32
 800cdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc6:	e00a      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdc8:	2340      	movs	r3, #64	@ 0x40
 800cdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdce:	e006      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdd0:	2380      	movs	r3, #128	@ 0x80
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd6:	e002      	b.n	800cdde <UART_SetConfig+0x7ae>
 800cdd8:	2380      	movs	r3, #128	@ 0x80
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	4a55      	ldr	r2, [pc, #340]	@ (800cf38 <UART_SetConfig+0x908>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	f040 80f8 	bne.w	800cfda <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cdee:	2b20      	cmp	r3, #32
 800cdf0:	dc46      	bgt.n	800ce80 <UART_SetConfig+0x850>
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	db75      	blt.n	800cee2 <UART_SetConfig+0x8b2>
 800cdf6:	3b02      	subs	r3, #2
 800cdf8:	2b1e      	cmp	r3, #30
 800cdfa:	d872      	bhi.n	800cee2 <UART_SetConfig+0x8b2>
 800cdfc:	a201      	add	r2, pc, #4	@ (adr r2, 800ce04 <UART_SetConfig+0x7d4>)
 800cdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce02:	bf00      	nop
 800ce04:	0800ce87 	.word	0x0800ce87
 800ce08:	0800cee3 	.word	0x0800cee3
 800ce0c:	0800ce8f 	.word	0x0800ce8f
 800ce10:	0800cee3 	.word	0x0800cee3
 800ce14:	0800cee3 	.word	0x0800cee3
 800ce18:	0800cee3 	.word	0x0800cee3
 800ce1c:	0800ce9f 	.word	0x0800ce9f
 800ce20:	0800cee3 	.word	0x0800cee3
 800ce24:	0800cee3 	.word	0x0800cee3
 800ce28:	0800cee3 	.word	0x0800cee3
 800ce2c:	0800cee3 	.word	0x0800cee3
 800ce30:	0800cee3 	.word	0x0800cee3
 800ce34:	0800cee3 	.word	0x0800cee3
 800ce38:	0800cee3 	.word	0x0800cee3
 800ce3c:	0800ceaf 	.word	0x0800ceaf
 800ce40:	0800cee3 	.word	0x0800cee3
 800ce44:	0800cee3 	.word	0x0800cee3
 800ce48:	0800cee3 	.word	0x0800cee3
 800ce4c:	0800cee3 	.word	0x0800cee3
 800ce50:	0800cee3 	.word	0x0800cee3
 800ce54:	0800cee3 	.word	0x0800cee3
 800ce58:	0800cee3 	.word	0x0800cee3
 800ce5c:	0800cee3 	.word	0x0800cee3
 800ce60:	0800cee3 	.word	0x0800cee3
 800ce64:	0800cee3 	.word	0x0800cee3
 800ce68:	0800cee3 	.word	0x0800cee3
 800ce6c:	0800cee3 	.word	0x0800cee3
 800ce70:	0800cee3 	.word	0x0800cee3
 800ce74:	0800cee3 	.word	0x0800cee3
 800ce78:	0800cee3 	.word	0x0800cee3
 800ce7c:	0800ced5 	.word	0x0800ced5
 800ce80:	2b40      	cmp	r3, #64	@ 0x40
 800ce82:	d02a      	beq.n	800ceda <UART_SetConfig+0x8aa>
 800ce84:	e02d      	b.n	800cee2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce86:	f7fd fadd 	bl	800a444 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ce8c:	e02f      	b.n	800ceee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fd faec 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce9c:	e027      	b.n	800ceee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce9e:	f107 0318 	add.w	r3, r7, #24
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fd fc38 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceac:	e01f      	b.n	800ceee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceae:	4b21      	ldr	r3, [pc, #132]	@ (800cf34 <UART_SetConfig+0x904>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 0320 	and.w	r3, r3, #32
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d009      	beq.n	800cece <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ceba:	4b1e      	ldr	r3, [pc, #120]	@ (800cf34 <UART_SetConfig+0x904>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	08db      	lsrs	r3, r3, #3
 800cec0:	f003 0303 	and.w	r3, r3, #3
 800cec4:	4a1d      	ldr	r2, [pc, #116]	@ (800cf3c <UART_SetConfig+0x90c>)
 800cec6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cecc:	e00f      	b.n	800ceee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cece:	4b1b      	ldr	r3, [pc, #108]	@ (800cf3c <UART_SetConfig+0x90c>)
 800ced0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced2:	e00c      	b.n	800ceee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ced4:	4b1a      	ldr	r3, [pc, #104]	@ (800cf40 <UART_SetConfig+0x910>)
 800ced6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced8:	e009      	b.n	800ceee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ceda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cede:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee0:	e005      	b.n	800ceee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cee2:	2300      	movs	r3, #0
 800cee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800cee6:	2301      	movs	r3, #1
 800cee8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ceec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ceee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 81ee 	beq.w	800d2d2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cefa:	4a12      	ldr	r2, [pc, #72]	@ (800cf44 <UART_SetConfig+0x914>)
 800cefc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf00:	461a      	mov	r2, r3
 800cf02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf04:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf08:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf0a:	697b      	ldr	r3, [r7, #20]
 800cf0c:	685a      	ldr	r2, [r3, #4]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	005b      	lsls	r3, r3, #1
 800cf12:	4413      	add	r3, r2
 800cf14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d305      	bcc.n	800cf26 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d910      	bls.n	800cf48 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800cf26:	2301      	movs	r3, #1
 800cf28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cf2c:	e1d1      	b.n	800d2d2 <UART_SetConfig+0xca2>
 800cf2e:	bf00      	nop
 800cf30:	40011c00 	.word	0x40011c00
 800cf34:	58024400 	.word	0x58024400
 800cf38:	58000c00 	.word	0x58000c00
 800cf3c:	03d09000 	.word	0x03d09000
 800cf40:	003d0900 	.word	0x003d0900
 800cf44:	080132c4 	.word	0x080132c4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	60bb      	str	r3, [r7, #8]
 800cf4e:	60fa      	str	r2, [r7, #12]
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf54:	4ac0      	ldr	r2, [pc, #768]	@ (800d258 <UART_SetConfig+0xc28>)
 800cf56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	603b      	str	r3, [r7, #0]
 800cf60:	607a      	str	r2, [r7, #4]
 800cf62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf6a:	f7f3 fa29 	bl	80003c0 <__aeabi_uldivmod>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	4610      	mov	r0, r2
 800cf74:	4619      	mov	r1, r3
 800cf76:	f04f 0200 	mov.w	r2, #0
 800cf7a:	f04f 0300 	mov.w	r3, #0
 800cf7e:	020b      	lsls	r3, r1, #8
 800cf80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf84:	0202      	lsls	r2, r0, #8
 800cf86:	6979      	ldr	r1, [r7, #20]
 800cf88:	6849      	ldr	r1, [r1, #4]
 800cf8a:	0849      	lsrs	r1, r1, #1
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	460c      	mov	r4, r1
 800cf90:	4605      	mov	r5, r0
 800cf92:	eb12 0804 	adds.w	r8, r2, r4
 800cf96:	eb43 0905 	adc.w	r9, r3, r5
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	469a      	mov	sl, r3
 800cfa2:	4693      	mov	fp, r2
 800cfa4:	4652      	mov	r2, sl
 800cfa6:	465b      	mov	r3, fp
 800cfa8:	4640      	mov	r0, r8
 800cfaa:	4649      	mov	r1, r9
 800cfac:	f7f3 fa08 	bl	80003c0 <__aeabi_uldivmod>
 800cfb0:	4602      	mov	r2, r0
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cfbe:	d308      	bcc.n	800cfd2 <UART_SetConfig+0x9a2>
 800cfc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cfc6:	d204      	bcs.n	800cfd2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfce:	60da      	str	r2, [r3, #12]
 800cfd0:	e17f      	b.n	800d2d2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800cfd8:	e17b      	b.n	800d2d2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	69db      	ldr	r3, [r3, #28]
 800cfde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfe2:	f040 80bd 	bne.w	800d160 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800cfe6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	dc48      	bgt.n	800d080 <UART_SetConfig+0xa50>
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	db7b      	blt.n	800d0ea <UART_SetConfig+0xaba>
 800cff2:	2b20      	cmp	r3, #32
 800cff4:	d879      	bhi.n	800d0ea <UART_SetConfig+0xaba>
 800cff6:	a201      	add	r2, pc, #4	@ (adr r2, 800cffc <UART_SetConfig+0x9cc>)
 800cff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffc:	0800d087 	.word	0x0800d087
 800d000:	0800d08f 	.word	0x0800d08f
 800d004:	0800d0eb 	.word	0x0800d0eb
 800d008:	0800d0eb 	.word	0x0800d0eb
 800d00c:	0800d097 	.word	0x0800d097
 800d010:	0800d0eb 	.word	0x0800d0eb
 800d014:	0800d0eb 	.word	0x0800d0eb
 800d018:	0800d0eb 	.word	0x0800d0eb
 800d01c:	0800d0a7 	.word	0x0800d0a7
 800d020:	0800d0eb 	.word	0x0800d0eb
 800d024:	0800d0eb 	.word	0x0800d0eb
 800d028:	0800d0eb 	.word	0x0800d0eb
 800d02c:	0800d0eb 	.word	0x0800d0eb
 800d030:	0800d0eb 	.word	0x0800d0eb
 800d034:	0800d0eb 	.word	0x0800d0eb
 800d038:	0800d0eb 	.word	0x0800d0eb
 800d03c:	0800d0b7 	.word	0x0800d0b7
 800d040:	0800d0eb 	.word	0x0800d0eb
 800d044:	0800d0eb 	.word	0x0800d0eb
 800d048:	0800d0eb 	.word	0x0800d0eb
 800d04c:	0800d0eb 	.word	0x0800d0eb
 800d050:	0800d0eb 	.word	0x0800d0eb
 800d054:	0800d0eb 	.word	0x0800d0eb
 800d058:	0800d0eb 	.word	0x0800d0eb
 800d05c:	0800d0eb 	.word	0x0800d0eb
 800d060:	0800d0eb 	.word	0x0800d0eb
 800d064:	0800d0eb 	.word	0x0800d0eb
 800d068:	0800d0eb 	.word	0x0800d0eb
 800d06c:	0800d0eb 	.word	0x0800d0eb
 800d070:	0800d0eb 	.word	0x0800d0eb
 800d074:	0800d0eb 	.word	0x0800d0eb
 800d078:	0800d0eb 	.word	0x0800d0eb
 800d07c:	0800d0dd 	.word	0x0800d0dd
 800d080:	2b40      	cmp	r3, #64	@ 0x40
 800d082:	d02e      	beq.n	800d0e2 <UART_SetConfig+0xab2>
 800d084:	e031      	b.n	800d0ea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d086:	f7fb fafd 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 800d08a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d08c:	e033      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d08e:	f7fb fb0f 	bl	80086b0 <HAL_RCC_GetPCLK2Freq>
 800d092:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d094:	e02f      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fd f9e8 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a4:	e027      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0a6:	f107 0318 	add.w	r3, r7, #24
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f7fd fb34 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0b0:	69fb      	ldr	r3, [r7, #28]
 800d0b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b4:	e01f      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0b6:	4b69      	ldr	r3, [pc, #420]	@ (800d25c <UART_SetConfig+0xc2c>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f003 0320 	and.w	r3, r3, #32
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d009      	beq.n	800d0d6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0c2:	4b66      	ldr	r3, [pc, #408]	@ (800d25c <UART_SetConfig+0xc2c>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	08db      	lsrs	r3, r3, #3
 800d0c8:	f003 0303 	and.w	r3, r3, #3
 800d0cc:	4a64      	ldr	r2, [pc, #400]	@ (800d260 <UART_SetConfig+0xc30>)
 800d0ce:	fa22 f303 	lsr.w	r3, r2, r3
 800d0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0d4:	e00f      	b.n	800d0f6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d0d6:	4b62      	ldr	r3, [pc, #392]	@ (800d260 <UART_SetConfig+0xc30>)
 800d0d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0da:	e00c      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0dc:	4b61      	ldr	r3, [pc, #388]	@ (800d264 <UART_SetConfig+0xc34>)
 800d0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e0:	e009      	b.n	800d0f6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e8:	e005      	b.n	800d0f6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d0f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80ea 	beq.w	800d2d2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d102:	4a55      	ldr	r2, [pc, #340]	@ (800d258 <UART_SetConfig+0xc28>)
 800d104:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d108:	461a      	mov	r2, r3
 800d10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d10c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d110:	005a      	lsls	r2, r3, #1
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	085b      	lsrs	r3, r3, #1
 800d118:	441a      	add	r2, r3
 800d11a:	697b      	ldr	r3, [r7, #20]
 800d11c:	685b      	ldr	r3, [r3, #4]
 800d11e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d122:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d126:	2b0f      	cmp	r3, #15
 800d128:	d916      	bls.n	800d158 <UART_SetConfig+0xb28>
 800d12a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d12c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d130:	d212      	bcs.n	800d158 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d134:	b29b      	uxth	r3, r3
 800d136:	f023 030f 	bic.w	r3, r3, #15
 800d13a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d13e:	085b      	lsrs	r3, r3, #1
 800d140:	b29b      	uxth	r3, r3
 800d142:	f003 0307 	and.w	r3, r3, #7
 800d146:	b29a      	uxth	r2, r3
 800d148:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d14a:	4313      	orrs	r3, r2
 800d14c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d154:	60da      	str	r2, [r3, #12]
 800d156:	e0bc      	b.n	800d2d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d158:	2301      	movs	r3, #1
 800d15a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d15e:	e0b8      	b.n	800d2d2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d160:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d164:	2b20      	cmp	r3, #32
 800d166:	dc4b      	bgt.n	800d200 <UART_SetConfig+0xbd0>
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f2c0 8087 	blt.w	800d27c <UART_SetConfig+0xc4c>
 800d16e:	2b20      	cmp	r3, #32
 800d170:	f200 8084 	bhi.w	800d27c <UART_SetConfig+0xc4c>
 800d174:	a201      	add	r2, pc, #4	@ (adr r2, 800d17c <UART_SetConfig+0xb4c>)
 800d176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17a:	bf00      	nop
 800d17c:	0800d207 	.word	0x0800d207
 800d180:	0800d20f 	.word	0x0800d20f
 800d184:	0800d27d 	.word	0x0800d27d
 800d188:	0800d27d 	.word	0x0800d27d
 800d18c:	0800d217 	.word	0x0800d217
 800d190:	0800d27d 	.word	0x0800d27d
 800d194:	0800d27d 	.word	0x0800d27d
 800d198:	0800d27d 	.word	0x0800d27d
 800d19c:	0800d227 	.word	0x0800d227
 800d1a0:	0800d27d 	.word	0x0800d27d
 800d1a4:	0800d27d 	.word	0x0800d27d
 800d1a8:	0800d27d 	.word	0x0800d27d
 800d1ac:	0800d27d 	.word	0x0800d27d
 800d1b0:	0800d27d 	.word	0x0800d27d
 800d1b4:	0800d27d 	.word	0x0800d27d
 800d1b8:	0800d27d 	.word	0x0800d27d
 800d1bc:	0800d237 	.word	0x0800d237
 800d1c0:	0800d27d 	.word	0x0800d27d
 800d1c4:	0800d27d 	.word	0x0800d27d
 800d1c8:	0800d27d 	.word	0x0800d27d
 800d1cc:	0800d27d 	.word	0x0800d27d
 800d1d0:	0800d27d 	.word	0x0800d27d
 800d1d4:	0800d27d 	.word	0x0800d27d
 800d1d8:	0800d27d 	.word	0x0800d27d
 800d1dc:	0800d27d 	.word	0x0800d27d
 800d1e0:	0800d27d 	.word	0x0800d27d
 800d1e4:	0800d27d 	.word	0x0800d27d
 800d1e8:	0800d27d 	.word	0x0800d27d
 800d1ec:	0800d27d 	.word	0x0800d27d
 800d1f0:	0800d27d 	.word	0x0800d27d
 800d1f4:	0800d27d 	.word	0x0800d27d
 800d1f8:	0800d27d 	.word	0x0800d27d
 800d1fc:	0800d26f 	.word	0x0800d26f
 800d200:	2b40      	cmp	r3, #64	@ 0x40
 800d202:	d037      	beq.n	800d274 <UART_SetConfig+0xc44>
 800d204:	e03a      	b.n	800d27c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d206:	f7fb fa3d 	bl	8008684 <HAL_RCC_GetPCLK1Freq>
 800d20a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d20c:	e03c      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d20e:	f7fb fa4f 	bl	80086b0 <HAL_RCC_GetPCLK2Freq>
 800d212:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d214:	e038      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d216:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fd f928 	bl	800a470 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d224:	e030      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d226:	f107 0318 	add.w	r3, r7, #24
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fd fa74 	bl	800a718 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d234:	e028      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d236:	4b09      	ldr	r3, [pc, #36]	@ (800d25c <UART_SetConfig+0xc2c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	f003 0320 	and.w	r3, r3, #32
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d012      	beq.n	800d268 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d242:	4b06      	ldr	r3, [pc, #24]	@ (800d25c <UART_SetConfig+0xc2c>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	08db      	lsrs	r3, r3, #3
 800d248:	f003 0303 	and.w	r3, r3, #3
 800d24c:	4a04      	ldr	r2, [pc, #16]	@ (800d260 <UART_SetConfig+0xc30>)
 800d24e:	fa22 f303 	lsr.w	r3, r2, r3
 800d252:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d254:	e018      	b.n	800d288 <UART_SetConfig+0xc58>
 800d256:	bf00      	nop
 800d258:	080132c4 	.word	0x080132c4
 800d25c:	58024400 	.word	0x58024400
 800d260:	03d09000 	.word	0x03d09000
 800d264:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d268:	4b24      	ldr	r3, [pc, #144]	@ (800d2fc <UART_SetConfig+0xccc>)
 800d26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d26c:	e00c      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d26e:	4b24      	ldr	r3, [pc, #144]	@ (800d300 <UART_SetConfig+0xcd0>)
 800d270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d272:	e009      	b.n	800d288 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d274:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d27a:	e005      	b.n	800d288 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d27c:	2300      	movs	r3, #0
 800d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d286:	bf00      	nop
    }

    if (pclk != 0U)
 800d288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d021      	beq.n	800d2d2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d292:	4a1c      	ldr	r2, [pc, #112]	@ (800d304 <UART_SetConfig+0xcd4>)
 800d294:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d298:	461a      	mov	r2, r3
 800d29a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d29c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	085b      	lsrs	r3, r3, #1
 800d2a6:	441a      	add	r2, r3
 800d2a8:	697b      	ldr	r3, [r7, #20]
 800d2aa:	685b      	ldr	r3, [r3, #4]
 800d2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2b4:	2b0f      	cmp	r3, #15
 800d2b6:	d909      	bls.n	800d2cc <UART_SetConfig+0xc9c>
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2be:	d205      	bcs.n	800d2cc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2c2:	b29a      	uxth	r2, r3
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	60da      	str	r2, [r3, #12]
 800d2ca:	e002      	b.n	800d2d2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d2ee:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3748      	adds	r7, #72	@ 0x48
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d2fc:	03d09000 	.word	0x03d09000
 800d300:	003d0900 	.word	0x003d0900
 800d304:	080132c4 	.word	0x080132c4

0800d308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d308:	b480      	push	{r7}
 800d30a:	b083      	sub	sp, #12
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d00a      	beq.n	800d332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	430a      	orrs	r2, r1
 800d330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d336:	f003 0301 	and.w	r3, r3, #1
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00a      	beq.n	800d354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	430a      	orrs	r2, r1
 800d352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d358:	f003 0302 	and.w	r3, r3, #2
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00a      	beq.n	800d376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	430a      	orrs	r2, r1
 800d374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d37a:	f003 0304 	and.w	r3, r3, #4
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00a      	beq.n	800d398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	430a      	orrs	r2, r1
 800d396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39c:	f003 0310 	and.w	r3, r3, #16
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00a      	beq.n	800d3ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	689b      	ldr	r3, [r3, #8]
 800d3aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	430a      	orrs	r2, r1
 800d3b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3be:	f003 0320 	and.w	r3, r3, #32
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d00a      	beq.n	800d3dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	430a      	orrs	r2, r1
 800d3da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d01a      	beq.n	800d41e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	685b      	ldr	r3, [r3, #4]
 800d3ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	430a      	orrs	r2, r1
 800d3fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d406:	d10a      	bne.n	800d41e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00a      	beq.n	800d440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	685b      	ldr	r3, [r3, #4]
 800d430:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	430a      	orrs	r2, r1
 800d43e:	605a      	str	r2, [r3, #4]
  }
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b098      	sub	sp, #96	@ 0x60
 800d450:	af02      	add	r7, sp, #8
 800d452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d45c:	f7f5 ff0c 	bl	8003278 <HAL_GetTick>
 800d460:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 0308 	and.w	r3, r3, #8
 800d46c:	2b08      	cmp	r3, #8
 800d46e:	d12f      	bne.n	800d4d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d470:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d478:	2200      	movs	r2, #0
 800d47a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 f88e 	bl	800d5a0 <UART_WaitOnFlagUntilTimeout>
 800d484:	4603      	mov	r3, r0
 800d486:	2b00      	cmp	r3, #0
 800d488:	d022      	beq.n	800d4d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d492:	e853 3f00 	ldrex	r3, [r3]
 800d496:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d49a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d49e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	461a      	mov	r2, r3
 800d4a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4b0:	e841 2300 	strex	r3, r2, [r1]
 800d4b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d1e6      	bne.n	800d48a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2220      	movs	r2, #32
 800d4c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4cc:	2303      	movs	r3, #3
 800d4ce:	e063      	b.n	800d598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 0304 	and.w	r3, r3, #4
 800d4da:	2b04      	cmp	r3, #4
 800d4dc:	d149      	bne.n	800d572 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 f857 	bl	800d5a0 <UART_WaitOnFlagUntilTimeout>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d03c      	beq.n	800d572 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d500:	e853 3f00 	ldrex	r3, [r3]
 800d504:	623b      	str	r3, [r7, #32]
   return(result);
 800d506:	6a3b      	ldr	r3, [r7, #32]
 800d508:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d50c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	461a      	mov	r2, r3
 800d514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d516:	633b      	str	r3, [r7, #48]	@ 0x30
 800d518:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d51a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d51c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d51e:	e841 2300 	strex	r3, r2, [r1]
 800d522:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d526:	2b00      	cmp	r3, #0
 800d528:	d1e6      	bne.n	800d4f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	3308      	adds	r3, #8
 800d530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d532:	693b      	ldr	r3, [r7, #16]
 800d534:	e853 3f00 	ldrex	r3, [r3]
 800d538:	60fb      	str	r3, [r7, #12]
   return(result);
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f023 0301 	bic.w	r3, r3, #1
 800d540:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3308      	adds	r3, #8
 800d548:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d54a:	61fa      	str	r2, [r7, #28]
 800d54c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54e:	69b9      	ldr	r1, [r7, #24]
 800d550:	69fa      	ldr	r2, [r7, #28]
 800d552:	e841 2300 	strex	r3, r2, [r1]
 800d556:	617b      	str	r3, [r7, #20]
   return(result);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1e5      	bne.n	800d52a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2220      	movs	r2, #32
 800d562:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d56e:	2303      	movs	r3, #3
 800d570:	e012      	b.n	800d598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2220      	movs	r2, #32
 800d57e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	2200      	movs	r2, #0
 800d586:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2200      	movs	r2, #0
 800d58c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3758      	adds	r7, #88	@ 0x58
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	603b      	str	r3, [r7, #0]
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5b0:	e04f      	b.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b8:	d04b      	beq.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5ba:	f7f5 fe5d 	bl	8003278 <HAL_GetTick>
 800d5be:	4602      	mov	r2, r0
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	1ad3      	subs	r3, r2, r3
 800d5c4:	69ba      	ldr	r2, [r7, #24]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d302      	bcc.n	800d5d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d5ca:	69bb      	ldr	r3, [r7, #24]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d101      	bne.n	800d5d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	e04e      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f003 0304 	and.w	r3, r3, #4
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d037      	beq.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b80      	cmp	r3, #128	@ 0x80
 800d5e6:	d034      	beq.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2b40      	cmp	r3, #64	@ 0x40
 800d5ec:	d031      	beq.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	69db      	ldr	r3, [r3, #28]
 800d5f4:	f003 0308 	and.w	r3, r3, #8
 800d5f8:	2b08      	cmp	r3, #8
 800d5fa:	d110      	bne.n	800d61e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2208      	movs	r2, #8
 800d602:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f000 f839 	bl	800d67c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2208      	movs	r2, #8
 800d60e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	2200      	movs	r2, #0
 800d616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e029      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	69db      	ldr	r3, [r3, #28]
 800d624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d628:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d62c:	d111      	bne.n	800d652 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d636:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f000 f81f 	bl	800d67c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	2220      	movs	r2, #32
 800d642:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2200      	movs	r2, #0
 800d64a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d64e:	2303      	movs	r3, #3
 800d650:	e00f      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	69da      	ldr	r2, [r3, #28]
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	4013      	ands	r3, r2
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	429a      	cmp	r2, r3
 800d660:	bf0c      	ite	eq
 800d662:	2301      	moveq	r3, #1
 800d664:	2300      	movne	r3, #0
 800d666:	b2db      	uxtb	r3, r3
 800d668:	461a      	mov	r2, r3
 800d66a:	79fb      	ldrb	r3, [r7, #7]
 800d66c:	429a      	cmp	r2, r3
 800d66e:	d0a0      	beq.n	800d5b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d670:	2300      	movs	r3, #0
}
 800d672:	4618      	mov	r0, r3
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
	...

0800d67c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b095      	sub	sp, #84	@ 0x54
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d68c:	e853 3f00 	ldrex	r3, [r3]
 800d690:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	461a      	mov	r2, r3
 800d6a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6a2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6aa:	e841 2300 	strex	r3, r2, [r1]
 800d6ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1e6      	bne.n	800d684 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	3308      	adds	r3, #8
 800d6bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6be:	6a3b      	ldr	r3, [r7, #32]
 800d6c0:	e853 3f00 	ldrex	r3, [r3]
 800d6c4:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6c6:	69fa      	ldr	r2, [r7, #28]
 800d6c8:	4b1e      	ldr	r3, [pc, #120]	@ (800d744 <UART_EndRxTransfer+0xc8>)
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	3308      	adds	r3, #8
 800d6d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6de:	e841 2300 	strex	r3, r2, [r1]
 800d6e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d1e5      	bne.n	800d6b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d118      	bne.n	800d724 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	e853 3f00 	ldrex	r3, [r3]
 800d6fe:	60bb      	str	r3, [r7, #8]
   return(result);
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	f023 0310 	bic.w	r3, r3, #16
 800d706:	647b      	str	r3, [r7, #68]	@ 0x44
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	461a      	mov	r2, r3
 800d70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d710:	61bb      	str	r3, [r7, #24]
 800d712:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d714:	6979      	ldr	r1, [r7, #20]
 800d716:	69ba      	ldr	r2, [r7, #24]
 800d718:	e841 2300 	strex	r3, r2, [r1]
 800d71c:	613b      	str	r3, [r7, #16]
   return(result);
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1e6      	bne.n	800d6f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2220      	movs	r2, #32
 800d728:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2200      	movs	r2, #0
 800d736:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d738:	bf00      	nop
 800d73a:	3754      	adds	r7, #84	@ 0x54
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr
 800d744:	effffffe 	.word	0xeffffffe

0800d748 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d748:	b480      	push	{r7}
 800d74a:	b085      	sub	sp, #20
 800d74c:	af00      	add	r7, sp, #0
 800d74e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d756:	2b01      	cmp	r3, #1
 800d758:	d101      	bne.n	800d75e <HAL_UARTEx_DisableFifoMode+0x16>
 800d75a:	2302      	movs	r3, #2
 800d75c:	e027      	b.n	800d7ae <HAL_UARTEx_DisableFifoMode+0x66>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2201      	movs	r2, #1
 800d762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2224      	movs	r2, #36	@ 0x24
 800d76a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f022 0201 	bic.w	r2, r2, #1
 800d784:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d78c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2200      	movs	r2, #0
 800d792:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2220      	movs	r2, #32
 800d7a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3714      	adds	r7, #20
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
 800d7c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7ca:	2b01      	cmp	r3, #1
 800d7cc:	d101      	bne.n	800d7d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7ce:	2302      	movs	r3, #2
 800d7d0:	e02d      	b.n	800d82e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2224      	movs	r2, #36	@ 0x24
 800d7de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f022 0201 	bic.w	r2, r2, #1
 800d7f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	430a      	orrs	r2, r1
 800d80c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f850 	bl	800d8b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68fa      	ldr	r2, [r7, #12]
 800d81a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2220      	movs	r2, #32
 800d820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d82c:	2300      	movs	r3, #0
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3710      	adds	r7, #16
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}

0800d836 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d836:	b580      	push	{r7, lr}
 800d838:	b084      	sub	sp, #16
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
 800d83e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d846:	2b01      	cmp	r3, #1
 800d848:	d101      	bne.n	800d84e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d84a:	2302      	movs	r3, #2
 800d84c:	e02d      	b.n	800d8aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2224      	movs	r2, #36	@ 0x24
 800d85a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	681a      	ldr	r2, [r3, #0]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f022 0201 	bic.w	r2, r2, #1
 800d874:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	430a      	orrs	r2, r1
 800d888:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f812 	bl	800d8b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2220      	movs	r2, #32
 800d89c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8a8:	2300      	movs	r3, #0
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d108      	bne.n	800d8d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8d4:	e031      	b.n	800d93a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8d6:	2310      	movs	r3, #16
 800d8d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8da:	2310      	movs	r3, #16
 800d8dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	689b      	ldr	r3, [r3, #8]
 800d8e4:	0e5b      	lsrs	r3, r3, #25
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	f003 0307 	and.w	r3, r3, #7
 800d8ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	0f5b      	lsrs	r3, r3, #29
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d8fe:	7bbb      	ldrb	r3, [r7, #14]
 800d900:	7b3a      	ldrb	r2, [r7, #12]
 800d902:	4911      	ldr	r1, [pc, #68]	@ (800d948 <UARTEx_SetNbDataToProcess+0x94>)
 800d904:	5c8a      	ldrb	r2, [r1, r2]
 800d906:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d90a:	7b3a      	ldrb	r2, [r7, #12]
 800d90c:	490f      	ldr	r1, [pc, #60]	@ (800d94c <UARTEx_SetNbDataToProcess+0x98>)
 800d90e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d910:	fb93 f3f2 	sdiv	r3, r3, r2
 800d914:	b29a      	uxth	r2, r3
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
 800d91e:	7b7a      	ldrb	r2, [r7, #13]
 800d920:	4909      	ldr	r1, [pc, #36]	@ (800d948 <UARTEx_SetNbDataToProcess+0x94>)
 800d922:	5c8a      	ldrb	r2, [r1, r2]
 800d924:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d928:	7b7a      	ldrb	r2, [r7, #13]
 800d92a:	4908      	ldr	r1, [pc, #32]	@ (800d94c <UARTEx_SetNbDataToProcess+0x98>)
 800d92c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d92e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d932:	b29a      	uxth	r2, r3
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d93a:	bf00      	nop
 800d93c:	3714      	adds	r7, #20
 800d93e:	46bd      	mov	sp, r7
 800d940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	080132dc 	.word	0x080132dc
 800d94c:	080132e4 	.word	0x080132e4

0800d950 <__NVIC_SetPriority>:
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	4603      	mov	r3, r0
 800d958:	6039      	str	r1, [r7, #0]
 800d95a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800d95c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d960:	2b00      	cmp	r3, #0
 800d962:	db0a      	blt.n	800d97a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	b2da      	uxtb	r2, r3
 800d968:	490c      	ldr	r1, [pc, #48]	@ (800d99c <__NVIC_SetPriority+0x4c>)
 800d96a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d96e:	0112      	lsls	r2, r2, #4
 800d970:	b2d2      	uxtb	r2, r2
 800d972:	440b      	add	r3, r1
 800d974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d978:	e00a      	b.n	800d990 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	b2da      	uxtb	r2, r3
 800d97e:	4908      	ldr	r1, [pc, #32]	@ (800d9a0 <__NVIC_SetPriority+0x50>)
 800d980:	88fb      	ldrh	r3, [r7, #6]
 800d982:	f003 030f 	and.w	r3, r3, #15
 800d986:	3b04      	subs	r3, #4
 800d988:	0112      	lsls	r2, r2, #4
 800d98a:	b2d2      	uxtb	r2, r2
 800d98c:	440b      	add	r3, r1
 800d98e:	761a      	strb	r2, [r3, #24]
}
 800d990:	bf00      	nop
 800d992:	370c      	adds	r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99a:	4770      	bx	lr
 800d99c:	e000e100 	.word	0xe000e100
 800d9a0:	e000ed00 	.word	0xe000ed00

0800d9a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800d9a8:	4b05      	ldr	r3, [pc, #20]	@ (800d9c0 <SysTick_Handler+0x1c>)
 800d9aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d9ac:	f001 fd46 	bl	800f43c <xTaskGetSchedulerState>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d001      	beq.n	800d9ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800d9b6:	f002 fb3f 	bl	8010038 <xPortSysTickHandler>
  }
}
 800d9ba:	bf00      	nop
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	e000e010 	.word	0xe000e010

0800d9c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d9c8:	2100      	movs	r1, #0
 800d9ca:	f06f 0004 	mvn.w	r0, #4
 800d9ce:	f7ff ffbf 	bl	800d950 <__NVIC_SetPriority>
#endif
}
 800d9d2:	bf00      	nop
 800d9d4:	bd80      	pop	{r7, pc}
	...

0800d9d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d9d8:	b480      	push	{r7}
 800d9da:	b083      	sub	sp, #12
 800d9dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d9de:	f3ef 8305 	mrs	r3, IPSR
 800d9e2:	603b      	str	r3, [r7, #0]
  return(result);
 800d9e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d9ea:	f06f 0305 	mvn.w	r3, #5
 800d9ee:	607b      	str	r3, [r7, #4]
 800d9f0:	e00c      	b.n	800da0c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800da1c <osKernelInitialize+0x44>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d105      	bne.n	800da06 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d9fa:	4b08      	ldr	r3, [pc, #32]	@ (800da1c <osKernelInitialize+0x44>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800da00:	2300      	movs	r3, #0
 800da02:	607b      	str	r3, [r7, #4]
 800da04:	e002      	b.n	800da0c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da0c:	687b      	ldr	r3, [r7, #4]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	370c      	adds	r7, #12
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
 800da1a:	bf00      	nop
 800da1c:	24000bd4 	.word	0x24000bd4

0800da20 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800da20:	b580      	push	{r7, lr}
 800da22:	b082      	sub	sp, #8
 800da24:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da26:	f3ef 8305 	mrs	r3, IPSR
 800da2a:	603b      	str	r3, [r7, #0]
  return(result);
 800da2c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d003      	beq.n	800da3a <osKernelStart+0x1a>
    stat = osErrorISR;
 800da32:	f06f 0305 	mvn.w	r3, #5
 800da36:	607b      	str	r3, [r7, #4]
 800da38:	e010      	b.n	800da5c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800da3a:	4b0b      	ldr	r3, [pc, #44]	@ (800da68 <osKernelStart+0x48>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d109      	bne.n	800da56 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800da42:	f7ff ffbf 	bl	800d9c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800da46:	4b08      	ldr	r3, [pc, #32]	@ (800da68 <osKernelStart+0x48>)
 800da48:	2202      	movs	r2, #2
 800da4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800da4c:	f001 f892 	bl	800eb74 <vTaskStartScheduler>
      stat = osOK;
 800da50:	2300      	movs	r3, #0
 800da52:	607b      	str	r3, [r7, #4]
 800da54:	e002      	b.n	800da5c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800da56:	f04f 33ff 	mov.w	r3, #4294967295
 800da5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800da5c:	687b      	ldr	r3, [r7, #4]
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	24000bd4 	.word	0x24000bd4

0800da6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b08e      	sub	sp, #56	@ 0x38
 800da70:	af04      	add	r7, sp, #16
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	60b9      	str	r1, [r7, #8]
 800da76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800da78:	2300      	movs	r3, #0
 800da7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da7c:	f3ef 8305 	mrs	r3, IPSR
 800da80:	617b      	str	r3, [r7, #20]
  return(result);
 800da82:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800da84:	2b00      	cmp	r3, #0
 800da86:	d17e      	bne.n	800db86 <osThreadNew+0x11a>
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d07b      	beq.n	800db86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800da8e:	2380      	movs	r3, #128	@ 0x80
 800da90:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800da92:	2318      	movs	r3, #24
 800da94:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800da96:	2300      	movs	r3, #0
 800da98:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800da9a:	f04f 33ff 	mov.w	r3, #4294967295
 800da9e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d045      	beq.n	800db32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d002      	beq.n	800dab4 <osThreadNew+0x48>
        name = attr->name;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	699b      	ldr	r3, [r3, #24]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d002      	beq.n	800dac2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dac2:	69fb      	ldr	r3, [r7, #28]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d008      	beq.n	800dada <osThreadNew+0x6e>
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	2b38      	cmp	r3, #56	@ 0x38
 800dacc:	d805      	bhi.n	800dada <osThreadNew+0x6e>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d001      	beq.n	800dade <osThreadNew+0x72>
        return (NULL);
 800dada:	2300      	movs	r3, #0
 800dadc:	e054      	b.n	800db88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	695b      	ldr	r3, [r3, #20]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d003      	beq.n	800daee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	695b      	ldr	r3, [r3, #20]
 800daea:	089b      	lsrs	r3, r3, #2
 800daec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	689b      	ldr	r3, [r3, #8]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00e      	beq.n	800db14 <osThreadNew+0xa8>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	2ba7      	cmp	r3, #167	@ 0xa7
 800dafc:	d90a      	bls.n	800db14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800db02:	2b00      	cmp	r3, #0
 800db04:	d006      	beq.n	800db14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	695b      	ldr	r3, [r3, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d002      	beq.n	800db14 <osThreadNew+0xa8>
        mem = 1;
 800db0e:	2301      	movs	r3, #1
 800db10:	61bb      	str	r3, [r7, #24]
 800db12:	e010      	b.n	800db36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d10c      	bne.n	800db36 <osThreadNew+0xca>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	68db      	ldr	r3, [r3, #12]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d108      	bne.n	800db36 <osThreadNew+0xca>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	691b      	ldr	r3, [r3, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <osThreadNew+0xca>
          mem = 0;
 800db2c:	2300      	movs	r3, #0
 800db2e:	61bb      	str	r3, [r7, #24]
 800db30:	e001      	b.n	800db36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800db36:	69bb      	ldr	r3, [r7, #24]
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d110      	bne.n	800db5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800db44:	9202      	str	r2, [sp, #8]
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	69fb      	ldr	r3, [r7, #28]
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	68bb      	ldr	r3, [r7, #8]
 800db4e:	6a3a      	ldr	r2, [r7, #32]
 800db50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	f000 fe1a 	bl	800e78c <xTaskCreateStatic>
 800db58:	4603      	mov	r3, r0
 800db5a:	613b      	str	r3, [r7, #16]
 800db5c:	e013      	b.n	800db86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800db5e:	69bb      	ldr	r3, [r7, #24]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d110      	bne.n	800db86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800db64:	6a3b      	ldr	r3, [r7, #32]
 800db66:	b29a      	uxth	r2, r3
 800db68:	f107 0310 	add.w	r3, r7, #16
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	68bb      	ldr	r3, [r7, #8]
 800db74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800db76:	68f8      	ldr	r0, [r7, #12]
 800db78:	f000 fe68 	bl	800e84c <xTaskCreate>
 800db7c:	4603      	mov	r3, r0
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d001      	beq.n	800db86 <osThreadNew+0x11a>
            hTask = NULL;
 800db82:	2300      	movs	r3, #0
 800db84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800db86:	693b      	ldr	r3, [r7, #16]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3728      	adds	r7, #40	@ 0x28
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bd80      	pop	{r7, pc}

0800db90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db98:	f3ef 8305 	mrs	r3, IPSR
 800db9c:	60bb      	str	r3, [r7, #8]
  return(result);
 800db9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <osDelay+0x1c>
    stat = osErrorISR;
 800dba4:	f06f 0305 	mvn.w	r3, #5
 800dba8:	60fb      	str	r3, [r7, #12]
 800dbaa:	e007      	b.n	800dbbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d002      	beq.n	800dbbc <osDelay+0x2c>
      vTaskDelay(ticks);
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 ffa6 	bl	800eb08 <vTaskDelay>
    }
  }

  return (stat);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
	...

0800dbc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	4a07      	ldr	r2, [pc, #28]	@ (800dbf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800dbd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	4a06      	ldr	r2, [pc, #24]	@ (800dbf8 <vApplicationGetIdleTaskMemory+0x30>)
 800dbde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2280      	movs	r2, #128	@ 0x80
 800dbe4:	601a      	str	r2, [r3, #0]
}
 800dbe6:	bf00      	nop
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	24000bd8 	.word	0x24000bd8
 800dbf8:	24000c80 	.word	0x24000c80

0800dbfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	4a07      	ldr	r2, [pc, #28]	@ (800dc28 <vApplicationGetTimerTaskMemory+0x2c>)
 800dc0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	4a06      	ldr	r2, [pc, #24]	@ (800dc2c <vApplicationGetTimerTaskMemory+0x30>)
 800dc12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800dc1a:	601a      	str	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	3714      	adds	r7, #20
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr
 800dc28:	24000e80 	.word	0x24000e80
 800dc2c:	24000f28 	.word	0x24000f28

0800dc30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f103 0208 	add.w	r2, r3, #8
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f04f 32ff 	mov.w	r2, #4294967295
 800dc48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	f103 0208 	add.w	r2, r3, #8
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f103 0208 	add.w	r2, r3, #8
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dc64:	bf00      	nop
 800dc66:	370c      	adds	r7, #12
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6e:	4770      	bx	lr

0800dc70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dc7e:	bf00      	nop
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b085      	sub	sp, #20
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
 800dc92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	685b      	ldr	r3, [r3, #4]
 800dc98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	68fa      	ldr	r2, [r7, #12]
 800dc9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	689a      	ldr	r2, [r3, #8]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	683a      	ldr	r2, [r7, #0]
 800dcae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	683a      	ldr	r2, [r7, #0]
 800dcb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	1c5a      	adds	r2, r3, #1
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	601a      	str	r2, [r3, #0]
}
 800dcc6:	bf00      	nop
 800dcc8:	3714      	adds	r7, #20
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dcd2:	b480      	push	{r7}
 800dcd4:	b085      	sub	sp, #20
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
 800dcda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce8:	d103      	bne.n	800dcf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	60fb      	str	r3, [r7, #12]
 800dcf0:	e00c      	b.n	800dd0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3308      	adds	r3, #8
 800dcf6:	60fb      	str	r3, [r7, #12]
 800dcf8:	e002      	b.n	800dd00 <vListInsert+0x2e>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	685b      	ldr	r3, [r3, #4]
 800dcfe:	60fb      	str	r3, [r7, #12]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68ba      	ldr	r2, [r7, #8]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	d2f6      	bcs.n	800dcfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	685a      	ldr	r2, [r3, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	683a      	ldr	r2, [r7, #0]
 800dd1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	68fa      	ldr	r2, [r7, #12]
 800dd20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	683a      	ldr	r2, [r7, #0]
 800dd26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	687a      	ldr	r2, [r7, #4]
 800dd2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	1c5a      	adds	r2, r3, #1
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	601a      	str	r2, [r3, #0]
}
 800dd38:	bf00      	nop
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr

0800dd44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800dd44:	b480      	push	{r7}
 800dd46:	b085      	sub	sp, #20
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	691b      	ldr	r3, [r3, #16]
 800dd50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	6892      	ldr	r2, [r2, #8]
 800dd5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	689b      	ldr	r3, [r3, #8]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	6852      	ldr	r2, [r2, #4]
 800dd64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d103      	bne.n	800dd78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	689a      	ldr	r2, [r3, #8]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	1e5a      	subs	r2, r3, #1
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr

0800dd98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b084      	sub	sp, #16
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10b      	bne.n	800ddc4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ddac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddb0:	f383 8811 	msr	BASEPRI, r3
 800ddb4:	f3bf 8f6f 	isb	sy
 800ddb8:	f3bf 8f4f 	dsb	sy
 800ddbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ddbe:	bf00      	nop
 800ddc0:	bf00      	nop
 800ddc2:	e7fd      	b.n	800ddc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ddc4:	f002 f8a8 	bl	800ff18 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddd0:	68f9      	ldr	r1, [r7, #12]
 800ddd2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ddd4:	fb01 f303 	mul.w	r3, r1, r3
 800ddd8:	441a      	add	r2, r3
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2200      	movs	r2, #0
 800dde2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	68f9      	ldr	r1, [r7, #12]
 800ddf8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ddfa:	fb01 f303 	mul.w	r3, r1, r3
 800ddfe:	441a      	add	r2, r3
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	22ff      	movs	r2, #255	@ 0xff
 800de08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	22ff      	movs	r2, #255	@ 0xff
 800de10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d114      	bne.n	800de44 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	691b      	ldr	r3, [r3, #16]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d01a      	beq.n	800de58 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3310      	adds	r3, #16
 800de26:	4618      	mov	r0, r3
 800de28:	f001 f942 	bl	800f0b0 <xTaskRemoveFromEventList>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d012      	beq.n	800de58 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800de32:	4b0d      	ldr	r3, [pc, #52]	@ (800de68 <xQueueGenericReset+0xd0>)
 800de34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de38:	601a      	str	r2, [r3, #0]
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	f3bf 8f6f 	isb	sy
 800de42:	e009      	b.n	800de58 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3310      	adds	r3, #16
 800de48:	4618      	mov	r0, r3
 800de4a:	f7ff fef1 	bl	800dc30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	3324      	adds	r3, #36	@ 0x24
 800de52:	4618      	mov	r0, r3
 800de54:	f7ff feec 	bl	800dc30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800de58:	f002 f890 	bl	800ff7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800de5c:	2301      	movs	r3, #1
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3710      	adds	r7, #16
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}
 800de66:	bf00      	nop
 800de68:	e000ed04 	.word	0xe000ed04

0800de6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b08e      	sub	sp, #56	@ 0x38
 800de70:	af02      	add	r7, sp, #8
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	607a      	str	r2, [r7, #4]
 800de78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10b      	bne.n	800de98 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800de80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de84:	f383 8811 	msr	BASEPRI, r3
 800de88:	f3bf 8f6f 	isb	sy
 800de8c:	f3bf 8f4f 	dsb	sy
 800de90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de92:	bf00      	nop
 800de94:	bf00      	nop
 800de96:	e7fd      	b.n	800de94 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10b      	bne.n	800deb6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800de9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dea2:	f383 8811 	msr	BASEPRI, r3
 800dea6:	f3bf 8f6f 	isb	sy
 800deaa:	f3bf 8f4f 	dsb	sy
 800deae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800deb0:	bf00      	nop
 800deb2:	bf00      	nop
 800deb4:	e7fd      	b.n	800deb2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <xQueueGenericCreateStatic+0x56>
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <xQueueGenericCreateStatic+0x5a>
 800dec2:	2301      	movs	r3, #1
 800dec4:	e000      	b.n	800dec8 <xQueueGenericCreateStatic+0x5c>
 800dec6:	2300      	movs	r3, #0
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d10b      	bne.n	800dee4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800decc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ded0:	f383 8811 	msr	BASEPRI, r3
 800ded4:	f3bf 8f6f 	isb	sy
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	623b      	str	r3, [r7, #32]
}
 800dede:	bf00      	nop
 800dee0:	bf00      	nop
 800dee2:	e7fd      	b.n	800dee0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d102      	bne.n	800def0 <xQueueGenericCreateStatic+0x84>
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <xQueueGenericCreateStatic+0x88>
 800def0:	2301      	movs	r3, #1
 800def2:	e000      	b.n	800def6 <xQueueGenericCreateStatic+0x8a>
 800def4:	2300      	movs	r3, #0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d10b      	bne.n	800df12 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800defa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800defe:	f383 8811 	msr	BASEPRI, r3
 800df02:	f3bf 8f6f 	isb	sy
 800df06:	f3bf 8f4f 	dsb	sy
 800df0a:	61fb      	str	r3, [r7, #28]
}
 800df0c:	bf00      	nop
 800df0e:	bf00      	nop
 800df10:	e7fd      	b.n	800df0e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800df12:	2350      	movs	r3, #80	@ 0x50
 800df14:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800df16:	697b      	ldr	r3, [r7, #20]
 800df18:	2b50      	cmp	r3, #80	@ 0x50
 800df1a:	d00b      	beq.n	800df34 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800df1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df20:	f383 8811 	msr	BASEPRI, r3
 800df24:	f3bf 8f6f 	isb	sy
 800df28:	f3bf 8f4f 	dsb	sy
 800df2c:	61bb      	str	r3, [r7, #24]
}
 800df2e:	bf00      	nop
 800df30:	bf00      	nop
 800df32:	e7fd      	b.n	800df30 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df34:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800df3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00d      	beq.n	800df5c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	2201      	movs	r2, #1
 800df44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800df48:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800df4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df4e:	9300      	str	r3, [sp, #0]
 800df50:	4613      	mov	r3, r2
 800df52:	687a      	ldr	r2, [r7, #4]
 800df54:	68b9      	ldr	r1, [r7, #8]
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 f805 	bl	800df66 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800df5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800df5e:	4618      	mov	r0, r3
 800df60:	3730      	adds	r7, #48	@ 0x30
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b084      	sub	sp, #16
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
 800df72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d103      	bne.n	800df82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	69ba      	ldr	r2, [r7, #24]
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	e002      	b.n	800df88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800df82:	69bb      	ldr	r3, [r7, #24]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800df88:	69bb      	ldr	r3, [r7, #24]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800df8e:	69bb      	ldr	r3, [r7, #24]
 800df90:	68ba      	ldr	r2, [r7, #8]
 800df92:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800df94:	2101      	movs	r1, #1
 800df96:	69b8      	ldr	r0, [r7, #24]
 800df98:	f7ff fefe 	bl	800dd98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800df9c:	69bb      	ldr	r3, [r7, #24]
 800df9e:	78fa      	ldrb	r2, [r7, #3]
 800dfa0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dfa4:	bf00      	nop
 800dfa6:	3710      	adds	r7, #16
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	bd80      	pop	{r7, pc}

0800dfac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	@ 0x38
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800dfba:	2300      	movs	r3, #0
 800dfbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800dfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d10b      	bne.n	800dfe0 <xQueueGenericSend+0x34>
	__asm volatile
 800dfc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfcc:	f383 8811 	msr	BASEPRI, r3
 800dfd0:	f3bf 8f6f 	isb	sy
 800dfd4:	f3bf 8f4f 	dsb	sy
 800dfd8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfda:	bf00      	nop
 800dfdc:	bf00      	nop
 800dfde:	e7fd      	b.n	800dfdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dfe0:	68bb      	ldr	r3, [r7, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d103      	bne.n	800dfee <xQueueGenericSend+0x42>
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <xQueueGenericSend+0x46>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e000      	b.n	800dff4 <xQueueGenericSend+0x48>
 800dff2:	2300      	movs	r3, #0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d10b      	bne.n	800e010 <xQueueGenericSend+0x64>
	__asm volatile
 800dff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dffc:	f383 8811 	msr	BASEPRI, r3
 800e000:	f3bf 8f6f 	isb	sy
 800e004:	f3bf 8f4f 	dsb	sy
 800e008:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e00a:	bf00      	nop
 800e00c:	bf00      	nop
 800e00e:	e7fd      	b.n	800e00c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	2b02      	cmp	r3, #2
 800e014:	d103      	bne.n	800e01e <xQueueGenericSend+0x72>
 800e016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d101      	bne.n	800e022 <xQueueGenericSend+0x76>
 800e01e:	2301      	movs	r3, #1
 800e020:	e000      	b.n	800e024 <xQueueGenericSend+0x78>
 800e022:	2300      	movs	r3, #0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d10b      	bne.n	800e040 <xQueueGenericSend+0x94>
	__asm volatile
 800e028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02c:	f383 8811 	msr	BASEPRI, r3
 800e030:	f3bf 8f6f 	isb	sy
 800e034:	f3bf 8f4f 	dsb	sy
 800e038:	623b      	str	r3, [r7, #32]
}
 800e03a:	bf00      	nop
 800e03c:	bf00      	nop
 800e03e:	e7fd      	b.n	800e03c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e040:	f001 f9fc 	bl	800f43c <xTaskGetSchedulerState>
 800e044:	4603      	mov	r3, r0
 800e046:	2b00      	cmp	r3, #0
 800e048:	d102      	bne.n	800e050 <xQueueGenericSend+0xa4>
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d101      	bne.n	800e054 <xQueueGenericSend+0xa8>
 800e050:	2301      	movs	r3, #1
 800e052:	e000      	b.n	800e056 <xQueueGenericSend+0xaa>
 800e054:	2300      	movs	r3, #0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d10b      	bne.n	800e072 <xQueueGenericSend+0xc6>
	__asm volatile
 800e05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e05e:	f383 8811 	msr	BASEPRI, r3
 800e062:	f3bf 8f6f 	isb	sy
 800e066:	f3bf 8f4f 	dsb	sy
 800e06a:	61fb      	str	r3, [r7, #28]
}
 800e06c:	bf00      	nop
 800e06e:	bf00      	nop
 800e070:	e7fd      	b.n	800e06e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e072:	f001 ff51 	bl	800ff18 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e07e:	429a      	cmp	r2, r3
 800e080:	d302      	bcc.n	800e088 <xQueueGenericSend+0xdc>
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	2b02      	cmp	r3, #2
 800e086:	d129      	bne.n	800e0dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e088:	683a      	ldr	r2, [r7, #0]
 800e08a:	68b9      	ldr	r1, [r7, #8]
 800e08c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e08e:	f000 fa0f 	bl	800e4b0 <prvCopyDataToQueue>
 800e092:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d010      	beq.n	800e0be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09e:	3324      	adds	r3, #36	@ 0x24
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f001 f805 	bl	800f0b0 <xTaskRemoveFromEventList>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d013      	beq.n	800e0d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e0ac:	4b3f      	ldr	r3, [pc, #252]	@ (800e1ac <xQueueGenericSend+0x200>)
 800e0ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0b2:	601a      	str	r2, [r3, #0]
 800e0b4:	f3bf 8f4f 	dsb	sy
 800e0b8:	f3bf 8f6f 	isb	sy
 800e0bc:	e00a      	b.n	800e0d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d007      	beq.n	800e0d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e0c4:	4b39      	ldr	r3, [pc, #228]	@ (800e1ac <xQueueGenericSend+0x200>)
 800e0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e0d4:	f001 ff52 	bl	800ff7c <vPortExitCritical>
				return pdPASS;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e063      	b.n	800e1a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d103      	bne.n	800e0ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e0e2:	f001 ff4b 	bl	800ff7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e0e6:	2300      	movs	r3, #0
 800e0e8:	e05c      	b.n	800e1a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d106      	bne.n	800e0fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e0f0:	f107 0314 	add.w	r3, r7, #20
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f001 f83f 	bl	800f178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e0fa:	2301      	movs	r3, #1
 800e0fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e0fe:	f001 ff3d 	bl	800ff7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e102:	f000 fda7 	bl	800ec54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e106:	f001 ff07 	bl	800ff18 <vPortEnterCritical>
 800e10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e10c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e110:	b25b      	sxtb	r3, r3
 800e112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e116:	d103      	bne.n	800e120 <xQueueGenericSend+0x174>
 800e118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11a:	2200      	movs	r2, #0
 800e11c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e122:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e126:	b25b      	sxtb	r3, r3
 800e128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12c:	d103      	bne.n	800e136 <xQueueGenericSend+0x18a>
 800e12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e130:	2200      	movs	r2, #0
 800e132:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e136:	f001 ff21 	bl	800ff7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e13a:	1d3a      	adds	r2, r7, #4
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f001 f82e 	bl	800f1a4 <xTaskCheckForTimeOut>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d124      	bne.n	800e198 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e14e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e150:	f000 faa6 	bl	800e6a0 <prvIsQueueFull>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d018      	beq.n	800e18c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	3310      	adds	r3, #16
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	4611      	mov	r1, r2
 800e162:	4618      	mov	r0, r3
 800e164:	f000 ff52 	bl	800f00c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e168:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e16a:	f000 fa31 	bl	800e5d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e16e:	f000 fd7f 	bl	800ec70 <xTaskResumeAll>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	f47f af7c 	bne.w	800e072 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e17a:	4b0c      	ldr	r3, [pc, #48]	@ (800e1ac <xQueueGenericSend+0x200>)
 800e17c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e180:	601a      	str	r2, [r3, #0]
 800e182:	f3bf 8f4f 	dsb	sy
 800e186:	f3bf 8f6f 	isb	sy
 800e18a:	e772      	b.n	800e072 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e18c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e18e:	f000 fa1f 	bl	800e5d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e192:	f000 fd6d 	bl	800ec70 <xTaskResumeAll>
 800e196:	e76c      	b.n	800e072 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e198:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e19a:	f000 fa19 	bl	800e5d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e19e:	f000 fd67 	bl	800ec70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e1a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3738      	adds	r7, #56	@ 0x38
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}
 800e1ac:	e000ed04 	.word	0xe000ed04

0800e1b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b090      	sub	sp, #64	@ 0x40
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
 800e1bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1be:	68fb      	ldr	r3, [r7, #12]
 800e1c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10b      	bne.n	800e1e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e1c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1cc:	f383 8811 	msr	BASEPRI, r3
 800e1d0:	f3bf 8f6f 	isb	sy
 800e1d4:	f3bf 8f4f 	dsb	sy
 800e1d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e1da:	bf00      	nop
 800e1dc:	bf00      	nop
 800e1de:	e7fd      	b.n	800e1dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d103      	bne.n	800e1ee <xQueueGenericSendFromISR+0x3e>
 800e1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d101      	bne.n	800e1f2 <xQueueGenericSendFromISR+0x42>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <xQueueGenericSendFromISR+0x44>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d10b      	bne.n	800e210 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e1f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1fc:	f383 8811 	msr	BASEPRI, r3
 800e200:	f3bf 8f6f 	isb	sy
 800e204:	f3bf 8f4f 	dsb	sy
 800e208:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e20a:	bf00      	nop
 800e20c:	bf00      	nop
 800e20e:	e7fd      	b.n	800e20c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	2b02      	cmp	r3, #2
 800e214:	d103      	bne.n	800e21e <xQueueGenericSendFromISR+0x6e>
 800e216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e218:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	d101      	bne.n	800e222 <xQueueGenericSendFromISR+0x72>
 800e21e:	2301      	movs	r3, #1
 800e220:	e000      	b.n	800e224 <xQueueGenericSendFromISR+0x74>
 800e222:	2300      	movs	r3, #0
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10b      	bne.n	800e240 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e22c:	f383 8811 	msr	BASEPRI, r3
 800e230:	f3bf 8f6f 	isb	sy
 800e234:	f3bf 8f4f 	dsb	sy
 800e238:	623b      	str	r3, [r7, #32]
}
 800e23a:	bf00      	nop
 800e23c:	bf00      	nop
 800e23e:	e7fd      	b.n	800e23c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e240:	f001 ff4a 	bl	80100d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e244:	f3ef 8211 	mrs	r2, BASEPRI
 800e248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e24c:	f383 8811 	msr	BASEPRI, r3
 800e250:	f3bf 8f6f 	isb	sy
 800e254:	f3bf 8f4f 	dsb	sy
 800e258:	61fa      	str	r2, [r7, #28]
 800e25a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e25c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e25e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e268:	429a      	cmp	r2, r3
 800e26a:	d302      	bcc.n	800e272 <xQueueGenericSendFromISR+0xc2>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2b02      	cmp	r3, #2
 800e270:	d12f      	bne.n	800e2d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e274:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e278:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e280:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	68b9      	ldr	r1, [r7, #8]
 800e286:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e288:	f000 f912 	bl	800e4b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e28c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e294:	d112      	bne.n	800e2bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d016      	beq.n	800e2cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e29e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a0:	3324      	adds	r3, #36	@ 0x24
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f000 ff04 	bl	800f0b0 <xTaskRemoveFromEventList>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00e      	beq.n	800e2cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00b      	beq.n	800e2cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	601a      	str	r2, [r3, #0]
 800e2ba:	e007      	b.n	800e2cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e2bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	b25a      	sxtb	r2, r3
 800e2c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e2d0:	e001      	b.n	800e2d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e2e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3740      	adds	r7, #64	@ 0x40
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}

0800e2ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b08c      	sub	sp, #48	@ 0x30
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	60f8      	str	r0, [r7, #12]
 800e2f4:	60b9      	str	r1, [r7, #8]
 800e2f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e302:	2b00      	cmp	r3, #0
 800e304:	d10b      	bne.n	800e31e <xQueueReceive+0x32>
	__asm volatile
 800e306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e30a:	f383 8811 	msr	BASEPRI, r3
 800e30e:	f3bf 8f6f 	isb	sy
 800e312:	f3bf 8f4f 	dsb	sy
 800e316:	623b      	str	r3, [r7, #32]
}
 800e318:	bf00      	nop
 800e31a:	bf00      	nop
 800e31c:	e7fd      	b.n	800e31a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d103      	bne.n	800e32c <xQueueReceive+0x40>
 800e324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d101      	bne.n	800e330 <xQueueReceive+0x44>
 800e32c:	2301      	movs	r3, #1
 800e32e:	e000      	b.n	800e332 <xQueueReceive+0x46>
 800e330:	2300      	movs	r3, #0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10b      	bne.n	800e34e <xQueueReceive+0x62>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33a:	f383 8811 	msr	BASEPRI, r3
 800e33e:	f3bf 8f6f 	isb	sy
 800e342:	f3bf 8f4f 	dsb	sy
 800e346:	61fb      	str	r3, [r7, #28]
}
 800e348:	bf00      	nop
 800e34a:	bf00      	nop
 800e34c:	e7fd      	b.n	800e34a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e34e:	f001 f875 	bl	800f43c <xTaskGetSchedulerState>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <xQueueReceive+0x72>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <xQueueReceive+0x76>
 800e35e:	2301      	movs	r3, #1
 800e360:	e000      	b.n	800e364 <xQueueReceive+0x78>
 800e362:	2300      	movs	r3, #0
 800e364:	2b00      	cmp	r3, #0
 800e366:	d10b      	bne.n	800e380 <xQueueReceive+0x94>
	__asm volatile
 800e368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e36c:	f383 8811 	msr	BASEPRI, r3
 800e370:	f3bf 8f6f 	isb	sy
 800e374:	f3bf 8f4f 	dsb	sy
 800e378:	61bb      	str	r3, [r7, #24]
}
 800e37a:	bf00      	nop
 800e37c:	bf00      	nop
 800e37e:	e7fd      	b.n	800e37c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e380:	f001 fdca 	bl	800ff18 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e388:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e38a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d01f      	beq.n	800e3d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e390:	68b9      	ldr	r1, [r7, #8]
 800e392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e394:	f000 f8f6 	bl	800e584 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e39a:	1e5a      	subs	r2, r3, #1
 800e39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00f      	beq.n	800e3c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3aa:	3310      	adds	r3, #16
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 fe7f 	bl	800f0b0 <xTaskRemoveFromEventList>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d007      	beq.n	800e3c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e3b8:	4b3c      	ldr	r3, [pc, #240]	@ (800e4ac <xQueueReceive+0x1c0>)
 800e3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e3c8:	f001 fdd8 	bl	800ff7c <vPortExitCritical>
				return pdPASS;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e069      	b.n	800e4a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d103      	bne.n	800e3de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3d6:	f001 fdd1 	bl	800ff7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e062      	b.n	800e4a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d106      	bne.n	800e3f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3e4:	f107 0310 	add.w	r3, r7, #16
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f000 fec5 	bl	800f178 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3f2:	f001 fdc3 	bl	800ff7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3f6:	f000 fc2d 	bl	800ec54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3fa:	f001 fd8d 	bl	800ff18 <vPortEnterCritical>
 800e3fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e404:	b25b      	sxtb	r3, r3
 800e406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e40a:	d103      	bne.n	800e414 <xQueueReceive+0x128>
 800e40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40e:	2200      	movs	r2, #0
 800e410:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e416:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e41a:	b25b      	sxtb	r3, r3
 800e41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e420:	d103      	bne.n	800e42a <xQueueReceive+0x13e>
 800e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e424:	2200      	movs	r2, #0
 800e426:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e42a:	f001 fda7 	bl	800ff7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e42e:	1d3a      	adds	r2, r7, #4
 800e430:	f107 0310 	add.w	r3, r7, #16
 800e434:	4611      	mov	r1, r2
 800e436:	4618      	mov	r0, r3
 800e438:	f000 feb4 	bl	800f1a4 <xTaskCheckForTimeOut>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d123      	bne.n	800e48a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e444:	f000 f916 	bl	800e674 <prvIsQueueEmpty>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d017      	beq.n	800e47e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e450:	3324      	adds	r3, #36	@ 0x24
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	4611      	mov	r1, r2
 800e456:	4618      	mov	r0, r3
 800e458:	f000 fdd8 	bl	800f00c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e45c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e45e:	f000 f8b7 	bl	800e5d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e462:	f000 fc05 	bl	800ec70 <xTaskResumeAll>
 800e466:	4603      	mov	r3, r0
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d189      	bne.n	800e380 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800e46c:	4b0f      	ldr	r3, [pc, #60]	@ (800e4ac <xQueueReceive+0x1c0>)
 800e46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e472:	601a      	str	r2, [r3, #0]
 800e474:	f3bf 8f4f 	dsb	sy
 800e478:	f3bf 8f6f 	isb	sy
 800e47c:	e780      	b.n	800e380 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e480:	f000 f8a6 	bl	800e5d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e484:	f000 fbf4 	bl	800ec70 <xTaskResumeAll>
 800e488:	e77a      	b.n	800e380 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e48a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e48c:	f000 f8a0 	bl	800e5d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e490:	f000 fbee 	bl	800ec70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e496:	f000 f8ed 	bl	800e674 <prvIsQueueEmpty>
 800e49a:	4603      	mov	r3, r0
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f43f af6f 	beq.w	800e380 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e4a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	3730      	adds	r7, #48	@ 0x30
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	e000ed04 	.word	0xe000ed04

0800e4b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	60f8      	str	r0, [r7, #12]
 800e4b8:	60b9      	str	r1, [r7, #8]
 800e4ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d10d      	bne.n	800e4ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d14d      	bne.n	800e572 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f000 ffcc 	bl	800f478 <xTaskPriorityDisinherit>
 800e4e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	609a      	str	r2, [r3, #8]
 800e4e8:	e043      	b.n	800e572 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d119      	bne.n	800e524 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6858      	ldr	r0, [r3, #4]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	68b9      	ldr	r1, [r7, #8]
 800e4fc:	f002 fe8b 	bl	8011216 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	685a      	ldr	r2, [r3, #4]
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e508:	441a      	add	r2, r3
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	685a      	ldr	r2, [r3, #4]
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	689b      	ldr	r3, [r3, #8]
 800e516:	429a      	cmp	r2, r3
 800e518:	d32b      	bcc.n	800e572 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	605a      	str	r2, [r3, #4]
 800e522:	e026      	b.n	800e572 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	68d8      	ldr	r0, [r3, #12]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e52c:	461a      	mov	r2, r3
 800e52e:	68b9      	ldr	r1, [r7, #8]
 800e530:	f002 fe71 	bl	8011216 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	68da      	ldr	r2, [r3, #12]
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e53c:	425b      	negs	r3, r3
 800e53e:	441a      	add	r2, r3
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	68da      	ldr	r2, [r3, #12]
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	429a      	cmp	r2, r3
 800e54e:	d207      	bcs.n	800e560 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	689a      	ldr	r2, [r3, #8]
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e558:	425b      	negs	r3, r3
 800e55a:	441a      	add	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2b02      	cmp	r3, #2
 800e564:	d105      	bne.n	800e572 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	3b01      	subs	r3, #1
 800e570:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	1c5a      	adds	r2, r3, #1
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e57a:	697b      	ldr	r3, [r7, #20]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3718      	adds	r7, #24
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b082      	sub	sp, #8
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e592:	2b00      	cmp	r3, #0
 800e594:	d018      	beq.n	800e5c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68da      	ldr	r2, [r3, #12]
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e59e:	441a      	add	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	68da      	ldr	r2, [r3, #12]
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	689b      	ldr	r3, [r3, #8]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d303      	bcc.n	800e5b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68d9      	ldr	r1, [r3, #12]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	6838      	ldr	r0, [r7, #0]
 800e5c4:	f002 fe27 	bl	8011216 <memcpy>
	}
}
 800e5c8:	bf00      	nop
 800e5ca:	3708      	adds	r7, #8
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bd80      	pop	{r7, pc}

0800e5d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b084      	sub	sp, #16
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e5d8:	f001 fc9e 	bl	800ff18 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e5e4:	e011      	b.n	800e60a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d012      	beq.n	800e614 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	3324      	adds	r3, #36	@ 0x24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f000 fd5c 	bl	800f0b0 <xTaskRemoveFromEventList>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e5fe:	f000 fe35 	bl	800f26c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e602:	7bfb      	ldrb	r3, [r7, #15]
 800e604:	3b01      	subs	r3, #1
 800e606:	b2db      	uxtb	r3, r3
 800e608:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e60a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	dce9      	bgt.n	800e5e6 <prvUnlockQueue+0x16>
 800e612:	e000      	b.n	800e616 <prvUnlockQueue+0x46>
					break;
 800e614:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	22ff      	movs	r2, #255	@ 0xff
 800e61a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e61e:	f001 fcad 	bl	800ff7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e622:	f001 fc79 	bl	800ff18 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e62c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e62e:	e011      	b.n	800e654 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d012      	beq.n	800e65e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	3310      	adds	r3, #16
 800e63c:	4618      	mov	r0, r3
 800e63e:	f000 fd37 	bl	800f0b0 <xTaskRemoveFromEventList>
 800e642:	4603      	mov	r3, r0
 800e644:	2b00      	cmp	r3, #0
 800e646:	d001      	beq.n	800e64c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e648:	f000 fe10 	bl	800f26c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e64c:	7bbb      	ldrb	r3, [r7, #14]
 800e64e:	3b01      	subs	r3, #1
 800e650:	b2db      	uxtb	r3, r3
 800e652:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	dce9      	bgt.n	800e630 <prvUnlockQueue+0x60>
 800e65c:	e000      	b.n	800e660 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e65e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	22ff      	movs	r2, #255	@ 0xff
 800e664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e668:	f001 fc88 	bl	800ff7c <vPortExitCritical>
}
 800e66c:	bf00      	nop
 800e66e:	3710      	adds	r7, #16
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}

0800e674 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e674:	b580      	push	{r7, lr}
 800e676:	b084      	sub	sp, #16
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e67c:	f001 fc4c 	bl	800ff18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e684:	2b00      	cmp	r3, #0
 800e686:	d102      	bne.n	800e68e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e688:	2301      	movs	r3, #1
 800e68a:	60fb      	str	r3, [r7, #12]
 800e68c:	e001      	b.n	800e692 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e68e:	2300      	movs	r3, #0
 800e690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e692:	f001 fc73 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800e696:	68fb      	ldr	r3, [r7, #12]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e6a8:	f001 fc36 	bl	800ff18 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d102      	bne.n	800e6be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	60fb      	str	r3, [r7, #12]
 800e6bc:	e001      	b.n	800e6c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e6c2:	f001 fc5b 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800e6c6:	68fb      	ldr	r3, [r7, #12]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60fb      	str	r3, [r7, #12]
 800e6de:	e014      	b.n	800e70a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e6e0:	4a0f      	ldr	r2, [pc, #60]	@ (800e720 <vQueueAddToRegistry+0x50>)
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d10b      	bne.n	800e704 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e6ec:	490c      	ldr	r1, [pc, #48]	@ (800e720 <vQueueAddToRegistry+0x50>)
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e6f6:	4a0a      	ldr	r2, [pc, #40]	@ (800e720 <vQueueAddToRegistry+0x50>)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	4413      	add	r3, r2
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e702:	e006      	b.n	800e712 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	3301      	adds	r3, #1
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	2b07      	cmp	r3, #7
 800e70e:	d9e7      	bls.n	800e6e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e710:	bf00      	nop
 800e712:	bf00      	nop
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
 800e71e:	bf00      	nop
 800e720:	24001328 	.word	0x24001328

0800e724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e734:	f001 fbf0 	bl	800ff18 <vPortEnterCritical>
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e73e:	b25b      	sxtb	r3, r3
 800e740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e744:	d103      	bne.n	800e74e <vQueueWaitForMessageRestricted+0x2a>
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	2200      	movs	r2, #0
 800e74a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e74e:	697b      	ldr	r3, [r7, #20]
 800e750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e754:	b25b      	sxtb	r3, r3
 800e756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e75a:	d103      	bne.n	800e764 <vQueueWaitForMessageRestricted+0x40>
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2200      	movs	r2, #0
 800e760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e764:	f001 fc0a 	bl	800ff7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d106      	bne.n	800e77e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	3324      	adds	r3, #36	@ 0x24
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	68b9      	ldr	r1, [r7, #8]
 800e778:	4618      	mov	r0, r3
 800e77a:	f000 fc6d 	bl	800f058 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e77e:	6978      	ldr	r0, [r7, #20]
 800e780:	f7ff ff26 	bl	800e5d0 <prvUnlockQueue>
	}
 800e784:	bf00      	nop
 800e786:	3718      	adds	r7, #24
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b08e      	sub	sp, #56	@ 0x38
 800e790:	af04      	add	r7, sp, #16
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	60b9      	str	r1, [r7, #8]
 800e796:	607a      	str	r2, [r7, #4]
 800e798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d10b      	bne.n	800e7b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	623b      	str	r3, [r7, #32]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d10b      	bne.n	800e7d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800e7be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7c2:	f383 8811 	msr	BASEPRI, r3
 800e7c6:	f3bf 8f6f 	isb	sy
 800e7ca:	f3bf 8f4f 	dsb	sy
 800e7ce:	61fb      	str	r3, [r7, #28]
}
 800e7d0:	bf00      	nop
 800e7d2:	bf00      	nop
 800e7d4:	e7fd      	b.n	800e7d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e7d6:	23a8      	movs	r3, #168	@ 0xa8
 800e7d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e7da:	693b      	ldr	r3, [r7, #16]
 800e7dc:	2ba8      	cmp	r3, #168	@ 0xa8
 800e7de:	d00b      	beq.n	800e7f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800e7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e4:	f383 8811 	msr	BASEPRI, r3
 800e7e8:	f3bf 8f6f 	isb	sy
 800e7ec:	f3bf 8f4f 	dsb	sy
 800e7f0:	61bb      	str	r3, [r7, #24]
}
 800e7f2:	bf00      	nop
 800e7f4:	bf00      	nop
 800e7f6:	e7fd      	b.n	800e7f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e7f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d01e      	beq.n	800e83e <xTaskCreateStatic+0xb2>
 800e800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e802:	2b00      	cmp	r3, #0
 800e804:	d01b      	beq.n	800e83e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e808:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e80a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e80c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e80e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e812:	2202      	movs	r2, #2
 800e814:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e818:	2300      	movs	r3, #0
 800e81a:	9303      	str	r3, [sp, #12]
 800e81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e81e:	9302      	str	r3, [sp, #8]
 800e820:	f107 0314 	add.w	r3, r7, #20
 800e824:	9301      	str	r3, [sp, #4]
 800e826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e828:	9300      	str	r3, [sp, #0]
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	68b9      	ldr	r1, [r7, #8]
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f000 f851 	bl	800e8d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e838:	f000 f8f6 	bl	800ea28 <prvAddNewTaskToReadyList>
 800e83c:	e001      	b.n	800e842 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e83e:	2300      	movs	r3, #0
 800e840:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e842:	697b      	ldr	r3, [r7, #20]
	}
 800e844:	4618      	mov	r0, r3
 800e846:	3728      	adds	r7, #40	@ 0x28
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08c      	sub	sp, #48	@ 0x30
 800e850:	af04      	add	r7, sp, #16
 800e852:	60f8      	str	r0, [r7, #12]
 800e854:	60b9      	str	r1, [r7, #8]
 800e856:	603b      	str	r3, [r7, #0]
 800e858:	4613      	mov	r3, r2
 800e85a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e85c:	88fb      	ldrh	r3, [r7, #6]
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	4618      	mov	r0, r3
 800e862:	f001 fc7b 	bl	801015c <pvPortMalloc>
 800e866:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e868:	697b      	ldr	r3, [r7, #20]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d00e      	beq.n	800e88c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e86e:	20a8      	movs	r0, #168	@ 0xa8
 800e870:	f001 fc74 	bl	801015c <pvPortMalloc>
 800e874:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d003      	beq.n	800e884 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e87c:	69fb      	ldr	r3, [r7, #28]
 800e87e:	697a      	ldr	r2, [r7, #20]
 800e880:	631a      	str	r2, [r3, #48]	@ 0x30
 800e882:	e005      	b.n	800e890 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e884:	6978      	ldr	r0, [r7, #20]
 800e886:	f001 fd37 	bl	80102f8 <vPortFree>
 800e88a:	e001      	b.n	800e890 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e890:	69fb      	ldr	r3, [r7, #28]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d017      	beq.n	800e8c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	2200      	movs	r2, #0
 800e89a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e89e:	88fa      	ldrh	r2, [r7, #6]
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	9303      	str	r3, [sp, #12]
 800e8a4:	69fb      	ldr	r3, [r7, #28]
 800e8a6:	9302      	str	r3, [sp, #8]
 800e8a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e8aa:	9301      	str	r3, [sp, #4]
 800e8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	68b9      	ldr	r1, [r7, #8]
 800e8b4:	68f8      	ldr	r0, [r7, #12]
 800e8b6:	f000 f80f 	bl	800e8d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e8ba:	69f8      	ldr	r0, [r7, #28]
 800e8bc:	f000 f8b4 	bl	800ea28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	61bb      	str	r3, [r7, #24]
 800e8c4:	e002      	b.n	800e8cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e8cc:	69bb      	ldr	r3, [r7, #24]
	}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b088      	sub	sp, #32
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8e8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	21a5      	movs	r1, #165	@ 0xa5
 800e8f2:	f002 fbba 	bl	801106a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8fa:	6879      	ldr	r1, [r7, #4]
 800e8fc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e900:	440b      	add	r3, r1
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e908:	69bb      	ldr	r3, [r7, #24]
 800e90a:	f023 0307 	bic.w	r3, r3, #7
 800e90e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e910:	69bb      	ldr	r3, [r7, #24]
 800e912:	f003 0307 	and.w	r3, r3, #7
 800e916:	2b00      	cmp	r3, #0
 800e918:	d00b      	beq.n	800e932 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	617b      	str	r3, [r7, #20]
}
 800e92c:	bf00      	nop
 800e92e:	bf00      	nop
 800e930:	e7fd      	b.n	800e92e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d01f      	beq.n	800e978 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e938:	2300      	movs	r3, #0
 800e93a:	61fb      	str	r3, [r7, #28]
 800e93c:	e012      	b.n	800e964 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	4413      	add	r3, r2
 800e944:	7819      	ldrb	r1, [r3, #0]
 800e946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	4413      	add	r3, r2
 800e94c:	3334      	adds	r3, #52	@ 0x34
 800e94e:	460a      	mov	r2, r1
 800e950:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e952:	68ba      	ldr	r2, [r7, #8]
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	4413      	add	r3, r2
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d006      	beq.n	800e96c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e95e:	69fb      	ldr	r3, [r7, #28]
 800e960:	3301      	adds	r3, #1
 800e962:	61fb      	str	r3, [r7, #28]
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	2b0f      	cmp	r3, #15
 800e968:	d9e9      	bls.n	800e93e <prvInitialiseNewTask+0x66>
 800e96a:	e000      	b.n	800e96e <prvInitialiseNewTask+0x96>
			{
				break;
 800e96c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e976:	e003      	b.n	800e980 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e982:	2b37      	cmp	r3, #55	@ 0x37
 800e984:	d901      	bls.n	800e98a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e986:	2337      	movs	r3, #55	@ 0x37
 800e988:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e98a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e98c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e98e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e992:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e994:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e998:	2200      	movs	r2, #0
 800e99a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e99e:	3304      	adds	r3, #4
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	f7ff f965 	bl	800dc70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9a8:	3318      	adds	r3, #24
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	f7ff f960 	bl	800dc70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9b4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e9bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9be:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e9c4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e9c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9d8:	3354      	adds	r3, #84	@ 0x54
 800e9da:	224c      	movs	r2, #76	@ 0x4c
 800e9dc:	2100      	movs	r1, #0
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f002 fb43 	bl	801106a <memset>
 800e9e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9e6:	4a0d      	ldr	r2, [pc, #52]	@ (800ea1c <prvInitialiseNewTask+0x144>)
 800e9e8:	659a      	str	r2, [r3, #88]	@ 0x58
 800e9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9ec:	4a0c      	ldr	r2, [pc, #48]	@ (800ea20 <prvInitialiseNewTask+0x148>)
 800e9ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800ea24 <prvInitialiseNewTask+0x14c>)
 800e9f4:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e9f6:	683a      	ldr	r2, [r7, #0]
 800e9f8:	68f9      	ldr	r1, [r7, #12]
 800e9fa:	69b8      	ldr	r0, [r7, #24]
 800e9fc:	f001 f95a 	bl	800fcb4 <pxPortInitialiseStack>
 800ea00:	4602      	mov	r2, r0
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ea06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ea0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea12:	bf00      	nop
 800ea14:	3720      	adds	r7, #32
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}
 800ea1a:	bf00      	nop
 800ea1c:	240055bc 	.word	0x240055bc
 800ea20:	24005624 	.word	0x24005624
 800ea24:	2400568c 	.word	0x2400568c

0800ea28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ea30:	f001 fa72 	bl	800ff18 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ea34:	4b2d      	ldr	r3, [pc, #180]	@ (800eaec <prvAddNewTaskToReadyList+0xc4>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3301      	adds	r3, #1
 800ea3a:	4a2c      	ldr	r2, [pc, #176]	@ (800eaec <prvAddNewTaskToReadyList+0xc4>)
 800ea3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ea3e:	4b2c      	ldr	r3, [pc, #176]	@ (800eaf0 <prvAddNewTaskToReadyList+0xc8>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d109      	bne.n	800ea5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ea46:	4a2a      	ldr	r2, [pc, #168]	@ (800eaf0 <prvAddNewTaskToReadyList+0xc8>)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ea4c:	4b27      	ldr	r3, [pc, #156]	@ (800eaec <prvAddNewTaskToReadyList+0xc4>)
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d110      	bne.n	800ea76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ea54:	f000 fc2e 	bl	800f2b4 <prvInitialiseTaskLists>
 800ea58:	e00d      	b.n	800ea76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ea5a:	4b26      	ldr	r3, [pc, #152]	@ (800eaf4 <prvAddNewTaskToReadyList+0xcc>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d109      	bne.n	800ea76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ea62:	4b23      	ldr	r3, [pc, #140]	@ (800eaf0 <prvAddNewTaskToReadyList+0xc8>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d802      	bhi.n	800ea76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ea70:	4a1f      	ldr	r2, [pc, #124]	@ (800eaf0 <prvAddNewTaskToReadyList+0xc8>)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ea76:	4b20      	ldr	r3, [pc, #128]	@ (800eaf8 <prvAddNewTaskToReadyList+0xd0>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	3301      	adds	r3, #1
 800ea7c:	4a1e      	ldr	r2, [pc, #120]	@ (800eaf8 <prvAddNewTaskToReadyList+0xd0>)
 800ea7e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ea80:	4b1d      	ldr	r3, [pc, #116]	@ (800eaf8 <prvAddNewTaskToReadyList+0xd0>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8c:	4b1b      	ldr	r3, [pc, #108]	@ (800eafc <prvAddNewTaskToReadyList+0xd4>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d903      	bls.n	800ea9c <prvAddNewTaskToReadyList+0x74>
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea98:	4a18      	ldr	r2, [pc, #96]	@ (800eafc <prvAddNewTaskToReadyList+0xd4>)
 800ea9a:	6013      	str	r3, [r2, #0]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaa0:	4613      	mov	r3, r2
 800eaa2:	009b      	lsls	r3, r3, #2
 800eaa4:	4413      	add	r3, r2
 800eaa6:	009b      	lsls	r3, r3, #2
 800eaa8:	4a15      	ldr	r2, [pc, #84]	@ (800eb00 <prvAddNewTaskToReadyList+0xd8>)
 800eaaa:	441a      	add	r2, r3
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3304      	adds	r3, #4
 800eab0:	4619      	mov	r1, r3
 800eab2:	4610      	mov	r0, r2
 800eab4:	f7ff f8e9 	bl	800dc8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eab8:	f001 fa60 	bl	800ff7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eabc:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf4 <prvAddNewTaskToReadyList+0xcc>)
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d00e      	beq.n	800eae2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eac4:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf0 <prvAddNewTaskToReadyList+0xc8>)
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eace:	429a      	cmp	r2, r3
 800ead0:	d207      	bcs.n	800eae2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ead2:	4b0c      	ldr	r3, [pc, #48]	@ (800eb04 <prvAddNewTaskToReadyList+0xdc>)
 800ead4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ead8:	601a      	str	r2, [r3, #0]
 800eada:	f3bf 8f4f 	dsb	sy
 800eade:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eae2:	bf00      	nop
 800eae4:	3708      	adds	r7, #8
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}
 800eaea:	bf00      	nop
 800eaec:	2400183c 	.word	0x2400183c
 800eaf0:	24001368 	.word	0x24001368
 800eaf4:	24001848 	.word	0x24001848
 800eaf8:	24001858 	.word	0x24001858
 800eafc:	24001844 	.word	0x24001844
 800eb00:	2400136c 	.word	0x2400136c
 800eb04:	e000ed04 	.word	0xe000ed04

0800eb08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800eb10:	2300      	movs	r3, #0
 800eb12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d018      	beq.n	800eb4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800eb1a:	4b14      	ldr	r3, [pc, #80]	@ (800eb6c <vTaskDelay+0x64>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00b      	beq.n	800eb3a <vTaskDelay+0x32>
	__asm volatile
 800eb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb26:	f383 8811 	msr	BASEPRI, r3
 800eb2a:	f3bf 8f6f 	isb	sy
 800eb2e:	f3bf 8f4f 	dsb	sy
 800eb32:	60bb      	str	r3, [r7, #8]
}
 800eb34:	bf00      	nop
 800eb36:	bf00      	nop
 800eb38:	e7fd      	b.n	800eb36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800eb3a:	f000 f88b 	bl	800ec54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800eb3e:	2100      	movs	r1, #0
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f000 fd09 	bl	800f558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800eb46:	f000 f893 	bl	800ec70 <xTaskResumeAll>
 800eb4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d107      	bne.n	800eb62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800eb52:	4b07      	ldr	r3, [pc, #28]	@ (800eb70 <vTaskDelay+0x68>)
 800eb54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	f3bf 8f4f 	dsb	sy
 800eb5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eb62:	bf00      	nop
 800eb64:	3710      	adds	r7, #16
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	24001864 	.word	0x24001864
 800eb70:	e000ed04 	.word	0xe000ed04

0800eb74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b08a      	sub	sp, #40	@ 0x28
 800eb78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800eb82:	463a      	mov	r2, r7
 800eb84:	1d39      	adds	r1, r7, #4
 800eb86:	f107 0308 	add.w	r3, r7, #8
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	f7ff f81c 	bl	800dbc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68ba      	ldr	r2, [r7, #8]
 800eb96:	9202      	str	r2, [sp, #8]
 800eb98:	9301      	str	r3, [sp, #4]
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	9300      	str	r3, [sp, #0]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	460a      	mov	r2, r1
 800eba2:	4924      	ldr	r1, [pc, #144]	@ (800ec34 <vTaskStartScheduler+0xc0>)
 800eba4:	4824      	ldr	r0, [pc, #144]	@ (800ec38 <vTaskStartScheduler+0xc4>)
 800eba6:	f7ff fdf1 	bl	800e78c <xTaskCreateStatic>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	4a23      	ldr	r2, [pc, #140]	@ (800ec3c <vTaskStartScheduler+0xc8>)
 800ebae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ebb0:	4b22      	ldr	r3, [pc, #136]	@ (800ec3c <vTaskStartScheduler+0xc8>)
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d002      	beq.n	800ebbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	617b      	str	r3, [r7, #20]
 800ebbc:	e001      	b.n	800ebc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d102      	bne.n	800ebce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ebc8:	f000 fd1a 	bl	800f600 <xTimerCreateTimerTask>
 800ebcc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	2b01      	cmp	r3, #1
 800ebd2:	d11b      	bne.n	800ec0c <vTaskStartScheduler+0x98>
	__asm volatile
 800ebd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd8:	f383 8811 	msr	BASEPRI, r3
 800ebdc:	f3bf 8f6f 	isb	sy
 800ebe0:	f3bf 8f4f 	dsb	sy
 800ebe4:	613b      	str	r3, [r7, #16]
}
 800ebe6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebe8:	4b15      	ldr	r3, [pc, #84]	@ (800ec40 <vTaskStartScheduler+0xcc>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	3354      	adds	r3, #84	@ 0x54
 800ebee:	4a15      	ldr	r2, [pc, #84]	@ (800ec44 <vTaskStartScheduler+0xd0>)
 800ebf0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ebf2:	4b15      	ldr	r3, [pc, #84]	@ (800ec48 <vTaskStartScheduler+0xd4>)
 800ebf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ebfa:	4b14      	ldr	r3, [pc, #80]	@ (800ec4c <vTaskStartScheduler+0xd8>)
 800ebfc:	2201      	movs	r2, #1
 800ebfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ec00:	4b13      	ldr	r3, [pc, #76]	@ (800ec50 <vTaskStartScheduler+0xdc>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ec06:	f001 f8e3 	bl	800fdd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ec0a:	e00f      	b.n	800ec2c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d10b      	bne.n	800ec2c <vTaskStartScheduler+0xb8>
	__asm volatile
 800ec14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec18:	f383 8811 	msr	BASEPRI, r3
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	f3bf 8f4f 	dsb	sy
 800ec24:	60fb      	str	r3, [r7, #12]
}
 800ec26:	bf00      	nop
 800ec28:	bf00      	nop
 800ec2a:	e7fd      	b.n	800ec28 <vTaskStartScheduler+0xb4>
}
 800ec2c:	bf00      	nop
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	08013254 	.word	0x08013254
 800ec38:	0800f285 	.word	0x0800f285
 800ec3c:	24001860 	.word	0x24001860
 800ec40:	24001368 	.word	0x24001368
 800ec44:	24000020 	.word	0x24000020
 800ec48:	2400185c 	.word	0x2400185c
 800ec4c:	24001848 	.word	0x24001848
 800ec50:	24001840 	.word	0x24001840

0800ec54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ec54:	b480      	push	{r7}
 800ec56:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ec58:	4b04      	ldr	r3, [pc, #16]	@ (800ec6c <vTaskSuspendAll+0x18>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	4a03      	ldr	r2, [pc, #12]	@ (800ec6c <vTaskSuspendAll+0x18>)
 800ec60:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ec62:	bf00      	nop
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr
 800ec6c:	24001864 	.word	0x24001864

0800ec70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ec7e:	4b42      	ldr	r3, [pc, #264]	@ (800ed88 <xTaskResumeAll+0x118>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d10b      	bne.n	800ec9e <xTaskResumeAll+0x2e>
	__asm volatile
 800ec86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec8a:	f383 8811 	msr	BASEPRI, r3
 800ec8e:	f3bf 8f6f 	isb	sy
 800ec92:	f3bf 8f4f 	dsb	sy
 800ec96:	603b      	str	r3, [r7, #0]
}
 800ec98:	bf00      	nop
 800ec9a:	bf00      	nop
 800ec9c:	e7fd      	b.n	800ec9a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ec9e:	f001 f93b 	bl	800ff18 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800eca2:	4b39      	ldr	r3, [pc, #228]	@ (800ed88 <xTaskResumeAll+0x118>)
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3b01      	subs	r3, #1
 800eca8:	4a37      	ldr	r2, [pc, #220]	@ (800ed88 <xTaskResumeAll+0x118>)
 800ecaa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ecac:	4b36      	ldr	r3, [pc, #216]	@ (800ed88 <xTaskResumeAll+0x118>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d162      	bne.n	800ed7a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ecb4:	4b35      	ldr	r3, [pc, #212]	@ (800ed8c <xTaskResumeAll+0x11c>)
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d05e      	beq.n	800ed7a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ecbc:	e02f      	b.n	800ed1e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ecbe:	4b34      	ldr	r3, [pc, #208]	@ (800ed90 <xTaskResumeAll+0x120>)
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	3318      	adds	r3, #24
 800ecca:	4618      	mov	r0, r3
 800eccc:	f7ff f83a 	bl	800dd44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	3304      	adds	r3, #4
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7ff f835 	bl	800dd44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecde:	4b2d      	ldr	r3, [pc, #180]	@ (800ed94 <xTaskResumeAll+0x124>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d903      	bls.n	800ecee <xTaskResumeAll+0x7e>
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecea:	4a2a      	ldr	r2, [pc, #168]	@ (800ed94 <xTaskResumeAll+0x124>)
 800ecec:	6013      	str	r3, [r2, #0]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf2:	4613      	mov	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	4413      	add	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4a27      	ldr	r2, [pc, #156]	@ (800ed98 <xTaskResumeAll+0x128>)
 800ecfc:	441a      	add	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3304      	adds	r3, #4
 800ed02:	4619      	mov	r1, r3
 800ed04:	4610      	mov	r0, r2
 800ed06:	f7fe ffc0 	bl	800dc8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed0e:	4b23      	ldr	r3, [pc, #140]	@ (800ed9c <xTaskResumeAll+0x12c>)
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d302      	bcc.n	800ed1e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ed18:	4b21      	ldr	r3, [pc, #132]	@ (800eda0 <xTaskResumeAll+0x130>)
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ed1e:	4b1c      	ldr	r3, [pc, #112]	@ (800ed90 <xTaskResumeAll+0x120>)
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d1cb      	bne.n	800ecbe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d001      	beq.n	800ed30 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ed2c:	f000 fb66 	bl	800f3fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ed30:	4b1c      	ldr	r3, [pc, #112]	@ (800eda4 <xTaskResumeAll+0x134>)
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d010      	beq.n	800ed5e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ed3c:	f000 f846 	bl	800edcc <xTaskIncrementTick>
 800ed40:	4603      	mov	r3, r0
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d002      	beq.n	800ed4c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ed46:	4b16      	ldr	r3, [pc, #88]	@ (800eda0 <xTaskResumeAll+0x130>)
 800ed48:	2201      	movs	r2, #1
 800ed4a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	3b01      	subs	r3, #1
 800ed50:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1f1      	bne.n	800ed3c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ed58:	4b12      	ldr	r3, [pc, #72]	@ (800eda4 <xTaskResumeAll+0x134>)
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ed5e:	4b10      	ldr	r3, [pc, #64]	@ (800eda0 <xTaskResumeAll+0x130>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d009      	beq.n	800ed7a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ed66:	2301      	movs	r3, #1
 800ed68:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ed6a:	4b0f      	ldr	r3, [pc, #60]	@ (800eda8 <xTaskResumeAll+0x138>)
 800ed6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	f3bf 8f4f 	dsb	sy
 800ed76:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ed7a:	f001 f8ff 	bl	800ff7c <vPortExitCritical>

	return xAlreadyYielded;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	24001864 	.word	0x24001864
 800ed8c:	2400183c 	.word	0x2400183c
 800ed90:	240017fc 	.word	0x240017fc
 800ed94:	24001844 	.word	0x24001844
 800ed98:	2400136c 	.word	0x2400136c
 800ed9c:	24001368 	.word	0x24001368
 800eda0:	24001850 	.word	0x24001850
 800eda4:	2400184c 	.word	0x2400184c
 800eda8:	e000ed04 	.word	0xe000ed04

0800edac <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800edb2:	4b05      	ldr	r3, [pc, #20]	@ (800edc8 <xTaskGetTickCount+0x1c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800edb8:	687b      	ldr	r3, [r7, #4]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	370c      	adds	r7, #12
 800edbe:	46bd      	mov	sp, r7
 800edc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc4:	4770      	bx	lr
 800edc6:	bf00      	nop
 800edc8:	24001840 	.word	0x24001840

0800edcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800edd2:	2300      	movs	r3, #0
 800edd4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800edd6:	4b4f      	ldr	r3, [pc, #316]	@ (800ef14 <xTaskIncrementTick+0x148>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	f040 8090 	bne.w	800ef00 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ede0:	4b4d      	ldr	r3, [pc, #308]	@ (800ef18 <xTaskIncrementTick+0x14c>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	3301      	adds	r3, #1
 800ede6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ede8:	4a4b      	ldr	r2, [pc, #300]	@ (800ef18 <xTaskIncrementTick+0x14c>)
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d121      	bne.n	800ee38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800edf4:	4b49      	ldr	r3, [pc, #292]	@ (800ef1c <xTaskIncrementTick+0x150>)
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d00b      	beq.n	800ee16 <xTaskIncrementTick+0x4a>
	__asm volatile
 800edfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee02:	f383 8811 	msr	BASEPRI, r3
 800ee06:	f3bf 8f6f 	isb	sy
 800ee0a:	f3bf 8f4f 	dsb	sy
 800ee0e:	603b      	str	r3, [r7, #0]
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	e7fd      	b.n	800ee12 <xTaskIncrementTick+0x46>
 800ee16:	4b41      	ldr	r3, [pc, #260]	@ (800ef1c <xTaskIncrementTick+0x150>)
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	4b40      	ldr	r3, [pc, #256]	@ (800ef20 <xTaskIncrementTick+0x154>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a3e      	ldr	r2, [pc, #248]	@ (800ef1c <xTaskIncrementTick+0x150>)
 800ee22:	6013      	str	r3, [r2, #0]
 800ee24:	4a3e      	ldr	r2, [pc, #248]	@ (800ef20 <xTaskIncrementTick+0x154>)
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6013      	str	r3, [r2, #0]
 800ee2a:	4b3e      	ldr	r3, [pc, #248]	@ (800ef24 <xTaskIncrementTick+0x158>)
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	4a3c      	ldr	r2, [pc, #240]	@ (800ef24 <xTaskIncrementTick+0x158>)
 800ee32:	6013      	str	r3, [r2, #0]
 800ee34:	f000 fae2 	bl	800f3fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ee38:	4b3b      	ldr	r3, [pc, #236]	@ (800ef28 <xTaskIncrementTick+0x15c>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	693a      	ldr	r2, [r7, #16]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d349      	bcc.n	800eed6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee42:	4b36      	ldr	r3, [pc, #216]	@ (800ef1c <xTaskIncrementTick+0x150>)
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d104      	bne.n	800ee56 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee4c:	4b36      	ldr	r3, [pc, #216]	@ (800ef28 <xTaskIncrementTick+0x15c>)
 800ee4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee52:	601a      	str	r2, [r3, #0]
					break;
 800ee54:	e03f      	b.n	800eed6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee56:	4b31      	ldr	r3, [pc, #196]	@ (800ef1c <xTaskIncrementTick+0x150>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	68db      	ldr	r3, [r3, #12]
 800ee5c:	68db      	ldr	r3, [r3, #12]
 800ee5e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ee66:	693a      	ldr	r2, [r7, #16]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d203      	bcs.n	800ee76 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ee6e:	4a2e      	ldr	r2, [pc, #184]	@ (800ef28 <xTaskIncrementTick+0x15c>)
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ee74:	e02f      	b.n	800eed6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7fe ff62 	bl	800dd44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d004      	beq.n	800ee92 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ee88:	68bb      	ldr	r3, [r7, #8]
 800ee8a:	3318      	adds	r3, #24
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe ff59 	bl	800dd44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee96:	4b25      	ldr	r3, [pc, #148]	@ (800ef2c <xTaskIncrementTick+0x160>)
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	429a      	cmp	r2, r3
 800ee9c:	d903      	bls.n	800eea6 <xTaskIncrementTick+0xda>
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea2:	4a22      	ldr	r2, [pc, #136]	@ (800ef2c <xTaskIncrementTick+0x160>)
 800eea4:	6013      	str	r3, [r2, #0]
 800eea6:	68bb      	ldr	r3, [r7, #8]
 800eea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4a1f      	ldr	r2, [pc, #124]	@ (800ef30 <xTaskIncrementTick+0x164>)
 800eeb4:	441a      	add	r2, r3
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	3304      	adds	r3, #4
 800eeba:	4619      	mov	r1, r3
 800eebc:	4610      	mov	r0, r2
 800eebe:	f7fe fee4 	bl	800dc8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eec6:	4b1b      	ldr	r3, [pc, #108]	@ (800ef34 <xTaskIncrementTick+0x168>)
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eecc:	429a      	cmp	r2, r3
 800eece:	d3b8      	bcc.n	800ee42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800eed0:	2301      	movs	r3, #1
 800eed2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eed4:	e7b5      	b.n	800ee42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800eed6:	4b17      	ldr	r3, [pc, #92]	@ (800ef34 <xTaskIncrementTick+0x168>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eedc:	4914      	ldr	r1, [pc, #80]	@ (800ef30 <xTaskIncrementTick+0x164>)
 800eede:	4613      	mov	r3, r2
 800eee0:	009b      	lsls	r3, r3, #2
 800eee2:	4413      	add	r3, r2
 800eee4:	009b      	lsls	r3, r3, #2
 800eee6:	440b      	add	r3, r1
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d901      	bls.n	800eef2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800eeee:	2301      	movs	r3, #1
 800eef0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eef2:	4b11      	ldr	r3, [pc, #68]	@ (800ef38 <xTaskIncrementTick+0x16c>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d007      	beq.n	800ef0a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800eefa:	2301      	movs	r3, #1
 800eefc:	617b      	str	r3, [r7, #20]
 800eefe:	e004      	b.n	800ef0a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ef00:	4b0e      	ldr	r3, [pc, #56]	@ (800ef3c <xTaskIncrementTick+0x170>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	3301      	adds	r3, #1
 800ef06:	4a0d      	ldr	r2, [pc, #52]	@ (800ef3c <xTaskIncrementTick+0x170>)
 800ef08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ef0a:	697b      	ldr	r3, [r7, #20]
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3718      	adds	r7, #24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	24001864 	.word	0x24001864
 800ef18:	24001840 	.word	0x24001840
 800ef1c:	240017f4 	.word	0x240017f4
 800ef20:	240017f8 	.word	0x240017f8
 800ef24:	24001854 	.word	0x24001854
 800ef28:	2400185c 	.word	0x2400185c
 800ef2c:	24001844 	.word	0x24001844
 800ef30:	2400136c 	.word	0x2400136c
 800ef34:	24001368 	.word	0x24001368
 800ef38:	24001850 	.word	0x24001850
 800ef3c:	2400184c 	.word	0x2400184c

0800ef40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ef40:	b480      	push	{r7}
 800ef42:	b085      	sub	sp, #20
 800ef44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ef46:	4b2b      	ldr	r3, [pc, #172]	@ (800eff4 <vTaskSwitchContext+0xb4>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d003      	beq.n	800ef56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ef4e:	4b2a      	ldr	r3, [pc, #168]	@ (800eff8 <vTaskSwitchContext+0xb8>)
 800ef50:	2201      	movs	r2, #1
 800ef52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ef54:	e047      	b.n	800efe6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ef56:	4b28      	ldr	r3, [pc, #160]	@ (800eff8 <vTaskSwitchContext+0xb8>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef5c:	4b27      	ldr	r3, [pc, #156]	@ (800effc <vTaskSwitchContext+0xbc>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	e011      	b.n	800ef88 <vTaskSwitchContext+0x48>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d10b      	bne.n	800ef82 <vTaskSwitchContext+0x42>
	__asm volatile
 800ef6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6e:	f383 8811 	msr	BASEPRI, r3
 800ef72:	f3bf 8f6f 	isb	sy
 800ef76:	f3bf 8f4f 	dsb	sy
 800ef7a:	607b      	str	r3, [r7, #4]
}
 800ef7c:	bf00      	nop
 800ef7e:	bf00      	nop
 800ef80:	e7fd      	b.n	800ef7e <vTaskSwitchContext+0x3e>
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	3b01      	subs	r3, #1
 800ef86:	60fb      	str	r3, [r7, #12]
 800ef88:	491d      	ldr	r1, [pc, #116]	@ (800f000 <vTaskSwitchContext+0xc0>)
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	009b      	lsls	r3, r3, #2
 800ef90:	4413      	add	r3, r2
 800ef92:	009b      	lsls	r3, r3, #2
 800ef94:	440b      	add	r3, r1
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d0e3      	beq.n	800ef64 <vTaskSwitchContext+0x24>
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	4413      	add	r3, r2
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	4a16      	ldr	r2, [pc, #88]	@ (800f000 <vTaskSwitchContext+0xc0>)
 800efa8:	4413      	add	r3, r2
 800efaa:	60bb      	str	r3, [r7, #8]
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	605a      	str	r2, [r3, #4]
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	685a      	ldr	r2, [r3, #4]
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	3308      	adds	r3, #8
 800efbe:	429a      	cmp	r2, r3
 800efc0:	d104      	bne.n	800efcc <vTaskSwitchContext+0x8c>
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	685a      	ldr	r2, [r3, #4]
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	605a      	str	r2, [r3, #4]
 800efcc:	68bb      	ldr	r3, [r7, #8]
 800efce:	685b      	ldr	r3, [r3, #4]
 800efd0:	68db      	ldr	r3, [r3, #12]
 800efd2:	4a0c      	ldr	r2, [pc, #48]	@ (800f004 <vTaskSwitchContext+0xc4>)
 800efd4:	6013      	str	r3, [r2, #0]
 800efd6:	4a09      	ldr	r2, [pc, #36]	@ (800effc <vTaskSwitchContext+0xbc>)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800efdc:	4b09      	ldr	r3, [pc, #36]	@ (800f004 <vTaskSwitchContext+0xc4>)
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	3354      	adds	r3, #84	@ 0x54
 800efe2:	4a09      	ldr	r2, [pc, #36]	@ (800f008 <vTaskSwitchContext+0xc8>)
 800efe4:	6013      	str	r3, [r2, #0]
}
 800efe6:	bf00      	nop
 800efe8:	3714      	adds	r7, #20
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	24001864 	.word	0x24001864
 800eff8:	24001850 	.word	0x24001850
 800effc:	24001844 	.word	0x24001844
 800f000:	2400136c 	.word	0x2400136c
 800f004:	24001368 	.word	0x24001368
 800f008:	24000020 	.word	0x24000020

0800f00c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
 800f014:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d10b      	bne.n	800f034 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f01c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f020:	f383 8811 	msr	BASEPRI, r3
 800f024:	f3bf 8f6f 	isb	sy
 800f028:	f3bf 8f4f 	dsb	sy
 800f02c:	60fb      	str	r3, [r7, #12]
}
 800f02e:	bf00      	nop
 800f030:	bf00      	nop
 800f032:	e7fd      	b.n	800f030 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f034:	4b07      	ldr	r3, [pc, #28]	@ (800f054 <vTaskPlaceOnEventList+0x48>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	3318      	adds	r3, #24
 800f03a:	4619      	mov	r1, r3
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f7fe fe48 	bl	800dcd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f042:	2101      	movs	r1, #1
 800f044:	6838      	ldr	r0, [r7, #0]
 800f046:	f000 fa87 	bl	800f558 <prvAddCurrentTaskToDelayedList>
}
 800f04a:	bf00      	nop
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	24001368 	.word	0x24001368

0800f058 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b086      	sub	sp, #24
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	60f8      	str	r0, [r7, #12]
 800f060:	60b9      	str	r1, [r7, #8]
 800f062:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d10b      	bne.n	800f082 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f06e:	f383 8811 	msr	BASEPRI, r3
 800f072:	f3bf 8f6f 	isb	sy
 800f076:	f3bf 8f4f 	dsb	sy
 800f07a:	617b      	str	r3, [r7, #20]
}
 800f07c:	bf00      	nop
 800f07e:	bf00      	nop
 800f080:	e7fd      	b.n	800f07e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f082:	4b0a      	ldr	r3, [pc, #40]	@ (800f0ac <vTaskPlaceOnEventListRestricted+0x54>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	3318      	adds	r3, #24
 800f088:	4619      	mov	r1, r3
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	f7fe fdfd 	bl	800dc8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d002      	beq.n	800f09c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f096:	f04f 33ff 	mov.w	r3, #4294967295
 800f09a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	68b8      	ldr	r0, [r7, #8]
 800f0a0:	f000 fa5a 	bl	800f558 <prvAddCurrentTaskToDelayedList>
	}
 800f0a4:	bf00      	nop
 800f0a6:	3718      	adds	r7, #24
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	24001368 	.word	0x24001368

0800f0b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d10b      	bne.n	800f0de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800f0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0ca:	f383 8811 	msr	BASEPRI, r3
 800f0ce:	f3bf 8f6f 	isb	sy
 800f0d2:	f3bf 8f4f 	dsb	sy
 800f0d6:	60fb      	str	r3, [r7, #12]
}
 800f0d8:	bf00      	nop
 800f0da:	bf00      	nop
 800f0dc:	e7fd      	b.n	800f0da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	3318      	adds	r3, #24
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7fe fe2e 	bl	800dd44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f160 <xTaskRemoveFromEventList+0xb0>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d11d      	bne.n	800f12c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fe fe25 	bl	800dd44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0fe:	4b19      	ldr	r3, [pc, #100]	@ (800f164 <xTaskRemoveFromEventList+0xb4>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	429a      	cmp	r2, r3
 800f104:	d903      	bls.n	800f10e <xTaskRemoveFromEventList+0x5e>
 800f106:	693b      	ldr	r3, [r7, #16]
 800f108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f10a:	4a16      	ldr	r2, [pc, #88]	@ (800f164 <xTaskRemoveFromEventList+0xb4>)
 800f10c:	6013      	str	r3, [r2, #0]
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f112:	4613      	mov	r3, r2
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	4413      	add	r3, r2
 800f118:	009b      	lsls	r3, r3, #2
 800f11a:	4a13      	ldr	r2, [pc, #76]	@ (800f168 <xTaskRemoveFromEventList+0xb8>)
 800f11c:	441a      	add	r2, r3
 800f11e:	693b      	ldr	r3, [r7, #16]
 800f120:	3304      	adds	r3, #4
 800f122:	4619      	mov	r1, r3
 800f124:	4610      	mov	r0, r2
 800f126:	f7fe fdb0 	bl	800dc8a <vListInsertEnd>
 800f12a:	e005      	b.n	800f138 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	3318      	adds	r3, #24
 800f130:	4619      	mov	r1, r3
 800f132:	480e      	ldr	r0, [pc, #56]	@ (800f16c <xTaskRemoveFromEventList+0xbc>)
 800f134:	f7fe fda9 	bl	800dc8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f13c:	4b0c      	ldr	r3, [pc, #48]	@ (800f170 <xTaskRemoveFromEventList+0xc0>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f142:	429a      	cmp	r2, r3
 800f144:	d905      	bls.n	800f152 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f146:	2301      	movs	r3, #1
 800f148:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f14a:	4b0a      	ldr	r3, [pc, #40]	@ (800f174 <xTaskRemoveFromEventList+0xc4>)
 800f14c:	2201      	movs	r2, #1
 800f14e:	601a      	str	r2, [r3, #0]
 800f150:	e001      	b.n	800f156 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800f152:	2300      	movs	r3, #0
 800f154:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f156:	697b      	ldr	r3, [r7, #20]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3718      	adds	r7, #24
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	24001864 	.word	0x24001864
 800f164:	24001844 	.word	0x24001844
 800f168:	2400136c 	.word	0x2400136c
 800f16c:	240017fc 	.word	0x240017fc
 800f170:	24001368 	.word	0x24001368
 800f174:	24001850 	.word	0x24001850

0800f178 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f180:	4b06      	ldr	r3, [pc, #24]	@ (800f19c <vTaskInternalSetTimeOutState+0x24>)
 800f182:	681a      	ldr	r2, [r3, #0]
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f188:	4b05      	ldr	r3, [pc, #20]	@ (800f1a0 <vTaskInternalSetTimeOutState+0x28>)
 800f18a:	681a      	ldr	r2, [r3, #0]
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	605a      	str	r2, [r3, #4]
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	24001854 	.word	0x24001854
 800f1a0:	24001840 	.word	0x24001840

0800f1a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b088      	sub	sp, #32
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10b      	bne.n	800f1cc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800f1b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1b8:	f383 8811 	msr	BASEPRI, r3
 800f1bc:	f3bf 8f6f 	isb	sy
 800f1c0:	f3bf 8f4f 	dsb	sy
 800f1c4:	613b      	str	r3, [r7, #16]
}
 800f1c6:	bf00      	nop
 800f1c8:	bf00      	nop
 800f1ca:	e7fd      	b.n	800f1c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10b      	bne.n	800f1ea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800f1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d6:	f383 8811 	msr	BASEPRI, r3
 800f1da:	f3bf 8f6f 	isb	sy
 800f1de:	f3bf 8f4f 	dsb	sy
 800f1e2:	60fb      	str	r3, [r7, #12]
}
 800f1e4:	bf00      	nop
 800f1e6:	bf00      	nop
 800f1e8:	e7fd      	b.n	800f1e6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800f1ea:	f000 fe95 	bl	800ff18 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f1ee:	4b1d      	ldr	r3, [pc, #116]	@ (800f264 <xTaskCheckForTimeOut+0xc0>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	685b      	ldr	r3, [r3, #4]
 800f1f8:	69ba      	ldr	r2, [r7, #24]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f206:	d102      	bne.n	800f20e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f208:	2300      	movs	r3, #0
 800f20a:	61fb      	str	r3, [r7, #28]
 800f20c:	e023      	b.n	800f256 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681a      	ldr	r2, [r3, #0]
 800f212:	4b15      	ldr	r3, [pc, #84]	@ (800f268 <xTaskCheckForTimeOut+0xc4>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	429a      	cmp	r2, r3
 800f218:	d007      	beq.n	800f22a <xTaskCheckForTimeOut+0x86>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	69ba      	ldr	r2, [r7, #24]
 800f220:	429a      	cmp	r2, r3
 800f222:	d302      	bcc.n	800f22a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f224:	2301      	movs	r3, #1
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	e015      	b.n	800f256 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f22a:	683b      	ldr	r3, [r7, #0]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	697a      	ldr	r2, [r7, #20]
 800f230:	429a      	cmp	r2, r3
 800f232:	d20b      	bcs.n	800f24c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	1ad2      	subs	r2, r2, r3
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7ff ff99 	bl	800f178 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f246:	2300      	movs	r3, #0
 800f248:	61fb      	str	r3, [r7, #28]
 800f24a:	e004      	b.n	800f256 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	2200      	movs	r2, #0
 800f250:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f252:	2301      	movs	r3, #1
 800f254:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f256:	f000 fe91 	bl	800ff7c <vPortExitCritical>

	return xReturn;
 800f25a:	69fb      	ldr	r3, [r7, #28]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3720      	adds	r7, #32
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	24001840 	.word	0x24001840
 800f268:	24001854 	.word	0x24001854

0800f26c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f26c:	b480      	push	{r7}
 800f26e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f270:	4b03      	ldr	r3, [pc, #12]	@ (800f280 <vTaskMissedYield+0x14>)
 800f272:	2201      	movs	r2, #1
 800f274:	601a      	str	r2, [r3, #0]
}
 800f276:	bf00      	nop
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr
 800f280:	24001850 	.word	0x24001850

0800f284 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f28c:	f000 f852 	bl	800f334 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f290:	4b06      	ldr	r3, [pc, #24]	@ (800f2ac <prvIdleTask+0x28>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	2b01      	cmp	r3, #1
 800f296:	d9f9      	bls.n	800f28c <prvIdleTask+0x8>
			{
				taskYIELD();
 800f298:	4b05      	ldr	r3, [pc, #20]	@ (800f2b0 <prvIdleTask+0x2c>)
 800f29a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f29e:	601a      	str	r2, [r3, #0]
 800f2a0:	f3bf 8f4f 	dsb	sy
 800f2a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f2a8:	e7f0      	b.n	800f28c <prvIdleTask+0x8>
 800f2aa:	bf00      	nop
 800f2ac:	2400136c 	.word	0x2400136c
 800f2b0:	e000ed04 	.word	0xe000ed04

0800f2b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	b082      	sub	sp, #8
 800f2b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	607b      	str	r3, [r7, #4]
 800f2be:	e00c      	b.n	800f2da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	4a12      	ldr	r2, [pc, #72]	@ (800f314 <prvInitialiseTaskLists+0x60>)
 800f2cc:	4413      	add	r3, r2
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fcae 	bl	800dc30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	607b      	str	r3, [r7, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2b37      	cmp	r3, #55	@ 0x37
 800f2de:	d9ef      	bls.n	800f2c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f2e0:	480d      	ldr	r0, [pc, #52]	@ (800f318 <prvInitialiseTaskLists+0x64>)
 800f2e2:	f7fe fca5 	bl	800dc30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f2e6:	480d      	ldr	r0, [pc, #52]	@ (800f31c <prvInitialiseTaskLists+0x68>)
 800f2e8:	f7fe fca2 	bl	800dc30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f2ec:	480c      	ldr	r0, [pc, #48]	@ (800f320 <prvInitialiseTaskLists+0x6c>)
 800f2ee:	f7fe fc9f 	bl	800dc30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f2f2:	480c      	ldr	r0, [pc, #48]	@ (800f324 <prvInitialiseTaskLists+0x70>)
 800f2f4:	f7fe fc9c 	bl	800dc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f2f8:	480b      	ldr	r0, [pc, #44]	@ (800f328 <prvInitialiseTaskLists+0x74>)
 800f2fa:	f7fe fc99 	bl	800dc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f32c <prvInitialiseTaskLists+0x78>)
 800f300:	4a05      	ldr	r2, [pc, #20]	@ (800f318 <prvInitialiseTaskLists+0x64>)
 800f302:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f304:	4b0a      	ldr	r3, [pc, #40]	@ (800f330 <prvInitialiseTaskLists+0x7c>)
 800f306:	4a05      	ldr	r2, [pc, #20]	@ (800f31c <prvInitialiseTaskLists+0x68>)
 800f308:	601a      	str	r2, [r3, #0]
}
 800f30a:	bf00      	nop
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}
 800f312:	bf00      	nop
 800f314:	2400136c 	.word	0x2400136c
 800f318:	240017cc 	.word	0x240017cc
 800f31c:	240017e0 	.word	0x240017e0
 800f320:	240017fc 	.word	0x240017fc
 800f324:	24001810 	.word	0x24001810
 800f328:	24001828 	.word	0x24001828
 800f32c:	240017f4 	.word	0x240017f4
 800f330:	240017f8 	.word	0x240017f8

0800f334 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b082      	sub	sp, #8
 800f338:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f33a:	e019      	b.n	800f370 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f33c:	f000 fdec 	bl	800ff18 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f340:	4b10      	ldr	r3, [pc, #64]	@ (800f384 <prvCheckTasksWaitingTermination+0x50>)
 800f342:	68db      	ldr	r3, [r3, #12]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	3304      	adds	r3, #4
 800f34c:	4618      	mov	r0, r3
 800f34e:	f7fe fcf9 	bl	800dd44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f352:	4b0d      	ldr	r3, [pc, #52]	@ (800f388 <prvCheckTasksWaitingTermination+0x54>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3b01      	subs	r3, #1
 800f358:	4a0b      	ldr	r2, [pc, #44]	@ (800f388 <prvCheckTasksWaitingTermination+0x54>)
 800f35a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f35c:	4b0b      	ldr	r3, [pc, #44]	@ (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	3b01      	subs	r3, #1
 800f362:	4a0a      	ldr	r2, [pc, #40]	@ (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f364:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f366:	f000 fe09 	bl	800ff7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f810 	bl	800f390 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f370:	4b06      	ldr	r3, [pc, #24]	@ (800f38c <prvCheckTasksWaitingTermination+0x58>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d1e1      	bne.n	800f33c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f378:	bf00      	nop
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop
 800f384:	24001810 	.word	0x24001810
 800f388:	2400183c 	.word	0x2400183c
 800f38c:	24001824 	.word	0x24001824

0800f390 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	3354      	adds	r3, #84	@ 0x54
 800f39c:	4618      	mov	r0, r3
 800f39e:	f001 fe81 	bl	80110a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d108      	bne.n	800f3be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f000 ffa1 	bl	80102f8 <vPortFree>
				vPortFree( pxTCB );
 800f3b6:	6878      	ldr	r0, [r7, #4]
 800f3b8:	f000 ff9e 	bl	80102f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f3bc:	e019      	b.n	800f3f2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d103      	bne.n	800f3d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f000 ff95 	bl	80102f8 <vPortFree>
	}
 800f3ce:	e010      	b.n	800f3f2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f3d6:	2b02      	cmp	r3, #2
 800f3d8:	d00b      	beq.n	800f3f2 <prvDeleteTCB+0x62>
	__asm volatile
 800f3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3de:	f383 8811 	msr	BASEPRI, r3
 800f3e2:	f3bf 8f6f 	isb	sy
 800f3e6:	f3bf 8f4f 	dsb	sy
 800f3ea:	60fb      	str	r3, [r7, #12]
}
 800f3ec:	bf00      	nop
 800f3ee:	bf00      	nop
 800f3f0:	e7fd      	b.n	800f3ee <prvDeleteTCB+0x5e>
	}
 800f3f2:	bf00      	nop
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
	...

0800f3fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f3fc:	b480      	push	{r7}
 800f3fe:	b083      	sub	sp, #12
 800f400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f402:	4b0c      	ldr	r3, [pc, #48]	@ (800f434 <prvResetNextTaskUnblockTime+0x38>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f40c:	4b0a      	ldr	r3, [pc, #40]	@ (800f438 <prvResetNextTaskUnblockTime+0x3c>)
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295
 800f412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f414:	e008      	b.n	800f428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f416:	4b07      	ldr	r3, [pc, #28]	@ (800f434 <prvResetNextTaskUnblockTime+0x38>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	4a04      	ldr	r2, [pc, #16]	@ (800f438 <prvResetNextTaskUnblockTime+0x3c>)
 800f426:	6013      	str	r3, [r2, #0]
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr
 800f434:	240017f4 	.word	0x240017f4
 800f438:	2400185c 	.word	0x2400185c

0800f43c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f43c:	b480      	push	{r7}
 800f43e:	b083      	sub	sp, #12
 800f440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f442:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <xTaskGetSchedulerState+0x34>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d102      	bne.n	800f450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f44a:	2301      	movs	r3, #1
 800f44c:	607b      	str	r3, [r7, #4]
 800f44e:	e008      	b.n	800f462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f450:	4b08      	ldr	r3, [pc, #32]	@ (800f474 <xTaskGetSchedulerState+0x38>)
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d102      	bne.n	800f45e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f458:	2302      	movs	r3, #2
 800f45a:	607b      	str	r3, [r7, #4]
 800f45c:	e001      	b.n	800f462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f45e:	2300      	movs	r3, #0
 800f460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f462:	687b      	ldr	r3, [r7, #4]
	}
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr
 800f470:	24001848 	.word	0x24001848
 800f474:	24001864 	.word	0x24001864

0800f478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b086      	sub	sp, #24
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f484:	2300      	movs	r3, #0
 800f486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d058      	beq.n	800f540 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f48e:	4b2f      	ldr	r3, [pc, #188]	@ (800f54c <xTaskPriorityDisinherit+0xd4>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	693a      	ldr	r2, [r7, #16]
 800f494:	429a      	cmp	r2, r3
 800f496:	d00b      	beq.n	800f4b0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f49c:	f383 8811 	msr	BASEPRI, r3
 800f4a0:	f3bf 8f6f 	isb	sy
 800f4a4:	f3bf 8f4f 	dsb	sy
 800f4a8:	60fb      	str	r3, [r7, #12]
}
 800f4aa:	bf00      	nop
 800f4ac:	bf00      	nop
 800f4ae:	e7fd      	b.n	800f4ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f4b0:	693b      	ldr	r3, [r7, #16]
 800f4b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d10b      	bne.n	800f4d0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4bc:	f383 8811 	msr	BASEPRI, r3
 800f4c0:	f3bf 8f6f 	isb	sy
 800f4c4:	f3bf 8f4f 	dsb	sy
 800f4c8:	60bb      	str	r3, [r7, #8]
}
 800f4ca:	bf00      	nop
 800f4cc:	bf00      	nop
 800f4ce:	e7fd      	b.n	800f4cc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f4d0:	693b      	ldr	r3, [r7, #16]
 800f4d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4d4:	1e5a      	subs	r2, r3, #1
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4e2:	429a      	cmp	r2, r3
 800f4e4:	d02c      	beq.n	800f540 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f4e6:	693b      	ldr	r3, [r7, #16]
 800f4e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d128      	bne.n	800f540 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	3304      	adds	r3, #4
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7fe fc26 	bl	800dd44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f500:	693b      	ldr	r3, [r7, #16]
 800f502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f504:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f510:	4b0f      	ldr	r3, [pc, #60]	@ (800f550 <xTaskPriorityDisinherit+0xd8>)
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	429a      	cmp	r2, r3
 800f516:	d903      	bls.n	800f520 <xTaskPriorityDisinherit+0xa8>
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f51c:	4a0c      	ldr	r2, [pc, #48]	@ (800f550 <xTaskPriorityDisinherit+0xd8>)
 800f51e:	6013      	str	r3, [r2, #0]
 800f520:	693b      	ldr	r3, [r7, #16]
 800f522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f524:	4613      	mov	r3, r2
 800f526:	009b      	lsls	r3, r3, #2
 800f528:	4413      	add	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4a09      	ldr	r2, [pc, #36]	@ (800f554 <xTaskPriorityDisinherit+0xdc>)
 800f52e:	441a      	add	r2, r3
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	3304      	adds	r3, #4
 800f534:	4619      	mov	r1, r3
 800f536:	4610      	mov	r0, r2
 800f538:	f7fe fba7 	bl	800dc8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f53c:	2301      	movs	r3, #1
 800f53e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f540:	697b      	ldr	r3, [r7, #20]
	}
 800f542:	4618      	mov	r0, r3
 800f544:	3718      	adds	r7, #24
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	bf00      	nop
 800f54c:	24001368 	.word	0x24001368
 800f550:	24001844 	.word	0x24001844
 800f554:	2400136c 	.word	0x2400136c

0800f558 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f558:	b580      	push	{r7, lr}
 800f55a:	b084      	sub	sp, #16
 800f55c:	af00      	add	r7, sp, #0
 800f55e:	6078      	str	r0, [r7, #4]
 800f560:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f562:	4b21      	ldr	r3, [pc, #132]	@ (800f5e8 <prvAddCurrentTaskToDelayedList+0x90>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f568:	4b20      	ldr	r3, [pc, #128]	@ (800f5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	3304      	adds	r3, #4
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fe fbe8 	bl	800dd44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f57a:	d10a      	bne.n	800f592 <prvAddCurrentTaskToDelayedList+0x3a>
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d007      	beq.n	800f592 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f582:	4b1a      	ldr	r3, [pc, #104]	@ (800f5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	3304      	adds	r3, #4
 800f588:	4619      	mov	r1, r3
 800f58a:	4819      	ldr	r0, [pc, #100]	@ (800f5f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800f58c:	f7fe fb7d 	bl	800dc8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f590:	e026      	b.n	800f5e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	4413      	add	r3, r2
 800f598:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f59a:	4b14      	ldr	r3, [pc, #80]	@ (800f5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	68ba      	ldr	r2, [r7, #8]
 800f5a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f5a2:	68ba      	ldr	r2, [r7, #8]
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	d209      	bcs.n	800f5be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5aa:	4b12      	ldr	r3, [pc, #72]	@ (800f5f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	4b0f      	ldr	r3, [pc, #60]	@ (800f5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	3304      	adds	r3, #4
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	4610      	mov	r0, r2
 800f5b8:	f7fe fb8b 	bl	800dcd2 <vListInsert>
}
 800f5bc:	e010      	b.n	800f5e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5be:	4b0e      	ldr	r3, [pc, #56]	@ (800f5f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f5c0:	681a      	ldr	r2, [r3, #0]
 800f5c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f5ec <prvAddCurrentTaskToDelayedList+0x94>)
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	3304      	adds	r3, #4
 800f5c8:	4619      	mov	r1, r3
 800f5ca:	4610      	mov	r0, r2
 800f5cc:	f7fe fb81 	bl	800dcd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800f5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	68ba      	ldr	r2, [r7, #8]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d202      	bcs.n	800f5e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5da:	4a08      	ldr	r2, [pc, #32]	@ (800f5fc <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5dc:	68bb      	ldr	r3, [r7, #8]
 800f5de:	6013      	str	r3, [r2, #0]
}
 800f5e0:	bf00      	nop
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	24001840 	.word	0x24001840
 800f5ec:	24001368 	.word	0x24001368
 800f5f0:	24001828 	.word	0x24001828
 800f5f4:	240017f8 	.word	0x240017f8
 800f5f8:	240017f4 	.word	0x240017f4
 800f5fc:	2400185c 	.word	0x2400185c

0800f600 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b08a      	sub	sp, #40	@ 0x28
 800f604:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f606:	2300      	movs	r3, #0
 800f608:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f60a:	f000 fb13 	bl	800fc34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f60e:	4b1d      	ldr	r3, [pc, #116]	@ (800f684 <xTimerCreateTimerTask+0x84>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d021      	beq.n	800f65a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f616:	2300      	movs	r3, #0
 800f618:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f61a:	2300      	movs	r3, #0
 800f61c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f61e:	1d3a      	adds	r2, r7, #4
 800f620:	f107 0108 	add.w	r1, r7, #8
 800f624:	f107 030c 	add.w	r3, r7, #12
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe fae7 	bl	800dbfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f62e:	6879      	ldr	r1, [r7, #4]
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	68fa      	ldr	r2, [r7, #12]
 800f634:	9202      	str	r2, [sp, #8]
 800f636:	9301      	str	r3, [sp, #4]
 800f638:	2302      	movs	r3, #2
 800f63a:	9300      	str	r3, [sp, #0]
 800f63c:	2300      	movs	r3, #0
 800f63e:	460a      	mov	r2, r1
 800f640:	4911      	ldr	r1, [pc, #68]	@ (800f688 <xTimerCreateTimerTask+0x88>)
 800f642:	4812      	ldr	r0, [pc, #72]	@ (800f68c <xTimerCreateTimerTask+0x8c>)
 800f644:	f7ff f8a2 	bl	800e78c <xTaskCreateStatic>
 800f648:	4603      	mov	r3, r0
 800f64a:	4a11      	ldr	r2, [pc, #68]	@ (800f690 <xTimerCreateTimerTask+0x90>)
 800f64c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f64e:	4b10      	ldr	r3, [pc, #64]	@ (800f690 <xTimerCreateTimerTask+0x90>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d001      	beq.n	800f65a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f656:	2301      	movs	r3, #1
 800f658:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f65a:	697b      	ldr	r3, [r7, #20]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d10b      	bne.n	800f678 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f664:	f383 8811 	msr	BASEPRI, r3
 800f668:	f3bf 8f6f 	isb	sy
 800f66c:	f3bf 8f4f 	dsb	sy
 800f670:	613b      	str	r3, [r7, #16]
}
 800f672:	bf00      	nop
 800f674:	bf00      	nop
 800f676:	e7fd      	b.n	800f674 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f678:	697b      	ldr	r3, [r7, #20]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3718      	adds	r7, #24
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	24001898 	.word	0x24001898
 800f688:	0801325c 	.word	0x0801325c
 800f68c:	0800f7cd 	.word	0x0800f7cd
 800f690:	2400189c 	.word	0x2400189c

0800f694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f694:	b580      	push	{r7, lr}
 800f696:	b08a      	sub	sp, #40	@ 0x28
 800f698:	af00      	add	r7, sp, #0
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10b      	bne.n	800f6c4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	623b      	str	r3, [r7, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	bf00      	nop
 800f6c2:	e7fd      	b.n	800f6c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f6c4:	4b19      	ldr	r3, [pc, #100]	@ (800f72c <xTimerGenericCommand+0x98>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d02a      	beq.n	800f722 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6cc:	68bb      	ldr	r3, [r7, #8]
 800f6ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b05      	cmp	r3, #5
 800f6dc:	dc18      	bgt.n	800f710 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6de:	f7ff fead 	bl	800f43c <xTaskGetSchedulerState>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	2b02      	cmp	r3, #2
 800f6e6:	d109      	bne.n	800f6fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f6e8:	4b10      	ldr	r3, [pc, #64]	@ (800f72c <xTimerGenericCommand+0x98>)
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	f107 0110 	add.w	r1, r7, #16
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6f4:	f7fe fc5a 	bl	800dfac <xQueueGenericSend>
 800f6f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f6fa:	e012      	b.n	800f722 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800f72c <xTimerGenericCommand+0x98>)
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	f107 0110 	add.w	r1, r7, #16
 800f704:	2300      	movs	r3, #0
 800f706:	2200      	movs	r2, #0
 800f708:	f7fe fc50 	bl	800dfac <xQueueGenericSend>
 800f70c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f70e:	e008      	b.n	800f722 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f710:	4b06      	ldr	r3, [pc, #24]	@ (800f72c <xTimerGenericCommand+0x98>)
 800f712:	6818      	ldr	r0, [r3, #0]
 800f714:	f107 0110 	add.w	r1, r7, #16
 800f718:	2300      	movs	r3, #0
 800f71a:	683a      	ldr	r2, [r7, #0]
 800f71c:	f7fe fd48 	bl	800e1b0 <xQueueGenericSendFromISR>
 800f720:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f724:	4618      	mov	r0, r3
 800f726:	3728      	adds	r7, #40	@ 0x28
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}
 800f72c:	24001898 	.word	0x24001898

0800f730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b088      	sub	sp, #32
 800f734:	af02      	add	r7, sp, #8
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f73a:	4b23      	ldr	r3, [pc, #140]	@ (800f7c8 <prvProcessExpiredTimer+0x98>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	68db      	ldr	r3, [r3, #12]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	3304      	adds	r3, #4
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fe fafb 	bl	800dd44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f754:	f003 0304 	and.w	r3, r3, #4
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d023      	beq.n	800f7a4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	699a      	ldr	r2, [r3, #24]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	18d1      	adds	r1, r2, r3
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	683a      	ldr	r2, [r7, #0]
 800f768:	6978      	ldr	r0, [r7, #20]
 800f76a:	f000 f8d5 	bl	800f918 <prvInsertTimerInActiveList>
 800f76e:	4603      	mov	r3, r0
 800f770:	2b00      	cmp	r3, #0
 800f772:	d020      	beq.n	800f7b6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f774:	2300      	movs	r3, #0
 800f776:	9300      	str	r3, [sp, #0]
 800f778:	2300      	movs	r3, #0
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	2100      	movs	r1, #0
 800f77e:	6978      	ldr	r0, [r7, #20]
 800f780:	f7ff ff88 	bl	800f694 <xTimerGenericCommand>
 800f784:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d114      	bne.n	800f7b6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f790:	f383 8811 	msr	BASEPRI, r3
 800f794:	f3bf 8f6f 	isb	sy
 800f798:	f3bf 8f4f 	dsb	sy
 800f79c:	60fb      	str	r3, [r7, #12]
}
 800f79e:	bf00      	nop
 800f7a0:	bf00      	nop
 800f7a2:	e7fd      	b.n	800f7a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7aa:	f023 0301 	bic.w	r3, r3, #1
 800f7ae:	b2da      	uxtb	r2, r3
 800f7b0:	697b      	ldr	r3, [r7, #20]
 800f7b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	6a1b      	ldr	r3, [r3, #32]
 800f7ba:	6978      	ldr	r0, [r7, #20]
 800f7bc:	4798      	blx	r3
}
 800f7be:	bf00      	nop
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	24001890 	.word	0x24001890

0800f7cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7d4:	f107 0308 	add.w	r3, r7, #8
 800f7d8:	4618      	mov	r0, r3
 800f7da:	f000 f859 	bl	800f890 <prvGetNextExpireTime>
 800f7de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f000 f805 	bl	800f7f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f7ea:	f000 f8d7 	bl	800f99c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7ee:	bf00      	nop
 800f7f0:	e7f0      	b.n	800f7d4 <prvTimerTask+0x8>
	...

0800f7f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b084      	sub	sp, #16
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f7fe:	f7ff fa29 	bl	800ec54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f802:	f107 0308 	add.w	r3, r7, #8
 800f806:	4618      	mov	r0, r3
 800f808:	f000 f866 	bl	800f8d8 <prvSampleTimeNow>
 800f80c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d130      	bne.n	800f876 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d10a      	bne.n	800f830 <prvProcessTimerOrBlockTask+0x3c>
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d806      	bhi.n	800f830 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f822:	f7ff fa25 	bl	800ec70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f826:	68f9      	ldr	r1, [r7, #12]
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f7ff ff81 	bl	800f730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f82e:	e024      	b.n	800f87a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d008      	beq.n	800f848 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f836:	4b13      	ldr	r3, [pc, #76]	@ (800f884 <prvProcessTimerOrBlockTask+0x90>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d101      	bne.n	800f844 <prvProcessTimerOrBlockTask+0x50>
 800f840:	2301      	movs	r3, #1
 800f842:	e000      	b.n	800f846 <prvProcessTimerOrBlockTask+0x52>
 800f844:	2300      	movs	r3, #0
 800f846:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f848:	4b0f      	ldr	r3, [pc, #60]	@ (800f888 <prvProcessTimerOrBlockTask+0x94>)
 800f84a:	6818      	ldr	r0, [r3, #0]
 800f84c:	687a      	ldr	r2, [r7, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	1ad3      	subs	r3, r2, r3
 800f852:	683a      	ldr	r2, [r7, #0]
 800f854:	4619      	mov	r1, r3
 800f856:	f7fe ff65 	bl	800e724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f85a:	f7ff fa09 	bl	800ec70 <xTaskResumeAll>
 800f85e:	4603      	mov	r3, r0
 800f860:	2b00      	cmp	r3, #0
 800f862:	d10a      	bne.n	800f87a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f864:	4b09      	ldr	r3, [pc, #36]	@ (800f88c <prvProcessTimerOrBlockTask+0x98>)
 800f866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f86a:	601a      	str	r2, [r3, #0]
 800f86c:	f3bf 8f4f 	dsb	sy
 800f870:	f3bf 8f6f 	isb	sy
}
 800f874:	e001      	b.n	800f87a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f876:	f7ff f9fb 	bl	800ec70 <xTaskResumeAll>
}
 800f87a:	bf00      	nop
 800f87c:	3710      	adds	r7, #16
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	24001894 	.word	0x24001894
 800f888:	24001898 	.word	0x24001898
 800f88c:	e000ed04 	.word	0xe000ed04

0800f890 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f898:	4b0e      	ldr	r3, [pc, #56]	@ (800f8d4 <prvGetNextExpireTime+0x44>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d101      	bne.n	800f8a6 <prvGetNextExpireTime+0x16>
 800f8a2:	2201      	movs	r2, #1
 800f8a4:	e000      	b.n	800f8a8 <prvGetNextExpireTime+0x18>
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d105      	bne.n	800f8c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8b4:	4b07      	ldr	r3, [pc, #28]	@ (800f8d4 <prvGetNextExpireTime+0x44>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	68db      	ldr	r3, [r3, #12]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	60fb      	str	r3, [r7, #12]
 800f8be:	e001      	b.n	800f8c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3714      	adds	r7, #20
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d0:	4770      	bx	lr
 800f8d2:	bf00      	nop
 800f8d4:	24001890 	.word	0x24001890

0800f8d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b084      	sub	sp, #16
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f8e0:	f7ff fa64 	bl	800edac <xTaskGetTickCount>
 800f8e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <prvSampleTimeNow+0x3c>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d205      	bcs.n	800f8fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f8f0:	f000 f93a 	bl	800fb68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	e002      	b.n	800f902 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f902:	4a04      	ldr	r2, [pc, #16]	@ (800f914 <prvSampleTimeNow+0x3c>)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f908:	68fb      	ldr	r3, [r7, #12]
}
 800f90a:	4618      	mov	r0, r3
 800f90c:	3710      	adds	r7, #16
 800f90e:	46bd      	mov	sp, r7
 800f910:	bd80      	pop	{r7, pc}
 800f912:	bf00      	nop
 800f914:	240018a0 	.word	0x240018a0

0800f918 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b086      	sub	sp, #24
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	60f8      	str	r0, [r7, #12]
 800f920:	60b9      	str	r1, [r7, #8]
 800f922:	607a      	str	r2, [r7, #4]
 800f924:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f926:	2300      	movs	r3, #0
 800f928:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	68ba      	ldr	r2, [r7, #8]
 800f92e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	68fa      	ldr	r2, [r7, #12]
 800f934:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d812      	bhi.n	800f964 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	1ad2      	subs	r2, r2, r3
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	699b      	ldr	r3, [r3, #24]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d302      	bcc.n	800f952 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f94c:	2301      	movs	r3, #1
 800f94e:	617b      	str	r3, [r7, #20]
 800f950:	e01b      	b.n	800f98a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f952:	4b10      	ldr	r3, [pc, #64]	@ (800f994 <prvInsertTimerInActiveList+0x7c>)
 800f954:	681a      	ldr	r2, [r3, #0]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	3304      	adds	r3, #4
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f7fe f9b8 	bl	800dcd2 <vListInsert>
 800f962:	e012      	b.n	800f98a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d206      	bcs.n	800f97a <prvInsertTimerInActiveList+0x62>
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	429a      	cmp	r2, r3
 800f972:	d302      	bcc.n	800f97a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f974:	2301      	movs	r3, #1
 800f976:	617b      	str	r3, [r7, #20]
 800f978:	e007      	b.n	800f98a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f97a:	4b07      	ldr	r3, [pc, #28]	@ (800f998 <prvInsertTimerInActiveList+0x80>)
 800f97c:	681a      	ldr	r2, [r3, #0]
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	3304      	adds	r3, #4
 800f982:	4619      	mov	r1, r3
 800f984:	4610      	mov	r0, r2
 800f986:	f7fe f9a4 	bl	800dcd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f98a:	697b      	ldr	r3, [r7, #20]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	24001894 	.word	0x24001894
 800f998:	24001890 	.word	0x24001890

0800f99c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f99c:	b580      	push	{r7, lr}
 800f99e:	b08e      	sub	sp, #56	@ 0x38
 800f9a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9a2:	e0ce      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	da19      	bge.n	800f9de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f9aa:	1d3b      	adds	r3, r7, #4
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d10b      	bne.n	800f9ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9ba:	f383 8811 	msr	BASEPRI, r3
 800f9be:	f3bf 8f6f 	isb	sy
 800f9c2:	f3bf 8f4f 	dsb	sy
 800f9c6:	61fb      	str	r3, [r7, #28]
}
 800f9c8:	bf00      	nop
 800f9ca:	bf00      	nop
 800f9cc:	e7fd      	b.n	800f9ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f9ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9d4:	6850      	ldr	r0, [r2, #4]
 800f9d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9d8:	6892      	ldr	r2, [r2, #8]
 800f9da:	4611      	mov	r1, r2
 800f9dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	f2c0 80ae 	blt.w	800fb42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ec:	695b      	ldr	r3, [r3, #20]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d004      	beq.n	800f9fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9f4:	3304      	adds	r3, #4
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f7fe f9a4 	bl	800dd44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9fc:	463b      	mov	r3, r7
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7ff ff6a 	bl	800f8d8 <prvSampleTimeNow>
 800fa04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2b09      	cmp	r3, #9
 800fa0a:	f200 8097 	bhi.w	800fb3c <prvProcessReceivedCommands+0x1a0>
 800fa0e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa14 <prvProcessReceivedCommands+0x78>)
 800fa10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa14:	0800fa3d 	.word	0x0800fa3d
 800fa18:	0800fa3d 	.word	0x0800fa3d
 800fa1c:	0800fa3d 	.word	0x0800fa3d
 800fa20:	0800fab3 	.word	0x0800fab3
 800fa24:	0800fac7 	.word	0x0800fac7
 800fa28:	0800fb13 	.word	0x0800fb13
 800fa2c:	0800fa3d 	.word	0x0800fa3d
 800fa30:	0800fa3d 	.word	0x0800fa3d
 800fa34:	0800fab3 	.word	0x0800fab3
 800fa38:	0800fac7 	.word	0x0800fac7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa42:	f043 0301 	orr.w	r3, r3, #1
 800fa46:	b2da      	uxtb	r2, r3
 800fa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa4e:	68ba      	ldr	r2, [r7, #8]
 800fa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa52:	699b      	ldr	r3, [r3, #24]
 800fa54:	18d1      	adds	r1, r2, r3
 800fa56:	68bb      	ldr	r3, [r7, #8]
 800fa58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa5c:	f7ff ff5c 	bl	800f918 <prvInsertTimerInActiveList>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d06c      	beq.n	800fb40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa68:	6a1b      	ldr	r3, [r3, #32]
 800fa6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa74:	f003 0304 	and.w	r3, r3, #4
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d061      	beq.n	800fb40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa80:	699b      	ldr	r3, [r3, #24]
 800fa82:	441a      	add	r2, r3
 800fa84:	2300      	movs	r3, #0
 800fa86:	9300      	str	r3, [sp, #0]
 800fa88:	2300      	movs	r3, #0
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa8e:	f7ff fe01 	bl	800f694 <xTimerGenericCommand>
 800fa92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fa94:	6a3b      	ldr	r3, [r7, #32]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d152      	bne.n	800fb40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800fa9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa9e:	f383 8811 	msr	BASEPRI, r3
 800faa2:	f3bf 8f6f 	isb	sy
 800faa6:	f3bf 8f4f 	dsb	sy
 800faaa:	61bb      	str	r3, [r7, #24]
}
 800faac:	bf00      	nop
 800faae:	bf00      	nop
 800fab0:	e7fd      	b.n	800faae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fab4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fab8:	f023 0301 	bic.w	r3, r3, #1
 800fabc:	b2da      	uxtb	r2, r3
 800fabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fac4:	e03d      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fac8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800facc:	f043 0301 	orr.w	r3, r3, #1
 800fad0:	b2da      	uxtb	r2, r3
 800fad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fad4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fadc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d10b      	bne.n	800fafe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800faea:	f383 8811 	msr	BASEPRI, r3
 800faee:	f3bf 8f6f 	isb	sy
 800faf2:	f3bf 8f4f 	dsb	sy
 800faf6:	617b      	str	r3, [r7, #20]
}
 800faf8:	bf00      	nop
 800fafa:	bf00      	nop
 800fafc:	e7fd      	b.n	800fafa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb00:	699a      	ldr	r2, [r3, #24]
 800fb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb04:	18d1      	adds	r1, r2, r3
 800fb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb0c:	f7ff ff04 	bl	800f918 <prvInsertTimerInActiveList>
					break;
 800fb10:	e017      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fb12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb18:	f003 0302 	and.w	r3, r3, #2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d103      	bne.n	800fb28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fb20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb22:	f000 fbe9 	bl	80102f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb26:	e00c      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb2e:	f023 0301 	bic.w	r3, r3, #1
 800fb32:	b2da      	uxtb	r2, r3
 800fb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fb3a:	e002      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fb3c:	bf00      	nop
 800fb3e:	e000      	b.n	800fb42 <prvProcessReceivedCommands+0x1a6>
					break;
 800fb40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb42:	4b08      	ldr	r3, [pc, #32]	@ (800fb64 <prvProcessReceivedCommands+0x1c8>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	1d39      	adds	r1, r7, #4
 800fb48:	2200      	movs	r2, #0
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	f7fe fbce 	bl	800e2ec <xQueueReceive>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f47f af26 	bne.w	800f9a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb58:	bf00      	nop
 800fb5a:	bf00      	nop
 800fb5c:	3730      	adds	r7, #48	@ 0x30
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}
 800fb62:	bf00      	nop
 800fb64:	24001898 	.word	0x24001898

0800fb68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b088      	sub	sp, #32
 800fb6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb6e:	e049      	b.n	800fc04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb70:	4b2e      	ldr	r3, [pc, #184]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	68db      	ldr	r3, [r3, #12]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb7a:	4b2c      	ldr	r3, [pc, #176]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	68db      	ldr	r3, [r3, #12]
 800fb80:	68db      	ldr	r3, [r3, #12]
 800fb82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	3304      	adds	r3, #4
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fe f8db 	bl	800dd44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	6a1b      	ldr	r3, [r3, #32]
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d02f      	beq.n	800fc04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	693a      	ldr	r2, [r7, #16]
 800fbaa:	4413      	add	r3, r2
 800fbac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fbae:	68ba      	ldr	r2, [r7, #8]
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d90e      	bls.n	800fbd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	68fa      	ldr	r2, [r7, #12]
 800fbc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbc2:	4b1a      	ldr	r3, [pc, #104]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fbc4:	681a      	ldr	r2, [r3, #0]
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	3304      	adds	r3, #4
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4610      	mov	r0, r2
 800fbce:	f7fe f880 	bl	800dcd2 <vListInsert>
 800fbd2:	e017      	b.n	800fc04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	9300      	str	r3, [sp, #0]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	2100      	movs	r1, #0
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f7ff fd58 	bl	800f694 <xTimerGenericCommand>
 800fbe4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10b      	bne.n	800fc04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fbec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbf0:	f383 8811 	msr	BASEPRI, r3
 800fbf4:	f3bf 8f6f 	isb	sy
 800fbf8:	f3bf 8f4f 	dsb	sy
 800fbfc:	603b      	str	r3, [r7, #0]
}
 800fbfe:	bf00      	nop
 800fc00:	bf00      	nop
 800fc02:	e7fd      	b.n	800fc00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc04:	4b09      	ldr	r3, [pc, #36]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1b0      	bne.n	800fb70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fc0e:	4b07      	ldr	r3, [pc, #28]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fc14:	4b06      	ldr	r3, [pc, #24]	@ (800fc30 <prvSwitchTimerLists+0xc8>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	4a04      	ldr	r2, [pc, #16]	@ (800fc2c <prvSwitchTimerLists+0xc4>)
 800fc1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fc1c:	4a04      	ldr	r2, [pc, #16]	@ (800fc30 <prvSwitchTimerLists+0xc8>)
 800fc1e:	697b      	ldr	r3, [r7, #20]
 800fc20:	6013      	str	r3, [r2, #0]
}
 800fc22:	bf00      	nop
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	24001890 	.word	0x24001890
 800fc30:	24001894 	.word	0x24001894

0800fc34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b082      	sub	sp, #8
 800fc38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc3a:	f000 f96d 	bl	800ff18 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc3e:	4b15      	ldr	r3, [pc, #84]	@ (800fc94 <prvCheckForValidListAndQueue+0x60>)
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d120      	bne.n	800fc88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc46:	4814      	ldr	r0, [pc, #80]	@ (800fc98 <prvCheckForValidListAndQueue+0x64>)
 800fc48:	f7fd fff2 	bl	800dc30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc4c:	4813      	ldr	r0, [pc, #76]	@ (800fc9c <prvCheckForValidListAndQueue+0x68>)
 800fc4e:	f7fd ffef 	bl	800dc30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc52:	4b13      	ldr	r3, [pc, #76]	@ (800fca0 <prvCheckForValidListAndQueue+0x6c>)
 800fc54:	4a10      	ldr	r2, [pc, #64]	@ (800fc98 <prvCheckForValidListAndQueue+0x64>)
 800fc56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc58:	4b12      	ldr	r3, [pc, #72]	@ (800fca4 <prvCheckForValidListAndQueue+0x70>)
 800fc5a:	4a10      	ldr	r2, [pc, #64]	@ (800fc9c <prvCheckForValidListAndQueue+0x68>)
 800fc5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc5e:	2300      	movs	r3, #0
 800fc60:	9300      	str	r3, [sp, #0]
 800fc62:	4b11      	ldr	r3, [pc, #68]	@ (800fca8 <prvCheckForValidListAndQueue+0x74>)
 800fc64:	4a11      	ldr	r2, [pc, #68]	@ (800fcac <prvCheckForValidListAndQueue+0x78>)
 800fc66:	2110      	movs	r1, #16
 800fc68:	200a      	movs	r0, #10
 800fc6a:	f7fe f8ff 	bl	800de6c <xQueueGenericCreateStatic>
 800fc6e:	4603      	mov	r3, r0
 800fc70:	4a08      	ldr	r2, [pc, #32]	@ (800fc94 <prvCheckForValidListAndQueue+0x60>)
 800fc72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc74:	4b07      	ldr	r3, [pc, #28]	@ (800fc94 <prvCheckForValidListAndQueue+0x60>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d005      	beq.n	800fc88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc7c:	4b05      	ldr	r3, [pc, #20]	@ (800fc94 <prvCheckForValidListAndQueue+0x60>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	490b      	ldr	r1, [pc, #44]	@ (800fcb0 <prvCheckForValidListAndQueue+0x7c>)
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7fe fd24 	bl	800e6d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc88:	f000 f978 	bl	800ff7c <vPortExitCritical>
}
 800fc8c:	bf00      	nop
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}
 800fc92:	bf00      	nop
 800fc94:	24001898 	.word	0x24001898
 800fc98:	24001868 	.word	0x24001868
 800fc9c:	2400187c 	.word	0x2400187c
 800fca0:	24001890 	.word	0x24001890
 800fca4:	24001894 	.word	0x24001894
 800fca8:	24001944 	.word	0x24001944
 800fcac:	240018a4 	.word	0x240018a4
 800fcb0:	08013264 	.word	0x08013264

0800fcb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	60f8      	str	r0, [r7, #12]
 800fcbc:	60b9      	str	r1, [r7, #8]
 800fcbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	3b04      	subs	r3, #4
 800fcc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fccc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	3b04      	subs	r3, #4
 800fcd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	f023 0201 	bic.w	r2, r3, #1
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	3b04      	subs	r3, #4
 800fce2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fce4:	4a0c      	ldr	r2, [pc, #48]	@ (800fd18 <pxPortInitialiseStack+0x64>)
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3b14      	subs	r3, #20
 800fcee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fcf0:	687a      	ldr	r2, [r7, #4]
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	3b04      	subs	r3, #4
 800fcfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f06f 0202 	mvn.w	r2, #2
 800fd02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	3b20      	subs	r3, #32
 800fd08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3714      	adds	r7, #20
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	0800fd1d 	.word	0x0800fd1d

0800fd1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd22:	2300      	movs	r3, #0
 800fd24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd26:	4b13      	ldr	r3, [pc, #76]	@ (800fd74 <prvTaskExitError+0x58>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd2e:	d00b      	beq.n	800fd48 <prvTaskExitError+0x2c>
	__asm volatile
 800fd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd34:	f383 8811 	msr	BASEPRI, r3
 800fd38:	f3bf 8f6f 	isb	sy
 800fd3c:	f3bf 8f4f 	dsb	sy
 800fd40:	60fb      	str	r3, [r7, #12]
}
 800fd42:	bf00      	nop
 800fd44:	bf00      	nop
 800fd46:	e7fd      	b.n	800fd44 <prvTaskExitError+0x28>
	__asm volatile
 800fd48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd4c:	f383 8811 	msr	BASEPRI, r3
 800fd50:	f3bf 8f6f 	isb	sy
 800fd54:	f3bf 8f4f 	dsb	sy
 800fd58:	60bb      	str	r3, [r7, #8]
}
 800fd5a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd5c:	bf00      	nop
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d0fc      	beq.n	800fd5e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd64:	bf00      	nop
 800fd66:	bf00      	nop
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	24000010 	.word	0x24000010
	...

0800fd80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fd80:	4b07      	ldr	r3, [pc, #28]	@ (800fda0 <pxCurrentTCBConst2>)
 800fd82:	6819      	ldr	r1, [r3, #0]
 800fd84:	6808      	ldr	r0, [r1, #0]
 800fd86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd8a:	f380 8809 	msr	PSP, r0
 800fd8e:	f3bf 8f6f 	isb	sy
 800fd92:	f04f 0000 	mov.w	r0, #0
 800fd96:	f380 8811 	msr	BASEPRI, r0
 800fd9a:	4770      	bx	lr
 800fd9c:	f3af 8000 	nop.w

0800fda0 <pxCurrentTCBConst2>:
 800fda0:	24001368 	.word	0x24001368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop

0800fda8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fda8:	4808      	ldr	r0, [pc, #32]	@ (800fdcc <prvPortStartFirstTask+0x24>)
 800fdaa:	6800      	ldr	r0, [r0, #0]
 800fdac:	6800      	ldr	r0, [r0, #0]
 800fdae:	f380 8808 	msr	MSP, r0
 800fdb2:	f04f 0000 	mov.w	r0, #0
 800fdb6:	f380 8814 	msr	CONTROL, r0
 800fdba:	b662      	cpsie	i
 800fdbc:	b661      	cpsie	f
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	f3bf 8f6f 	isb	sy
 800fdc6:	df00      	svc	0
 800fdc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdca:	bf00      	nop
 800fdcc:	e000ed08 	.word	0xe000ed08

0800fdd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdd6:	4b47      	ldr	r3, [pc, #284]	@ (800fef4 <xPortStartScheduler+0x124>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	4a47      	ldr	r2, [pc, #284]	@ (800fef8 <xPortStartScheduler+0x128>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d10b      	bne.n	800fdf8 <xPortStartScheduler+0x28>
	__asm volatile
 800fde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	613b      	str	r3, [r7, #16]
}
 800fdf2:	bf00      	nop
 800fdf4:	bf00      	nop
 800fdf6:	e7fd      	b.n	800fdf4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fdf8:	4b3e      	ldr	r3, [pc, #248]	@ (800fef4 <xPortStartScheduler+0x124>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4a3f      	ldr	r2, [pc, #252]	@ (800fefc <xPortStartScheduler+0x12c>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d10b      	bne.n	800fe1a <xPortStartScheduler+0x4a>
	__asm volatile
 800fe02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe06:	f383 8811 	msr	BASEPRI, r3
 800fe0a:	f3bf 8f6f 	isb	sy
 800fe0e:	f3bf 8f4f 	dsb	sy
 800fe12:	60fb      	str	r3, [r7, #12]
}
 800fe14:	bf00      	nop
 800fe16:	bf00      	nop
 800fe18:	e7fd      	b.n	800fe16 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe1a:	4b39      	ldr	r3, [pc, #228]	@ (800ff00 <xPortStartScheduler+0x130>)
 800fe1c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe1e:	697b      	ldr	r3, [r7, #20]
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	22ff      	movs	r2, #255	@ 0xff
 800fe2a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe34:	78fb      	ldrb	r3, [r7, #3]
 800fe36:	b2db      	uxtb	r3, r3
 800fe38:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fe3c:	b2da      	uxtb	r2, r3
 800fe3e:	4b31      	ldr	r3, [pc, #196]	@ (800ff04 <xPortStartScheduler+0x134>)
 800fe40:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe42:	4b31      	ldr	r3, [pc, #196]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe44:	2207      	movs	r2, #7
 800fe46:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe48:	e009      	b.n	800fe5e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fe4a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	4a2d      	ldr	r2, [pc, #180]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe52:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe54:	78fb      	ldrb	r3, [r7, #3]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	005b      	lsls	r3, r3, #1
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe5e:	78fb      	ldrb	r3, [r7, #3]
 800fe60:	b2db      	uxtb	r3, r3
 800fe62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe66:	2b80      	cmp	r3, #128	@ 0x80
 800fe68:	d0ef      	beq.n	800fe4a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe6a:	4b27      	ldr	r3, [pc, #156]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f1c3 0307 	rsb	r3, r3, #7
 800fe72:	2b04      	cmp	r3, #4
 800fe74:	d00b      	beq.n	800fe8e <xPortStartScheduler+0xbe>
	__asm volatile
 800fe76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7a:	f383 8811 	msr	BASEPRI, r3
 800fe7e:	f3bf 8f6f 	isb	sy
 800fe82:	f3bf 8f4f 	dsb	sy
 800fe86:	60bb      	str	r3, [r7, #8]
}
 800fe88:	bf00      	nop
 800fe8a:	bf00      	nop
 800fe8c:	e7fd      	b.n	800fe8a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fe8e:	4b1e      	ldr	r3, [pc, #120]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	4a1c      	ldr	r2, [pc, #112]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe96:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe98:	4b1b      	ldr	r3, [pc, #108]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fea0:	4a19      	ldr	r2, [pc, #100]	@ (800ff08 <xPortStartScheduler+0x138>)
 800fea2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	b2da      	uxtb	r2, r3
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800feac:	4b17      	ldr	r3, [pc, #92]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	4a16      	ldr	r2, [pc, #88]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feb2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800feb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800feb8:	4b14      	ldr	r3, [pc, #80]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	4a13      	ldr	r2, [pc, #76]	@ (800ff0c <xPortStartScheduler+0x13c>)
 800febe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fec2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fec4:	f000 f8da 	bl	801007c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fec8:	4b11      	ldr	r3, [pc, #68]	@ (800ff10 <xPortStartScheduler+0x140>)
 800feca:	2200      	movs	r2, #0
 800fecc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fece:	f000 f8f9 	bl	80100c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fed2:	4b10      	ldr	r3, [pc, #64]	@ (800ff14 <xPortStartScheduler+0x144>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4a0f      	ldr	r2, [pc, #60]	@ (800ff14 <xPortStartScheduler+0x144>)
 800fed8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fedc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fede:	f7ff ff63 	bl	800fda8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fee2:	f7ff f82d 	bl	800ef40 <vTaskSwitchContext>
	prvTaskExitError();
 800fee6:	f7ff ff19 	bl	800fd1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800feea:	2300      	movs	r3, #0
}
 800feec:	4618      	mov	r0, r3
 800feee:	3718      	adds	r7, #24
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	e000ed00 	.word	0xe000ed00
 800fef8:	410fc271 	.word	0x410fc271
 800fefc:	410fc270 	.word	0x410fc270
 800ff00:	e000e400 	.word	0xe000e400
 800ff04:	24001994 	.word	0x24001994
 800ff08:	24001998 	.word	0x24001998
 800ff0c:	e000ed20 	.word	0xe000ed20
 800ff10:	24000010 	.word	0x24000010
 800ff14:	e000ef34 	.word	0xe000ef34

0800ff18 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff22:	f383 8811 	msr	BASEPRI, r3
 800ff26:	f3bf 8f6f 	isb	sy
 800ff2a:	f3bf 8f4f 	dsb	sy
 800ff2e:	607b      	str	r3, [r7, #4]
}
 800ff30:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff32:	4b10      	ldr	r3, [pc, #64]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3301      	adds	r3, #1
 800ff38:	4a0e      	ldr	r2, [pc, #56]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff3a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff3c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff74 <vPortEnterCritical+0x5c>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d110      	bne.n	800ff66 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff44:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <vPortEnterCritical+0x60>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00b      	beq.n	800ff66 <vPortEnterCritical+0x4e>
	__asm volatile
 800ff4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	603b      	str	r3, [r7, #0]
}
 800ff60:	bf00      	nop
 800ff62:	bf00      	nop
 800ff64:	e7fd      	b.n	800ff62 <vPortEnterCritical+0x4a>
	}
}
 800ff66:	bf00      	nop
 800ff68:	370c      	adds	r7, #12
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff70:	4770      	bx	lr
 800ff72:	bf00      	nop
 800ff74:	24000010 	.word	0x24000010
 800ff78:	e000ed04 	.word	0xe000ed04

0800ff7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ff82:	4b12      	ldr	r3, [pc, #72]	@ (800ffcc <vPortExitCritical+0x50>)
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10b      	bne.n	800ffa2 <vPortExitCritical+0x26>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	f383 8811 	msr	BASEPRI, r3
 800ff92:	f3bf 8f6f 	isb	sy
 800ff96:	f3bf 8f4f 	dsb	sy
 800ff9a:	607b      	str	r3, [r7, #4]
}
 800ff9c:	bf00      	nop
 800ff9e:	bf00      	nop
 800ffa0:	e7fd      	b.n	800ff9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ffa2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	3b01      	subs	r3, #1
 800ffa8:	4a08      	ldr	r2, [pc, #32]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffac:	4b07      	ldr	r3, [pc, #28]	@ (800ffcc <vPortExitCritical+0x50>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d105      	bne.n	800ffc0 <vPortExitCritical+0x44>
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	f383 8811 	msr	BASEPRI, r3
}
 800ffbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr
 800ffcc:	24000010 	.word	0x24000010

0800ffd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ffd0:	f3ef 8009 	mrs	r0, PSP
 800ffd4:	f3bf 8f6f 	isb	sy
 800ffd8:	4b15      	ldr	r3, [pc, #84]	@ (8010030 <pxCurrentTCBConst>)
 800ffda:	681a      	ldr	r2, [r3, #0]
 800ffdc:	f01e 0f10 	tst.w	lr, #16
 800ffe0:	bf08      	it	eq
 800ffe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ffe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffea:	6010      	str	r0, [r2, #0]
 800ffec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fff0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fff4:	f380 8811 	msr	BASEPRI, r0
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	f3bf 8f6f 	isb	sy
 8010000:	f7fe ff9e 	bl	800ef40 <vTaskSwitchContext>
 8010004:	f04f 0000 	mov.w	r0, #0
 8010008:	f380 8811 	msr	BASEPRI, r0
 801000c:	bc09      	pop	{r0, r3}
 801000e:	6819      	ldr	r1, [r3, #0]
 8010010:	6808      	ldr	r0, [r1, #0]
 8010012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010016:	f01e 0f10 	tst.w	lr, #16
 801001a:	bf08      	it	eq
 801001c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010020:	f380 8809 	msr	PSP, r0
 8010024:	f3bf 8f6f 	isb	sy
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop
 801002c:	f3af 8000 	nop.w

08010030 <pxCurrentTCBConst>:
 8010030:	24001368 	.word	0x24001368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010034:	bf00      	nop
 8010036:	bf00      	nop

08010038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
	__asm volatile
 801003e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010042:	f383 8811 	msr	BASEPRI, r3
 8010046:	f3bf 8f6f 	isb	sy
 801004a:	f3bf 8f4f 	dsb	sy
 801004e:	607b      	str	r3, [r7, #4]
}
 8010050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010052:	f7fe febb 	bl	800edcc <xTaskIncrementTick>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d003      	beq.n	8010064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801005c:	4b06      	ldr	r3, [pc, #24]	@ (8010078 <xPortSysTickHandler+0x40>)
 801005e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010062:	601a      	str	r2, [r3, #0]
 8010064:	2300      	movs	r3, #0
 8010066:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	f383 8811 	msr	BASEPRI, r3
}
 801006e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010070:	bf00      	nop
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	e000ed04 	.word	0xe000ed04

0801007c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801007c:	b480      	push	{r7}
 801007e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010080:	4b0b      	ldr	r3, [pc, #44]	@ (80100b0 <vPortSetupTimerInterrupt+0x34>)
 8010082:	2200      	movs	r2, #0
 8010084:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010086:	4b0b      	ldr	r3, [pc, #44]	@ (80100b4 <vPortSetupTimerInterrupt+0x38>)
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801008c:	4b0a      	ldr	r3, [pc, #40]	@ (80100b8 <vPortSetupTimerInterrupt+0x3c>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	4a0a      	ldr	r2, [pc, #40]	@ (80100bc <vPortSetupTimerInterrupt+0x40>)
 8010092:	fba2 2303 	umull	r2, r3, r2, r3
 8010096:	099b      	lsrs	r3, r3, #6
 8010098:	4a09      	ldr	r2, [pc, #36]	@ (80100c0 <vPortSetupTimerInterrupt+0x44>)
 801009a:	3b01      	subs	r3, #1
 801009c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801009e:	4b04      	ldr	r3, [pc, #16]	@ (80100b0 <vPortSetupTimerInterrupt+0x34>)
 80100a0:	2207      	movs	r2, #7
 80100a2:	601a      	str	r2, [r3, #0]
}
 80100a4:	bf00      	nop
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop
 80100b0:	e000e010 	.word	0xe000e010
 80100b4:	e000e018 	.word	0xe000e018
 80100b8:	24000000 	.word	0x24000000
 80100bc:	10624dd3 	.word	0x10624dd3
 80100c0:	e000e014 	.word	0xe000e014

080100c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80100d4 <vPortEnableVFP+0x10>
 80100c8:	6801      	ldr	r1, [r0, #0]
 80100ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80100ce:	6001      	str	r1, [r0, #0]
 80100d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100d2:	bf00      	nop
 80100d4:	e000ed88 	.word	0xe000ed88

080100d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100de:	f3ef 8305 	mrs	r3, IPSR
 80100e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2b0f      	cmp	r3, #15
 80100e8:	d915      	bls.n	8010116 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80100ea:	4a18      	ldr	r2, [pc, #96]	@ (801014c <vPortValidateInterruptPriority+0x74>)
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	4413      	add	r3, r2
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80100f4:	4b16      	ldr	r3, [pc, #88]	@ (8010150 <vPortValidateInterruptPriority+0x78>)
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	7afa      	ldrb	r2, [r7, #11]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d20b      	bcs.n	8010116 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80100fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010102:	f383 8811 	msr	BASEPRI, r3
 8010106:	f3bf 8f6f 	isb	sy
 801010a:	f3bf 8f4f 	dsb	sy
 801010e:	607b      	str	r3, [r7, #4]
}
 8010110:	bf00      	nop
 8010112:	bf00      	nop
 8010114:	e7fd      	b.n	8010112 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010116:	4b0f      	ldr	r3, [pc, #60]	@ (8010154 <vPortValidateInterruptPriority+0x7c>)
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801011e:	4b0e      	ldr	r3, [pc, #56]	@ (8010158 <vPortValidateInterruptPriority+0x80>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	429a      	cmp	r2, r3
 8010124:	d90b      	bls.n	801013e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012a:	f383 8811 	msr	BASEPRI, r3
 801012e:	f3bf 8f6f 	isb	sy
 8010132:	f3bf 8f4f 	dsb	sy
 8010136:	603b      	str	r3, [r7, #0]
}
 8010138:	bf00      	nop
 801013a:	bf00      	nop
 801013c:	e7fd      	b.n	801013a <vPortValidateInterruptPriority+0x62>
	}
 801013e:	bf00      	nop
 8010140:	3714      	adds	r7, #20
 8010142:	46bd      	mov	sp, r7
 8010144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010148:	4770      	bx	lr
 801014a:	bf00      	nop
 801014c:	e000e3f0 	.word	0xe000e3f0
 8010150:	24001994 	.word	0x24001994
 8010154:	e000ed0c 	.word	0xe000ed0c
 8010158:	24001998 	.word	0x24001998

0801015c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b08a      	sub	sp, #40	@ 0x28
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010164:	2300      	movs	r3, #0
 8010166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010168:	f7fe fd74 	bl	800ec54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801016c:	4b5c      	ldr	r3, [pc, #368]	@ (80102e0 <pvPortMalloc+0x184>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010174:	f000 f924 	bl	80103c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010178:	4b5a      	ldr	r3, [pc, #360]	@ (80102e4 <pvPortMalloc+0x188>)
 801017a:	681a      	ldr	r2, [r3, #0]
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4013      	ands	r3, r2
 8010180:	2b00      	cmp	r3, #0
 8010182:	f040 8095 	bne.w	80102b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d01e      	beq.n	80101ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801018c:	2208      	movs	r2, #8
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	4413      	add	r3, r2
 8010192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f003 0307 	and.w	r3, r3, #7
 801019a:	2b00      	cmp	r3, #0
 801019c:	d015      	beq.n	80101ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f023 0307 	bic.w	r3, r3, #7
 80101a4:	3308      	adds	r3, #8
 80101a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f003 0307 	and.w	r3, r3, #7
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d00b      	beq.n	80101ca <pvPortMalloc+0x6e>
	__asm volatile
 80101b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101b6:	f383 8811 	msr	BASEPRI, r3
 80101ba:	f3bf 8f6f 	isb	sy
 80101be:	f3bf 8f4f 	dsb	sy
 80101c2:	617b      	str	r3, [r7, #20]
}
 80101c4:	bf00      	nop
 80101c6:	bf00      	nop
 80101c8:	e7fd      	b.n	80101c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d06f      	beq.n	80102b0 <pvPortMalloc+0x154>
 80101d0:	4b45      	ldr	r3, [pc, #276]	@ (80102e8 <pvPortMalloc+0x18c>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	687a      	ldr	r2, [r7, #4]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d86a      	bhi.n	80102b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101da:	4b44      	ldr	r3, [pc, #272]	@ (80102ec <pvPortMalloc+0x190>)
 80101dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101de:	4b43      	ldr	r3, [pc, #268]	@ (80102ec <pvPortMalloc+0x190>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101e4:	e004      	b.n	80101f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80101e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80101ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80101f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101f2:	685b      	ldr	r3, [r3, #4]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d903      	bls.n	8010202 <pvPortMalloc+0xa6>
 80101fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d1f1      	bne.n	80101e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010202:	4b37      	ldr	r3, [pc, #220]	@ (80102e0 <pvPortMalloc+0x184>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010208:	429a      	cmp	r2, r3
 801020a:	d051      	beq.n	80102b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801020c:	6a3b      	ldr	r3, [r7, #32]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	2208      	movs	r2, #8
 8010212:	4413      	add	r3, r2
 8010214:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010218:	681a      	ldr	r2, [r3, #0]
 801021a:	6a3b      	ldr	r3, [r7, #32]
 801021c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801021e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010220:	685a      	ldr	r2, [r3, #4]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	1ad2      	subs	r2, r2, r3
 8010226:	2308      	movs	r3, #8
 8010228:	005b      	lsls	r3, r3, #1
 801022a:	429a      	cmp	r2, r3
 801022c:	d920      	bls.n	8010270 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801022e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	4413      	add	r3, r2
 8010234:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010236:	69bb      	ldr	r3, [r7, #24]
 8010238:	f003 0307 	and.w	r3, r3, #7
 801023c:	2b00      	cmp	r3, #0
 801023e:	d00b      	beq.n	8010258 <pvPortMalloc+0xfc>
	__asm volatile
 8010240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010244:	f383 8811 	msr	BASEPRI, r3
 8010248:	f3bf 8f6f 	isb	sy
 801024c:	f3bf 8f4f 	dsb	sy
 8010250:	613b      	str	r3, [r7, #16]
}
 8010252:	bf00      	nop
 8010254:	bf00      	nop
 8010256:	e7fd      	b.n	8010254 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	1ad2      	subs	r2, r2, r3
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801026a:	69b8      	ldr	r0, [r7, #24]
 801026c:	f000 f90a 	bl	8010484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010270:	4b1d      	ldr	r3, [pc, #116]	@ (80102e8 <pvPortMalloc+0x18c>)
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010276:	685b      	ldr	r3, [r3, #4]
 8010278:	1ad3      	subs	r3, r2, r3
 801027a:	4a1b      	ldr	r2, [pc, #108]	@ (80102e8 <pvPortMalloc+0x18c>)
 801027c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801027e:	4b1a      	ldr	r3, [pc, #104]	@ (80102e8 <pvPortMalloc+0x18c>)
 8010280:	681a      	ldr	r2, [r3, #0]
 8010282:	4b1b      	ldr	r3, [pc, #108]	@ (80102f0 <pvPortMalloc+0x194>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	429a      	cmp	r2, r3
 8010288:	d203      	bcs.n	8010292 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801028a:	4b17      	ldr	r3, [pc, #92]	@ (80102e8 <pvPortMalloc+0x18c>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	4a18      	ldr	r2, [pc, #96]	@ (80102f0 <pvPortMalloc+0x194>)
 8010290:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010294:	685a      	ldr	r2, [r3, #4]
 8010296:	4b13      	ldr	r3, [pc, #76]	@ (80102e4 <pvPortMalloc+0x188>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	431a      	orrs	r2, r3
 801029c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801029e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102a2:	2200      	movs	r2, #0
 80102a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80102a6:	4b13      	ldr	r3, [pc, #76]	@ (80102f4 <pvPortMalloc+0x198>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	3301      	adds	r3, #1
 80102ac:	4a11      	ldr	r2, [pc, #68]	@ (80102f4 <pvPortMalloc+0x198>)
 80102ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102b0:	f7fe fcde 	bl	800ec70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00b      	beq.n	80102d6 <pvPortMalloc+0x17a>
	__asm volatile
 80102be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102c2:	f383 8811 	msr	BASEPRI, r3
 80102c6:	f3bf 8f6f 	isb	sy
 80102ca:	f3bf 8f4f 	dsb	sy
 80102ce:	60fb      	str	r3, [r7, #12]
}
 80102d0:	bf00      	nop
 80102d2:	bf00      	nop
 80102d4:	e7fd      	b.n	80102d2 <pvPortMalloc+0x176>
	return pvReturn;
 80102d6:	69fb      	ldr	r3, [r7, #28]
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3728      	adds	r7, #40	@ 0x28
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	240055a4 	.word	0x240055a4
 80102e4:	240055b8 	.word	0x240055b8
 80102e8:	240055a8 	.word	0x240055a8
 80102ec:	2400559c 	.word	0x2400559c
 80102f0:	240055ac 	.word	0x240055ac
 80102f4:	240055b0 	.word	0x240055b0

080102f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d04f      	beq.n	80103aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801030a:	2308      	movs	r3, #8
 801030c:	425b      	negs	r3, r3
 801030e:	697a      	ldr	r2, [r7, #20]
 8010310:	4413      	add	r3, r2
 8010312:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	685a      	ldr	r2, [r3, #4]
 801031c:	4b25      	ldr	r3, [pc, #148]	@ (80103b4 <vPortFree+0xbc>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	4013      	ands	r3, r2
 8010322:	2b00      	cmp	r3, #0
 8010324:	d10b      	bne.n	801033e <vPortFree+0x46>
	__asm volatile
 8010326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801032a:	f383 8811 	msr	BASEPRI, r3
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	f3bf 8f4f 	dsb	sy
 8010336:	60fb      	str	r3, [r7, #12]
}
 8010338:	bf00      	nop
 801033a:	bf00      	nop
 801033c:	e7fd      	b.n	801033a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d00b      	beq.n	801035e <vPortFree+0x66>
	__asm volatile
 8010346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034a:	f383 8811 	msr	BASEPRI, r3
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	60bb      	str	r3, [r7, #8]
}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	e7fd      	b.n	801035a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	4b14      	ldr	r3, [pc, #80]	@ (80103b4 <vPortFree+0xbc>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	4013      	ands	r3, r2
 8010368:	2b00      	cmp	r3, #0
 801036a:	d01e      	beq.n	80103aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801036c:	693b      	ldr	r3, [r7, #16]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d11a      	bne.n	80103aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010374:	693b      	ldr	r3, [r7, #16]
 8010376:	685a      	ldr	r2, [r3, #4]
 8010378:	4b0e      	ldr	r3, [pc, #56]	@ (80103b4 <vPortFree+0xbc>)
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	43db      	mvns	r3, r3
 801037e:	401a      	ands	r2, r3
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010384:	f7fe fc66 	bl	800ec54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	4b0a      	ldr	r3, [pc, #40]	@ (80103b8 <vPortFree+0xc0>)
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	4413      	add	r3, r2
 8010392:	4a09      	ldr	r2, [pc, #36]	@ (80103b8 <vPortFree+0xc0>)
 8010394:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010396:	6938      	ldr	r0, [r7, #16]
 8010398:	f000 f874 	bl	8010484 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801039c:	4b07      	ldr	r3, [pc, #28]	@ (80103bc <vPortFree+0xc4>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	3301      	adds	r3, #1
 80103a2:	4a06      	ldr	r2, [pc, #24]	@ (80103bc <vPortFree+0xc4>)
 80103a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80103a6:	f7fe fc63 	bl	800ec70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80103aa:	bf00      	nop
 80103ac:	3718      	adds	r7, #24
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	240055b8 	.word	0x240055b8
 80103b8:	240055a8 	.word	0x240055a8
 80103bc:	240055b4 	.word	0x240055b4

080103c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80103ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103cc:	4b27      	ldr	r3, [pc, #156]	@ (801046c <prvHeapInit+0xac>)
 80103ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f003 0307 	and.w	r3, r3, #7
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00c      	beq.n	80103f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	3307      	adds	r3, #7
 80103de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f023 0307 	bic.w	r3, r3, #7
 80103e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80103e8:	68ba      	ldr	r2, [r7, #8]
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	4a1f      	ldr	r2, [pc, #124]	@ (801046c <prvHeapInit+0xac>)
 80103f0:	4413      	add	r3, r2
 80103f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80103f8:	4a1d      	ldr	r2, [pc, #116]	@ (8010470 <prvHeapInit+0xb0>)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80103fe:	4b1c      	ldr	r3, [pc, #112]	@ (8010470 <prvHeapInit+0xb0>)
 8010400:	2200      	movs	r2, #0
 8010402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	4413      	add	r3, r2
 801040a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801040c:	2208      	movs	r2, #8
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	1a9b      	subs	r3, r3, r2
 8010412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	f023 0307 	bic.w	r3, r3, #7
 801041a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4a15      	ldr	r2, [pc, #84]	@ (8010474 <prvHeapInit+0xb4>)
 8010420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010422:	4b14      	ldr	r3, [pc, #80]	@ (8010474 <prvHeapInit+0xb4>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	2200      	movs	r2, #0
 8010428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801042a:	4b12      	ldr	r3, [pc, #72]	@ (8010474 <prvHeapInit+0xb4>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2200      	movs	r2, #0
 8010430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010436:	683b      	ldr	r3, [r7, #0]
 8010438:	68fa      	ldr	r2, [r7, #12]
 801043a:	1ad2      	subs	r2, r2, r3
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010440:	4b0c      	ldr	r3, [pc, #48]	@ (8010474 <prvHeapInit+0xb4>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010448:	683b      	ldr	r3, [r7, #0]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	4a0a      	ldr	r2, [pc, #40]	@ (8010478 <prvHeapInit+0xb8>)
 801044e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	685b      	ldr	r3, [r3, #4]
 8010454:	4a09      	ldr	r2, [pc, #36]	@ (801047c <prvHeapInit+0xbc>)
 8010456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010458:	4b09      	ldr	r3, [pc, #36]	@ (8010480 <prvHeapInit+0xc0>)
 801045a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801045e:	601a      	str	r2, [r3, #0]
}
 8010460:	bf00      	nop
 8010462:	3714      	adds	r7, #20
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr
 801046c:	2400199c 	.word	0x2400199c
 8010470:	2400559c 	.word	0x2400559c
 8010474:	240055a4 	.word	0x240055a4
 8010478:	240055ac 	.word	0x240055ac
 801047c:	240055a8 	.word	0x240055a8
 8010480:	240055b8 	.word	0x240055b8

08010484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010484:	b480      	push	{r7}
 8010486:	b085      	sub	sp, #20
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801048c:	4b28      	ldr	r3, [pc, #160]	@ (8010530 <prvInsertBlockIntoFreeList+0xac>)
 801048e:	60fb      	str	r3, [r7, #12]
 8010490:	e002      	b.n	8010498 <prvInsertBlockIntoFreeList+0x14>
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	681b      	ldr	r3, [r3, #0]
 8010496:	60fb      	str	r3, [r7, #12]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d8f7      	bhi.n	8010492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	685b      	ldr	r3, [r3, #4]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	4413      	add	r3, r2
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d108      	bne.n	80104c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	685a      	ldr	r2, [r3, #4]
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	441a      	add	r2, r3
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	685b      	ldr	r3, [r3, #4]
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	441a      	add	r2, r3
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d118      	bne.n	801050c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	4b15      	ldr	r3, [pc, #84]	@ (8010534 <prvInsertBlockIntoFreeList+0xb0>)
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d00d      	beq.n	8010502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685a      	ldr	r2, [r3, #4]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	685b      	ldr	r3, [r3, #4]
 80104f0:	441a      	add	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	601a      	str	r2, [r3, #0]
 8010500:	e008      	b.n	8010514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010502:	4b0c      	ldr	r3, [pc, #48]	@ (8010534 <prvInsertBlockIntoFreeList+0xb0>)
 8010504:	681a      	ldr	r2, [r3, #0]
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	601a      	str	r2, [r3, #0]
 801050a:	e003      	b.n	8010514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681a      	ldr	r2, [r3, #0]
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010514:	68fa      	ldr	r2, [r7, #12]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	429a      	cmp	r2, r3
 801051a:	d002      	beq.n	8010522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010522:	bf00      	nop
 8010524:	3714      	adds	r7, #20
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	2400559c 	.word	0x2400559c
 8010534:	240055a4 	.word	0x240055a4

08010538 <rand>:
 8010538:	4b16      	ldr	r3, [pc, #88]	@ (8010594 <rand+0x5c>)
 801053a:	b510      	push	{r4, lr}
 801053c:	681c      	ldr	r4, [r3, #0]
 801053e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010540:	b9b3      	cbnz	r3, 8010570 <rand+0x38>
 8010542:	2018      	movs	r0, #24
 8010544:	f001 fcbc 	bl	8011ec0 <malloc>
 8010548:	4602      	mov	r2, r0
 801054a:	6320      	str	r0, [r4, #48]	@ 0x30
 801054c:	b920      	cbnz	r0, 8010558 <rand+0x20>
 801054e:	4b12      	ldr	r3, [pc, #72]	@ (8010598 <rand+0x60>)
 8010550:	4812      	ldr	r0, [pc, #72]	@ (801059c <rand+0x64>)
 8010552:	2152      	movs	r1, #82	@ 0x52
 8010554:	f000 fe6e 	bl	8011234 <__assert_func>
 8010558:	4911      	ldr	r1, [pc, #68]	@ (80105a0 <rand+0x68>)
 801055a:	4b12      	ldr	r3, [pc, #72]	@ (80105a4 <rand+0x6c>)
 801055c:	e9c0 1300 	strd	r1, r3, [r0]
 8010560:	4b11      	ldr	r3, [pc, #68]	@ (80105a8 <rand+0x70>)
 8010562:	6083      	str	r3, [r0, #8]
 8010564:	230b      	movs	r3, #11
 8010566:	8183      	strh	r3, [r0, #12]
 8010568:	2100      	movs	r1, #0
 801056a:	2001      	movs	r0, #1
 801056c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8010570:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8010572:	480e      	ldr	r0, [pc, #56]	@ (80105ac <rand+0x74>)
 8010574:	690b      	ldr	r3, [r1, #16]
 8010576:	694c      	ldr	r4, [r1, #20]
 8010578:	4a0d      	ldr	r2, [pc, #52]	@ (80105b0 <rand+0x78>)
 801057a:	4358      	muls	r0, r3
 801057c:	fb02 0004 	mla	r0, r2, r4, r0
 8010580:	fba3 3202 	umull	r3, r2, r3, r2
 8010584:	3301      	adds	r3, #1
 8010586:	eb40 0002 	adc.w	r0, r0, r2
 801058a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801058e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8010592:	bd10      	pop	{r4, pc}
 8010594:	24000020 	.word	0x24000020
 8010598:	080132ec 	.word	0x080132ec
 801059c:	08013303 	.word	0x08013303
 80105a0:	abcd330e 	.word	0xabcd330e
 80105a4:	e66d1234 	.word	0xe66d1234
 80105a8:	0005deec 	.word	0x0005deec
 80105ac:	5851f42d 	.word	0x5851f42d
 80105b0:	4c957f2d 	.word	0x4c957f2d

080105b4 <__cvt>:
 80105b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105b6:	ed2d 8b02 	vpush	{d8}
 80105ba:	eeb0 8b40 	vmov.f64	d8, d0
 80105be:	b085      	sub	sp, #20
 80105c0:	4617      	mov	r7, r2
 80105c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80105c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80105c6:	ee18 2a90 	vmov	r2, s17
 80105ca:	f025 0520 	bic.w	r5, r5, #32
 80105ce:	2a00      	cmp	r2, #0
 80105d0:	bfb6      	itet	lt
 80105d2:	222d      	movlt	r2, #45	@ 0x2d
 80105d4:	2200      	movge	r2, #0
 80105d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80105da:	2d46      	cmp	r5, #70	@ 0x46
 80105dc:	460c      	mov	r4, r1
 80105de:	701a      	strb	r2, [r3, #0]
 80105e0:	d004      	beq.n	80105ec <__cvt+0x38>
 80105e2:	2d45      	cmp	r5, #69	@ 0x45
 80105e4:	d100      	bne.n	80105e8 <__cvt+0x34>
 80105e6:	3401      	adds	r4, #1
 80105e8:	2102      	movs	r1, #2
 80105ea:	e000      	b.n	80105ee <__cvt+0x3a>
 80105ec:	2103      	movs	r1, #3
 80105ee:	ab03      	add	r3, sp, #12
 80105f0:	9301      	str	r3, [sp, #4]
 80105f2:	ab02      	add	r3, sp, #8
 80105f4:	9300      	str	r3, [sp, #0]
 80105f6:	4622      	mov	r2, r4
 80105f8:	4633      	mov	r3, r6
 80105fa:	eeb0 0b48 	vmov.f64	d0, d8
 80105fe:	f000 febf 	bl	8011380 <_dtoa_r>
 8010602:	2d47      	cmp	r5, #71	@ 0x47
 8010604:	d114      	bne.n	8010630 <__cvt+0x7c>
 8010606:	07fb      	lsls	r3, r7, #31
 8010608:	d50a      	bpl.n	8010620 <__cvt+0x6c>
 801060a:	1902      	adds	r2, r0, r4
 801060c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010614:	bf08      	it	eq
 8010616:	9203      	streq	r2, [sp, #12]
 8010618:	2130      	movs	r1, #48	@ 0x30
 801061a:	9b03      	ldr	r3, [sp, #12]
 801061c:	4293      	cmp	r3, r2
 801061e:	d319      	bcc.n	8010654 <__cvt+0xa0>
 8010620:	9b03      	ldr	r3, [sp, #12]
 8010622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010624:	1a1b      	subs	r3, r3, r0
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	b005      	add	sp, #20
 801062a:	ecbd 8b02 	vpop	{d8}
 801062e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010630:	2d46      	cmp	r5, #70	@ 0x46
 8010632:	eb00 0204 	add.w	r2, r0, r4
 8010636:	d1e9      	bne.n	801060c <__cvt+0x58>
 8010638:	7803      	ldrb	r3, [r0, #0]
 801063a:	2b30      	cmp	r3, #48	@ 0x30
 801063c:	d107      	bne.n	801064e <__cvt+0x9a>
 801063e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010646:	bf1c      	itt	ne
 8010648:	f1c4 0401 	rsbne	r4, r4, #1
 801064c:	6034      	strne	r4, [r6, #0]
 801064e:	6833      	ldr	r3, [r6, #0]
 8010650:	441a      	add	r2, r3
 8010652:	e7db      	b.n	801060c <__cvt+0x58>
 8010654:	1c5c      	adds	r4, r3, #1
 8010656:	9403      	str	r4, [sp, #12]
 8010658:	7019      	strb	r1, [r3, #0]
 801065a:	e7de      	b.n	801061a <__cvt+0x66>

0801065c <__exponent>:
 801065c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801065e:	2900      	cmp	r1, #0
 8010660:	bfba      	itte	lt
 8010662:	4249      	neglt	r1, r1
 8010664:	232d      	movlt	r3, #45	@ 0x2d
 8010666:	232b      	movge	r3, #43	@ 0x2b
 8010668:	2909      	cmp	r1, #9
 801066a:	7002      	strb	r2, [r0, #0]
 801066c:	7043      	strb	r3, [r0, #1]
 801066e:	dd29      	ble.n	80106c4 <__exponent+0x68>
 8010670:	f10d 0307 	add.w	r3, sp, #7
 8010674:	461d      	mov	r5, r3
 8010676:	270a      	movs	r7, #10
 8010678:	461a      	mov	r2, r3
 801067a:	fbb1 f6f7 	udiv	r6, r1, r7
 801067e:	fb07 1416 	mls	r4, r7, r6, r1
 8010682:	3430      	adds	r4, #48	@ 0x30
 8010684:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010688:	460c      	mov	r4, r1
 801068a:	2c63      	cmp	r4, #99	@ 0x63
 801068c:	f103 33ff 	add.w	r3, r3, #4294967295
 8010690:	4631      	mov	r1, r6
 8010692:	dcf1      	bgt.n	8010678 <__exponent+0x1c>
 8010694:	3130      	adds	r1, #48	@ 0x30
 8010696:	1e94      	subs	r4, r2, #2
 8010698:	f803 1c01 	strb.w	r1, [r3, #-1]
 801069c:	1c41      	adds	r1, r0, #1
 801069e:	4623      	mov	r3, r4
 80106a0:	42ab      	cmp	r3, r5
 80106a2:	d30a      	bcc.n	80106ba <__exponent+0x5e>
 80106a4:	f10d 0309 	add.w	r3, sp, #9
 80106a8:	1a9b      	subs	r3, r3, r2
 80106aa:	42ac      	cmp	r4, r5
 80106ac:	bf88      	it	hi
 80106ae:	2300      	movhi	r3, #0
 80106b0:	3302      	adds	r3, #2
 80106b2:	4403      	add	r3, r0
 80106b4:	1a18      	subs	r0, r3, r0
 80106b6:	b003      	add	sp, #12
 80106b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80106be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80106c2:	e7ed      	b.n	80106a0 <__exponent+0x44>
 80106c4:	2330      	movs	r3, #48	@ 0x30
 80106c6:	3130      	adds	r1, #48	@ 0x30
 80106c8:	7083      	strb	r3, [r0, #2]
 80106ca:	70c1      	strb	r1, [r0, #3]
 80106cc:	1d03      	adds	r3, r0, #4
 80106ce:	e7f1      	b.n	80106b4 <__exponent+0x58>

080106d0 <_printf_float>:
 80106d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106d4:	b08d      	sub	sp, #52	@ 0x34
 80106d6:	460c      	mov	r4, r1
 80106d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80106dc:	4616      	mov	r6, r2
 80106de:	461f      	mov	r7, r3
 80106e0:	4605      	mov	r5, r0
 80106e2:	f000 fccb 	bl	801107c <_localeconv_r>
 80106e6:	f8d0 b000 	ldr.w	fp, [r0]
 80106ea:	4658      	mov	r0, fp
 80106ec:	f7ef fe60 	bl	80003b0 <strlen>
 80106f0:	2300      	movs	r3, #0
 80106f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80106f4:	f8d8 3000 	ldr.w	r3, [r8]
 80106f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80106fc:	6822      	ldr	r2, [r4, #0]
 80106fe:	9005      	str	r0, [sp, #20]
 8010700:	3307      	adds	r3, #7
 8010702:	f023 0307 	bic.w	r3, r3, #7
 8010706:	f103 0108 	add.w	r1, r3, #8
 801070a:	f8c8 1000 	str.w	r1, [r8]
 801070e:	ed93 0b00 	vldr	d0, [r3]
 8010712:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8010970 <_printf_float+0x2a0>
 8010716:	eeb0 7bc0 	vabs.f64	d7, d0
 801071a:	eeb4 7b46 	vcmp.f64	d7, d6
 801071e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010722:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8010726:	dd24      	ble.n	8010772 <_printf_float+0xa2>
 8010728:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010730:	d502      	bpl.n	8010738 <_printf_float+0x68>
 8010732:	232d      	movs	r3, #45	@ 0x2d
 8010734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010738:	498f      	ldr	r1, [pc, #572]	@ (8010978 <_printf_float+0x2a8>)
 801073a:	4b90      	ldr	r3, [pc, #576]	@ (801097c <_printf_float+0x2ac>)
 801073c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8010740:	bf94      	ite	ls
 8010742:	4688      	movls	r8, r1
 8010744:	4698      	movhi	r8, r3
 8010746:	f022 0204 	bic.w	r2, r2, #4
 801074a:	2303      	movs	r3, #3
 801074c:	6123      	str	r3, [r4, #16]
 801074e:	6022      	str	r2, [r4, #0]
 8010750:	f04f 0a00 	mov.w	sl, #0
 8010754:	9700      	str	r7, [sp, #0]
 8010756:	4633      	mov	r3, r6
 8010758:	aa0b      	add	r2, sp, #44	@ 0x2c
 801075a:	4621      	mov	r1, r4
 801075c:	4628      	mov	r0, r5
 801075e:	f000 f9d1 	bl	8010b04 <_printf_common>
 8010762:	3001      	adds	r0, #1
 8010764:	f040 8089 	bne.w	801087a <_printf_float+0x1aa>
 8010768:	f04f 30ff 	mov.w	r0, #4294967295
 801076c:	b00d      	add	sp, #52	@ 0x34
 801076e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010772:	eeb4 0b40 	vcmp.f64	d0, d0
 8010776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801077a:	d709      	bvc.n	8010790 <_printf_float+0xc0>
 801077c:	ee10 3a90 	vmov	r3, s1
 8010780:	2b00      	cmp	r3, #0
 8010782:	bfbc      	itt	lt
 8010784:	232d      	movlt	r3, #45	@ 0x2d
 8010786:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801078a:	497d      	ldr	r1, [pc, #500]	@ (8010980 <_printf_float+0x2b0>)
 801078c:	4b7d      	ldr	r3, [pc, #500]	@ (8010984 <_printf_float+0x2b4>)
 801078e:	e7d5      	b.n	801073c <_printf_float+0x6c>
 8010790:	6863      	ldr	r3, [r4, #4]
 8010792:	1c59      	adds	r1, r3, #1
 8010794:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8010798:	d139      	bne.n	801080e <_printf_float+0x13e>
 801079a:	2306      	movs	r3, #6
 801079c:	6063      	str	r3, [r4, #4]
 801079e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80107a2:	2300      	movs	r3, #0
 80107a4:	6022      	str	r2, [r4, #0]
 80107a6:	9303      	str	r3, [sp, #12]
 80107a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80107aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80107ae:	ab09      	add	r3, sp, #36	@ 0x24
 80107b0:	9300      	str	r3, [sp, #0]
 80107b2:	6861      	ldr	r1, [r4, #4]
 80107b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80107b8:	4628      	mov	r0, r5
 80107ba:	f7ff fefb 	bl	80105b4 <__cvt>
 80107be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80107c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80107c4:	4680      	mov	r8, r0
 80107c6:	d129      	bne.n	801081c <_printf_float+0x14c>
 80107c8:	1cc8      	adds	r0, r1, #3
 80107ca:	db02      	blt.n	80107d2 <_printf_float+0x102>
 80107cc:	6863      	ldr	r3, [r4, #4]
 80107ce:	4299      	cmp	r1, r3
 80107d0:	dd41      	ble.n	8010856 <_printf_float+0x186>
 80107d2:	f1a9 0902 	sub.w	r9, r9, #2
 80107d6:	fa5f f989 	uxtb.w	r9, r9
 80107da:	3901      	subs	r1, #1
 80107dc:	464a      	mov	r2, r9
 80107de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80107e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80107e4:	f7ff ff3a 	bl	801065c <__exponent>
 80107e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80107ea:	1813      	adds	r3, r2, r0
 80107ec:	2a01      	cmp	r2, #1
 80107ee:	4682      	mov	sl, r0
 80107f0:	6123      	str	r3, [r4, #16]
 80107f2:	dc02      	bgt.n	80107fa <_printf_float+0x12a>
 80107f4:	6822      	ldr	r2, [r4, #0]
 80107f6:	07d2      	lsls	r2, r2, #31
 80107f8:	d501      	bpl.n	80107fe <_printf_float+0x12e>
 80107fa:	3301      	adds	r3, #1
 80107fc:	6123      	str	r3, [r4, #16]
 80107fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010802:	2b00      	cmp	r3, #0
 8010804:	d0a6      	beq.n	8010754 <_printf_float+0x84>
 8010806:	232d      	movs	r3, #45	@ 0x2d
 8010808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801080c:	e7a2      	b.n	8010754 <_printf_float+0x84>
 801080e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010812:	d1c4      	bne.n	801079e <_printf_float+0xce>
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1c2      	bne.n	801079e <_printf_float+0xce>
 8010818:	2301      	movs	r3, #1
 801081a:	e7bf      	b.n	801079c <_printf_float+0xcc>
 801081c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010820:	d9db      	bls.n	80107da <_printf_float+0x10a>
 8010822:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8010826:	d118      	bne.n	801085a <_printf_float+0x18a>
 8010828:	2900      	cmp	r1, #0
 801082a:	6863      	ldr	r3, [r4, #4]
 801082c:	dd0b      	ble.n	8010846 <_printf_float+0x176>
 801082e:	6121      	str	r1, [r4, #16]
 8010830:	b913      	cbnz	r3, 8010838 <_printf_float+0x168>
 8010832:	6822      	ldr	r2, [r4, #0]
 8010834:	07d0      	lsls	r0, r2, #31
 8010836:	d502      	bpl.n	801083e <_printf_float+0x16e>
 8010838:	3301      	adds	r3, #1
 801083a:	440b      	add	r3, r1
 801083c:	6123      	str	r3, [r4, #16]
 801083e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8010840:	f04f 0a00 	mov.w	sl, #0
 8010844:	e7db      	b.n	80107fe <_printf_float+0x12e>
 8010846:	b913      	cbnz	r3, 801084e <_printf_float+0x17e>
 8010848:	6822      	ldr	r2, [r4, #0]
 801084a:	07d2      	lsls	r2, r2, #31
 801084c:	d501      	bpl.n	8010852 <_printf_float+0x182>
 801084e:	3302      	adds	r3, #2
 8010850:	e7f4      	b.n	801083c <_printf_float+0x16c>
 8010852:	2301      	movs	r3, #1
 8010854:	e7f2      	b.n	801083c <_printf_float+0x16c>
 8010856:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801085a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801085c:	4299      	cmp	r1, r3
 801085e:	db05      	blt.n	801086c <_printf_float+0x19c>
 8010860:	6823      	ldr	r3, [r4, #0]
 8010862:	6121      	str	r1, [r4, #16]
 8010864:	07d8      	lsls	r0, r3, #31
 8010866:	d5ea      	bpl.n	801083e <_printf_float+0x16e>
 8010868:	1c4b      	adds	r3, r1, #1
 801086a:	e7e7      	b.n	801083c <_printf_float+0x16c>
 801086c:	2900      	cmp	r1, #0
 801086e:	bfd4      	ite	le
 8010870:	f1c1 0202 	rsble	r2, r1, #2
 8010874:	2201      	movgt	r2, #1
 8010876:	4413      	add	r3, r2
 8010878:	e7e0      	b.n	801083c <_printf_float+0x16c>
 801087a:	6823      	ldr	r3, [r4, #0]
 801087c:	055a      	lsls	r2, r3, #21
 801087e:	d407      	bmi.n	8010890 <_printf_float+0x1c0>
 8010880:	6923      	ldr	r3, [r4, #16]
 8010882:	4642      	mov	r2, r8
 8010884:	4631      	mov	r1, r6
 8010886:	4628      	mov	r0, r5
 8010888:	47b8      	blx	r7
 801088a:	3001      	adds	r0, #1
 801088c:	d12a      	bne.n	80108e4 <_printf_float+0x214>
 801088e:	e76b      	b.n	8010768 <_printf_float+0x98>
 8010890:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8010894:	f240 80e0 	bls.w	8010a58 <_printf_float+0x388>
 8010898:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801089c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80108a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108a4:	d133      	bne.n	801090e <_printf_float+0x23e>
 80108a6:	4a38      	ldr	r2, [pc, #224]	@ (8010988 <_printf_float+0x2b8>)
 80108a8:	2301      	movs	r3, #1
 80108aa:	4631      	mov	r1, r6
 80108ac:	4628      	mov	r0, r5
 80108ae:	47b8      	blx	r7
 80108b0:	3001      	adds	r0, #1
 80108b2:	f43f af59 	beq.w	8010768 <_printf_float+0x98>
 80108b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80108ba:	4543      	cmp	r3, r8
 80108bc:	db02      	blt.n	80108c4 <_printf_float+0x1f4>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	07d8      	lsls	r0, r3, #31
 80108c2:	d50f      	bpl.n	80108e4 <_printf_float+0x214>
 80108c4:	9b05      	ldr	r3, [sp, #20]
 80108c6:	465a      	mov	r2, fp
 80108c8:	4631      	mov	r1, r6
 80108ca:	4628      	mov	r0, r5
 80108cc:	47b8      	blx	r7
 80108ce:	3001      	adds	r0, #1
 80108d0:	f43f af4a 	beq.w	8010768 <_printf_float+0x98>
 80108d4:	f04f 0900 	mov.w	r9, #0
 80108d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80108dc:	f104 0a1a 	add.w	sl, r4, #26
 80108e0:	45c8      	cmp	r8, r9
 80108e2:	dc09      	bgt.n	80108f8 <_printf_float+0x228>
 80108e4:	6823      	ldr	r3, [r4, #0]
 80108e6:	079b      	lsls	r3, r3, #30
 80108e8:	f100 8107 	bmi.w	8010afa <_printf_float+0x42a>
 80108ec:	68e0      	ldr	r0, [r4, #12]
 80108ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108f0:	4298      	cmp	r0, r3
 80108f2:	bfb8      	it	lt
 80108f4:	4618      	movlt	r0, r3
 80108f6:	e739      	b.n	801076c <_printf_float+0x9c>
 80108f8:	2301      	movs	r3, #1
 80108fa:	4652      	mov	r2, sl
 80108fc:	4631      	mov	r1, r6
 80108fe:	4628      	mov	r0, r5
 8010900:	47b8      	blx	r7
 8010902:	3001      	adds	r0, #1
 8010904:	f43f af30 	beq.w	8010768 <_printf_float+0x98>
 8010908:	f109 0901 	add.w	r9, r9, #1
 801090c:	e7e8      	b.n	80108e0 <_printf_float+0x210>
 801090e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010910:	2b00      	cmp	r3, #0
 8010912:	dc3b      	bgt.n	801098c <_printf_float+0x2bc>
 8010914:	4a1c      	ldr	r2, [pc, #112]	@ (8010988 <_printf_float+0x2b8>)
 8010916:	2301      	movs	r3, #1
 8010918:	4631      	mov	r1, r6
 801091a:	4628      	mov	r0, r5
 801091c:	47b8      	blx	r7
 801091e:	3001      	adds	r0, #1
 8010920:	f43f af22 	beq.w	8010768 <_printf_float+0x98>
 8010924:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010928:	ea59 0303 	orrs.w	r3, r9, r3
 801092c:	d102      	bne.n	8010934 <_printf_float+0x264>
 801092e:	6823      	ldr	r3, [r4, #0]
 8010930:	07d9      	lsls	r1, r3, #31
 8010932:	d5d7      	bpl.n	80108e4 <_printf_float+0x214>
 8010934:	9b05      	ldr	r3, [sp, #20]
 8010936:	465a      	mov	r2, fp
 8010938:	4631      	mov	r1, r6
 801093a:	4628      	mov	r0, r5
 801093c:	47b8      	blx	r7
 801093e:	3001      	adds	r0, #1
 8010940:	f43f af12 	beq.w	8010768 <_printf_float+0x98>
 8010944:	f04f 0a00 	mov.w	sl, #0
 8010948:	f104 0b1a 	add.w	fp, r4, #26
 801094c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801094e:	425b      	negs	r3, r3
 8010950:	4553      	cmp	r3, sl
 8010952:	dc01      	bgt.n	8010958 <_printf_float+0x288>
 8010954:	464b      	mov	r3, r9
 8010956:	e794      	b.n	8010882 <_printf_float+0x1b2>
 8010958:	2301      	movs	r3, #1
 801095a:	465a      	mov	r2, fp
 801095c:	4631      	mov	r1, r6
 801095e:	4628      	mov	r0, r5
 8010960:	47b8      	blx	r7
 8010962:	3001      	adds	r0, #1
 8010964:	f43f af00 	beq.w	8010768 <_printf_float+0x98>
 8010968:	f10a 0a01 	add.w	sl, sl, #1
 801096c:	e7ee      	b.n	801094c <_printf_float+0x27c>
 801096e:	bf00      	nop
 8010970:	ffffffff 	.word	0xffffffff
 8010974:	7fefffff 	.word	0x7fefffff
 8010978:	0801335b 	.word	0x0801335b
 801097c:	0801335f 	.word	0x0801335f
 8010980:	08013363 	.word	0x08013363
 8010984:	08013367 	.word	0x08013367
 8010988:	0801336b 	.word	0x0801336b
 801098c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801098e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010992:	4553      	cmp	r3, sl
 8010994:	bfa8      	it	ge
 8010996:	4653      	movge	r3, sl
 8010998:	2b00      	cmp	r3, #0
 801099a:	4699      	mov	r9, r3
 801099c:	dc37      	bgt.n	8010a0e <_printf_float+0x33e>
 801099e:	2300      	movs	r3, #0
 80109a0:	9307      	str	r3, [sp, #28]
 80109a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109a6:	f104 021a 	add.w	r2, r4, #26
 80109aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80109ac:	9907      	ldr	r1, [sp, #28]
 80109ae:	9306      	str	r3, [sp, #24]
 80109b0:	eba3 0309 	sub.w	r3, r3, r9
 80109b4:	428b      	cmp	r3, r1
 80109b6:	dc31      	bgt.n	8010a1c <_printf_float+0x34c>
 80109b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ba:	459a      	cmp	sl, r3
 80109bc:	dc3b      	bgt.n	8010a36 <_printf_float+0x366>
 80109be:	6823      	ldr	r3, [r4, #0]
 80109c0:	07da      	lsls	r2, r3, #31
 80109c2:	d438      	bmi.n	8010a36 <_printf_float+0x366>
 80109c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c6:	ebaa 0903 	sub.w	r9, sl, r3
 80109ca:	9b06      	ldr	r3, [sp, #24]
 80109cc:	ebaa 0303 	sub.w	r3, sl, r3
 80109d0:	4599      	cmp	r9, r3
 80109d2:	bfa8      	it	ge
 80109d4:	4699      	movge	r9, r3
 80109d6:	f1b9 0f00 	cmp.w	r9, #0
 80109da:	dc34      	bgt.n	8010a46 <_printf_float+0x376>
 80109dc:	f04f 0800 	mov.w	r8, #0
 80109e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109e4:	f104 0b1a 	add.w	fp, r4, #26
 80109e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ea:	ebaa 0303 	sub.w	r3, sl, r3
 80109ee:	eba3 0309 	sub.w	r3, r3, r9
 80109f2:	4543      	cmp	r3, r8
 80109f4:	f77f af76 	ble.w	80108e4 <_printf_float+0x214>
 80109f8:	2301      	movs	r3, #1
 80109fa:	465a      	mov	r2, fp
 80109fc:	4631      	mov	r1, r6
 80109fe:	4628      	mov	r0, r5
 8010a00:	47b8      	blx	r7
 8010a02:	3001      	adds	r0, #1
 8010a04:	f43f aeb0 	beq.w	8010768 <_printf_float+0x98>
 8010a08:	f108 0801 	add.w	r8, r8, #1
 8010a0c:	e7ec      	b.n	80109e8 <_printf_float+0x318>
 8010a0e:	4642      	mov	r2, r8
 8010a10:	4631      	mov	r1, r6
 8010a12:	4628      	mov	r0, r5
 8010a14:	47b8      	blx	r7
 8010a16:	3001      	adds	r0, #1
 8010a18:	d1c1      	bne.n	801099e <_printf_float+0x2ce>
 8010a1a:	e6a5      	b.n	8010768 <_printf_float+0x98>
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	4631      	mov	r1, r6
 8010a20:	4628      	mov	r0, r5
 8010a22:	9206      	str	r2, [sp, #24]
 8010a24:	47b8      	blx	r7
 8010a26:	3001      	adds	r0, #1
 8010a28:	f43f ae9e 	beq.w	8010768 <_printf_float+0x98>
 8010a2c:	9b07      	ldr	r3, [sp, #28]
 8010a2e:	9a06      	ldr	r2, [sp, #24]
 8010a30:	3301      	adds	r3, #1
 8010a32:	9307      	str	r3, [sp, #28]
 8010a34:	e7b9      	b.n	80109aa <_printf_float+0x2da>
 8010a36:	9b05      	ldr	r3, [sp, #20]
 8010a38:	465a      	mov	r2, fp
 8010a3a:	4631      	mov	r1, r6
 8010a3c:	4628      	mov	r0, r5
 8010a3e:	47b8      	blx	r7
 8010a40:	3001      	adds	r0, #1
 8010a42:	d1bf      	bne.n	80109c4 <_printf_float+0x2f4>
 8010a44:	e690      	b.n	8010768 <_printf_float+0x98>
 8010a46:	9a06      	ldr	r2, [sp, #24]
 8010a48:	464b      	mov	r3, r9
 8010a4a:	4442      	add	r2, r8
 8010a4c:	4631      	mov	r1, r6
 8010a4e:	4628      	mov	r0, r5
 8010a50:	47b8      	blx	r7
 8010a52:	3001      	adds	r0, #1
 8010a54:	d1c2      	bne.n	80109dc <_printf_float+0x30c>
 8010a56:	e687      	b.n	8010768 <_printf_float+0x98>
 8010a58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8010a5c:	f1b9 0f01 	cmp.w	r9, #1
 8010a60:	dc01      	bgt.n	8010a66 <_printf_float+0x396>
 8010a62:	07db      	lsls	r3, r3, #31
 8010a64:	d536      	bpl.n	8010ad4 <_printf_float+0x404>
 8010a66:	2301      	movs	r3, #1
 8010a68:	4642      	mov	r2, r8
 8010a6a:	4631      	mov	r1, r6
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	47b8      	blx	r7
 8010a70:	3001      	adds	r0, #1
 8010a72:	f43f ae79 	beq.w	8010768 <_printf_float+0x98>
 8010a76:	9b05      	ldr	r3, [sp, #20]
 8010a78:	465a      	mov	r2, fp
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	47b8      	blx	r7
 8010a80:	3001      	adds	r0, #1
 8010a82:	f43f ae71 	beq.w	8010768 <_printf_float+0x98>
 8010a86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8010a8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a92:	f109 39ff 	add.w	r9, r9, #4294967295
 8010a96:	d018      	beq.n	8010aca <_printf_float+0x3fa>
 8010a98:	464b      	mov	r3, r9
 8010a9a:	f108 0201 	add.w	r2, r8, #1
 8010a9e:	4631      	mov	r1, r6
 8010aa0:	4628      	mov	r0, r5
 8010aa2:	47b8      	blx	r7
 8010aa4:	3001      	adds	r0, #1
 8010aa6:	d10c      	bne.n	8010ac2 <_printf_float+0x3f2>
 8010aa8:	e65e      	b.n	8010768 <_printf_float+0x98>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	465a      	mov	r2, fp
 8010aae:	4631      	mov	r1, r6
 8010ab0:	4628      	mov	r0, r5
 8010ab2:	47b8      	blx	r7
 8010ab4:	3001      	adds	r0, #1
 8010ab6:	f43f ae57 	beq.w	8010768 <_printf_float+0x98>
 8010aba:	f108 0801 	add.w	r8, r8, #1
 8010abe:	45c8      	cmp	r8, r9
 8010ac0:	dbf3      	blt.n	8010aaa <_printf_float+0x3da>
 8010ac2:	4653      	mov	r3, sl
 8010ac4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010ac8:	e6dc      	b.n	8010884 <_printf_float+0x1b4>
 8010aca:	f04f 0800 	mov.w	r8, #0
 8010ace:	f104 0b1a 	add.w	fp, r4, #26
 8010ad2:	e7f4      	b.n	8010abe <_printf_float+0x3ee>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	4642      	mov	r2, r8
 8010ad8:	e7e1      	b.n	8010a9e <_printf_float+0x3ce>
 8010ada:	2301      	movs	r3, #1
 8010adc:	464a      	mov	r2, r9
 8010ade:	4631      	mov	r1, r6
 8010ae0:	4628      	mov	r0, r5
 8010ae2:	47b8      	blx	r7
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	f43f ae3f 	beq.w	8010768 <_printf_float+0x98>
 8010aea:	f108 0801 	add.w	r8, r8, #1
 8010aee:	68e3      	ldr	r3, [r4, #12]
 8010af0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010af2:	1a5b      	subs	r3, r3, r1
 8010af4:	4543      	cmp	r3, r8
 8010af6:	dcf0      	bgt.n	8010ada <_printf_float+0x40a>
 8010af8:	e6f8      	b.n	80108ec <_printf_float+0x21c>
 8010afa:	f04f 0800 	mov.w	r8, #0
 8010afe:	f104 0919 	add.w	r9, r4, #25
 8010b02:	e7f4      	b.n	8010aee <_printf_float+0x41e>

08010b04 <_printf_common>:
 8010b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b08:	4616      	mov	r6, r2
 8010b0a:	4698      	mov	r8, r3
 8010b0c:	688a      	ldr	r2, [r1, #8]
 8010b0e:	690b      	ldr	r3, [r1, #16]
 8010b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010b14:	4293      	cmp	r3, r2
 8010b16:	bfb8      	it	lt
 8010b18:	4613      	movlt	r3, r2
 8010b1a:	6033      	str	r3, [r6, #0]
 8010b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010b20:	4607      	mov	r7, r0
 8010b22:	460c      	mov	r4, r1
 8010b24:	b10a      	cbz	r2, 8010b2a <_printf_common+0x26>
 8010b26:	3301      	adds	r3, #1
 8010b28:	6033      	str	r3, [r6, #0]
 8010b2a:	6823      	ldr	r3, [r4, #0]
 8010b2c:	0699      	lsls	r1, r3, #26
 8010b2e:	bf42      	ittt	mi
 8010b30:	6833      	ldrmi	r3, [r6, #0]
 8010b32:	3302      	addmi	r3, #2
 8010b34:	6033      	strmi	r3, [r6, #0]
 8010b36:	6825      	ldr	r5, [r4, #0]
 8010b38:	f015 0506 	ands.w	r5, r5, #6
 8010b3c:	d106      	bne.n	8010b4c <_printf_common+0x48>
 8010b3e:	f104 0a19 	add.w	sl, r4, #25
 8010b42:	68e3      	ldr	r3, [r4, #12]
 8010b44:	6832      	ldr	r2, [r6, #0]
 8010b46:	1a9b      	subs	r3, r3, r2
 8010b48:	42ab      	cmp	r3, r5
 8010b4a:	dc26      	bgt.n	8010b9a <_printf_common+0x96>
 8010b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010b50:	6822      	ldr	r2, [r4, #0]
 8010b52:	3b00      	subs	r3, #0
 8010b54:	bf18      	it	ne
 8010b56:	2301      	movne	r3, #1
 8010b58:	0692      	lsls	r2, r2, #26
 8010b5a:	d42b      	bmi.n	8010bb4 <_printf_common+0xb0>
 8010b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010b60:	4641      	mov	r1, r8
 8010b62:	4638      	mov	r0, r7
 8010b64:	47c8      	blx	r9
 8010b66:	3001      	adds	r0, #1
 8010b68:	d01e      	beq.n	8010ba8 <_printf_common+0xa4>
 8010b6a:	6823      	ldr	r3, [r4, #0]
 8010b6c:	6922      	ldr	r2, [r4, #16]
 8010b6e:	f003 0306 	and.w	r3, r3, #6
 8010b72:	2b04      	cmp	r3, #4
 8010b74:	bf02      	ittt	eq
 8010b76:	68e5      	ldreq	r5, [r4, #12]
 8010b78:	6833      	ldreq	r3, [r6, #0]
 8010b7a:	1aed      	subeq	r5, r5, r3
 8010b7c:	68a3      	ldr	r3, [r4, #8]
 8010b7e:	bf0c      	ite	eq
 8010b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b84:	2500      	movne	r5, #0
 8010b86:	4293      	cmp	r3, r2
 8010b88:	bfc4      	itt	gt
 8010b8a:	1a9b      	subgt	r3, r3, r2
 8010b8c:	18ed      	addgt	r5, r5, r3
 8010b8e:	2600      	movs	r6, #0
 8010b90:	341a      	adds	r4, #26
 8010b92:	42b5      	cmp	r5, r6
 8010b94:	d11a      	bne.n	8010bcc <_printf_common+0xc8>
 8010b96:	2000      	movs	r0, #0
 8010b98:	e008      	b.n	8010bac <_printf_common+0xa8>
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	4652      	mov	r2, sl
 8010b9e:	4641      	mov	r1, r8
 8010ba0:	4638      	mov	r0, r7
 8010ba2:	47c8      	blx	r9
 8010ba4:	3001      	adds	r0, #1
 8010ba6:	d103      	bne.n	8010bb0 <_printf_common+0xac>
 8010ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bb0:	3501      	adds	r5, #1
 8010bb2:	e7c6      	b.n	8010b42 <_printf_common+0x3e>
 8010bb4:	18e1      	adds	r1, r4, r3
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	2030      	movs	r0, #48	@ 0x30
 8010bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010bbe:	4422      	add	r2, r4
 8010bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010bc8:	3302      	adds	r3, #2
 8010bca:	e7c7      	b.n	8010b5c <_printf_common+0x58>
 8010bcc:	2301      	movs	r3, #1
 8010bce:	4622      	mov	r2, r4
 8010bd0:	4641      	mov	r1, r8
 8010bd2:	4638      	mov	r0, r7
 8010bd4:	47c8      	blx	r9
 8010bd6:	3001      	adds	r0, #1
 8010bd8:	d0e6      	beq.n	8010ba8 <_printf_common+0xa4>
 8010bda:	3601      	adds	r6, #1
 8010bdc:	e7d9      	b.n	8010b92 <_printf_common+0x8e>
	...

08010be0 <_printf_i>:
 8010be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010be4:	7e0f      	ldrb	r7, [r1, #24]
 8010be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010be8:	2f78      	cmp	r7, #120	@ 0x78
 8010bea:	4691      	mov	r9, r2
 8010bec:	4680      	mov	r8, r0
 8010bee:	460c      	mov	r4, r1
 8010bf0:	469a      	mov	sl, r3
 8010bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010bf6:	d807      	bhi.n	8010c08 <_printf_i+0x28>
 8010bf8:	2f62      	cmp	r7, #98	@ 0x62
 8010bfa:	d80a      	bhi.n	8010c12 <_printf_i+0x32>
 8010bfc:	2f00      	cmp	r7, #0
 8010bfe:	f000 80d2 	beq.w	8010da6 <_printf_i+0x1c6>
 8010c02:	2f58      	cmp	r7, #88	@ 0x58
 8010c04:	f000 80b9 	beq.w	8010d7a <_printf_i+0x19a>
 8010c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010c10:	e03a      	b.n	8010c88 <_printf_i+0xa8>
 8010c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010c16:	2b15      	cmp	r3, #21
 8010c18:	d8f6      	bhi.n	8010c08 <_printf_i+0x28>
 8010c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8010c20 <_printf_i+0x40>)
 8010c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010c20:	08010c79 	.word	0x08010c79
 8010c24:	08010c8d 	.word	0x08010c8d
 8010c28:	08010c09 	.word	0x08010c09
 8010c2c:	08010c09 	.word	0x08010c09
 8010c30:	08010c09 	.word	0x08010c09
 8010c34:	08010c09 	.word	0x08010c09
 8010c38:	08010c8d 	.word	0x08010c8d
 8010c3c:	08010c09 	.word	0x08010c09
 8010c40:	08010c09 	.word	0x08010c09
 8010c44:	08010c09 	.word	0x08010c09
 8010c48:	08010c09 	.word	0x08010c09
 8010c4c:	08010d8d 	.word	0x08010d8d
 8010c50:	08010cb7 	.word	0x08010cb7
 8010c54:	08010d47 	.word	0x08010d47
 8010c58:	08010c09 	.word	0x08010c09
 8010c5c:	08010c09 	.word	0x08010c09
 8010c60:	08010daf 	.word	0x08010daf
 8010c64:	08010c09 	.word	0x08010c09
 8010c68:	08010cb7 	.word	0x08010cb7
 8010c6c:	08010c09 	.word	0x08010c09
 8010c70:	08010c09 	.word	0x08010c09
 8010c74:	08010d4f 	.word	0x08010d4f
 8010c78:	6833      	ldr	r3, [r6, #0]
 8010c7a:	1d1a      	adds	r2, r3, #4
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6032      	str	r2, [r6, #0]
 8010c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010c88:	2301      	movs	r3, #1
 8010c8a:	e09d      	b.n	8010dc8 <_printf_i+0x1e8>
 8010c8c:	6833      	ldr	r3, [r6, #0]
 8010c8e:	6820      	ldr	r0, [r4, #0]
 8010c90:	1d19      	adds	r1, r3, #4
 8010c92:	6031      	str	r1, [r6, #0]
 8010c94:	0606      	lsls	r6, r0, #24
 8010c96:	d501      	bpl.n	8010c9c <_printf_i+0xbc>
 8010c98:	681d      	ldr	r5, [r3, #0]
 8010c9a:	e003      	b.n	8010ca4 <_printf_i+0xc4>
 8010c9c:	0645      	lsls	r5, r0, #25
 8010c9e:	d5fb      	bpl.n	8010c98 <_printf_i+0xb8>
 8010ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010ca4:	2d00      	cmp	r5, #0
 8010ca6:	da03      	bge.n	8010cb0 <_printf_i+0xd0>
 8010ca8:	232d      	movs	r3, #45	@ 0x2d
 8010caa:	426d      	negs	r5, r5
 8010cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010cb0:	4859      	ldr	r0, [pc, #356]	@ (8010e18 <_printf_i+0x238>)
 8010cb2:	230a      	movs	r3, #10
 8010cb4:	e011      	b.n	8010cda <_printf_i+0xfa>
 8010cb6:	6821      	ldr	r1, [r4, #0]
 8010cb8:	6833      	ldr	r3, [r6, #0]
 8010cba:	0608      	lsls	r0, r1, #24
 8010cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8010cc0:	d402      	bmi.n	8010cc8 <_printf_i+0xe8>
 8010cc2:	0649      	lsls	r1, r1, #25
 8010cc4:	bf48      	it	mi
 8010cc6:	b2ad      	uxthmi	r5, r5
 8010cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8010cca:	4853      	ldr	r0, [pc, #332]	@ (8010e18 <_printf_i+0x238>)
 8010ccc:	6033      	str	r3, [r6, #0]
 8010cce:	bf14      	ite	ne
 8010cd0:	230a      	movne	r3, #10
 8010cd2:	2308      	moveq	r3, #8
 8010cd4:	2100      	movs	r1, #0
 8010cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010cda:	6866      	ldr	r6, [r4, #4]
 8010cdc:	60a6      	str	r6, [r4, #8]
 8010cde:	2e00      	cmp	r6, #0
 8010ce0:	bfa2      	ittt	ge
 8010ce2:	6821      	ldrge	r1, [r4, #0]
 8010ce4:	f021 0104 	bicge.w	r1, r1, #4
 8010ce8:	6021      	strge	r1, [r4, #0]
 8010cea:	b90d      	cbnz	r5, 8010cf0 <_printf_i+0x110>
 8010cec:	2e00      	cmp	r6, #0
 8010cee:	d04b      	beq.n	8010d88 <_printf_i+0x1a8>
 8010cf0:	4616      	mov	r6, r2
 8010cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8010cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8010cfa:	5dc7      	ldrb	r7, [r0, r7]
 8010cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d00:	462f      	mov	r7, r5
 8010d02:	42bb      	cmp	r3, r7
 8010d04:	460d      	mov	r5, r1
 8010d06:	d9f4      	bls.n	8010cf2 <_printf_i+0x112>
 8010d08:	2b08      	cmp	r3, #8
 8010d0a:	d10b      	bne.n	8010d24 <_printf_i+0x144>
 8010d0c:	6823      	ldr	r3, [r4, #0]
 8010d0e:	07df      	lsls	r7, r3, #31
 8010d10:	d508      	bpl.n	8010d24 <_printf_i+0x144>
 8010d12:	6923      	ldr	r3, [r4, #16]
 8010d14:	6861      	ldr	r1, [r4, #4]
 8010d16:	4299      	cmp	r1, r3
 8010d18:	bfde      	ittt	le
 8010d1a:	2330      	movle	r3, #48	@ 0x30
 8010d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010d24:	1b92      	subs	r2, r2, r6
 8010d26:	6122      	str	r2, [r4, #16]
 8010d28:	f8cd a000 	str.w	sl, [sp]
 8010d2c:	464b      	mov	r3, r9
 8010d2e:	aa03      	add	r2, sp, #12
 8010d30:	4621      	mov	r1, r4
 8010d32:	4640      	mov	r0, r8
 8010d34:	f7ff fee6 	bl	8010b04 <_printf_common>
 8010d38:	3001      	adds	r0, #1
 8010d3a:	d14a      	bne.n	8010dd2 <_printf_i+0x1f2>
 8010d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d40:	b004      	add	sp, #16
 8010d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d46:	6823      	ldr	r3, [r4, #0]
 8010d48:	f043 0320 	orr.w	r3, r3, #32
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	4833      	ldr	r0, [pc, #204]	@ (8010e1c <_printf_i+0x23c>)
 8010d50:	2778      	movs	r7, #120	@ 0x78
 8010d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	6831      	ldr	r1, [r6, #0]
 8010d5a:	061f      	lsls	r7, r3, #24
 8010d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8010d60:	d402      	bmi.n	8010d68 <_printf_i+0x188>
 8010d62:	065f      	lsls	r7, r3, #25
 8010d64:	bf48      	it	mi
 8010d66:	b2ad      	uxthmi	r5, r5
 8010d68:	6031      	str	r1, [r6, #0]
 8010d6a:	07d9      	lsls	r1, r3, #31
 8010d6c:	bf44      	itt	mi
 8010d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8010d72:	6023      	strmi	r3, [r4, #0]
 8010d74:	b11d      	cbz	r5, 8010d7e <_printf_i+0x19e>
 8010d76:	2310      	movs	r3, #16
 8010d78:	e7ac      	b.n	8010cd4 <_printf_i+0xf4>
 8010d7a:	4827      	ldr	r0, [pc, #156]	@ (8010e18 <_printf_i+0x238>)
 8010d7c:	e7e9      	b.n	8010d52 <_printf_i+0x172>
 8010d7e:	6823      	ldr	r3, [r4, #0]
 8010d80:	f023 0320 	bic.w	r3, r3, #32
 8010d84:	6023      	str	r3, [r4, #0]
 8010d86:	e7f6      	b.n	8010d76 <_printf_i+0x196>
 8010d88:	4616      	mov	r6, r2
 8010d8a:	e7bd      	b.n	8010d08 <_printf_i+0x128>
 8010d8c:	6833      	ldr	r3, [r6, #0]
 8010d8e:	6825      	ldr	r5, [r4, #0]
 8010d90:	6961      	ldr	r1, [r4, #20]
 8010d92:	1d18      	adds	r0, r3, #4
 8010d94:	6030      	str	r0, [r6, #0]
 8010d96:	062e      	lsls	r6, r5, #24
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	d501      	bpl.n	8010da0 <_printf_i+0x1c0>
 8010d9c:	6019      	str	r1, [r3, #0]
 8010d9e:	e002      	b.n	8010da6 <_printf_i+0x1c6>
 8010da0:	0668      	lsls	r0, r5, #25
 8010da2:	d5fb      	bpl.n	8010d9c <_printf_i+0x1bc>
 8010da4:	8019      	strh	r1, [r3, #0]
 8010da6:	2300      	movs	r3, #0
 8010da8:	6123      	str	r3, [r4, #16]
 8010daa:	4616      	mov	r6, r2
 8010dac:	e7bc      	b.n	8010d28 <_printf_i+0x148>
 8010dae:	6833      	ldr	r3, [r6, #0]
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	6032      	str	r2, [r6, #0]
 8010db4:	681e      	ldr	r6, [r3, #0]
 8010db6:	6862      	ldr	r2, [r4, #4]
 8010db8:	2100      	movs	r1, #0
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f7ef faa8 	bl	8000310 <memchr>
 8010dc0:	b108      	cbz	r0, 8010dc6 <_printf_i+0x1e6>
 8010dc2:	1b80      	subs	r0, r0, r6
 8010dc4:	6060      	str	r0, [r4, #4]
 8010dc6:	6863      	ldr	r3, [r4, #4]
 8010dc8:	6123      	str	r3, [r4, #16]
 8010dca:	2300      	movs	r3, #0
 8010dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010dd0:	e7aa      	b.n	8010d28 <_printf_i+0x148>
 8010dd2:	6923      	ldr	r3, [r4, #16]
 8010dd4:	4632      	mov	r2, r6
 8010dd6:	4649      	mov	r1, r9
 8010dd8:	4640      	mov	r0, r8
 8010dda:	47d0      	blx	sl
 8010ddc:	3001      	adds	r0, #1
 8010dde:	d0ad      	beq.n	8010d3c <_printf_i+0x15c>
 8010de0:	6823      	ldr	r3, [r4, #0]
 8010de2:	079b      	lsls	r3, r3, #30
 8010de4:	d413      	bmi.n	8010e0e <_printf_i+0x22e>
 8010de6:	68e0      	ldr	r0, [r4, #12]
 8010de8:	9b03      	ldr	r3, [sp, #12]
 8010dea:	4298      	cmp	r0, r3
 8010dec:	bfb8      	it	lt
 8010dee:	4618      	movlt	r0, r3
 8010df0:	e7a6      	b.n	8010d40 <_printf_i+0x160>
 8010df2:	2301      	movs	r3, #1
 8010df4:	4632      	mov	r2, r6
 8010df6:	4649      	mov	r1, r9
 8010df8:	4640      	mov	r0, r8
 8010dfa:	47d0      	blx	sl
 8010dfc:	3001      	adds	r0, #1
 8010dfe:	d09d      	beq.n	8010d3c <_printf_i+0x15c>
 8010e00:	3501      	adds	r5, #1
 8010e02:	68e3      	ldr	r3, [r4, #12]
 8010e04:	9903      	ldr	r1, [sp, #12]
 8010e06:	1a5b      	subs	r3, r3, r1
 8010e08:	42ab      	cmp	r3, r5
 8010e0a:	dcf2      	bgt.n	8010df2 <_printf_i+0x212>
 8010e0c:	e7eb      	b.n	8010de6 <_printf_i+0x206>
 8010e0e:	2500      	movs	r5, #0
 8010e10:	f104 0619 	add.w	r6, r4, #25
 8010e14:	e7f5      	b.n	8010e02 <_printf_i+0x222>
 8010e16:	bf00      	nop
 8010e18:	0801336d 	.word	0x0801336d
 8010e1c:	0801337e 	.word	0x0801337e

08010e20 <std>:
 8010e20:	2300      	movs	r3, #0
 8010e22:	b510      	push	{r4, lr}
 8010e24:	4604      	mov	r4, r0
 8010e26:	e9c0 3300 	strd	r3, r3, [r0]
 8010e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e2e:	6083      	str	r3, [r0, #8]
 8010e30:	8181      	strh	r1, [r0, #12]
 8010e32:	6643      	str	r3, [r0, #100]	@ 0x64
 8010e34:	81c2      	strh	r2, [r0, #14]
 8010e36:	6183      	str	r3, [r0, #24]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	2208      	movs	r2, #8
 8010e3c:	305c      	adds	r0, #92	@ 0x5c
 8010e3e:	f000 f914 	bl	801106a <memset>
 8010e42:	4b0d      	ldr	r3, [pc, #52]	@ (8010e78 <std+0x58>)
 8010e44:	6263      	str	r3, [r4, #36]	@ 0x24
 8010e46:	4b0d      	ldr	r3, [pc, #52]	@ (8010e7c <std+0x5c>)
 8010e48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8010e80 <std+0x60>)
 8010e4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8010e84 <std+0x64>)
 8010e50:	6323      	str	r3, [r4, #48]	@ 0x30
 8010e52:	4b0d      	ldr	r3, [pc, #52]	@ (8010e88 <std+0x68>)
 8010e54:	6224      	str	r4, [r4, #32]
 8010e56:	429c      	cmp	r4, r3
 8010e58:	d006      	beq.n	8010e68 <std+0x48>
 8010e5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010e5e:	4294      	cmp	r4, r2
 8010e60:	d002      	beq.n	8010e68 <std+0x48>
 8010e62:	33d0      	adds	r3, #208	@ 0xd0
 8010e64:	429c      	cmp	r4, r3
 8010e66:	d105      	bne.n	8010e74 <std+0x54>
 8010e68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e70:	f000 b9ce 	b.w	8011210 <__retarget_lock_init_recursive>
 8010e74:	bd10      	pop	{r4, pc}
 8010e76:	bf00      	nop
 8010e78:	08010fe5 	.word	0x08010fe5
 8010e7c:	08011007 	.word	0x08011007
 8010e80:	0801103f 	.word	0x0801103f
 8010e84:	08011063 	.word	0x08011063
 8010e88:	240055bc 	.word	0x240055bc

08010e8c <stdio_exit_handler>:
 8010e8c:	4a02      	ldr	r2, [pc, #8]	@ (8010e98 <stdio_exit_handler+0xc>)
 8010e8e:	4903      	ldr	r1, [pc, #12]	@ (8010e9c <stdio_exit_handler+0x10>)
 8010e90:	4803      	ldr	r0, [pc, #12]	@ (8010ea0 <stdio_exit_handler+0x14>)
 8010e92:	f000 b869 	b.w	8010f68 <_fwalk_sglue>
 8010e96:	bf00      	nop
 8010e98:	24000014 	.word	0x24000014
 8010e9c:	08012ae9 	.word	0x08012ae9
 8010ea0:	24000024 	.word	0x24000024

08010ea4 <cleanup_stdio>:
 8010ea4:	6841      	ldr	r1, [r0, #4]
 8010ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8010ed8 <cleanup_stdio+0x34>)
 8010ea8:	4299      	cmp	r1, r3
 8010eaa:	b510      	push	{r4, lr}
 8010eac:	4604      	mov	r4, r0
 8010eae:	d001      	beq.n	8010eb4 <cleanup_stdio+0x10>
 8010eb0:	f001 fe1a 	bl	8012ae8 <_fflush_r>
 8010eb4:	68a1      	ldr	r1, [r4, #8]
 8010eb6:	4b09      	ldr	r3, [pc, #36]	@ (8010edc <cleanup_stdio+0x38>)
 8010eb8:	4299      	cmp	r1, r3
 8010eba:	d002      	beq.n	8010ec2 <cleanup_stdio+0x1e>
 8010ebc:	4620      	mov	r0, r4
 8010ebe:	f001 fe13 	bl	8012ae8 <_fflush_r>
 8010ec2:	68e1      	ldr	r1, [r4, #12]
 8010ec4:	4b06      	ldr	r3, [pc, #24]	@ (8010ee0 <cleanup_stdio+0x3c>)
 8010ec6:	4299      	cmp	r1, r3
 8010ec8:	d004      	beq.n	8010ed4 <cleanup_stdio+0x30>
 8010eca:	4620      	mov	r0, r4
 8010ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ed0:	f001 be0a 	b.w	8012ae8 <_fflush_r>
 8010ed4:	bd10      	pop	{r4, pc}
 8010ed6:	bf00      	nop
 8010ed8:	240055bc 	.word	0x240055bc
 8010edc:	24005624 	.word	0x24005624
 8010ee0:	2400568c 	.word	0x2400568c

08010ee4 <global_stdio_init.part.0>:
 8010ee4:	b510      	push	{r4, lr}
 8010ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8010f14 <global_stdio_init.part.0+0x30>)
 8010ee8:	4c0b      	ldr	r4, [pc, #44]	@ (8010f18 <global_stdio_init.part.0+0x34>)
 8010eea:	4a0c      	ldr	r2, [pc, #48]	@ (8010f1c <global_stdio_init.part.0+0x38>)
 8010eec:	601a      	str	r2, [r3, #0]
 8010eee:	4620      	mov	r0, r4
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	2104      	movs	r1, #4
 8010ef4:	f7ff ff94 	bl	8010e20 <std>
 8010ef8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010efc:	2201      	movs	r2, #1
 8010efe:	2109      	movs	r1, #9
 8010f00:	f7ff ff8e 	bl	8010e20 <std>
 8010f04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010f08:	2202      	movs	r2, #2
 8010f0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f0e:	2112      	movs	r1, #18
 8010f10:	f7ff bf86 	b.w	8010e20 <std>
 8010f14:	240056f4 	.word	0x240056f4
 8010f18:	240055bc 	.word	0x240055bc
 8010f1c:	08010e8d 	.word	0x08010e8d

08010f20 <__sfp_lock_acquire>:
 8010f20:	4801      	ldr	r0, [pc, #4]	@ (8010f28 <__sfp_lock_acquire+0x8>)
 8010f22:	f000 b976 	b.w	8011212 <__retarget_lock_acquire_recursive>
 8010f26:	bf00      	nop
 8010f28:	240056fd 	.word	0x240056fd

08010f2c <__sfp_lock_release>:
 8010f2c:	4801      	ldr	r0, [pc, #4]	@ (8010f34 <__sfp_lock_release+0x8>)
 8010f2e:	f000 b971 	b.w	8011214 <__retarget_lock_release_recursive>
 8010f32:	bf00      	nop
 8010f34:	240056fd 	.word	0x240056fd

08010f38 <__sinit>:
 8010f38:	b510      	push	{r4, lr}
 8010f3a:	4604      	mov	r4, r0
 8010f3c:	f7ff fff0 	bl	8010f20 <__sfp_lock_acquire>
 8010f40:	6a23      	ldr	r3, [r4, #32]
 8010f42:	b11b      	cbz	r3, 8010f4c <__sinit+0x14>
 8010f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f48:	f7ff bff0 	b.w	8010f2c <__sfp_lock_release>
 8010f4c:	4b04      	ldr	r3, [pc, #16]	@ (8010f60 <__sinit+0x28>)
 8010f4e:	6223      	str	r3, [r4, #32]
 8010f50:	4b04      	ldr	r3, [pc, #16]	@ (8010f64 <__sinit+0x2c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d1f5      	bne.n	8010f44 <__sinit+0xc>
 8010f58:	f7ff ffc4 	bl	8010ee4 <global_stdio_init.part.0>
 8010f5c:	e7f2      	b.n	8010f44 <__sinit+0xc>
 8010f5e:	bf00      	nop
 8010f60:	08010ea5 	.word	0x08010ea5
 8010f64:	240056f4 	.word	0x240056f4

08010f68 <_fwalk_sglue>:
 8010f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	4607      	mov	r7, r0
 8010f6e:	4688      	mov	r8, r1
 8010f70:	4614      	mov	r4, r2
 8010f72:	2600      	movs	r6, #0
 8010f74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010f78:	f1b9 0901 	subs.w	r9, r9, #1
 8010f7c:	d505      	bpl.n	8010f8a <_fwalk_sglue+0x22>
 8010f7e:	6824      	ldr	r4, [r4, #0]
 8010f80:	2c00      	cmp	r4, #0
 8010f82:	d1f7      	bne.n	8010f74 <_fwalk_sglue+0xc>
 8010f84:	4630      	mov	r0, r6
 8010f86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f8a:	89ab      	ldrh	r3, [r5, #12]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d907      	bls.n	8010fa0 <_fwalk_sglue+0x38>
 8010f90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010f94:	3301      	adds	r3, #1
 8010f96:	d003      	beq.n	8010fa0 <_fwalk_sglue+0x38>
 8010f98:	4629      	mov	r1, r5
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	47c0      	blx	r8
 8010f9e:	4306      	orrs	r6, r0
 8010fa0:	3568      	adds	r5, #104	@ 0x68
 8010fa2:	e7e9      	b.n	8010f78 <_fwalk_sglue+0x10>

08010fa4 <siprintf>:
 8010fa4:	b40e      	push	{r1, r2, r3}
 8010fa6:	b500      	push	{lr}
 8010fa8:	b09c      	sub	sp, #112	@ 0x70
 8010faa:	ab1d      	add	r3, sp, #116	@ 0x74
 8010fac:	9002      	str	r0, [sp, #8]
 8010fae:	9006      	str	r0, [sp, #24]
 8010fb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010fb4:	4809      	ldr	r0, [pc, #36]	@ (8010fdc <siprintf+0x38>)
 8010fb6:	9107      	str	r1, [sp, #28]
 8010fb8:	9104      	str	r1, [sp, #16]
 8010fba:	4909      	ldr	r1, [pc, #36]	@ (8010fe0 <siprintf+0x3c>)
 8010fbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010fc0:	9105      	str	r1, [sp, #20]
 8010fc2:	6800      	ldr	r0, [r0, #0]
 8010fc4:	9301      	str	r3, [sp, #4]
 8010fc6:	a902      	add	r1, sp, #8
 8010fc8:	f001 fc0e 	bl	80127e8 <_svfiprintf_r>
 8010fcc:	9b02      	ldr	r3, [sp, #8]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
 8010fd2:	b01c      	add	sp, #112	@ 0x70
 8010fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fd8:	b003      	add	sp, #12
 8010fda:	4770      	bx	lr
 8010fdc:	24000020 	.word	0x24000020
 8010fe0:	ffff0208 	.word	0xffff0208

08010fe4 <__sread>:
 8010fe4:	b510      	push	{r4, lr}
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fec:	f000 f8c2 	bl	8011174 <_read_r>
 8010ff0:	2800      	cmp	r0, #0
 8010ff2:	bfab      	itete	ge
 8010ff4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8010ff6:	89a3      	ldrhlt	r3, [r4, #12]
 8010ff8:	181b      	addge	r3, r3, r0
 8010ffa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010ffe:	bfac      	ite	ge
 8011000:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011002:	81a3      	strhlt	r3, [r4, #12]
 8011004:	bd10      	pop	{r4, pc}

08011006 <__swrite>:
 8011006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801100a:	461f      	mov	r7, r3
 801100c:	898b      	ldrh	r3, [r1, #12]
 801100e:	05db      	lsls	r3, r3, #23
 8011010:	4605      	mov	r5, r0
 8011012:	460c      	mov	r4, r1
 8011014:	4616      	mov	r6, r2
 8011016:	d505      	bpl.n	8011024 <__swrite+0x1e>
 8011018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801101c:	2302      	movs	r3, #2
 801101e:	2200      	movs	r2, #0
 8011020:	f000 f896 	bl	8011150 <_lseek_r>
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801102a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801102e:	81a3      	strh	r3, [r4, #12]
 8011030:	4632      	mov	r2, r6
 8011032:	463b      	mov	r3, r7
 8011034:	4628      	mov	r0, r5
 8011036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801103a:	f000 b8ad 	b.w	8011198 <_write_r>

0801103e <__sseek>:
 801103e:	b510      	push	{r4, lr}
 8011040:	460c      	mov	r4, r1
 8011042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011046:	f000 f883 	bl	8011150 <_lseek_r>
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	bf15      	itete	ne
 8011050:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011052:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011056:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801105a:	81a3      	strheq	r3, [r4, #12]
 801105c:	bf18      	it	ne
 801105e:	81a3      	strhne	r3, [r4, #12]
 8011060:	bd10      	pop	{r4, pc}

08011062 <__sclose>:
 8011062:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011066:	f000 b80d 	b.w	8011084 <_close_r>

0801106a <memset>:
 801106a:	4402      	add	r2, r0
 801106c:	4603      	mov	r3, r0
 801106e:	4293      	cmp	r3, r2
 8011070:	d100      	bne.n	8011074 <memset+0xa>
 8011072:	4770      	bx	lr
 8011074:	f803 1b01 	strb.w	r1, [r3], #1
 8011078:	e7f9      	b.n	801106e <memset+0x4>
	...

0801107c <_localeconv_r>:
 801107c:	4800      	ldr	r0, [pc, #0]	@ (8011080 <_localeconv_r+0x4>)
 801107e:	4770      	bx	lr
 8011080:	24000160 	.word	0x24000160

08011084 <_close_r>:
 8011084:	b538      	push	{r3, r4, r5, lr}
 8011086:	4d06      	ldr	r5, [pc, #24]	@ (80110a0 <_close_r+0x1c>)
 8011088:	2300      	movs	r3, #0
 801108a:	4604      	mov	r4, r0
 801108c:	4608      	mov	r0, r1
 801108e:	602b      	str	r3, [r5, #0]
 8011090:	f7f1 fbac 	bl	80027ec <_close>
 8011094:	1c43      	adds	r3, r0, #1
 8011096:	d102      	bne.n	801109e <_close_r+0x1a>
 8011098:	682b      	ldr	r3, [r5, #0]
 801109a:	b103      	cbz	r3, 801109e <_close_r+0x1a>
 801109c:	6023      	str	r3, [r4, #0]
 801109e:	bd38      	pop	{r3, r4, r5, pc}
 80110a0:	240056f8 	.word	0x240056f8

080110a4 <_reclaim_reent>:
 80110a4:	4b29      	ldr	r3, [pc, #164]	@ (801114c <_reclaim_reent+0xa8>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4283      	cmp	r3, r0
 80110aa:	b570      	push	{r4, r5, r6, lr}
 80110ac:	4604      	mov	r4, r0
 80110ae:	d04b      	beq.n	8011148 <_reclaim_reent+0xa4>
 80110b0:	69c3      	ldr	r3, [r0, #28]
 80110b2:	b1ab      	cbz	r3, 80110e0 <_reclaim_reent+0x3c>
 80110b4:	68db      	ldr	r3, [r3, #12]
 80110b6:	b16b      	cbz	r3, 80110d4 <_reclaim_reent+0x30>
 80110b8:	2500      	movs	r5, #0
 80110ba:	69e3      	ldr	r3, [r4, #28]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	5959      	ldr	r1, [r3, r5]
 80110c0:	2900      	cmp	r1, #0
 80110c2:	d13b      	bne.n	801113c <_reclaim_reent+0x98>
 80110c4:	3504      	adds	r5, #4
 80110c6:	2d80      	cmp	r5, #128	@ 0x80
 80110c8:	d1f7      	bne.n	80110ba <_reclaim_reent+0x16>
 80110ca:	69e3      	ldr	r3, [r4, #28]
 80110cc:	4620      	mov	r0, r4
 80110ce:	68d9      	ldr	r1, [r3, #12]
 80110d0:	f000 feac 	bl	8011e2c <_free_r>
 80110d4:	69e3      	ldr	r3, [r4, #28]
 80110d6:	6819      	ldr	r1, [r3, #0]
 80110d8:	b111      	cbz	r1, 80110e0 <_reclaim_reent+0x3c>
 80110da:	4620      	mov	r0, r4
 80110dc:	f000 fea6 	bl	8011e2c <_free_r>
 80110e0:	6961      	ldr	r1, [r4, #20]
 80110e2:	b111      	cbz	r1, 80110ea <_reclaim_reent+0x46>
 80110e4:	4620      	mov	r0, r4
 80110e6:	f000 fea1 	bl	8011e2c <_free_r>
 80110ea:	69e1      	ldr	r1, [r4, #28]
 80110ec:	b111      	cbz	r1, 80110f4 <_reclaim_reent+0x50>
 80110ee:	4620      	mov	r0, r4
 80110f0:	f000 fe9c 	bl	8011e2c <_free_r>
 80110f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80110f6:	b111      	cbz	r1, 80110fe <_reclaim_reent+0x5a>
 80110f8:	4620      	mov	r0, r4
 80110fa:	f000 fe97 	bl	8011e2c <_free_r>
 80110fe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011100:	b111      	cbz	r1, 8011108 <_reclaim_reent+0x64>
 8011102:	4620      	mov	r0, r4
 8011104:	f000 fe92 	bl	8011e2c <_free_r>
 8011108:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801110a:	b111      	cbz	r1, 8011112 <_reclaim_reent+0x6e>
 801110c:	4620      	mov	r0, r4
 801110e:	f000 fe8d 	bl	8011e2c <_free_r>
 8011112:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011114:	b111      	cbz	r1, 801111c <_reclaim_reent+0x78>
 8011116:	4620      	mov	r0, r4
 8011118:	f000 fe88 	bl	8011e2c <_free_r>
 801111c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801111e:	b111      	cbz	r1, 8011126 <_reclaim_reent+0x82>
 8011120:	4620      	mov	r0, r4
 8011122:	f000 fe83 	bl	8011e2c <_free_r>
 8011126:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011128:	b111      	cbz	r1, 8011130 <_reclaim_reent+0x8c>
 801112a:	4620      	mov	r0, r4
 801112c:	f000 fe7e 	bl	8011e2c <_free_r>
 8011130:	6a23      	ldr	r3, [r4, #32]
 8011132:	b14b      	cbz	r3, 8011148 <_reclaim_reent+0xa4>
 8011134:	4620      	mov	r0, r4
 8011136:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801113a:	4718      	bx	r3
 801113c:	680e      	ldr	r6, [r1, #0]
 801113e:	4620      	mov	r0, r4
 8011140:	f000 fe74 	bl	8011e2c <_free_r>
 8011144:	4631      	mov	r1, r6
 8011146:	e7bb      	b.n	80110c0 <_reclaim_reent+0x1c>
 8011148:	bd70      	pop	{r4, r5, r6, pc}
 801114a:	bf00      	nop
 801114c:	24000020 	.word	0x24000020

08011150 <_lseek_r>:
 8011150:	b538      	push	{r3, r4, r5, lr}
 8011152:	4d07      	ldr	r5, [pc, #28]	@ (8011170 <_lseek_r+0x20>)
 8011154:	4604      	mov	r4, r0
 8011156:	4608      	mov	r0, r1
 8011158:	4611      	mov	r1, r2
 801115a:	2200      	movs	r2, #0
 801115c:	602a      	str	r2, [r5, #0]
 801115e:	461a      	mov	r2, r3
 8011160:	f7f1 fb6b 	bl	800283a <_lseek>
 8011164:	1c43      	adds	r3, r0, #1
 8011166:	d102      	bne.n	801116e <_lseek_r+0x1e>
 8011168:	682b      	ldr	r3, [r5, #0]
 801116a:	b103      	cbz	r3, 801116e <_lseek_r+0x1e>
 801116c:	6023      	str	r3, [r4, #0]
 801116e:	bd38      	pop	{r3, r4, r5, pc}
 8011170:	240056f8 	.word	0x240056f8

08011174 <_read_r>:
 8011174:	b538      	push	{r3, r4, r5, lr}
 8011176:	4d07      	ldr	r5, [pc, #28]	@ (8011194 <_read_r+0x20>)
 8011178:	4604      	mov	r4, r0
 801117a:	4608      	mov	r0, r1
 801117c:	4611      	mov	r1, r2
 801117e:	2200      	movs	r2, #0
 8011180:	602a      	str	r2, [r5, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	f7f1 faf9 	bl	800277a <_read>
 8011188:	1c43      	adds	r3, r0, #1
 801118a:	d102      	bne.n	8011192 <_read_r+0x1e>
 801118c:	682b      	ldr	r3, [r5, #0]
 801118e:	b103      	cbz	r3, 8011192 <_read_r+0x1e>
 8011190:	6023      	str	r3, [r4, #0]
 8011192:	bd38      	pop	{r3, r4, r5, pc}
 8011194:	240056f8 	.word	0x240056f8

08011198 <_write_r>:
 8011198:	b538      	push	{r3, r4, r5, lr}
 801119a:	4d07      	ldr	r5, [pc, #28]	@ (80111b8 <_write_r+0x20>)
 801119c:	4604      	mov	r4, r0
 801119e:	4608      	mov	r0, r1
 80111a0:	4611      	mov	r1, r2
 80111a2:	2200      	movs	r2, #0
 80111a4:	602a      	str	r2, [r5, #0]
 80111a6:	461a      	mov	r2, r3
 80111a8:	f7f1 fb04 	bl	80027b4 <_write>
 80111ac:	1c43      	adds	r3, r0, #1
 80111ae:	d102      	bne.n	80111b6 <_write_r+0x1e>
 80111b0:	682b      	ldr	r3, [r5, #0]
 80111b2:	b103      	cbz	r3, 80111b6 <_write_r+0x1e>
 80111b4:	6023      	str	r3, [r4, #0]
 80111b6:	bd38      	pop	{r3, r4, r5, pc}
 80111b8:	240056f8 	.word	0x240056f8

080111bc <__errno>:
 80111bc:	4b01      	ldr	r3, [pc, #4]	@ (80111c4 <__errno+0x8>)
 80111be:	6818      	ldr	r0, [r3, #0]
 80111c0:	4770      	bx	lr
 80111c2:	bf00      	nop
 80111c4:	24000020 	.word	0x24000020

080111c8 <__libc_init_array>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	4d0d      	ldr	r5, [pc, #52]	@ (8011200 <__libc_init_array+0x38>)
 80111cc:	4c0d      	ldr	r4, [pc, #52]	@ (8011204 <__libc_init_array+0x3c>)
 80111ce:	1b64      	subs	r4, r4, r5
 80111d0:	10a4      	asrs	r4, r4, #2
 80111d2:	2600      	movs	r6, #0
 80111d4:	42a6      	cmp	r6, r4
 80111d6:	d109      	bne.n	80111ec <__libc_init_array+0x24>
 80111d8:	4d0b      	ldr	r5, [pc, #44]	@ (8011208 <__libc_init_array+0x40>)
 80111da:	4c0c      	ldr	r4, [pc, #48]	@ (801120c <__libc_init_array+0x44>)
 80111dc:	f001 fff6 	bl	80131cc <_init>
 80111e0:	1b64      	subs	r4, r4, r5
 80111e2:	10a4      	asrs	r4, r4, #2
 80111e4:	2600      	movs	r6, #0
 80111e6:	42a6      	cmp	r6, r4
 80111e8:	d105      	bne.n	80111f6 <__libc_init_array+0x2e>
 80111ea:	bd70      	pop	{r4, r5, r6, pc}
 80111ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80111f0:	4798      	blx	r3
 80111f2:	3601      	adds	r6, #1
 80111f4:	e7ee      	b.n	80111d4 <__libc_init_array+0xc>
 80111f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80111fa:	4798      	blx	r3
 80111fc:	3601      	adds	r6, #1
 80111fe:	e7f2      	b.n	80111e6 <__libc_init_array+0x1e>
 8011200:	080136bc 	.word	0x080136bc
 8011204:	080136bc 	.word	0x080136bc
 8011208:	080136bc 	.word	0x080136bc
 801120c:	080136c0 	.word	0x080136c0

08011210 <__retarget_lock_init_recursive>:
 8011210:	4770      	bx	lr

08011212 <__retarget_lock_acquire_recursive>:
 8011212:	4770      	bx	lr

08011214 <__retarget_lock_release_recursive>:
 8011214:	4770      	bx	lr

08011216 <memcpy>:
 8011216:	440a      	add	r2, r1
 8011218:	4291      	cmp	r1, r2
 801121a:	f100 33ff 	add.w	r3, r0, #4294967295
 801121e:	d100      	bne.n	8011222 <memcpy+0xc>
 8011220:	4770      	bx	lr
 8011222:	b510      	push	{r4, lr}
 8011224:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011228:	f803 4f01 	strb.w	r4, [r3, #1]!
 801122c:	4291      	cmp	r1, r2
 801122e:	d1f9      	bne.n	8011224 <memcpy+0xe>
 8011230:	bd10      	pop	{r4, pc}
	...

08011234 <__assert_func>:
 8011234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011236:	4614      	mov	r4, r2
 8011238:	461a      	mov	r2, r3
 801123a:	4b09      	ldr	r3, [pc, #36]	@ (8011260 <__assert_func+0x2c>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	4605      	mov	r5, r0
 8011240:	68d8      	ldr	r0, [r3, #12]
 8011242:	b954      	cbnz	r4, 801125a <__assert_func+0x26>
 8011244:	4b07      	ldr	r3, [pc, #28]	@ (8011264 <__assert_func+0x30>)
 8011246:	461c      	mov	r4, r3
 8011248:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801124c:	9100      	str	r1, [sp, #0]
 801124e:	462b      	mov	r3, r5
 8011250:	4905      	ldr	r1, [pc, #20]	@ (8011268 <__assert_func+0x34>)
 8011252:	f001 fc71 	bl	8012b38 <fiprintf>
 8011256:	f001 fcab 	bl	8012bb0 <abort>
 801125a:	4b04      	ldr	r3, [pc, #16]	@ (801126c <__assert_func+0x38>)
 801125c:	e7f4      	b.n	8011248 <__assert_func+0x14>
 801125e:	bf00      	nop
 8011260:	24000020 	.word	0x24000020
 8011264:	080133ca 	.word	0x080133ca
 8011268:	0801339c 	.word	0x0801339c
 801126c:	0801338f 	.word	0x0801338f

08011270 <quorem>:
 8011270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011274:	6903      	ldr	r3, [r0, #16]
 8011276:	690c      	ldr	r4, [r1, #16]
 8011278:	42a3      	cmp	r3, r4
 801127a:	4607      	mov	r7, r0
 801127c:	db7e      	blt.n	801137c <quorem+0x10c>
 801127e:	3c01      	subs	r4, #1
 8011280:	f101 0814 	add.w	r8, r1, #20
 8011284:	00a3      	lsls	r3, r4, #2
 8011286:	f100 0514 	add.w	r5, r0, #20
 801128a:	9300      	str	r3, [sp, #0]
 801128c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011290:	9301      	str	r3, [sp, #4]
 8011292:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801129a:	3301      	adds	r3, #1
 801129c:	429a      	cmp	r2, r3
 801129e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80112a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80112a6:	d32e      	bcc.n	8011306 <quorem+0x96>
 80112a8:	f04f 0a00 	mov.w	sl, #0
 80112ac:	46c4      	mov	ip, r8
 80112ae:	46ae      	mov	lr, r5
 80112b0:	46d3      	mov	fp, sl
 80112b2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80112b6:	b298      	uxth	r0, r3
 80112b8:	fb06 a000 	mla	r0, r6, r0, sl
 80112bc:	0c02      	lsrs	r2, r0, #16
 80112be:	0c1b      	lsrs	r3, r3, #16
 80112c0:	fb06 2303 	mla	r3, r6, r3, r2
 80112c4:	f8de 2000 	ldr.w	r2, [lr]
 80112c8:	b280      	uxth	r0, r0
 80112ca:	b292      	uxth	r2, r2
 80112cc:	1a12      	subs	r2, r2, r0
 80112ce:	445a      	add	r2, fp
 80112d0:	f8de 0000 	ldr.w	r0, [lr]
 80112d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80112d8:	b29b      	uxth	r3, r3
 80112da:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80112de:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80112e2:	b292      	uxth	r2, r2
 80112e4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80112e8:	45e1      	cmp	r9, ip
 80112ea:	f84e 2b04 	str.w	r2, [lr], #4
 80112ee:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80112f2:	d2de      	bcs.n	80112b2 <quorem+0x42>
 80112f4:	9b00      	ldr	r3, [sp, #0]
 80112f6:	58eb      	ldr	r3, [r5, r3]
 80112f8:	b92b      	cbnz	r3, 8011306 <quorem+0x96>
 80112fa:	9b01      	ldr	r3, [sp, #4]
 80112fc:	3b04      	subs	r3, #4
 80112fe:	429d      	cmp	r5, r3
 8011300:	461a      	mov	r2, r3
 8011302:	d32f      	bcc.n	8011364 <quorem+0xf4>
 8011304:	613c      	str	r4, [r7, #16]
 8011306:	4638      	mov	r0, r7
 8011308:	f001 f90a 	bl	8012520 <__mcmp>
 801130c:	2800      	cmp	r0, #0
 801130e:	db25      	blt.n	801135c <quorem+0xec>
 8011310:	4629      	mov	r1, r5
 8011312:	2000      	movs	r0, #0
 8011314:	f858 2b04 	ldr.w	r2, [r8], #4
 8011318:	f8d1 c000 	ldr.w	ip, [r1]
 801131c:	fa1f fe82 	uxth.w	lr, r2
 8011320:	fa1f f38c 	uxth.w	r3, ip
 8011324:	eba3 030e 	sub.w	r3, r3, lr
 8011328:	4403      	add	r3, r0
 801132a:	0c12      	lsrs	r2, r2, #16
 801132c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011330:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011334:	b29b      	uxth	r3, r3
 8011336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801133a:	45c1      	cmp	r9, r8
 801133c:	f841 3b04 	str.w	r3, [r1], #4
 8011340:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011344:	d2e6      	bcs.n	8011314 <quorem+0xa4>
 8011346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801134a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801134e:	b922      	cbnz	r2, 801135a <quorem+0xea>
 8011350:	3b04      	subs	r3, #4
 8011352:	429d      	cmp	r5, r3
 8011354:	461a      	mov	r2, r3
 8011356:	d30b      	bcc.n	8011370 <quorem+0x100>
 8011358:	613c      	str	r4, [r7, #16]
 801135a:	3601      	adds	r6, #1
 801135c:	4630      	mov	r0, r6
 801135e:	b003      	add	sp, #12
 8011360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011364:	6812      	ldr	r2, [r2, #0]
 8011366:	3b04      	subs	r3, #4
 8011368:	2a00      	cmp	r2, #0
 801136a:	d1cb      	bne.n	8011304 <quorem+0x94>
 801136c:	3c01      	subs	r4, #1
 801136e:	e7c6      	b.n	80112fe <quorem+0x8e>
 8011370:	6812      	ldr	r2, [r2, #0]
 8011372:	3b04      	subs	r3, #4
 8011374:	2a00      	cmp	r2, #0
 8011376:	d1ef      	bne.n	8011358 <quorem+0xe8>
 8011378:	3c01      	subs	r4, #1
 801137a:	e7ea      	b.n	8011352 <quorem+0xe2>
 801137c:	2000      	movs	r0, #0
 801137e:	e7ee      	b.n	801135e <quorem+0xee>

08011380 <_dtoa_r>:
 8011380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011384:	ed2d 8b02 	vpush	{d8}
 8011388:	69c7      	ldr	r7, [r0, #28]
 801138a:	b091      	sub	sp, #68	@ 0x44
 801138c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011390:	ec55 4b10 	vmov	r4, r5, d0
 8011394:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011396:	9107      	str	r1, [sp, #28]
 8011398:	4681      	mov	r9, r0
 801139a:	9209      	str	r2, [sp, #36]	@ 0x24
 801139c:	930d      	str	r3, [sp, #52]	@ 0x34
 801139e:	b97f      	cbnz	r7, 80113c0 <_dtoa_r+0x40>
 80113a0:	2010      	movs	r0, #16
 80113a2:	f000 fd8d 	bl	8011ec0 <malloc>
 80113a6:	4602      	mov	r2, r0
 80113a8:	f8c9 001c 	str.w	r0, [r9, #28]
 80113ac:	b920      	cbnz	r0, 80113b8 <_dtoa_r+0x38>
 80113ae:	4ba0      	ldr	r3, [pc, #640]	@ (8011630 <_dtoa_r+0x2b0>)
 80113b0:	21ef      	movs	r1, #239	@ 0xef
 80113b2:	48a0      	ldr	r0, [pc, #640]	@ (8011634 <_dtoa_r+0x2b4>)
 80113b4:	f7ff ff3e 	bl	8011234 <__assert_func>
 80113b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80113bc:	6007      	str	r7, [r0, #0]
 80113be:	60c7      	str	r7, [r0, #12]
 80113c0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80113c4:	6819      	ldr	r1, [r3, #0]
 80113c6:	b159      	cbz	r1, 80113e0 <_dtoa_r+0x60>
 80113c8:	685a      	ldr	r2, [r3, #4]
 80113ca:	604a      	str	r2, [r1, #4]
 80113cc:	2301      	movs	r3, #1
 80113ce:	4093      	lsls	r3, r2
 80113d0:	608b      	str	r3, [r1, #8]
 80113d2:	4648      	mov	r0, r9
 80113d4:	f000 fe6a 	bl	80120ac <_Bfree>
 80113d8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80113dc:	2200      	movs	r2, #0
 80113de:	601a      	str	r2, [r3, #0]
 80113e0:	1e2b      	subs	r3, r5, #0
 80113e2:	bfbb      	ittet	lt
 80113e4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80113e8:	9303      	strlt	r3, [sp, #12]
 80113ea:	2300      	movge	r3, #0
 80113ec:	2201      	movlt	r2, #1
 80113ee:	bfac      	ite	ge
 80113f0:	6033      	strge	r3, [r6, #0]
 80113f2:	6032      	strlt	r2, [r6, #0]
 80113f4:	4b90      	ldr	r3, [pc, #576]	@ (8011638 <_dtoa_r+0x2b8>)
 80113f6:	9e03      	ldr	r6, [sp, #12]
 80113f8:	43b3      	bics	r3, r6
 80113fa:	d110      	bne.n	801141e <_dtoa_r+0x9e>
 80113fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80113fe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011408:	4323      	orrs	r3, r4
 801140a:	f000 84de 	beq.w	8011dca <_dtoa_r+0xa4a>
 801140e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011410:	4f8a      	ldr	r7, [pc, #552]	@ (801163c <_dtoa_r+0x2bc>)
 8011412:	2b00      	cmp	r3, #0
 8011414:	f000 84e0 	beq.w	8011dd8 <_dtoa_r+0xa58>
 8011418:	1cfb      	adds	r3, r7, #3
 801141a:	f000 bcdb 	b.w	8011dd4 <_dtoa_r+0xa54>
 801141e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011422:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801142a:	d10a      	bne.n	8011442 <_dtoa_r+0xc2>
 801142c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801142e:	2301      	movs	r3, #1
 8011430:	6013      	str	r3, [r2, #0]
 8011432:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011434:	b113      	cbz	r3, 801143c <_dtoa_r+0xbc>
 8011436:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011438:	4b81      	ldr	r3, [pc, #516]	@ (8011640 <_dtoa_r+0x2c0>)
 801143a:	6013      	str	r3, [r2, #0]
 801143c:	4f81      	ldr	r7, [pc, #516]	@ (8011644 <_dtoa_r+0x2c4>)
 801143e:	f000 bccb 	b.w	8011dd8 <_dtoa_r+0xa58>
 8011442:	aa0e      	add	r2, sp, #56	@ 0x38
 8011444:	a90f      	add	r1, sp, #60	@ 0x3c
 8011446:	4648      	mov	r0, r9
 8011448:	eeb0 0b48 	vmov.f64	d0, d8
 801144c:	f001 f918 	bl	8012680 <__d2b>
 8011450:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011454:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011456:	9001      	str	r0, [sp, #4]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d045      	beq.n	80114e8 <_dtoa_r+0x168>
 801145c:	eeb0 7b48 	vmov.f64	d7, d8
 8011460:	ee18 1a90 	vmov	r1, s17
 8011464:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011468:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801146c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011470:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011474:	2500      	movs	r5, #0
 8011476:	ee07 1a90 	vmov	s15, r1
 801147a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801147e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011618 <_dtoa_r+0x298>
 8011482:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011486:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8011620 <_dtoa_r+0x2a0>
 801148a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801148e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8011628 <_dtoa_r+0x2a8>
 8011492:	ee07 3a90 	vmov	s15, r3
 8011496:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801149a:	eeb0 7b46 	vmov.f64	d7, d6
 801149e:	eea4 7b05 	vfma.f64	d7, d4, d5
 80114a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80114a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80114aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ae:	ee16 8a90 	vmov	r8, s13
 80114b2:	d508      	bpl.n	80114c6 <_dtoa_r+0x146>
 80114b4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80114b8:	eeb4 6b47 	vcmp.f64	d6, d7
 80114bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114c0:	bf18      	it	ne
 80114c2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80114c6:	f1b8 0f16 	cmp.w	r8, #22
 80114ca:	d82b      	bhi.n	8011524 <_dtoa_r+0x1a4>
 80114cc:	495e      	ldr	r1, [pc, #376]	@ (8011648 <_dtoa_r+0x2c8>)
 80114ce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80114d2:	ed91 7b00 	vldr	d7, [r1]
 80114d6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80114da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114de:	d501      	bpl.n	80114e4 <_dtoa_r+0x164>
 80114e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80114e4:	2100      	movs	r1, #0
 80114e6:	e01e      	b.n	8011526 <_dtoa_r+0x1a6>
 80114e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80114ea:	4413      	add	r3, r2
 80114ec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80114f0:	2920      	cmp	r1, #32
 80114f2:	bfc1      	itttt	gt
 80114f4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80114f8:	408e      	lslgt	r6, r1
 80114fa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80114fe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011502:	bfd6      	itet	le
 8011504:	f1c1 0120 	rsble	r1, r1, #32
 8011508:	4331      	orrgt	r1, r6
 801150a:	fa04 f101 	lslle.w	r1, r4, r1
 801150e:	ee07 1a90 	vmov	s15, r1
 8011512:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011516:	3b01      	subs	r3, #1
 8011518:	ee17 1a90 	vmov	r1, s15
 801151c:	2501      	movs	r5, #1
 801151e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8011522:	e7a8      	b.n	8011476 <_dtoa_r+0xf6>
 8011524:	2101      	movs	r1, #1
 8011526:	1ad2      	subs	r2, r2, r3
 8011528:	1e53      	subs	r3, r2, #1
 801152a:	9306      	str	r3, [sp, #24]
 801152c:	bf45      	ittet	mi
 801152e:	f1c2 0301 	rsbmi	r3, r2, #1
 8011532:	9305      	strmi	r3, [sp, #20]
 8011534:	2300      	movpl	r3, #0
 8011536:	2300      	movmi	r3, #0
 8011538:	bf4c      	ite	mi
 801153a:	9306      	strmi	r3, [sp, #24]
 801153c:	9305      	strpl	r3, [sp, #20]
 801153e:	f1b8 0f00 	cmp.w	r8, #0
 8011542:	910c      	str	r1, [sp, #48]	@ 0x30
 8011544:	db18      	blt.n	8011578 <_dtoa_r+0x1f8>
 8011546:	9b06      	ldr	r3, [sp, #24]
 8011548:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801154c:	4443      	add	r3, r8
 801154e:	9306      	str	r3, [sp, #24]
 8011550:	2300      	movs	r3, #0
 8011552:	9a07      	ldr	r2, [sp, #28]
 8011554:	2a09      	cmp	r2, #9
 8011556:	d849      	bhi.n	80115ec <_dtoa_r+0x26c>
 8011558:	2a05      	cmp	r2, #5
 801155a:	bfc4      	itt	gt
 801155c:	3a04      	subgt	r2, #4
 801155e:	9207      	strgt	r2, [sp, #28]
 8011560:	9a07      	ldr	r2, [sp, #28]
 8011562:	f1a2 0202 	sub.w	r2, r2, #2
 8011566:	bfcc      	ite	gt
 8011568:	2400      	movgt	r4, #0
 801156a:	2401      	movle	r4, #1
 801156c:	2a03      	cmp	r2, #3
 801156e:	d848      	bhi.n	8011602 <_dtoa_r+0x282>
 8011570:	e8df f002 	tbb	[pc, r2]
 8011574:	3a2c2e0b 	.word	0x3a2c2e0b
 8011578:	9b05      	ldr	r3, [sp, #20]
 801157a:	2200      	movs	r2, #0
 801157c:	eba3 0308 	sub.w	r3, r3, r8
 8011580:	9305      	str	r3, [sp, #20]
 8011582:	920a      	str	r2, [sp, #40]	@ 0x28
 8011584:	f1c8 0300 	rsb	r3, r8, #0
 8011588:	e7e3      	b.n	8011552 <_dtoa_r+0x1d2>
 801158a:	2200      	movs	r2, #0
 801158c:	9208      	str	r2, [sp, #32]
 801158e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011590:	2a00      	cmp	r2, #0
 8011592:	dc39      	bgt.n	8011608 <_dtoa_r+0x288>
 8011594:	f04f 0b01 	mov.w	fp, #1
 8011598:	46da      	mov	sl, fp
 801159a:	465a      	mov	r2, fp
 801159c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80115a0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80115a4:	2100      	movs	r1, #0
 80115a6:	2004      	movs	r0, #4
 80115a8:	f100 0614 	add.w	r6, r0, #20
 80115ac:	4296      	cmp	r6, r2
 80115ae:	d930      	bls.n	8011612 <_dtoa_r+0x292>
 80115b0:	6079      	str	r1, [r7, #4]
 80115b2:	4648      	mov	r0, r9
 80115b4:	9304      	str	r3, [sp, #16]
 80115b6:	f000 fd39 	bl	801202c <_Balloc>
 80115ba:	9b04      	ldr	r3, [sp, #16]
 80115bc:	4607      	mov	r7, r0
 80115be:	2800      	cmp	r0, #0
 80115c0:	d146      	bne.n	8011650 <_dtoa_r+0x2d0>
 80115c2:	4b22      	ldr	r3, [pc, #136]	@ (801164c <_dtoa_r+0x2cc>)
 80115c4:	4602      	mov	r2, r0
 80115c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80115ca:	e6f2      	b.n	80113b2 <_dtoa_r+0x32>
 80115cc:	2201      	movs	r2, #1
 80115ce:	e7dd      	b.n	801158c <_dtoa_r+0x20c>
 80115d0:	2200      	movs	r2, #0
 80115d2:	9208      	str	r2, [sp, #32]
 80115d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115d6:	eb08 0b02 	add.w	fp, r8, r2
 80115da:	f10b 0a01 	add.w	sl, fp, #1
 80115de:	4652      	mov	r2, sl
 80115e0:	2a01      	cmp	r2, #1
 80115e2:	bfb8      	it	lt
 80115e4:	2201      	movlt	r2, #1
 80115e6:	e7db      	b.n	80115a0 <_dtoa_r+0x220>
 80115e8:	2201      	movs	r2, #1
 80115ea:	e7f2      	b.n	80115d2 <_dtoa_r+0x252>
 80115ec:	2401      	movs	r4, #1
 80115ee:	2200      	movs	r2, #0
 80115f0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80115f4:	f04f 3bff 	mov.w	fp, #4294967295
 80115f8:	2100      	movs	r1, #0
 80115fa:	46da      	mov	sl, fp
 80115fc:	2212      	movs	r2, #18
 80115fe:	9109      	str	r1, [sp, #36]	@ 0x24
 8011600:	e7ce      	b.n	80115a0 <_dtoa_r+0x220>
 8011602:	2201      	movs	r2, #1
 8011604:	9208      	str	r2, [sp, #32]
 8011606:	e7f5      	b.n	80115f4 <_dtoa_r+0x274>
 8011608:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801160c:	46da      	mov	sl, fp
 801160e:	465a      	mov	r2, fp
 8011610:	e7c6      	b.n	80115a0 <_dtoa_r+0x220>
 8011612:	3101      	adds	r1, #1
 8011614:	0040      	lsls	r0, r0, #1
 8011616:	e7c7      	b.n	80115a8 <_dtoa_r+0x228>
 8011618:	636f4361 	.word	0x636f4361
 801161c:	3fd287a7 	.word	0x3fd287a7
 8011620:	8b60c8b3 	.word	0x8b60c8b3
 8011624:	3fc68a28 	.word	0x3fc68a28
 8011628:	509f79fb 	.word	0x509f79fb
 801162c:	3fd34413 	.word	0x3fd34413
 8011630:	080132ec 	.word	0x080132ec
 8011634:	080133d8 	.word	0x080133d8
 8011638:	7ff00000 	.word	0x7ff00000
 801163c:	080133d4 	.word	0x080133d4
 8011640:	0801336c 	.word	0x0801336c
 8011644:	0801336b 	.word	0x0801336b
 8011648:	080134d0 	.word	0x080134d0
 801164c:	08013430 	.word	0x08013430
 8011650:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8011654:	f1ba 0f0e 	cmp.w	sl, #14
 8011658:	6010      	str	r0, [r2, #0]
 801165a:	d86f      	bhi.n	801173c <_dtoa_r+0x3bc>
 801165c:	2c00      	cmp	r4, #0
 801165e:	d06d      	beq.n	801173c <_dtoa_r+0x3bc>
 8011660:	f1b8 0f00 	cmp.w	r8, #0
 8011664:	f340 80c2 	ble.w	80117ec <_dtoa_r+0x46c>
 8011668:	4aca      	ldr	r2, [pc, #808]	@ (8011994 <_dtoa_r+0x614>)
 801166a:	f008 010f 	and.w	r1, r8, #15
 801166e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8011672:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8011676:	ed92 7b00 	vldr	d7, [r2]
 801167a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801167e:	f000 80a9 	beq.w	80117d4 <_dtoa_r+0x454>
 8011682:	4ac5      	ldr	r2, [pc, #788]	@ (8011998 <_dtoa_r+0x618>)
 8011684:	ed92 6b08 	vldr	d6, [r2, #32]
 8011688:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801168c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8011690:	f001 010f 	and.w	r1, r1, #15
 8011694:	2203      	movs	r2, #3
 8011696:	48c0      	ldr	r0, [pc, #768]	@ (8011998 <_dtoa_r+0x618>)
 8011698:	2900      	cmp	r1, #0
 801169a:	f040 809d 	bne.w	80117d8 <_dtoa_r+0x458>
 801169e:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116a2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80116a6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116aa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80116ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 80116b0:	2900      	cmp	r1, #0
 80116b2:	f000 80c1 	beq.w	8011838 <_dtoa_r+0x4b8>
 80116b6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80116ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80116be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c2:	f140 80b9 	bpl.w	8011838 <_dtoa_r+0x4b8>
 80116c6:	f1ba 0f00 	cmp.w	sl, #0
 80116ca:	f000 80b5 	beq.w	8011838 <_dtoa_r+0x4b8>
 80116ce:	f1bb 0f00 	cmp.w	fp, #0
 80116d2:	dd31      	ble.n	8011738 <_dtoa_r+0x3b8>
 80116d4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80116d8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80116dc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116e0:	f108 31ff 	add.w	r1, r8, #4294967295
 80116e4:	9104      	str	r1, [sp, #16]
 80116e6:	3201      	adds	r2, #1
 80116e8:	465c      	mov	r4, fp
 80116ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 80116ee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80116f2:	ee07 2a90 	vmov	s15, r2
 80116f6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80116fa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80116fe:	ee15 2a90 	vmov	r2, s11
 8011702:	ec51 0b15 	vmov	r0, r1, d5
 8011706:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801170a:	2c00      	cmp	r4, #0
 801170c:	f040 8098 	bne.w	8011840 <_dtoa_r+0x4c0>
 8011710:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8011714:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011718:	ec41 0b17 	vmov	d7, r0, r1
 801171c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011724:	f300 8261 	bgt.w	8011bea <_dtoa_r+0x86a>
 8011728:	eeb1 7b47 	vneg.f64	d7, d7
 801172c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	f100 80f5 	bmi.w	8011922 <_dtoa_r+0x5a2>
 8011738:	ed8d 8b02 	vstr	d8, [sp, #8]
 801173c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801173e:	2a00      	cmp	r2, #0
 8011740:	f2c0 812c 	blt.w	801199c <_dtoa_r+0x61c>
 8011744:	f1b8 0f0e 	cmp.w	r8, #14
 8011748:	f300 8128 	bgt.w	801199c <_dtoa_r+0x61c>
 801174c:	4b91      	ldr	r3, [pc, #580]	@ (8011994 <_dtoa_r+0x614>)
 801174e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011752:	ed93 6b00 	vldr	d6, [r3]
 8011756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011758:	2b00      	cmp	r3, #0
 801175a:	da03      	bge.n	8011764 <_dtoa_r+0x3e4>
 801175c:	f1ba 0f00 	cmp.w	sl, #0
 8011760:	f340 80d2 	ble.w	8011908 <_dtoa_r+0x588>
 8011764:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8011768:	ed9d 7b02 	vldr	d7, [sp, #8]
 801176c:	463e      	mov	r6, r7
 801176e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8011772:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8011776:	ee15 3a10 	vmov	r3, s10
 801177a:	3330      	adds	r3, #48	@ 0x30
 801177c:	f806 3b01 	strb.w	r3, [r6], #1
 8011780:	1bf3      	subs	r3, r6, r7
 8011782:	459a      	cmp	sl, r3
 8011784:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011788:	eea3 7b46 	vfms.f64	d7, d3, d6
 801178c:	f040 80f8 	bne.w	8011980 <_dtoa_r+0x600>
 8011790:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011794:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801179c:	f300 80dd 	bgt.w	801195a <_dtoa_r+0x5da>
 80117a0:	eeb4 7b46 	vcmp.f64	d7, d6
 80117a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117a8:	d104      	bne.n	80117b4 <_dtoa_r+0x434>
 80117aa:	ee15 3a10 	vmov	r3, s10
 80117ae:	07db      	lsls	r3, r3, #31
 80117b0:	f100 80d3 	bmi.w	801195a <_dtoa_r+0x5da>
 80117b4:	9901      	ldr	r1, [sp, #4]
 80117b6:	4648      	mov	r0, r9
 80117b8:	f000 fc78 	bl	80120ac <_Bfree>
 80117bc:	2300      	movs	r3, #0
 80117be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80117c0:	7033      	strb	r3, [r6, #0]
 80117c2:	f108 0301 	add.w	r3, r8, #1
 80117c6:	6013      	str	r3, [r2, #0]
 80117c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	f000 8304 	beq.w	8011dd8 <_dtoa_r+0xa58>
 80117d0:	601e      	str	r6, [r3, #0]
 80117d2:	e301      	b.n	8011dd8 <_dtoa_r+0xa58>
 80117d4:	2202      	movs	r2, #2
 80117d6:	e75e      	b.n	8011696 <_dtoa_r+0x316>
 80117d8:	07cc      	lsls	r4, r1, #31
 80117da:	d504      	bpl.n	80117e6 <_dtoa_r+0x466>
 80117dc:	ed90 6b00 	vldr	d6, [r0]
 80117e0:	3201      	adds	r2, #1
 80117e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80117e6:	1049      	asrs	r1, r1, #1
 80117e8:	3008      	adds	r0, #8
 80117ea:	e755      	b.n	8011698 <_dtoa_r+0x318>
 80117ec:	d022      	beq.n	8011834 <_dtoa_r+0x4b4>
 80117ee:	f1c8 0100 	rsb	r1, r8, #0
 80117f2:	4a68      	ldr	r2, [pc, #416]	@ (8011994 <_dtoa_r+0x614>)
 80117f4:	f001 000f 	and.w	r0, r1, #15
 80117f8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80117fc:	ed92 7b00 	vldr	d7, [r2]
 8011800:	ee28 7b07 	vmul.f64	d7, d8, d7
 8011804:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011808:	4863      	ldr	r0, [pc, #396]	@ (8011998 <_dtoa_r+0x618>)
 801180a:	1109      	asrs	r1, r1, #4
 801180c:	2400      	movs	r4, #0
 801180e:	2202      	movs	r2, #2
 8011810:	b929      	cbnz	r1, 801181e <_dtoa_r+0x49e>
 8011812:	2c00      	cmp	r4, #0
 8011814:	f43f af49 	beq.w	80116aa <_dtoa_r+0x32a>
 8011818:	ed8d 7b02 	vstr	d7, [sp, #8]
 801181c:	e745      	b.n	80116aa <_dtoa_r+0x32a>
 801181e:	07ce      	lsls	r6, r1, #31
 8011820:	d505      	bpl.n	801182e <_dtoa_r+0x4ae>
 8011822:	ed90 6b00 	vldr	d6, [r0]
 8011826:	3201      	adds	r2, #1
 8011828:	2401      	movs	r4, #1
 801182a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801182e:	1049      	asrs	r1, r1, #1
 8011830:	3008      	adds	r0, #8
 8011832:	e7ed      	b.n	8011810 <_dtoa_r+0x490>
 8011834:	2202      	movs	r2, #2
 8011836:	e738      	b.n	80116aa <_dtoa_r+0x32a>
 8011838:	f8cd 8010 	str.w	r8, [sp, #16]
 801183c:	4654      	mov	r4, sl
 801183e:	e754      	b.n	80116ea <_dtoa_r+0x36a>
 8011840:	4a54      	ldr	r2, [pc, #336]	@ (8011994 <_dtoa_r+0x614>)
 8011842:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8011846:	ed12 4b02 	vldr	d4, [r2, #-8]
 801184a:	9a08      	ldr	r2, [sp, #32]
 801184c:	ec41 0b17 	vmov	d7, r0, r1
 8011850:	443c      	add	r4, r7
 8011852:	b34a      	cbz	r2, 80118a8 <_dtoa_r+0x528>
 8011854:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8011858:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801185c:	463e      	mov	r6, r7
 801185e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8011862:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8011866:	ee35 7b47 	vsub.f64	d7, d5, d7
 801186a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801186e:	ee14 2a90 	vmov	r2, s9
 8011872:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8011876:	3230      	adds	r2, #48	@ 0x30
 8011878:	ee36 6b45 	vsub.f64	d6, d6, d5
 801187c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	f806 2b01 	strb.w	r2, [r6], #1
 8011888:	d438      	bmi.n	80118fc <_dtoa_r+0x57c>
 801188a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801188e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8011892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011896:	d462      	bmi.n	801195e <_dtoa_r+0x5de>
 8011898:	42a6      	cmp	r6, r4
 801189a:	f43f af4d 	beq.w	8011738 <_dtoa_r+0x3b8>
 801189e:	ee27 7b03 	vmul.f64	d7, d7, d3
 80118a2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80118a6:	e7e0      	b.n	801186a <_dtoa_r+0x4ea>
 80118a8:	4621      	mov	r1, r4
 80118aa:	463e      	mov	r6, r7
 80118ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118b0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80118b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80118b8:	ee14 2a90 	vmov	r2, s9
 80118bc:	3230      	adds	r2, #48	@ 0x30
 80118be:	f806 2b01 	strb.w	r2, [r6], #1
 80118c2:	42a6      	cmp	r6, r4
 80118c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80118c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80118cc:	d119      	bne.n	8011902 <_dtoa_r+0x582>
 80118ce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80118d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80118d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80118da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118de:	dc3e      	bgt.n	801195e <_dtoa_r+0x5de>
 80118e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80118e4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80118e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ec:	f57f af24 	bpl.w	8011738 <_dtoa_r+0x3b8>
 80118f0:	460e      	mov	r6, r1
 80118f2:	3901      	subs	r1, #1
 80118f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80118f8:	2b30      	cmp	r3, #48	@ 0x30
 80118fa:	d0f9      	beq.n	80118f0 <_dtoa_r+0x570>
 80118fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8011900:	e758      	b.n	80117b4 <_dtoa_r+0x434>
 8011902:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011906:	e7d5      	b.n	80118b4 <_dtoa_r+0x534>
 8011908:	d10b      	bne.n	8011922 <_dtoa_r+0x5a2>
 801190a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801190e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011912:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011916:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	f2c0 8161 	blt.w	8011be4 <_dtoa_r+0x864>
 8011922:	2400      	movs	r4, #0
 8011924:	4625      	mov	r5, r4
 8011926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011928:	43db      	mvns	r3, r3
 801192a:	9304      	str	r3, [sp, #16]
 801192c:	463e      	mov	r6, r7
 801192e:	f04f 0800 	mov.w	r8, #0
 8011932:	4621      	mov	r1, r4
 8011934:	4648      	mov	r0, r9
 8011936:	f000 fbb9 	bl	80120ac <_Bfree>
 801193a:	2d00      	cmp	r5, #0
 801193c:	d0de      	beq.n	80118fc <_dtoa_r+0x57c>
 801193e:	f1b8 0f00 	cmp.w	r8, #0
 8011942:	d005      	beq.n	8011950 <_dtoa_r+0x5d0>
 8011944:	45a8      	cmp	r8, r5
 8011946:	d003      	beq.n	8011950 <_dtoa_r+0x5d0>
 8011948:	4641      	mov	r1, r8
 801194a:	4648      	mov	r0, r9
 801194c:	f000 fbae 	bl	80120ac <_Bfree>
 8011950:	4629      	mov	r1, r5
 8011952:	4648      	mov	r0, r9
 8011954:	f000 fbaa 	bl	80120ac <_Bfree>
 8011958:	e7d0      	b.n	80118fc <_dtoa_r+0x57c>
 801195a:	f8cd 8010 	str.w	r8, [sp, #16]
 801195e:	4633      	mov	r3, r6
 8011960:	461e      	mov	r6, r3
 8011962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011966:	2a39      	cmp	r2, #57	@ 0x39
 8011968:	d106      	bne.n	8011978 <_dtoa_r+0x5f8>
 801196a:	429f      	cmp	r7, r3
 801196c:	d1f8      	bne.n	8011960 <_dtoa_r+0x5e0>
 801196e:	9a04      	ldr	r2, [sp, #16]
 8011970:	3201      	adds	r2, #1
 8011972:	9204      	str	r2, [sp, #16]
 8011974:	2230      	movs	r2, #48	@ 0x30
 8011976:	703a      	strb	r2, [r7, #0]
 8011978:	781a      	ldrb	r2, [r3, #0]
 801197a:	3201      	adds	r2, #1
 801197c:	701a      	strb	r2, [r3, #0]
 801197e:	e7bd      	b.n	80118fc <_dtoa_r+0x57c>
 8011980:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011984:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801198c:	f47f aeef 	bne.w	801176e <_dtoa_r+0x3ee>
 8011990:	e710      	b.n	80117b4 <_dtoa_r+0x434>
 8011992:	bf00      	nop
 8011994:	080134d0 	.word	0x080134d0
 8011998:	080134a8 	.word	0x080134a8
 801199c:	9908      	ldr	r1, [sp, #32]
 801199e:	2900      	cmp	r1, #0
 80119a0:	f000 80e3 	beq.w	8011b6a <_dtoa_r+0x7ea>
 80119a4:	9907      	ldr	r1, [sp, #28]
 80119a6:	2901      	cmp	r1, #1
 80119a8:	f300 80c8 	bgt.w	8011b3c <_dtoa_r+0x7bc>
 80119ac:	2d00      	cmp	r5, #0
 80119ae:	f000 80c1 	beq.w	8011b34 <_dtoa_r+0x7b4>
 80119b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80119b6:	9e05      	ldr	r6, [sp, #20]
 80119b8:	461c      	mov	r4, r3
 80119ba:	9304      	str	r3, [sp, #16]
 80119bc:	9b05      	ldr	r3, [sp, #20]
 80119be:	4413      	add	r3, r2
 80119c0:	9305      	str	r3, [sp, #20]
 80119c2:	9b06      	ldr	r3, [sp, #24]
 80119c4:	2101      	movs	r1, #1
 80119c6:	4413      	add	r3, r2
 80119c8:	4648      	mov	r0, r9
 80119ca:	9306      	str	r3, [sp, #24]
 80119cc:	f000 fc22 	bl	8012214 <__i2b>
 80119d0:	9b04      	ldr	r3, [sp, #16]
 80119d2:	4605      	mov	r5, r0
 80119d4:	b166      	cbz	r6, 80119f0 <_dtoa_r+0x670>
 80119d6:	9a06      	ldr	r2, [sp, #24]
 80119d8:	2a00      	cmp	r2, #0
 80119da:	dd09      	ble.n	80119f0 <_dtoa_r+0x670>
 80119dc:	42b2      	cmp	r2, r6
 80119de:	9905      	ldr	r1, [sp, #20]
 80119e0:	bfa8      	it	ge
 80119e2:	4632      	movge	r2, r6
 80119e4:	1a89      	subs	r1, r1, r2
 80119e6:	9105      	str	r1, [sp, #20]
 80119e8:	9906      	ldr	r1, [sp, #24]
 80119ea:	1ab6      	subs	r6, r6, r2
 80119ec:	1a8a      	subs	r2, r1, r2
 80119ee:	9206      	str	r2, [sp, #24]
 80119f0:	b1fb      	cbz	r3, 8011a32 <_dtoa_r+0x6b2>
 80119f2:	9a08      	ldr	r2, [sp, #32]
 80119f4:	2a00      	cmp	r2, #0
 80119f6:	f000 80bc 	beq.w	8011b72 <_dtoa_r+0x7f2>
 80119fa:	b19c      	cbz	r4, 8011a24 <_dtoa_r+0x6a4>
 80119fc:	4629      	mov	r1, r5
 80119fe:	4622      	mov	r2, r4
 8011a00:	4648      	mov	r0, r9
 8011a02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a04:	f000 fcc6 	bl	8012394 <__pow5mult>
 8011a08:	9a01      	ldr	r2, [sp, #4]
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	4648      	mov	r0, r9
 8011a10:	f000 fc16 	bl	8012240 <__multiply>
 8011a14:	9901      	ldr	r1, [sp, #4]
 8011a16:	9004      	str	r0, [sp, #16]
 8011a18:	4648      	mov	r0, r9
 8011a1a:	f000 fb47 	bl	80120ac <_Bfree>
 8011a1e:	9a04      	ldr	r2, [sp, #16]
 8011a20:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a22:	9201      	str	r2, [sp, #4]
 8011a24:	1b1a      	subs	r2, r3, r4
 8011a26:	d004      	beq.n	8011a32 <_dtoa_r+0x6b2>
 8011a28:	9901      	ldr	r1, [sp, #4]
 8011a2a:	4648      	mov	r0, r9
 8011a2c:	f000 fcb2 	bl	8012394 <__pow5mult>
 8011a30:	9001      	str	r0, [sp, #4]
 8011a32:	2101      	movs	r1, #1
 8011a34:	4648      	mov	r0, r9
 8011a36:	f000 fbed 	bl	8012214 <__i2b>
 8011a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a3c:	4604      	mov	r4, r0
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	f000 81d0 	beq.w	8011de4 <_dtoa_r+0xa64>
 8011a44:	461a      	mov	r2, r3
 8011a46:	4601      	mov	r1, r0
 8011a48:	4648      	mov	r0, r9
 8011a4a:	f000 fca3 	bl	8012394 <__pow5mult>
 8011a4e:	9b07      	ldr	r3, [sp, #28]
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	4604      	mov	r4, r0
 8011a54:	f300 8095 	bgt.w	8011b82 <_dtoa_r+0x802>
 8011a58:	9b02      	ldr	r3, [sp, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f040 808b 	bne.w	8011b76 <_dtoa_r+0x7f6>
 8011a60:	9b03      	ldr	r3, [sp, #12]
 8011a62:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	f040 8087 	bne.w	8011b7a <_dtoa_r+0x7fa>
 8011a6c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8011a70:	0d12      	lsrs	r2, r2, #20
 8011a72:	0512      	lsls	r2, r2, #20
 8011a74:	2a00      	cmp	r2, #0
 8011a76:	f000 8082 	beq.w	8011b7e <_dtoa_r+0x7fe>
 8011a7a:	9b05      	ldr	r3, [sp, #20]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	9305      	str	r3, [sp, #20]
 8011a80:	9b06      	ldr	r3, [sp, #24]
 8011a82:	3301      	adds	r3, #1
 8011a84:	9306      	str	r3, [sp, #24]
 8011a86:	2301      	movs	r3, #1
 8011a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f000 81af 	beq.w	8011df0 <_dtoa_r+0xa70>
 8011a92:	6922      	ldr	r2, [r4, #16]
 8011a94:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8011a98:	6910      	ldr	r0, [r2, #16]
 8011a9a:	f000 fb6f 	bl	801217c <__hi0bits>
 8011a9e:	f1c0 0020 	rsb	r0, r0, #32
 8011aa2:	9b06      	ldr	r3, [sp, #24]
 8011aa4:	4418      	add	r0, r3
 8011aa6:	f010 001f 	ands.w	r0, r0, #31
 8011aaa:	d076      	beq.n	8011b9a <_dtoa_r+0x81a>
 8011aac:	f1c0 0220 	rsb	r2, r0, #32
 8011ab0:	2a04      	cmp	r2, #4
 8011ab2:	dd69      	ble.n	8011b88 <_dtoa_r+0x808>
 8011ab4:	9b05      	ldr	r3, [sp, #20]
 8011ab6:	f1c0 001c 	rsb	r0, r0, #28
 8011aba:	4403      	add	r3, r0
 8011abc:	9305      	str	r3, [sp, #20]
 8011abe:	9b06      	ldr	r3, [sp, #24]
 8011ac0:	4406      	add	r6, r0
 8011ac2:	4403      	add	r3, r0
 8011ac4:	9306      	str	r3, [sp, #24]
 8011ac6:	9b05      	ldr	r3, [sp, #20]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	dd05      	ble.n	8011ad8 <_dtoa_r+0x758>
 8011acc:	9901      	ldr	r1, [sp, #4]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4648      	mov	r0, r9
 8011ad2:	f000 fcb9 	bl	8012448 <__lshift>
 8011ad6:	9001      	str	r0, [sp, #4]
 8011ad8:	9b06      	ldr	r3, [sp, #24]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	dd05      	ble.n	8011aea <_dtoa_r+0x76a>
 8011ade:	4621      	mov	r1, r4
 8011ae0:	461a      	mov	r2, r3
 8011ae2:	4648      	mov	r0, r9
 8011ae4:	f000 fcb0 	bl	8012448 <__lshift>
 8011ae8:	4604      	mov	r4, r0
 8011aea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d056      	beq.n	8011b9e <_dtoa_r+0x81e>
 8011af0:	9801      	ldr	r0, [sp, #4]
 8011af2:	4621      	mov	r1, r4
 8011af4:	f000 fd14 	bl	8012520 <__mcmp>
 8011af8:	2800      	cmp	r0, #0
 8011afa:	da50      	bge.n	8011b9e <_dtoa_r+0x81e>
 8011afc:	f108 33ff 	add.w	r3, r8, #4294967295
 8011b00:	9304      	str	r3, [sp, #16]
 8011b02:	9901      	ldr	r1, [sp, #4]
 8011b04:	2300      	movs	r3, #0
 8011b06:	220a      	movs	r2, #10
 8011b08:	4648      	mov	r0, r9
 8011b0a:	f000 faf1 	bl	80120f0 <__multadd>
 8011b0e:	9b08      	ldr	r3, [sp, #32]
 8011b10:	9001      	str	r0, [sp, #4]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	f000 816e 	beq.w	8011df4 <_dtoa_r+0xa74>
 8011b18:	4629      	mov	r1, r5
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	220a      	movs	r2, #10
 8011b1e:	4648      	mov	r0, r9
 8011b20:	f000 fae6 	bl	80120f0 <__multadd>
 8011b24:	f1bb 0f00 	cmp.w	fp, #0
 8011b28:	4605      	mov	r5, r0
 8011b2a:	dc64      	bgt.n	8011bf6 <_dtoa_r+0x876>
 8011b2c:	9b07      	ldr	r3, [sp, #28]
 8011b2e:	2b02      	cmp	r3, #2
 8011b30:	dc3e      	bgt.n	8011bb0 <_dtoa_r+0x830>
 8011b32:	e060      	b.n	8011bf6 <_dtoa_r+0x876>
 8011b34:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011b36:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8011b3a:	e73c      	b.n	80119b6 <_dtoa_r+0x636>
 8011b3c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8011b40:	42a3      	cmp	r3, r4
 8011b42:	bfbf      	itttt	lt
 8011b44:	1ae2      	sublt	r2, r4, r3
 8011b46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8011b48:	189b      	addlt	r3, r3, r2
 8011b4a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8011b4c:	bfae      	itee	ge
 8011b4e:	1b1c      	subge	r4, r3, r4
 8011b50:	4623      	movlt	r3, r4
 8011b52:	2400      	movlt	r4, #0
 8011b54:	f1ba 0f00 	cmp.w	sl, #0
 8011b58:	bfb5      	itete	lt
 8011b5a:	9a05      	ldrlt	r2, [sp, #20]
 8011b5c:	9e05      	ldrge	r6, [sp, #20]
 8011b5e:	eba2 060a 	sublt.w	r6, r2, sl
 8011b62:	4652      	movge	r2, sl
 8011b64:	bfb8      	it	lt
 8011b66:	2200      	movlt	r2, #0
 8011b68:	e727      	b.n	80119ba <_dtoa_r+0x63a>
 8011b6a:	9e05      	ldr	r6, [sp, #20]
 8011b6c:	9d08      	ldr	r5, [sp, #32]
 8011b6e:	461c      	mov	r4, r3
 8011b70:	e730      	b.n	80119d4 <_dtoa_r+0x654>
 8011b72:	461a      	mov	r2, r3
 8011b74:	e758      	b.n	8011a28 <_dtoa_r+0x6a8>
 8011b76:	2300      	movs	r3, #0
 8011b78:	e786      	b.n	8011a88 <_dtoa_r+0x708>
 8011b7a:	9b02      	ldr	r3, [sp, #8]
 8011b7c:	e784      	b.n	8011a88 <_dtoa_r+0x708>
 8011b7e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011b80:	e783      	b.n	8011a8a <_dtoa_r+0x70a>
 8011b82:	2300      	movs	r3, #0
 8011b84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b86:	e784      	b.n	8011a92 <_dtoa_r+0x712>
 8011b88:	d09d      	beq.n	8011ac6 <_dtoa_r+0x746>
 8011b8a:	9b05      	ldr	r3, [sp, #20]
 8011b8c:	321c      	adds	r2, #28
 8011b8e:	4413      	add	r3, r2
 8011b90:	9305      	str	r3, [sp, #20]
 8011b92:	9b06      	ldr	r3, [sp, #24]
 8011b94:	4416      	add	r6, r2
 8011b96:	4413      	add	r3, r2
 8011b98:	e794      	b.n	8011ac4 <_dtoa_r+0x744>
 8011b9a:	4602      	mov	r2, r0
 8011b9c:	e7f5      	b.n	8011b8a <_dtoa_r+0x80a>
 8011b9e:	f1ba 0f00 	cmp.w	sl, #0
 8011ba2:	f8cd 8010 	str.w	r8, [sp, #16]
 8011ba6:	46d3      	mov	fp, sl
 8011ba8:	dc21      	bgt.n	8011bee <_dtoa_r+0x86e>
 8011baa:	9b07      	ldr	r3, [sp, #28]
 8011bac:	2b02      	cmp	r3, #2
 8011bae:	dd1e      	ble.n	8011bee <_dtoa_r+0x86e>
 8011bb0:	f1bb 0f00 	cmp.w	fp, #0
 8011bb4:	f47f aeb7 	bne.w	8011926 <_dtoa_r+0x5a6>
 8011bb8:	4621      	mov	r1, r4
 8011bba:	465b      	mov	r3, fp
 8011bbc:	2205      	movs	r2, #5
 8011bbe:	4648      	mov	r0, r9
 8011bc0:	f000 fa96 	bl	80120f0 <__multadd>
 8011bc4:	4601      	mov	r1, r0
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	9801      	ldr	r0, [sp, #4]
 8011bca:	f000 fca9 	bl	8012520 <__mcmp>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	f77f aea9 	ble.w	8011926 <_dtoa_r+0x5a6>
 8011bd4:	463e      	mov	r6, r7
 8011bd6:	2331      	movs	r3, #49	@ 0x31
 8011bd8:	f806 3b01 	strb.w	r3, [r6], #1
 8011bdc:	9b04      	ldr	r3, [sp, #16]
 8011bde:	3301      	adds	r3, #1
 8011be0:	9304      	str	r3, [sp, #16]
 8011be2:	e6a4      	b.n	801192e <_dtoa_r+0x5ae>
 8011be4:	f8cd 8010 	str.w	r8, [sp, #16]
 8011be8:	4654      	mov	r4, sl
 8011bea:	4625      	mov	r5, r4
 8011bec:	e7f2      	b.n	8011bd4 <_dtoa_r+0x854>
 8011bee:	9b08      	ldr	r3, [sp, #32]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f000 8103 	beq.w	8011dfc <_dtoa_r+0xa7c>
 8011bf6:	2e00      	cmp	r6, #0
 8011bf8:	dd05      	ble.n	8011c06 <_dtoa_r+0x886>
 8011bfa:	4629      	mov	r1, r5
 8011bfc:	4632      	mov	r2, r6
 8011bfe:	4648      	mov	r0, r9
 8011c00:	f000 fc22 	bl	8012448 <__lshift>
 8011c04:	4605      	mov	r5, r0
 8011c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d058      	beq.n	8011cbe <_dtoa_r+0x93e>
 8011c0c:	6869      	ldr	r1, [r5, #4]
 8011c0e:	4648      	mov	r0, r9
 8011c10:	f000 fa0c 	bl	801202c <_Balloc>
 8011c14:	4606      	mov	r6, r0
 8011c16:	b928      	cbnz	r0, 8011c24 <_dtoa_r+0x8a4>
 8011c18:	4b82      	ldr	r3, [pc, #520]	@ (8011e24 <_dtoa_r+0xaa4>)
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8011c20:	f7ff bbc7 	b.w	80113b2 <_dtoa_r+0x32>
 8011c24:	692a      	ldr	r2, [r5, #16]
 8011c26:	3202      	adds	r2, #2
 8011c28:	0092      	lsls	r2, r2, #2
 8011c2a:	f105 010c 	add.w	r1, r5, #12
 8011c2e:	300c      	adds	r0, #12
 8011c30:	f7ff faf1 	bl	8011216 <memcpy>
 8011c34:	2201      	movs	r2, #1
 8011c36:	4631      	mov	r1, r6
 8011c38:	4648      	mov	r0, r9
 8011c3a:	f000 fc05 	bl	8012448 <__lshift>
 8011c3e:	1c7b      	adds	r3, r7, #1
 8011c40:	9305      	str	r3, [sp, #20]
 8011c42:	eb07 030b 	add.w	r3, r7, fp
 8011c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c48:	9b02      	ldr	r3, [sp, #8]
 8011c4a:	f003 0301 	and.w	r3, r3, #1
 8011c4e:	46a8      	mov	r8, r5
 8011c50:	9308      	str	r3, [sp, #32]
 8011c52:	4605      	mov	r5, r0
 8011c54:	9b05      	ldr	r3, [sp, #20]
 8011c56:	9801      	ldr	r0, [sp, #4]
 8011c58:	4621      	mov	r1, r4
 8011c5a:	f103 3bff 	add.w	fp, r3, #4294967295
 8011c5e:	f7ff fb07 	bl	8011270 <quorem>
 8011c62:	4641      	mov	r1, r8
 8011c64:	9002      	str	r0, [sp, #8]
 8011c66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011c6a:	9801      	ldr	r0, [sp, #4]
 8011c6c:	f000 fc58 	bl	8012520 <__mcmp>
 8011c70:	462a      	mov	r2, r5
 8011c72:	9006      	str	r0, [sp, #24]
 8011c74:	4621      	mov	r1, r4
 8011c76:	4648      	mov	r0, r9
 8011c78:	f000 fc6e 	bl	8012558 <__mdiff>
 8011c7c:	68c2      	ldr	r2, [r0, #12]
 8011c7e:	4606      	mov	r6, r0
 8011c80:	b9fa      	cbnz	r2, 8011cc2 <_dtoa_r+0x942>
 8011c82:	4601      	mov	r1, r0
 8011c84:	9801      	ldr	r0, [sp, #4]
 8011c86:	f000 fc4b 	bl	8012520 <__mcmp>
 8011c8a:	4602      	mov	r2, r0
 8011c8c:	4631      	mov	r1, r6
 8011c8e:	4648      	mov	r0, r9
 8011c90:	920a      	str	r2, [sp, #40]	@ 0x28
 8011c92:	f000 fa0b 	bl	80120ac <_Bfree>
 8011c96:	9b07      	ldr	r3, [sp, #28]
 8011c98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c9a:	9e05      	ldr	r6, [sp, #20]
 8011c9c:	ea43 0102 	orr.w	r1, r3, r2
 8011ca0:	9b08      	ldr	r3, [sp, #32]
 8011ca2:	4319      	orrs	r1, r3
 8011ca4:	d10f      	bne.n	8011cc6 <_dtoa_r+0x946>
 8011ca6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011caa:	d028      	beq.n	8011cfe <_dtoa_r+0x97e>
 8011cac:	9b06      	ldr	r3, [sp, #24]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	dd02      	ble.n	8011cb8 <_dtoa_r+0x938>
 8011cb2:	9b02      	ldr	r3, [sp, #8]
 8011cb4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8011cb8:	f88b a000 	strb.w	sl, [fp]
 8011cbc:	e639      	b.n	8011932 <_dtoa_r+0x5b2>
 8011cbe:	4628      	mov	r0, r5
 8011cc0:	e7bd      	b.n	8011c3e <_dtoa_r+0x8be>
 8011cc2:	2201      	movs	r2, #1
 8011cc4:	e7e2      	b.n	8011c8c <_dtoa_r+0x90c>
 8011cc6:	9b06      	ldr	r3, [sp, #24]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	db04      	blt.n	8011cd6 <_dtoa_r+0x956>
 8011ccc:	9907      	ldr	r1, [sp, #28]
 8011cce:	430b      	orrs	r3, r1
 8011cd0:	9908      	ldr	r1, [sp, #32]
 8011cd2:	430b      	orrs	r3, r1
 8011cd4:	d120      	bne.n	8011d18 <_dtoa_r+0x998>
 8011cd6:	2a00      	cmp	r2, #0
 8011cd8:	ddee      	ble.n	8011cb8 <_dtoa_r+0x938>
 8011cda:	9901      	ldr	r1, [sp, #4]
 8011cdc:	2201      	movs	r2, #1
 8011cde:	4648      	mov	r0, r9
 8011ce0:	f000 fbb2 	bl	8012448 <__lshift>
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	9001      	str	r0, [sp, #4]
 8011ce8:	f000 fc1a 	bl	8012520 <__mcmp>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	dc03      	bgt.n	8011cf8 <_dtoa_r+0x978>
 8011cf0:	d1e2      	bne.n	8011cb8 <_dtoa_r+0x938>
 8011cf2:	f01a 0f01 	tst.w	sl, #1
 8011cf6:	d0df      	beq.n	8011cb8 <_dtoa_r+0x938>
 8011cf8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011cfc:	d1d9      	bne.n	8011cb2 <_dtoa_r+0x932>
 8011cfe:	2339      	movs	r3, #57	@ 0x39
 8011d00:	f88b 3000 	strb.w	r3, [fp]
 8011d04:	4633      	mov	r3, r6
 8011d06:	461e      	mov	r6, r3
 8011d08:	3b01      	subs	r3, #1
 8011d0a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011d0e:	2a39      	cmp	r2, #57	@ 0x39
 8011d10:	d053      	beq.n	8011dba <_dtoa_r+0xa3a>
 8011d12:	3201      	adds	r2, #1
 8011d14:	701a      	strb	r2, [r3, #0]
 8011d16:	e60c      	b.n	8011932 <_dtoa_r+0x5b2>
 8011d18:	2a00      	cmp	r2, #0
 8011d1a:	dd07      	ble.n	8011d2c <_dtoa_r+0x9ac>
 8011d1c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8011d20:	d0ed      	beq.n	8011cfe <_dtoa_r+0x97e>
 8011d22:	f10a 0301 	add.w	r3, sl, #1
 8011d26:	f88b 3000 	strb.w	r3, [fp]
 8011d2a:	e602      	b.n	8011932 <_dtoa_r+0x5b2>
 8011d2c:	9b05      	ldr	r3, [sp, #20]
 8011d2e:	9a05      	ldr	r2, [sp, #20]
 8011d30:	f803 ac01 	strb.w	sl, [r3, #-1]
 8011d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d029      	beq.n	8011d8e <_dtoa_r+0xa0e>
 8011d3a:	9901      	ldr	r1, [sp, #4]
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	220a      	movs	r2, #10
 8011d40:	4648      	mov	r0, r9
 8011d42:	f000 f9d5 	bl	80120f0 <__multadd>
 8011d46:	45a8      	cmp	r8, r5
 8011d48:	9001      	str	r0, [sp, #4]
 8011d4a:	f04f 0300 	mov.w	r3, #0
 8011d4e:	f04f 020a 	mov.w	r2, #10
 8011d52:	4641      	mov	r1, r8
 8011d54:	4648      	mov	r0, r9
 8011d56:	d107      	bne.n	8011d68 <_dtoa_r+0x9e8>
 8011d58:	f000 f9ca 	bl	80120f0 <__multadd>
 8011d5c:	4680      	mov	r8, r0
 8011d5e:	4605      	mov	r5, r0
 8011d60:	9b05      	ldr	r3, [sp, #20]
 8011d62:	3301      	adds	r3, #1
 8011d64:	9305      	str	r3, [sp, #20]
 8011d66:	e775      	b.n	8011c54 <_dtoa_r+0x8d4>
 8011d68:	f000 f9c2 	bl	80120f0 <__multadd>
 8011d6c:	4629      	mov	r1, r5
 8011d6e:	4680      	mov	r8, r0
 8011d70:	2300      	movs	r3, #0
 8011d72:	220a      	movs	r2, #10
 8011d74:	4648      	mov	r0, r9
 8011d76:	f000 f9bb 	bl	80120f0 <__multadd>
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	e7f0      	b.n	8011d60 <_dtoa_r+0x9e0>
 8011d7e:	f1bb 0f00 	cmp.w	fp, #0
 8011d82:	bfcc      	ite	gt
 8011d84:	465e      	movgt	r6, fp
 8011d86:	2601      	movle	r6, #1
 8011d88:	443e      	add	r6, r7
 8011d8a:	f04f 0800 	mov.w	r8, #0
 8011d8e:	9901      	ldr	r1, [sp, #4]
 8011d90:	2201      	movs	r2, #1
 8011d92:	4648      	mov	r0, r9
 8011d94:	f000 fb58 	bl	8012448 <__lshift>
 8011d98:	4621      	mov	r1, r4
 8011d9a:	9001      	str	r0, [sp, #4]
 8011d9c:	f000 fbc0 	bl	8012520 <__mcmp>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	dcaf      	bgt.n	8011d04 <_dtoa_r+0x984>
 8011da4:	d102      	bne.n	8011dac <_dtoa_r+0xa2c>
 8011da6:	f01a 0f01 	tst.w	sl, #1
 8011daa:	d1ab      	bne.n	8011d04 <_dtoa_r+0x984>
 8011dac:	4633      	mov	r3, r6
 8011dae:	461e      	mov	r6, r3
 8011db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011db4:	2a30      	cmp	r2, #48	@ 0x30
 8011db6:	d0fa      	beq.n	8011dae <_dtoa_r+0xa2e>
 8011db8:	e5bb      	b.n	8011932 <_dtoa_r+0x5b2>
 8011dba:	429f      	cmp	r7, r3
 8011dbc:	d1a3      	bne.n	8011d06 <_dtoa_r+0x986>
 8011dbe:	9b04      	ldr	r3, [sp, #16]
 8011dc0:	3301      	adds	r3, #1
 8011dc2:	9304      	str	r3, [sp, #16]
 8011dc4:	2331      	movs	r3, #49	@ 0x31
 8011dc6:	703b      	strb	r3, [r7, #0]
 8011dc8:	e5b3      	b.n	8011932 <_dtoa_r+0x5b2>
 8011dca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011dcc:	4f16      	ldr	r7, [pc, #88]	@ (8011e28 <_dtoa_r+0xaa8>)
 8011dce:	b11b      	cbz	r3, 8011dd8 <_dtoa_r+0xa58>
 8011dd0:	f107 0308 	add.w	r3, r7, #8
 8011dd4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011dd6:	6013      	str	r3, [r2, #0]
 8011dd8:	4638      	mov	r0, r7
 8011dda:	b011      	add	sp, #68	@ 0x44
 8011ddc:	ecbd 8b02 	vpop	{d8}
 8011de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de4:	9b07      	ldr	r3, [sp, #28]
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	f77f ae36 	ble.w	8011a58 <_dtoa_r+0x6d8>
 8011dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011df0:	2001      	movs	r0, #1
 8011df2:	e656      	b.n	8011aa2 <_dtoa_r+0x722>
 8011df4:	f1bb 0f00 	cmp.w	fp, #0
 8011df8:	f77f aed7 	ble.w	8011baa <_dtoa_r+0x82a>
 8011dfc:	463e      	mov	r6, r7
 8011dfe:	9801      	ldr	r0, [sp, #4]
 8011e00:	4621      	mov	r1, r4
 8011e02:	f7ff fa35 	bl	8011270 <quorem>
 8011e06:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8011e0a:	f806 ab01 	strb.w	sl, [r6], #1
 8011e0e:	1bf2      	subs	r2, r6, r7
 8011e10:	4593      	cmp	fp, r2
 8011e12:	ddb4      	ble.n	8011d7e <_dtoa_r+0x9fe>
 8011e14:	9901      	ldr	r1, [sp, #4]
 8011e16:	2300      	movs	r3, #0
 8011e18:	220a      	movs	r2, #10
 8011e1a:	4648      	mov	r0, r9
 8011e1c:	f000 f968 	bl	80120f0 <__multadd>
 8011e20:	9001      	str	r0, [sp, #4]
 8011e22:	e7ec      	b.n	8011dfe <_dtoa_r+0xa7e>
 8011e24:	08013430 	.word	0x08013430
 8011e28:	080133cb 	.word	0x080133cb

08011e2c <_free_r>:
 8011e2c:	b538      	push	{r3, r4, r5, lr}
 8011e2e:	4605      	mov	r5, r0
 8011e30:	2900      	cmp	r1, #0
 8011e32:	d041      	beq.n	8011eb8 <_free_r+0x8c>
 8011e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e38:	1f0c      	subs	r4, r1, #4
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	bfb8      	it	lt
 8011e3e:	18e4      	addlt	r4, r4, r3
 8011e40:	f000 f8e8 	bl	8012014 <__malloc_lock>
 8011e44:	4a1d      	ldr	r2, [pc, #116]	@ (8011ebc <_free_r+0x90>)
 8011e46:	6813      	ldr	r3, [r2, #0]
 8011e48:	b933      	cbnz	r3, 8011e58 <_free_r+0x2c>
 8011e4a:	6063      	str	r3, [r4, #4]
 8011e4c:	6014      	str	r4, [r2, #0]
 8011e4e:	4628      	mov	r0, r5
 8011e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e54:	f000 b8e4 	b.w	8012020 <__malloc_unlock>
 8011e58:	42a3      	cmp	r3, r4
 8011e5a:	d908      	bls.n	8011e6e <_free_r+0x42>
 8011e5c:	6820      	ldr	r0, [r4, #0]
 8011e5e:	1821      	adds	r1, r4, r0
 8011e60:	428b      	cmp	r3, r1
 8011e62:	bf01      	itttt	eq
 8011e64:	6819      	ldreq	r1, [r3, #0]
 8011e66:	685b      	ldreq	r3, [r3, #4]
 8011e68:	1809      	addeq	r1, r1, r0
 8011e6a:	6021      	streq	r1, [r4, #0]
 8011e6c:	e7ed      	b.n	8011e4a <_free_r+0x1e>
 8011e6e:	461a      	mov	r2, r3
 8011e70:	685b      	ldr	r3, [r3, #4]
 8011e72:	b10b      	cbz	r3, 8011e78 <_free_r+0x4c>
 8011e74:	42a3      	cmp	r3, r4
 8011e76:	d9fa      	bls.n	8011e6e <_free_r+0x42>
 8011e78:	6811      	ldr	r1, [r2, #0]
 8011e7a:	1850      	adds	r0, r2, r1
 8011e7c:	42a0      	cmp	r0, r4
 8011e7e:	d10b      	bne.n	8011e98 <_free_r+0x6c>
 8011e80:	6820      	ldr	r0, [r4, #0]
 8011e82:	4401      	add	r1, r0
 8011e84:	1850      	adds	r0, r2, r1
 8011e86:	4283      	cmp	r3, r0
 8011e88:	6011      	str	r1, [r2, #0]
 8011e8a:	d1e0      	bne.n	8011e4e <_free_r+0x22>
 8011e8c:	6818      	ldr	r0, [r3, #0]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	6053      	str	r3, [r2, #4]
 8011e92:	4408      	add	r0, r1
 8011e94:	6010      	str	r0, [r2, #0]
 8011e96:	e7da      	b.n	8011e4e <_free_r+0x22>
 8011e98:	d902      	bls.n	8011ea0 <_free_r+0x74>
 8011e9a:	230c      	movs	r3, #12
 8011e9c:	602b      	str	r3, [r5, #0]
 8011e9e:	e7d6      	b.n	8011e4e <_free_r+0x22>
 8011ea0:	6820      	ldr	r0, [r4, #0]
 8011ea2:	1821      	adds	r1, r4, r0
 8011ea4:	428b      	cmp	r3, r1
 8011ea6:	bf04      	itt	eq
 8011ea8:	6819      	ldreq	r1, [r3, #0]
 8011eaa:	685b      	ldreq	r3, [r3, #4]
 8011eac:	6063      	str	r3, [r4, #4]
 8011eae:	bf04      	itt	eq
 8011eb0:	1809      	addeq	r1, r1, r0
 8011eb2:	6021      	streq	r1, [r4, #0]
 8011eb4:	6054      	str	r4, [r2, #4]
 8011eb6:	e7ca      	b.n	8011e4e <_free_r+0x22>
 8011eb8:	bd38      	pop	{r3, r4, r5, pc}
 8011eba:	bf00      	nop
 8011ebc:	24005704 	.word	0x24005704

08011ec0 <malloc>:
 8011ec0:	4b02      	ldr	r3, [pc, #8]	@ (8011ecc <malloc+0xc>)
 8011ec2:	4601      	mov	r1, r0
 8011ec4:	6818      	ldr	r0, [r3, #0]
 8011ec6:	f000 b825 	b.w	8011f14 <_malloc_r>
 8011eca:	bf00      	nop
 8011ecc:	24000020 	.word	0x24000020

08011ed0 <sbrk_aligned>:
 8011ed0:	b570      	push	{r4, r5, r6, lr}
 8011ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8011f10 <sbrk_aligned+0x40>)
 8011ed4:	460c      	mov	r4, r1
 8011ed6:	6831      	ldr	r1, [r6, #0]
 8011ed8:	4605      	mov	r5, r0
 8011eda:	b911      	cbnz	r1, 8011ee2 <sbrk_aligned+0x12>
 8011edc:	f000 fe58 	bl	8012b90 <_sbrk_r>
 8011ee0:	6030      	str	r0, [r6, #0]
 8011ee2:	4621      	mov	r1, r4
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	f000 fe53 	bl	8012b90 <_sbrk_r>
 8011eea:	1c43      	adds	r3, r0, #1
 8011eec:	d103      	bne.n	8011ef6 <sbrk_aligned+0x26>
 8011eee:	f04f 34ff 	mov.w	r4, #4294967295
 8011ef2:	4620      	mov	r0, r4
 8011ef4:	bd70      	pop	{r4, r5, r6, pc}
 8011ef6:	1cc4      	adds	r4, r0, #3
 8011ef8:	f024 0403 	bic.w	r4, r4, #3
 8011efc:	42a0      	cmp	r0, r4
 8011efe:	d0f8      	beq.n	8011ef2 <sbrk_aligned+0x22>
 8011f00:	1a21      	subs	r1, r4, r0
 8011f02:	4628      	mov	r0, r5
 8011f04:	f000 fe44 	bl	8012b90 <_sbrk_r>
 8011f08:	3001      	adds	r0, #1
 8011f0a:	d1f2      	bne.n	8011ef2 <sbrk_aligned+0x22>
 8011f0c:	e7ef      	b.n	8011eee <sbrk_aligned+0x1e>
 8011f0e:	bf00      	nop
 8011f10:	24005700 	.word	0x24005700

08011f14 <_malloc_r>:
 8011f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f18:	1ccd      	adds	r5, r1, #3
 8011f1a:	f025 0503 	bic.w	r5, r5, #3
 8011f1e:	3508      	adds	r5, #8
 8011f20:	2d0c      	cmp	r5, #12
 8011f22:	bf38      	it	cc
 8011f24:	250c      	movcc	r5, #12
 8011f26:	2d00      	cmp	r5, #0
 8011f28:	4606      	mov	r6, r0
 8011f2a:	db01      	blt.n	8011f30 <_malloc_r+0x1c>
 8011f2c:	42a9      	cmp	r1, r5
 8011f2e:	d904      	bls.n	8011f3a <_malloc_r+0x26>
 8011f30:	230c      	movs	r3, #12
 8011f32:	6033      	str	r3, [r6, #0]
 8011f34:	2000      	movs	r0, #0
 8011f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012010 <_malloc_r+0xfc>
 8011f3e:	f000 f869 	bl	8012014 <__malloc_lock>
 8011f42:	f8d8 3000 	ldr.w	r3, [r8]
 8011f46:	461c      	mov	r4, r3
 8011f48:	bb44      	cbnz	r4, 8011f9c <_malloc_r+0x88>
 8011f4a:	4629      	mov	r1, r5
 8011f4c:	4630      	mov	r0, r6
 8011f4e:	f7ff ffbf 	bl	8011ed0 <sbrk_aligned>
 8011f52:	1c43      	adds	r3, r0, #1
 8011f54:	4604      	mov	r4, r0
 8011f56:	d158      	bne.n	801200a <_malloc_r+0xf6>
 8011f58:	f8d8 4000 	ldr.w	r4, [r8]
 8011f5c:	4627      	mov	r7, r4
 8011f5e:	2f00      	cmp	r7, #0
 8011f60:	d143      	bne.n	8011fea <_malloc_r+0xd6>
 8011f62:	2c00      	cmp	r4, #0
 8011f64:	d04b      	beq.n	8011ffe <_malloc_r+0xea>
 8011f66:	6823      	ldr	r3, [r4, #0]
 8011f68:	4639      	mov	r1, r7
 8011f6a:	4630      	mov	r0, r6
 8011f6c:	eb04 0903 	add.w	r9, r4, r3
 8011f70:	f000 fe0e 	bl	8012b90 <_sbrk_r>
 8011f74:	4581      	cmp	r9, r0
 8011f76:	d142      	bne.n	8011ffe <_malloc_r+0xea>
 8011f78:	6821      	ldr	r1, [r4, #0]
 8011f7a:	1a6d      	subs	r5, r5, r1
 8011f7c:	4629      	mov	r1, r5
 8011f7e:	4630      	mov	r0, r6
 8011f80:	f7ff ffa6 	bl	8011ed0 <sbrk_aligned>
 8011f84:	3001      	adds	r0, #1
 8011f86:	d03a      	beq.n	8011ffe <_malloc_r+0xea>
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	442b      	add	r3, r5
 8011f8c:	6023      	str	r3, [r4, #0]
 8011f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8011f92:	685a      	ldr	r2, [r3, #4]
 8011f94:	bb62      	cbnz	r2, 8011ff0 <_malloc_r+0xdc>
 8011f96:	f8c8 7000 	str.w	r7, [r8]
 8011f9a:	e00f      	b.n	8011fbc <_malloc_r+0xa8>
 8011f9c:	6822      	ldr	r2, [r4, #0]
 8011f9e:	1b52      	subs	r2, r2, r5
 8011fa0:	d420      	bmi.n	8011fe4 <_malloc_r+0xd0>
 8011fa2:	2a0b      	cmp	r2, #11
 8011fa4:	d917      	bls.n	8011fd6 <_malloc_r+0xc2>
 8011fa6:	1961      	adds	r1, r4, r5
 8011fa8:	42a3      	cmp	r3, r4
 8011faa:	6025      	str	r5, [r4, #0]
 8011fac:	bf18      	it	ne
 8011fae:	6059      	strne	r1, [r3, #4]
 8011fb0:	6863      	ldr	r3, [r4, #4]
 8011fb2:	bf08      	it	eq
 8011fb4:	f8c8 1000 	streq.w	r1, [r8]
 8011fb8:	5162      	str	r2, [r4, r5]
 8011fba:	604b      	str	r3, [r1, #4]
 8011fbc:	4630      	mov	r0, r6
 8011fbe:	f000 f82f 	bl	8012020 <__malloc_unlock>
 8011fc2:	f104 000b 	add.w	r0, r4, #11
 8011fc6:	1d23      	adds	r3, r4, #4
 8011fc8:	f020 0007 	bic.w	r0, r0, #7
 8011fcc:	1ac2      	subs	r2, r0, r3
 8011fce:	bf1c      	itt	ne
 8011fd0:	1a1b      	subne	r3, r3, r0
 8011fd2:	50a3      	strne	r3, [r4, r2]
 8011fd4:	e7af      	b.n	8011f36 <_malloc_r+0x22>
 8011fd6:	6862      	ldr	r2, [r4, #4]
 8011fd8:	42a3      	cmp	r3, r4
 8011fda:	bf0c      	ite	eq
 8011fdc:	f8c8 2000 	streq.w	r2, [r8]
 8011fe0:	605a      	strne	r2, [r3, #4]
 8011fe2:	e7eb      	b.n	8011fbc <_malloc_r+0xa8>
 8011fe4:	4623      	mov	r3, r4
 8011fe6:	6864      	ldr	r4, [r4, #4]
 8011fe8:	e7ae      	b.n	8011f48 <_malloc_r+0x34>
 8011fea:	463c      	mov	r4, r7
 8011fec:	687f      	ldr	r7, [r7, #4]
 8011fee:	e7b6      	b.n	8011f5e <_malloc_r+0x4a>
 8011ff0:	461a      	mov	r2, r3
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	42a3      	cmp	r3, r4
 8011ff6:	d1fb      	bne.n	8011ff0 <_malloc_r+0xdc>
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6053      	str	r3, [r2, #4]
 8011ffc:	e7de      	b.n	8011fbc <_malloc_r+0xa8>
 8011ffe:	230c      	movs	r3, #12
 8012000:	6033      	str	r3, [r6, #0]
 8012002:	4630      	mov	r0, r6
 8012004:	f000 f80c 	bl	8012020 <__malloc_unlock>
 8012008:	e794      	b.n	8011f34 <_malloc_r+0x20>
 801200a:	6005      	str	r5, [r0, #0]
 801200c:	e7d6      	b.n	8011fbc <_malloc_r+0xa8>
 801200e:	bf00      	nop
 8012010:	24005704 	.word	0x24005704

08012014 <__malloc_lock>:
 8012014:	4801      	ldr	r0, [pc, #4]	@ (801201c <__malloc_lock+0x8>)
 8012016:	f7ff b8fc 	b.w	8011212 <__retarget_lock_acquire_recursive>
 801201a:	bf00      	nop
 801201c:	240056fc 	.word	0x240056fc

08012020 <__malloc_unlock>:
 8012020:	4801      	ldr	r0, [pc, #4]	@ (8012028 <__malloc_unlock+0x8>)
 8012022:	f7ff b8f7 	b.w	8011214 <__retarget_lock_release_recursive>
 8012026:	bf00      	nop
 8012028:	240056fc 	.word	0x240056fc

0801202c <_Balloc>:
 801202c:	b570      	push	{r4, r5, r6, lr}
 801202e:	69c6      	ldr	r6, [r0, #28]
 8012030:	4604      	mov	r4, r0
 8012032:	460d      	mov	r5, r1
 8012034:	b976      	cbnz	r6, 8012054 <_Balloc+0x28>
 8012036:	2010      	movs	r0, #16
 8012038:	f7ff ff42 	bl	8011ec0 <malloc>
 801203c:	4602      	mov	r2, r0
 801203e:	61e0      	str	r0, [r4, #28]
 8012040:	b920      	cbnz	r0, 801204c <_Balloc+0x20>
 8012042:	4b18      	ldr	r3, [pc, #96]	@ (80120a4 <_Balloc+0x78>)
 8012044:	4818      	ldr	r0, [pc, #96]	@ (80120a8 <_Balloc+0x7c>)
 8012046:	216b      	movs	r1, #107	@ 0x6b
 8012048:	f7ff f8f4 	bl	8011234 <__assert_func>
 801204c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012050:	6006      	str	r6, [r0, #0]
 8012052:	60c6      	str	r6, [r0, #12]
 8012054:	69e6      	ldr	r6, [r4, #28]
 8012056:	68f3      	ldr	r3, [r6, #12]
 8012058:	b183      	cbz	r3, 801207c <_Balloc+0x50>
 801205a:	69e3      	ldr	r3, [r4, #28]
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012062:	b9b8      	cbnz	r0, 8012094 <_Balloc+0x68>
 8012064:	2101      	movs	r1, #1
 8012066:	fa01 f605 	lsl.w	r6, r1, r5
 801206a:	1d72      	adds	r2, r6, #5
 801206c:	0092      	lsls	r2, r2, #2
 801206e:	4620      	mov	r0, r4
 8012070:	f000 fda5 	bl	8012bbe <_calloc_r>
 8012074:	b160      	cbz	r0, 8012090 <_Balloc+0x64>
 8012076:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801207a:	e00e      	b.n	801209a <_Balloc+0x6e>
 801207c:	2221      	movs	r2, #33	@ 0x21
 801207e:	2104      	movs	r1, #4
 8012080:	4620      	mov	r0, r4
 8012082:	f000 fd9c 	bl	8012bbe <_calloc_r>
 8012086:	69e3      	ldr	r3, [r4, #28]
 8012088:	60f0      	str	r0, [r6, #12]
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d1e4      	bne.n	801205a <_Balloc+0x2e>
 8012090:	2000      	movs	r0, #0
 8012092:	bd70      	pop	{r4, r5, r6, pc}
 8012094:	6802      	ldr	r2, [r0, #0]
 8012096:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801209a:	2300      	movs	r3, #0
 801209c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80120a0:	e7f7      	b.n	8012092 <_Balloc+0x66>
 80120a2:	bf00      	nop
 80120a4:	080132ec 	.word	0x080132ec
 80120a8:	08013441 	.word	0x08013441

080120ac <_Bfree>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	69c6      	ldr	r6, [r0, #28]
 80120b0:	4605      	mov	r5, r0
 80120b2:	460c      	mov	r4, r1
 80120b4:	b976      	cbnz	r6, 80120d4 <_Bfree+0x28>
 80120b6:	2010      	movs	r0, #16
 80120b8:	f7ff ff02 	bl	8011ec0 <malloc>
 80120bc:	4602      	mov	r2, r0
 80120be:	61e8      	str	r0, [r5, #28]
 80120c0:	b920      	cbnz	r0, 80120cc <_Bfree+0x20>
 80120c2:	4b09      	ldr	r3, [pc, #36]	@ (80120e8 <_Bfree+0x3c>)
 80120c4:	4809      	ldr	r0, [pc, #36]	@ (80120ec <_Bfree+0x40>)
 80120c6:	218f      	movs	r1, #143	@ 0x8f
 80120c8:	f7ff f8b4 	bl	8011234 <__assert_func>
 80120cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80120d0:	6006      	str	r6, [r0, #0]
 80120d2:	60c6      	str	r6, [r0, #12]
 80120d4:	b13c      	cbz	r4, 80120e6 <_Bfree+0x3a>
 80120d6:	69eb      	ldr	r3, [r5, #28]
 80120d8:	6862      	ldr	r2, [r4, #4]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80120e0:	6021      	str	r1, [r4, #0]
 80120e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80120e6:	bd70      	pop	{r4, r5, r6, pc}
 80120e8:	080132ec 	.word	0x080132ec
 80120ec:	08013441 	.word	0x08013441

080120f0 <__multadd>:
 80120f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120f4:	690d      	ldr	r5, [r1, #16]
 80120f6:	4607      	mov	r7, r0
 80120f8:	460c      	mov	r4, r1
 80120fa:	461e      	mov	r6, r3
 80120fc:	f101 0c14 	add.w	ip, r1, #20
 8012100:	2000      	movs	r0, #0
 8012102:	f8dc 3000 	ldr.w	r3, [ip]
 8012106:	b299      	uxth	r1, r3
 8012108:	fb02 6101 	mla	r1, r2, r1, r6
 801210c:	0c1e      	lsrs	r6, r3, #16
 801210e:	0c0b      	lsrs	r3, r1, #16
 8012110:	fb02 3306 	mla	r3, r2, r6, r3
 8012114:	b289      	uxth	r1, r1
 8012116:	3001      	adds	r0, #1
 8012118:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801211c:	4285      	cmp	r5, r0
 801211e:	f84c 1b04 	str.w	r1, [ip], #4
 8012122:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012126:	dcec      	bgt.n	8012102 <__multadd+0x12>
 8012128:	b30e      	cbz	r6, 801216e <__multadd+0x7e>
 801212a:	68a3      	ldr	r3, [r4, #8]
 801212c:	42ab      	cmp	r3, r5
 801212e:	dc19      	bgt.n	8012164 <__multadd+0x74>
 8012130:	6861      	ldr	r1, [r4, #4]
 8012132:	4638      	mov	r0, r7
 8012134:	3101      	adds	r1, #1
 8012136:	f7ff ff79 	bl	801202c <_Balloc>
 801213a:	4680      	mov	r8, r0
 801213c:	b928      	cbnz	r0, 801214a <__multadd+0x5a>
 801213e:	4602      	mov	r2, r0
 8012140:	4b0c      	ldr	r3, [pc, #48]	@ (8012174 <__multadd+0x84>)
 8012142:	480d      	ldr	r0, [pc, #52]	@ (8012178 <__multadd+0x88>)
 8012144:	21ba      	movs	r1, #186	@ 0xba
 8012146:	f7ff f875 	bl	8011234 <__assert_func>
 801214a:	6922      	ldr	r2, [r4, #16]
 801214c:	3202      	adds	r2, #2
 801214e:	f104 010c 	add.w	r1, r4, #12
 8012152:	0092      	lsls	r2, r2, #2
 8012154:	300c      	adds	r0, #12
 8012156:	f7ff f85e 	bl	8011216 <memcpy>
 801215a:	4621      	mov	r1, r4
 801215c:	4638      	mov	r0, r7
 801215e:	f7ff ffa5 	bl	80120ac <_Bfree>
 8012162:	4644      	mov	r4, r8
 8012164:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012168:	3501      	adds	r5, #1
 801216a:	615e      	str	r6, [r3, #20]
 801216c:	6125      	str	r5, [r4, #16]
 801216e:	4620      	mov	r0, r4
 8012170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012174:	08013430 	.word	0x08013430
 8012178:	08013441 	.word	0x08013441

0801217c <__hi0bits>:
 801217c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012180:	4603      	mov	r3, r0
 8012182:	bf36      	itet	cc
 8012184:	0403      	lslcc	r3, r0, #16
 8012186:	2000      	movcs	r0, #0
 8012188:	2010      	movcc	r0, #16
 801218a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801218e:	bf3c      	itt	cc
 8012190:	021b      	lslcc	r3, r3, #8
 8012192:	3008      	addcc	r0, #8
 8012194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012198:	bf3c      	itt	cc
 801219a:	011b      	lslcc	r3, r3, #4
 801219c:	3004      	addcc	r0, #4
 801219e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80121a2:	bf3c      	itt	cc
 80121a4:	009b      	lslcc	r3, r3, #2
 80121a6:	3002      	addcc	r0, #2
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	db05      	blt.n	80121b8 <__hi0bits+0x3c>
 80121ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80121b0:	f100 0001 	add.w	r0, r0, #1
 80121b4:	bf08      	it	eq
 80121b6:	2020      	moveq	r0, #32
 80121b8:	4770      	bx	lr

080121ba <__lo0bits>:
 80121ba:	6803      	ldr	r3, [r0, #0]
 80121bc:	4602      	mov	r2, r0
 80121be:	f013 0007 	ands.w	r0, r3, #7
 80121c2:	d00b      	beq.n	80121dc <__lo0bits+0x22>
 80121c4:	07d9      	lsls	r1, r3, #31
 80121c6:	d421      	bmi.n	801220c <__lo0bits+0x52>
 80121c8:	0798      	lsls	r0, r3, #30
 80121ca:	bf49      	itett	mi
 80121cc:	085b      	lsrmi	r3, r3, #1
 80121ce:	089b      	lsrpl	r3, r3, #2
 80121d0:	2001      	movmi	r0, #1
 80121d2:	6013      	strmi	r3, [r2, #0]
 80121d4:	bf5c      	itt	pl
 80121d6:	6013      	strpl	r3, [r2, #0]
 80121d8:	2002      	movpl	r0, #2
 80121da:	4770      	bx	lr
 80121dc:	b299      	uxth	r1, r3
 80121de:	b909      	cbnz	r1, 80121e4 <__lo0bits+0x2a>
 80121e0:	0c1b      	lsrs	r3, r3, #16
 80121e2:	2010      	movs	r0, #16
 80121e4:	b2d9      	uxtb	r1, r3
 80121e6:	b909      	cbnz	r1, 80121ec <__lo0bits+0x32>
 80121e8:	3008      	adds	r0, #8
 80121ea:	0a1b      	lsrs	r3, r3, #8
 80121ec:	0719      	lsls	r1, r3, #28
 80121ee:	bf04      	itt	eq
 80121f0:	091b      	lsreq	r3, r3, #4
 80121f2:	3004      	addeq	r0, #4
 80121f4:	0799      	lsls	r1, r3, #30
 80121f6:	bf04      	itt	eq
 80121f8:	089b      	lsreq	r3, r3, #2
 80121fa:	3002      	addeq	r0, #2
 80121fc:	07d9      	lsls	r1, r3, #31
 80121fe:	d403      	bmi.n	8012208 <__lo0bits+0x4e>
 8012200:	085b      	lsrs	r3, r3, #1
 8012202:	f100 0001 	add.w	r0, r0, #1
 8012206:	d003      	beq.n	8012210 <__lo0bits+0x56>
 8012208:	6013      	str	r3, [r2, #0]
 801220a:	4770      	bx	lr
 801220c:	2000      	movs	r0, #0
 801220e:	4770      	bx	lr
 8012210:	2020      	movs	r0, #32
 8012212:	4770      	bx	lr

08012214 <__i2b>:
 8012214:	b510      	push	{r4, lr}
 8012216:	460c      	mov	r4, r1
 8012218:	2101      	movs	r1, #1
 801221a:	f7ff ff07 	bl	801202c <_Balloc>
 801221e:	4602      	mov	r2, r0
 8012220:	b928      	cbnz	r0, 801222e <__i2b+0x1a>
 8012222:	4b05      	ldr	r3, [pc, #20]	@ (8012238 <__i2b+0x24>)
 8012224:	4805      	ldr	r0, [pc, #20]	@ (801223c <__i2b+0x28>)
 8012226:	f240 1145 	movw	r1, #325	@ 0x145
 801222a:	f7ff f803 	bl	8011234 <__assert_func>
 801222e:	2301      	movs	r3, #1
 8012230:	6144      	str	r4, [r0, #20]
 8012232:	6103      	str	r3, [r0, #16]
 8012234:	bd10      	pop	{r4, pc}
 8012236:	bf00      	nop
 8012238:	08013430 	.word	0x08013430
 801223c:	08013441 	.word	0x08013441

08012240 <__multiply>:
 8012240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012244:	4614      	mov	r4, r2
 8012246:	690a      	ldr	r2, [r1, #16]
 8012248:	6923      	ldr	r3, [r4, #16]
 801224a:	429a      	cmp	r2, r3
 801224c:	bfa8      	it	ge
 801224e:	4623      	movge	r3, r4
 8012250:	460f      	mov	r7, r1
 8012252:	bfa4      	itt	ge
 8012254:	460c      	movge	r4, r1
 8012256:	461f      	movge	r7, r3
 8012258:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801225c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012260:	68a3      	ldr	r3, [r4, #8]
 8012262:	6861      	ldr	r1, [r4, #4]
 8012264:	eb0a 0609 	add.w	r6, sl, r9
 8012268:	42b3      	cmp	r3, r6
 801226a:	b085      	sub	sp, #20
 801226c:	bfb8      	it	lt
 801226e:	3101      	addlt	r1, #1
 8012270:	f7ff fedc 	bl	801202c <_Balloc>
 8012274:	b930      	cbnz	r0, 8012284 <__multiply+0x44>
 8012276:	4602      	mov	r2, r0
 8012278:	4b44      	ldr	r3, [pc, #272]	@ (801238c <__multiply+0x14c>)
 801227a:	4845      	ldr	r0, [pc, #276]	@ (8012390 <__multiply+0x150>)
 801227c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012280:	f7fe ffd8 	bl	8011234 <__assert_func>
 8012284:	f100 0514 	add.w	r5, r0, #20
 8012288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801228c:	462b      	mov	r3, r5
 801228e:	2200      	movs	r2, #0
 8012290:	4543      	cmp	r3, r8
 8012292:	d321      	bcc.n	80122d8 <__multiply+0x98>
 8012294:	f107 0114 	add.w	r1, r7, #20
 8012298:	f104 0214 	add.w	r2, r4, #20
 801229c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80122a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80122a4:	9302      	str	r3, [sp, #8]
 80122a6:	1b13      	subs	r3, r2, r4
 80122a8:	3b15      	subs	r3, #21
 80122aa:	f023 0303 	bic.w	r3, r3, #3
 80122ae:	3304      	adds	r3, #4
 80122b0:	f104 0715 	add.w	r7, r4, #21
 80122b4:	42ba      	cmp	r2, r7
 80122b6:	bf38      	it	cc
 80122b8:	2304      	movcc	r3, #4
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	9b02      	ldr	r3, [sp, #8]
 80122be:	9103      	str	r1, [sp, #12]
 80122c0:	428b      	cmp	r3, r1
 80122c2:	d80c      	bhi.n	80122de <__multiply+0x9e>
 80122c4:	2e00      	cmp	r6, #0
 80122c6:	dd03      	ble.n	80122d0 <__multiply+0x90>
 80122c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d05b      	beq.n	8012388 <__multiply+0x148>
 80122d0:	6106      	str	r6, [r0, #16]
 80122d2:	b005      	add	sp, #20
 80122d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d8:	f843 2b04 	str.w	r2, [r3], #4
 80122dc:	e7d8      	b.n	8012290 <__multiply+0x50>
 80122de:	f8b1 a000 	ldrh.w	sl, [r1]
 80122e2:	f1ba 0f00 	cmp.w	sl, #0
 80122e6:	d024      	beq.n	8012332 <__multiply+0xf2>
 80122e8:	f104 0e14 	add.w	lr, r4, #20
 80122ec:	46a9      	mov	r9, r5
 80122ee:	f04f 0c00 	mov.w	ip, #0
 80122f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80122f6:	f8d9 3000 	ldr.w	r3, [r9]
 80122fa:	fa1f fb87 	uxth.w	fp, r7
 80122fe:	b29b      	uxth	r3, r3
 8012300:	fb0a 330b 	mla	r3, sl, fp, r3
 8012304:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012308:	f8d9 7000 	ldr.w	r7, [r9]
 801230c:	4463      	add	r3, ip
 801230e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012312:	fb0a c70b 	mla	r7, sl, fp, ip
 8012316:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801231a:	b29b      	uxth	r3, r3
 801231c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012320:	4572      	cmp	r2, lr
 8012322:	f849 3b04 	str.w	r3, [r9], #4
 8012326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801232a:	d8e2      	bhi.n	80122f2 <__multiply+0xb2>
 801232c:	9b01      	ldr	r3, [sp, #4]
 801232e:	f845 c003 	str.w	ip, [r5, r3]
 8012332:	9b03      	ldr	r3, [sp, #12]
 8012334:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012338:	3104      	adds	r1, #4
 801233a:	f1b9 0f00 	cmp.w	r9, #0
 801233e:	d021      	beq.n	8012384 <__multiply+0x144>
 8012340:	682b      	ldr	r3, [r5, #0]
 8012342:	f104 0c14 	add.w	ip, r4, #20
 8012346:	46ae      	mov	lr, r5
 8012348:	f04f 0a00 	mov.w	sl, #0
 801234c:	f8bc b000 	ldrh.w	fp, [ip]
 8012350:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012354:	fb09 770b 	mla	r7, r9, fp, r7
 8012358:	4457      	add	r7, sl
 801235a:	b29b      	uxth	r3, r3
 801235c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012360:	f84e 3b04 	str.w	r3, [lr], #4
 8012364:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801236c:	f8be 3000 	ldrh.w	r3, [lr]
 8012370:	fb09 330a 	mla	r3, r9, sl, r3
 8012374:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012378:	4562      	cmp	r2, ip
 801237a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801237e:	d8e5      	bhi.n	801234c <__multiply+0x10c>
 8012380:	9f01      	ldr	r7, [sp, #4]
 8012382:	51eb      	str	r3, [r5, r7]
 8012384:	3504      	adds	r5, #4
 8012386:	e799      	b.n	80122bc <__multiply+0x7c>
 8012388:	3e01      	subs	r6, #1
 801238a:	e79b      	b.n	80122c4 <__multiply+0x84>
 801238c:	08013430 	.word	0x08013430
 8012390:	08013441 	.word	0x08013441

08012394 <__pow5mult>:
 8012394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012398:	4615      	mov	r5, r2
 801239a:	f012 0203 	ands.w	r2, r2, #3
 801239e:	4607      	mov	r7, r0
 80123a0:	460e      	mov	r6, r1
 80123a2:	d007      	beq.n	80123b4 <__pow5mult+0x20>
 80123a4:	4c25      	ldr	r4, [pc, #148]	@ (801243c <__pow5mult+0xa8>)
 80123a6:	3a01      	subs	r2, #1
 80123a8:	2300      	movs	r3, #0
 80123aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80123ae:	f7ff fe9f 	bl	80120f0 <__multadd>
 80123b2:	4606      	mov	r6, r0
 80123b4:	10ad      	asrs	r5, r5, #2
 80123b6:	d03d      	beq.n	8012434 <__pow5mult+0xa0>
 80123b8:	69fc      	ldr	r4, [r7, #28]
 80123ba:	b97c      	cbnz	r4, 80123dc <__pow5mult+0x48>
 80123bc:	2010      	movs	r0, #16
 80123be:	f7ff fd7f 	bl	8011ec0 <malloc>
 80123c2:	4602      	mov	r2, r0
 80123c4:	61f8      	str	r0, [r7, #28]
 80123c6:	b928      	cbnz	r0, 80123d4 <__pow5mult+0x40>
 80123c8:	4b1d      	ldr	r3, [pc, #116]	@ (8012440 <__pow5mult+0xac>)
 80123ca:	481e      	ldr	r0, [pc, #120]	@ (8012444 <__pow5mult+0xb0>)
 80123cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80123d0:	f7fe ff30 	bl	8011234 <__assert_func>
 80123d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80123d8:	6004      	str	r4, [r0, #0]
 80123da:	60c4      	str	r4, [r0, #12]
 80123dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80123e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80123e4:	b94c      	cbnz	r4, 80123fa <__pow5mult+0x66>
 80123e6:	f240 2171 	movw	r1, #625	@ 0x271
 80123ea:	4638      	mov	r0, r7
 80123ec:	f7ff ff12 	bl	8012214 <__i2b>
 80123f0:	2300      	movs	r3, #0
 80123f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80123f6:	4604      	mov	r4, r0
 80123f8:	6003      	str	r3, [r0, #0]
 80123fa:	f04f 0900 	mov.w	r9, #0
 80123fe:	07eb      	lsls	r3, r5, #31
 8012400:	d50a      	bpl.n	8012418 <__pow5mult+0x84>
 8012402:	4631      	mov	r1, r6
 8012404:	4622      	mov	r2, r4
 8012406:	4638      	mov	r0, r7
 8012408:	f7ff ff1a 	bl	8012240 <__multiply>
 801240c:	4631      	mov	r1, r6
 801240e:	4680      	mov	r8, r0
 8012410:	4638      	mov	r0, r7
 8012412:	f7ff fe4b 	bl	80120ac <_Bfree>
 8012416:	4646      	mov	r6, r8
 8012418:	106d      	asrs	r5, r5, #1
 801241a:	d00b      	beq.n	8012434 <__pow5mult+0xa0>
 801241c:	6820      	ldr	r0, [r4, #0]
 801241e:	b938      	cbnz	r0, 8012430 <__pow5mult+0x9c>
 8012420:	4622      	mov	r2, r4
 8012422:	4621      	mov	r1, r4
 8012424:	4638      	mov	r0, r7
 8012426:	f7ff ff0b 	bl	8012240 <__multiply>
 801242a:	6020      	str	r0, [r4, #0]
 801242c:	f8c0 9000 	str.w	r9, [r0]
 8012430:	4604      	mov	r4, r0
 8012432:	e7e4      	b.n	80123fe <__pow5mult+0x6a>
 8012434:	4630      	mov	r0, r6
 8012436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801243a:	bf00      	nop
 801243c:	0801349c 	.word	0x0801349c
 8012440:	080132ec 	.word	0x080132ec
 8012444:	08013441 	.word	0x08013441

08012448 <__lshift>:
 8012448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801244c:	460c      	mov	r4, r1
 801244e:	6849      	ldr	r1, [r1, #4]
 8012450:	6923      	ldr	r3, [r4, #16]
 8012452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012456:	68a3      	ldr	r3, [r4, #8]
 8012458:	4607      	mov	r7, r0
 801245a:	4691      	mov	r9, r2
 801245c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012460:	f108 0601 	add.w	r6, r8, #1
 8012464:	42b3      	cmp	r3, r6
 8012466:	db0b      	blt.n	8012480 <__lshift+0x38>
 8012468:	4638      	mov	r0, r7
 801246a:	f7ff fddf 	bl	801202c <_Balloc>
 801246e:	4605      	mov	r5, r0
 8012470:	b948      	cbnz	r0, 8012486 <__lshift+0x3e>
 8012472:	4602      	mov	r2, r0
 8012474:	4b28      	ldr	r3, [pc, #160]	@ (8012518 <__lshift+0xd0>)
 8012476:	4829      	ldr	r0, [pc, #164]	@ (801251c <__lshift+0xd4>)
 8012478:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801247c:	f7fe feda 	bl	8011234 <__assert_func>
 8012480:	3101      	adds	r1, #1
 8012482:	005b      	lsls	r3, r3, #1
 8012484:	e7ee      	b.n	8012464 <__lshift+0x1c>
 8012486:	2300      	movs	r3, #0
 8012488:	f100 0114 	add.w	r1, r0, #20
 801248c:	f100 0210 	add.w	r2, r0, #16
 8012490:	4618      	mov	r0, r3
 8012492:	4553      	cmp	r3, sl
 8012494:	db33      	blt.n	80124fe <__lshift+0xb6>
 8012496:	6920      	ldr	r0, [r4, #16]
 8012498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801249c:	f104 0314 	add.w	r3, r4, #20
 80124a0:	f019 091f 	ands.w	r9, r9, #31
 80124a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80124a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80124ac:	d02b      	beq.n	8012506 <__lshift+0xbe>
 80124ae:	f1c9 0e20 	rsb	lr, r9, #32
 80124b2:	468a      	mov	sl, r1
 80124b4:	2200      	movs	r2, #0
 80124b6:	6818      	ldr	r0, [r3, #0]
 80124b8:	fa00 f009 	lsl.w	r0, r0, r9
 80124bc:	4310      	orrs	r0, r2
 80124be:	f84a 0b04 	str.w	r0, [sl], #4
 80124c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80124c6:	459c      	cmp	ip, r3
 80124c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80124cc:	d8f3      	bhi.n	80124b6 <__lshift+0x6e>
 80124ce:	ebac 0304 	sub.w	r3, ip, r4
 80124d2:	3b15      	subs	r3, #21
 80124d4:	f023 0303 	bic.w	r3, r3, #3
 80124d8:	3304      	adds	r3, #4
 80124da:	f104 0015 	add.w	r0, r4, #21
 80124de:	4584      	cmp	ip, r0
 80124e0:	bf38      	it	cc
 80124e2:	2304      	movcc	r3, #4
 80124e4:	50ca      	str	r2, [r1, r3]
 80124e6:	b10a      	cbz	r2, 80124ec <__lshift+0xa4>
 80124e8:	f108 0602 	add.w	r6, r8, #2
 80124ec:	3e01      	subs	r6, #1
 80124ee:	4638      	mov	r0, r7
 80124f0:	612e      	str	r6, [r5, #16]
 80124f2:	4621      	mov	r1, r4
 80124f4:	f7ff fdda 	bl	80120ac <_Bfree>
 80124f8:	4628      	mov	r0, r5
 80124fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8012502:	3301      	adds	r3, #1
 8012504:	e7c5      	b.n	8012492 <__lshift+0x4a>
 8012506:	3904      	subs	r1, #4
 8012508:	f853 2b04 	ldr.w	r2, [r3], #4
 801250c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012510:	459c      	cmp	ip, r3
 8012512:	d8f9      	bhi.n	8012508 <__lshift+0xc0>
 8012514:	e7ea      	b.n	80124ec <__lshift+0xa4>
 8012516:	bf00      	nop
 8012518:	08013430 	.word	0x08013430
 801251c:	08013441 	.word	0x08013441

08012520 <__mcmp>:
 8012520:	690a      	ldr	r2, [r1, #16]
 8012522:	4603      	mov	r3, r0
 8012524:	6900      	ldr	r0, [r0, #16]
 8012526:	1a80      	subs	r0, r0, r2
 8012528:	b530      	push	{r4, r5, lr}
 801252a:	d10e      	bne.n	801254a <__mcmp+0x2a>
 801252c:	3314      	adds	r3, #20
 801252e:	3114      	adds	r1, #20
 8012530:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012534:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801253c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012540:	4295      	cmp	r5, r2
 8012542:	d003      	beq.n	801254c <__mcmp+0x2c>
 8012544:	d205      	bcs.n	8012552 <__mcmp+0x32>
 8012546:	f04f 30ff 	mov.w	r0, #4294967295
 801254a:	bd30      	pop	{r4, r5, pc}
 801254c:	42a3      	cmp	r3, r4
 801254e:	d3f3      	bcc.n	8012538 <__mcmp+0x18>
 8012550:	e7fb      	b.n	801254a <__mcmp+0x2a>
 8012552:	2001      	movs	r0, #1
 8012554:	e7f9      	b.n	801254a <__mcmp+0x2a>
	...

08012558 <__mdiff>:
 8012558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801255c:	4689      	mov	r9, r1
 801255e:	4606      	mov	r6, r0
 8012560:	4611      	mov	r1, r2
 8012562:	4648      	mov	r0, r9
 8012564:	4614      	mov	r4, r2
 8012566:	f7ff ffdb 	bl	8012520 <__mcmp>
 801256a:	1e05      	subs	r5, r0, #0
 801256c:	d112      	bne.n	8012594 <__mdiff+0x3c>
 801256e:	4629      	mov	r1, r5
 8012570:	4630      	mov	r0, r6
 8012572:	f7ff fd5b 	bl	801202c <_Balloc>
 8012576:	4602      	mov	r2, r0
 8012578:	b928      	cbnz	r0, 8012586 <__mdiff+0x2e>
 801257a:	4b3f      	ldr	r3, [pc, #252]	@ (8012678 <__mdiff+0x120>)
 801257c:	f240 2137 	movw	r1, #567	@ 0x237
 8012580:	483e      	ldr	r0, [pc, #248]	@ (801267c <__mdiff+0x124>)
 8012582:	f7fe fe57 	bl	8011234 <__assert_func>
 8012586:	2301      	movs	r3, #1
 8012588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801258c:	4610      	mov	r0, r2
 801258e:	b003      	add	sp, #12
 8012590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012594:	bfbc      	itt	lt
 8012596:	464b      	movlt	r3, r9
 8012598:	46a1      	movlt	r9, r4
 801259a:	4630      	mov	r0, r6
 801259c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80125a0:	bfba      	itte	lt
 80125a2:	461c      	movlt	r4, r3
 80125a4:	2501      	movlt	r5, #1
 80125a6:	2500      	movge	r5, #0
 80125a8:	f7ff fd40 	bl	801202c <_Balloc>
 80125ac:	4602      	mov	r2, r0
 80125ae:	b918      	cbnz	r0, 80125b8 <__mdiff+0x60>
 80125b0:	4b31      	ldr	r3, [pc, #196]	@ (8012678 <__mdiff+0x120>)
 80125b2:	f240 2145 	movw	r1, #581	@ 0x245
 80125b6:	e7e3      	b.n	8012580 <__mdiff+0x28>
 80125b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80125bc:	6926      	ldr	r6, [r4, #16]
 80125be:	60c5      	str	r5, [r0, #12]
 80125c0:	f109 0310 	add.w	r3, r9, #16
 80125c4:	f109 0514 	add.w	r5, r9, #20
 80125c8:	f104 0e14 	add.w	lr, r4, #20
 80125cc:	f100 0b14 	add.w	fp, r0, #20
 80125d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80125d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80125d8:	9301      	str	r3, [sp, #4]
 80125da:	46d9      	mov	r9, fp
 80125dc:	f04f 0c00 	mov.w	ip, #0
 80125e0:	9b01      	ldr	r3, [sp, #4]
 80125e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80125e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80125ea:	9301      	str	r3, [sp, #4]
 80125ec:	fa1f f38a 	uxth.w	r3, sl
 80125f0:	4619      	mov	r1, r3
 80125f2:	b283      	uxth	r3, r0
 80125f4:	1acb      	subs	r3, r1, r3
 80125f6:	0c00      	lsrs	r0, r0, #16
 80125f8:	4463      	add	r3, ip
 80125fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80125fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012602:	b29b      	uxth	r3, r3
 8012604:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012608:	4576      	cmp	r6, lr
 801260a:	f849 3b04 	str.w	r3, [r9], #4
 801260e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012612:	d8e5      	bhi.n	80125e0 <__mdiff+0x88>
 8012614:	1b33      	subs	r3, r6, r4
 8012616:	3b15      	subs	r3, #21
 8012618:	f023 0303 	bic.w	r3, r3, #3
 801261c:	3415      	adds	r4, #21
 801261e:	3304      	adds	r3, #4
 8012620:	42a6      	cmp	r6, r4
 8012622:	bf38      	it	cc
 8012624:	2304      	movcc	r3, #4
 8012626:	441d      	add	r5, r3
 8012628:	445b      	add	r3, fp
 801262a:	461e      	mov	r6, r3
 801262c:	462c      	mov	r4, r5
 801262e:	4544      	cmp	r4, r8
 8012630:	d30e      	bcc.n	8012650 <__mdiff+0xf8>
 8012632:	f108 0103 	add.w	r1, r8, #3
 8012636:	1b49      	subs	r1, r1, r5
 8012638:	f021 0103 	bic.w	r1, r1, #3
 801263c:	3d03      	subs	r5, #3
 801263e:	45a8      	cmp	r8, r5
 8012640:	bf38      	it	cc
 8012642:	2100      	movcc	r1, #0
 8012644:	440b      	add	r3, r1
 8012646:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801264a:	b191      	cbz	r1, 8012672 <__mdiff+0x11a>
 801264c:	6117      	str	r7, [r2, #16]
 801264e:	e79d      	b.n	801258c <__mdiff+0x34>
 8012650:	f854 1b04 	ldr.w	r1, [r4], #4
 8012654:	46e6      	mov	lr, ip
 8012656:	0c08      	lsrs	r0, r1, #16
 8012658:	fa1c fc81 	uxtah	ip, ip, r1
 801265c:	4471      	add	r1, lr
 801265e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012662:	b289      	uxth	r1, r1
 8012664:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012668:	f846 1b04 	str.w	r1, [r6], #4
 801266c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012670:	e7dd      	b.n	801262e <__mdiff+0xd6>
 8012672:	3f01      	subs	r7, #1
 8012674:	e7e7      	b.n	8012646 <__mdiff+0xee>
 8012676:	bf00      	nop
 8012678:	08013430 	.word	0x08013430
 801267c:	08013441 	.word	0x08013441

08012680 <__d2b>:
 8012680:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012684:	460f      	mov	r7, r1
 8012686:	2101      	movs	r1, #1
 8012688:	ec59 8b10 	vmov	r8, r9, d0
 801268c:	4616      	mov	r6, r2
 801268e:	f7ff fccd 	bl	801202c <_Balloc>
 8012692:	4604      	mov	r4, r0
 8012694:	b930      	cbnz	r0, 80126a4 <__d2b+0x24>
 8012696:	4602      	mov	r2, r0
 8012698:	4b23      	ldr	r3, [pc, #140]	@ (8012728 <__d2b+0xa8>)
 801269a:	4824      	ldr	r0, [pc, #144]	@ (801272c <__d2b+0xac>)
 801269c:	f240 310f 	movw	r1, #783	@ 0x30f
 80126a0:	f7fe fdc8 	bl	8011234 <__assert_func>
 80126a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80126a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126ac:	b10d      	cbz	r5, 80126b2 <__d2b+0x32>
 80126ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80126b2:	9301      	str	r3, [sp, #4]
 80126b4:	f1b8 0300 	subs.w	r3, r8, #0
 80126b8:	d023      	beq.n	8012702 <__d2b+0x82>
 80126ba:	4668      	mov	r0, sp
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	f7ff fd7c 	bl	80121ba <__lo0bits>
 80126c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80126c6:	b1d0      	cbz	r0, 80126fe <__d2b+0x7e>
 80126c8:	f1c0 0320 	rsb	r3, r0, #32
 80126cc:	fa02 f303 	lsl.w	r3, r2, r3
 80126d0:	430b      	orrs	r3, r1
 80126d2:	40c2      	lsrs	r2, r0
 80126d4:	6163      	str	r3, [r4, #20]
 80126d6:	9201      	str	r2, [sp, #4]
 80126d8:	9b01      	ldr	r3, [sp, #4]
 80126da:	61a3      	str	r3, [r4, #24]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	bf0c      	ite	eq
 80126e0:	2201      	moveq	r2, #1
 80126e2:	2202      	movne	r2, #2
 80126e4:	6122      	str	r2, [r4, #16]
 80126e6:	b1a5      	cbz	r5, 8012712 <__d2b+0x92>
 80126e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80126ec:	4405      	add	r5, r0
 80126ee:	603d      	str	r5, [r7, #0]
 80126f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80126f4:	6030      	str	r0, [r6, #0]
 80126f6:	4620      	mov	r0, r4
 80126f8:	b003      	add	sp, #12
 80126fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126fe:	6161      	str	r1, [r4, #20]
 8012700:	e7ea      	b.n	80126d8 <__d2b+0x58>
 8012702:	a801      	add	r0, sp, #4
 8012704:	f7ff fd59 	bl	80121ba <__lo0bits>
 8012708:	9b01      	ldr	r3, [sp, #4]
 801270a:	6163      	str	r3, [r4, #20]
 801270c:	3020      	adds	r0, #32
 801270e:	2201      	movs	r2, #1
 8012710:	e7e8      	b.n	80126e4 <__d2b+0x64>
 8012712:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012716:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801271a:	6038      	str	r0, [r7, #0]
 801271c:	6918      	ldr	r0, [r3, #16]
 801271e:	f7ff fd2d 	bl	801217c <__hi0bits>
 8012722:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012726:	e7e5      	b.n	80126f4 <__d2b+0x74>
 8012728:	08013430 	.word	0x08013430
 801272c:	08013441 	.word	0x08013441

08012730 <__ssputs_r>:
 8012730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012734:	688e      	ldr	r6, [r1, #8]
 8012736:	461f      	mov	r7, r3
 8012738:	42be      	cmp	r6, r7
 801273a:	680b      	ldr	r3, [r1, #0]
 801273c:	4682      	mov	sl, r0
 801273e:	460c      	mov	r4, r1
 8012740:	4690      	mov	r8, r2
 8012742:	d82d      	bhi.n	80127a0 <__ssputs_r+0x70>
 8012744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801274c:	d026      	beq.n	801279c <__ssputs_r+0x6c>
 801274e:	6965      	ldr	r5, [r4, #20]
 8012750:	6909      	ldr	r1, [r1, #16]
 8012752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012756:	eba3 0901 	sub.w	r9, r3, r1
 801275a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801275e:	1c7b      	adds	r3, r7, #1
 8012760:	444b      	add	r3, r9
 8012762:	106d      	asrs	r5, r5, #1
 8012764:	429d      	cmp	r5, r3
 8012766:	bf38      	it	cc
 8012768:	461d      	movcc	r5, r3
 801276a:	0553      	lsls	r3, r2, #21
 801276c:	d527      	bpl.n	80127be <__ssputs_r+0x8e>
 801276e:	4629      	mov	r1, r5
 8012770:	f7ff fbd0 	bl	8011f14 <_malloc_r>
 8012774:	4606      	mov	r6, r0
 8012776:	b360      	cbz	r0, 80127d2 <__ssputs_r+0xa2>
 8012778:	6921      	ldr	r1, [r4, #16]
 801277a:	464a      	mov	r2, r9
 801277c:	f7fe fd4b 	bl	8011216 <memcpy>
 8012780:	89a3      	ldrh	r3, [r4, #12]
 8012782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801278a:	81a3      	strh	r3, [r4, #12]
 801278c:	6126      	str	r6, [r4, #16]
 801278e:	6165      	str	r5, [r4, #20]
 8012790:	444e      	add	r6, r9
 8012792:	eba5 0509 	sub.w	r5, r5, r9
 8012796:	6026      	str	r6, [r4, #0]
 8012798:	60a5      	str	r5, [r4, #8]
 801279a:	463e      	mov	r6, r7
 801279c:	42be      	cmp	r6, r7
 801279e:	d900      	bls.n	80127a2 <__ssputs_r+0x72>
 80127a0:	463e      	mov	r6, r7
 80127a2:	6820      	ldr	r0, [r4, #0]
 80127a4:	4632      	mov	r2, r6
 80127a6:	4641      	mov	r1, r8
 80127a8:	f000 f9d8 	bl	8012b5c <memmove>
 80127ac:	68a3      	ldr	r3, [r4, #8]
 80127ae:	1b9b      	subs	r3, r3, r6
 80127b0:	60a3      	str	r3, [r4, #8]
 80127b2:	6823      	ldr	r3, [r4, #0]
 80127b4:	4433      	add	r3, r6
 80127b6:	6023      	str	r3, [r4, #0]
 80127b8:	2000      	movs	r0, #0
 80127ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127be:	462a      	mov	r2, r5
 80127c0:	f000 fa23 	bl	8012c0a <_realloc_r>
 80127c4:	4606      	mov	r6, r0
 80127c6:	2800      	cmp	r0, #0
 80127c8:	d1e0      	bne.n	801278c <__ssputs_r+0x5c>
 80127ca:	6921      	ldr	r1, [r4, #16]
 80127cc:	4650      	mov	r0, sl
 80127ce:	f7ff fb2d 	bl	8011e2c <_free_r>
 80127d2:	230c      	movs	r3, #12
 80127d4:	f8ca 3000 	str.w	r3, [sl]
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80127de:	81a3      	strh	r3, [r4, #12]
 80127e0:	f04f 30ff 	mov.w	r0, #4294967295
 80127e4:	e7e9      	b.n	80127ba <__ssputs_r+0x8a>
	...

080127e8 <_svfiprintf_r>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	4698      	mov	r8, r3
 80127ee:	898b      	ldrh	r3, [r1, #12]
 80127f0:	061b      	lsls	r3, r3, #24
 80127f2:	b09d      	sub	sp, #116	@ 0x74
 80127f4:	4607      	mov	r7, r0
 80127f6:	460d      	mov	r5, r1
 80127f8:	4614      	mov	r4, r2
 80127fa:	d510      	bpl.n	801281e <_svfiprintf_r+0x36>
 80127fc:	690b      	ldr	r3, [r1, #16]
 80127fe:	b973      	cbnz	r3, 801281e <_svfiprintf_r+0x36>
 8012800:	2140      	movs	r1, #64	@ 0x40
 8012802:	f7ff fb87 	bl	8011f14 <_malloc_r>
 8012806:	6028      	str	r0, [r5, #0]
 8012808:	6128      	str	r0, [r5, #16]
 801280a:	b930      	cbnz	r0, 801281a <_svfiprintf_r+0x32>
 801280c:	230c      	movs	r3, #12
 801280e:	603b      	str	r3, [r7, #0]
 8012810:	f04f 30ff 	mov.w	r0, #4294967295
 8012814:	b01d      	add	sp, #116	@ 0x74
 8012816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801281a:	2340      	movs	r3, #64	@ 0x40
 801281c:	616b      	str	r3, [r5, #20]
 801281e:	2300      	movs	r3, #0
 8012820:	9309      	str	r3, [sp, #36]	@ 0x24
 8012822:	2320      	movs	r3, #32
 8012824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012828:	f8cd 800c 	str.w	r8, [sp, #12]
 801282c:	2330      	movs	r3, #48	@ 0x30
 801282e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80129cc <_svfiprintf_r+0x1e4>
 8012832:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012836:	f04f 0901 	mov.w	r9, #1
 801283a:	4623      	mov	r3, r4
 801283c:	469a      	mov	sl, r3
 801283e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012842:	b10a      	cbz	r2, 8012848 <_svfiprintf_r+0x60>
 8012844:	2a25      	cmp	r2, #37	@ 0x25
 8012846:	d1f9      	bne.n	801283c <_svfiprintf_r+0x54>
 8012848:	ebba 0b04 	subs.w	fp, sl, r4
 801284c:	d00b      	beq.n	8012866 <_svfiprintf_r+0x7e>
 801284e:	465b      	mov	r3, fp
 8012850:	4622      	mov	r2, r4
 8012852:	4629      	mov	r1, r5
 8012854:	4638      	mov	r0, r7
 8012856:	f7ff ff6b 	bl	8012730 <__ssputs_r>
 801285a:	3001      	adds	r0, #1
 801285c:	f000 80a7 	beq.w	80129ae <_svfiprintf_r+0x1c6>
 8012860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012862:	445a      	add	r2, fp
 8012864:	9209      	str	r2, [sp, #36]	@ 0x24
 8012866:	f89a 3000 	ldrb.w	r3, [sl]
 801286a:	2b00      	cmp	r3, #0
 801286c:	f000 809f 	beq.w	80129ae <_svfiprintf_r+0x1c6>
 8012870:	2300      	movs	r3, #0
 8012872:	f04f 32ff 	mov.w	r2, #4294967295
 8012876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801287a:	f10a 0a01 	add.w	sl, sl, #1
 801287e:	9304      	str	r3, [sp, #16]
 8012880:	9307      	str	r3, [sp, #28]
 8012882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012886:	931a      	str	r3, [sp, #104]	@ 0x68
 8012888:	4654      	mov	r4, sl
 801288a:	2205      	movs	r2, #5
 801288c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012890:	484e      	ldr	r0, [pc, #312]	@ (80129cc <_svfiprintf_r+0x1e4>)
 8012892:	f7ed fd3d 	bl	8000310 <memchr>
 8012896:	9a04      	ldr	r2, [sp, #16]
 8012898:	b9d8      	cbnz	r0, 80128d2 <_svfiprintf_r+0xea>
 801289a:	06d0      	lsls	r0, r2, #27
 801289c:	bf44      	itt	mi
 801289e:	2320      	movmi	r3, #32
 80128a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128a4:	0711      	lsls	r1, r2, #28
 80128a6:	bf44      	itt	mi
 80128a8:	232b      	movmi	r3, #43	@ 0x2b
 80128aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80128ae:	f89a 3000 	ldrb.w	r3, [sl]
 80128b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80128b4:	d015      	beq.n	80128e2 <_svfiprintf_r+0xfa>
 80128b6:	9a07      	ldr	r2, [sp, #28]
 80128b8:	4654      	mov	r4, sl
 80128ba:	2000      	movs	r0, #0
 80128bc:	f04f 0c0a 	mov.w	ip, #10
 80128c0:	4621      	mov	r1, r4
 80128c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80128c6:	3b30      	subs	r3, #48	@ 0x30
 80128c8:	2b09      	cmp	r3, #9
 80128ca:	d94b      	bls.n	8012964 <_svfiprintf_r+0x17c>
 80128cc:	b1b0      	cbz	r0, 80128fc <_svfiprintf_r+0x114>
 80128ce:	9207      	str	r2, [sp, #28]
 80128d0:	e014      	b.n	80128fc <_svfiprintf_r+0x114>
 80128d2:	eba0 0308 	sub.w	r3, r0, r8
 80128d6:	fa09 f303 	lsl.w	r3, r9, r3
 80128da:	4313      	orrs	r3, r2
 80128dc:	9304      	str	r3, [sp, #16]
 80128de:	46a2      	mov	sl, r4
 80128e0:	e7d2      	b.n	8012888 <_svfiprintf_r+0xa0>
 80128e2:	9b03      	ldr	r3, [sp, #12]
 80128e4:	1d19      	adds	r1, r3, #4
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	9103      	str	r1, [sp, #12]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	bfbb      	ittet	lt
 80128ee:	425b      	neglt	r3, r3
 80128f0:	f042 0202 	orrlt.w	r2, r2, #2
 80128f4:	9307      	strge	r3, [sp, #28]
 80128f6:	9307      	strlt	r3, [sp, #28]
 80128f8:	bfb8      	it	lt
 80128fa:	9204      	strlt	r2, [sp, #16]
 80128fc:	7823      	ldrb	r3, [r4, #0]
 80128fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8012900:	d10a      	bne.n	8012918 <_svfiprintf_r+0x130>
 8012902:	7863      	ldrb	r3, [r4, #1]
 8012904:	2b2a      	cmp	r3, #42	@ 0x2a
 8012906:	d132      	bne.n	801296e <_svfiprintf_r+0x186>
 8012908:	9b03      	ldr	r3, [sp, #12]
 801290a:	1d1a      	adds	r2, r3, #4
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	9203      	str	r2, [sp, #12]
 8012910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012914:	3402      	adds	r4, #2
 8012916:	9305      	str	r3, [sp, #20]
 8012918:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80129dc <_svfiprintf_r+0x1f4>
 801291c:	7821      	ldrb	r1, [r4, #0]
 801291e:	2203      	movs	r2, #3
 8012920:	4650      	mov	r0, sl
 8012922:	f7ed fcf5 	bl	8000310 <memchr>
 8012926:	b138      	cbz	r0, 8012938 <_svfiprintf_r+0x150>
 8012928:	9b04      	ldr	r3, [sp, #16]
 801292a:	eba0 000a 	sub.w	r0, r0, sl
 801292e:	2240      	movs	r2, #64	@ 0x40
 8012930:	4082      	lsls	r2, r0
 8012932:	4313      	orrs	r3, r2
 8012934:	3401      	adds	r4, #1
 8012936:	9304      	str	r3, [sp, #16]
 8012938:	f814 1b01 	ldrb.w	r1, [r4], #1
 801293c:	4824      	ldr	r0, [pc, #144]	@ (80129d0 <_svfiprintf_r+0x1e8>)
 801293e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012942:	2206      	movs	r2, #6
 8012944:	f7ed fce4 	bl	8000310 <memchr>
 8012948:	2800      	cmp	r0, #0
 801294a:	d036      	beq.n	80129ba <_svfiprintf_r+0x1d2>
 801294c:	4b21      	ldr	r3, [pc, #132]	@ (80129d4 <_svfiprintf_r+0x1ec>)
 801294e:	bb1b      	cbnz	r3, 8012998 <_svfiprintf_r+0x1b0>
 8012950:	9b03      	ldr	r3, [sp, #12]
 8012952:	3307      	adds	r3, #7
 8012954:	f023 0307 	bic.w	r3, r3, #7
 8012958:	3308      	adds	r3, #8
 801295a:	9303      	str	r3, [sp, #12]
 801295c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801295e:	4433      	add	r3, r6
 8012960:	9309      	str	r3, [sp, #36]	@ 0x24
 8012962:	e76a      	b.n	801283a <_svfiprintf_r+0x52>
 8012964:	fb0c 3202 	mla	r2, ip, r2, r3
 8012968:	460c      	mov	r4, r1
 801296a:	2001      	movs	r0, #1
 801296c:	e7a8      	b.n	80128c0 <_svfiprintf_r+0xd8>
 801296e:	2300      	movs	r3, #0
 8012970:	3401      	adds	r4, #1
 8012972:	9305      	str	r3, [sp, #20]
 8012974:	4619      	mov	r1, r3
 8012976:	f04f 0c0a 	mov.w	ip, #10
 801297a:	4620      	mov	r0, r4
 801297c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012980:	3a30      	subs	r2, #48	@ 0x30
 8012982:	2a09      	cmp	r2, #9
 8012984:	d903      	bls.n	801298e <_svfiprintf_r+0x1a6>
 8012986:	2b00      	cmp	r3, #0
 8012988:	d0c6      	beq.n	8012918 <_svfiprintf_r+0x130>
 801298a:	9105      	str	r1, [sp, #20]
 801298c:	e7c4      	b.n	8012918 <_svfiprintf_r+0x130>
 801298e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012992:	4604      	mov	r4, r0
 8012994:	2301      	movs	r3, #1
 8012996:	e7f0      	b.n	801297a <_svfiprintf_r+0x192>
 8012998:	ab03      	add	r3, sp, #12
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	462a      	mov	r2, r5
 801299e:	4b0e      	ldr	r3, [pc, #56]	@ (80129d8 <_svfiprintf_r+0x1f0>)
 80129a0:	a904      	add	r1, sp, #16
 80129a2:	4638      	mov	r0, r7
 80129a4:	f7fd fe94 	bl	80106d0 <_printf_float>
 80129a8:	1c42      	adds	r2, r0, #1
 80129aa:	4606      	mov	r6, r0
 80129ac:	d1d6      	bne.n	801295c <_svfiprintf_r+0x174>
 80129ae:	89ab      	ldrh	r3, [r5, #12]
 80129b0:	065b      	lsls	r3, r3, #25
 80129b2:	f53f af2d 	bmi.w	8012810 <_svfiprintf_r+0x28>
 80129b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80129b8:	e72c      	b.n	8012814 <_svfiprintf_r+0x2c>
 80129ba:	ab03      	add	r3, sp, #12
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	462a      	mov	r2, r5
 80129c0:	4b05      	ldr	r3, [pc, #20]	@ (80129d8 <_svfiprintf_r+0x1f0>)
 80129c2:	a904      	add	r1, sp, #16
 80129c4:	4638      	mov	r0, r7
 80129c6:	f7fe f90b 	bl	8010be0 <_printf_i>
 80129ca:	e7ed      	b.n	80129a8 <_svfiprintf_r+0x1c0>
 80129cc:	08013598 	.word	0x08013598
 80129d0:	080135a2 	.word	0x080135a2
 80129d4:	080106d1 	.word	0x080106d1
 80129d8:	08012731 	.word	0x08012731
 80129dc:	0801359e 	.word	0x0801359e

080129e0 <__sflush_r>:
 80129e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80129e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129e8:	0716      	lsls	r6, r2, #28
 80129ea:	4605      	mov	r5, r0
 80129ec:	460c      	mov	r4, r1
 80129ee:	d454      	bmi.n	8012a9a <__sflush_r+0xba>
 80129f0:	684b      	ldr	r3, [r1, #4]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dc02      	bgt.n	80129fc <__sflush_r+0x1c>
 80129f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	dd48      	ble.n	8012a8e <__sflush_r+0xae>
 80129fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80129fe:	2e00      	cmp	r6, #0
 8012a00:	d045      	beq.n	8012a8e <__sflush_r+0xae>
 8012a02:	2300      	movs	r3, #0
 8012a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012a08:	682f      	ldr	r7, [r5, #0]
 8012a0a:	6a21      	ldr	r1, [r4, #32]
 8012a0c:	602b      	str	r3, [r5, #0]
 8012a0e:	d030      	beq.n	8012a72 <__sflush_r+0x92>
 8012a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012a12:	89a3      	ldrh	r3, [r4, #12]
 8012a14:	0759      	lsls	r1, r3, #29
 8012a16:	d505      	bpl.n	8012a24 <__sflush_r+0x44>
 8012a18:	6863      	ldr	r3, [r4, #4]
 8012a1a:	1ad2      	subs	r2, r2, r3
 8012a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012a1e:	b10b      	cbz	r3, 8012a24 <__sflush_r+0x44>
 8012a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a22:	1ad2      	subs	r2, r2, r3
 8012a24:	2300      	movs	r3, #0
 8012a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a28:	6a21      	ldr	r1, [r4, #32]
 8012a2a:	4628      	mov	r0, r5
 8012a2c:	47b0      	blx	r6
 8012a2e:	1c43      	adds	r3, r0, #1
 8012a30:	89a3      	ldrh	r3, [r4, #12]
 8012a32:	d106      	bne.n	8012a42 <__sflush_r+0x62>
 8012a34:	6829      	ldr	r1, [r5, #0]
 8012a36:	291d      	cmp	r1, #29
 8012a38:	d82b      	bhi.n	8012a92 <__sflush_r+0xb2>
 8012a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8012ae4 <__sflush_r+0x104>)
 8012a3c:	410a      	asrs	r2, r1
 8012a3e:	07d6      	lsls	r6, r2, #31
 8012a40:	d427      	bmi.n	8012a92 <__sflush_r+0xb2>
 8012a42:	2200      	movs	r2, #0
 8012a44:	6062      	str	r2, [r4, #4]
 8012a46:	04d9      	lsls	r1, r3, #19
 8012a48:	6922      	ldr	r2, [r4, #16]
 8012a4a:	6022      	str	r2, [r4, #0]
 8012a4c:	d504      	bpl.n	8012a58 <__sflush_r+0x78>
 8012a4e:	1c42      	adds	r2, r0, #1
 8012a50:	d101      	bne.n	8012a56 <__sflush_r+0x76>
 8012a52:	682b      	ldr	r3, [r5, #0]
 8012a54:	b903      	cbnz	r3, 8012a58 <__sflush_r+0x78>
 8012a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8012a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012a5a:	602f      	str	r7, [r5, #0]
 8012a5c:	b1b9      	cbz	r1, 8012a8e <__sflush_r+0xae>
 8012a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012a62:	4299      	cmp	r1, r3
 8012a64:	d002      	beq.n	8012a6c <__sflush_r+0x8c>
 8012a66:	4628      	mov	r0, r5
 8012a68:	f7ff f9e0 	bl	8011e2c <_free_r>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8012a70:	e00d      	b.n	8012a8e <__sflush_r+0xae>
 8012a72:	2301      	movs	r3, #1
 8012a74:	4628      	mov	r0, r5
 8012a76:	47b0      	blx	r6
 8012a78:	4602      	mov	r2, r0
 8012a7a:	1c50      	adds	r0, r2, #1
 8012a7c:	d1c9      	bne.n	8012a12 <__sflush_r+0x32>
 8012a7e:	682b      	ldr	r3, [r5, #0]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d0c6      	beq.n	8012a12 <__sflush_r+0x32>
 8012a84:	2b1d      	cmp	r3, #29
 8012a86:	d001      	beq.n	8012a8c <__sflush_r+0xac>
 8012a88:	2b16      	cmp	r3, #22
 8012a8a:	d11e      	bne.n	8012aca <__sflush_r+0xea>
 8012a8c:	602f      	str	r7, [r5, #0]
 8012a8e:	2000      	movs	r0, #0
 8012a90:	e022      	b.n	8012ad8 <__sflush_r+0xf8>
 8012a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a96:	b21b      	sxth	r3, r3
 8012a98:	e01b      	b.n	8012ad2 <__sflush_r+0xf2>
 8012a9a:	690f      	ldr	r7, [r1, #16]
 8012a9c:	2f00      	cmp	r7, #0
 8012a9e:	d0f6      	beq.n	8012a8e <__sflush_r+0xae>
 8012aa0:	0793      	lsls	r3, r2, #30
 8012aa2:	680e      	ldr	r6, [r1, #0]
 8012aa4:	bf08      	it	eq
 8012aa6:	694b      	ldreq	r3, [r1, #20]
 8012aa8:	600f      	str	r7, [r1, #0]
 8012aaa:	bf18      	it	ne
 8012aac:	2300      	movne	r3, #0
 8012aae:	eba6 0807 	sub.w	r8, r6, r7
 8012ab2:	608b      	str	r3, [r1, #8]
 8012ab4:	f1b8 0f00 	cmp.w	r8, #0
 8012ab8:	dde9      	ble.n	8012a8e <__sflush_r+0xae>
 8012aba:	6a21      	ldr	r1, [r4, #32]
 8012abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012abe:	4643      	mov	r3, r8
 8012ac0:	463a      	mov	r2, r7
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	47b0      	blx	r6
 8012ac6:	2800      	cmp	r0, #0
 8012ac8:	dc08      	bgt.n	8012adc <__sflush_r+0xfc>
 8012aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ad2:	81a3      	strh	r3, [r4, #12]
 8012ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012adc:	4407      	add	r7, r0
 8012ade:	eba8 0800 	sub.w	r8, r8, r0
 8012ae2:	e7e7      	b.n	8012ab4 <__sflush_r+0xd4>
 8012ae4:	dfbffffe 	.word	0xdfbffffe

08012ae8 <_fflush_r>:
 8012ae8:	b538      	push	{r3, r4, r5, lr}
 8012aea:	690b      	ldr	r3, [r1, #16]
 8012aec:	4605      	mov	r5, r0
 8012aee:	460c      	mov	r4, r1
 8012af0:	b913      	cbnz	r3, 8012af8 <_fflush_r+0x10>
 8012af2:	2500      	movs	r5, #0
 8012af4:	4628      	mov	r0, r5
 8012af6:	bd38      	pop	{r3, r4, r5, pc}
 8012af8:	b118      	cbz	r0, 8012b02 <_fflush_r+0x1a>
 8012afa:	6a03      	ldr	r3, [r0, #32]
 8012afc:	b90b      	cbnz	r3, 8012b02 <_fflush_r+0x1a>
 8012afe:	f7fe fa1b 	bl	8010f38 <__sinit>
 8012b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d0f3      	beq.n	8012af2 <_fflush_r+0xa>
 8012b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012b0c:	07d0      	lsls	r0, r2, #31
 8012b0e:	d404      	bmi.n	8012b1a <_fflush_r+0x32>
 8012b10:	0599      	lsls	r1, r3, #22
 8012b12:	d402      	bmi.n	8012b1a <_fflush_r+0x32>
 8012b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b16:	f7fe fb7c 	bl	8011212 <__retarget_lock_acquire_recursive>
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	4621      	mov	r1, r4
 8012b1e:	f7ff ff5f 	bl	80129e0 <__sflush_r>
 8012b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b24:	07da      	lsls	r2, r3, #31
 8012b26:	4605      	mov	r5, r0
 8012b28:	d4e4      	bmi.n	8012af4 <_fflush_r+0xc>
 8012b2a:	89a3      	ldrh	r3, [r4, #12]
 8012b2c:	059b      	lsls	r3, r3, #22
 8012b2e:	d4e1      	bmi.n	8012af4 <_fflush_r+0xc>
 8012b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b32:	f7fe fb6f 	bl	8011214 <__retarget_lock_release_recursive>
 8012b36:	e7dd      	b.n	8012af4 <_fflush_r+0xc>

08012b38 <fiprintf>:
 8012b38:	b40e      	push	{r1, r2, r3}
 8012b3a:	b503      	push	{r0, r1, lr}
 8012b3c:	4601      	mov	r1, r0
 8012b3e:	ab03      	add	r3, sp, #12
 8012b40:	4805      	ldr	r0, [pc, #20]	@ (8012b58 <fiprintf+0x20>)
 8012b42:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b46:	6800      	ldr	r0, [r0, #0]
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	f000 f8c3 	bl	8012cd4 <_vfiprintf_r>
 8012b4e:	b002      	add	sp, #8
 8012b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8012b54:	b003      	add	sp, #12
 8012b56:	4770      	bx	lr
 8012b58:	24000020 	.word	0x24000020

08012b5c <memmove>:
 8012b5c:	4288      	cmp	r0, r1
 8012b5e:	b510      	push	{r4, lr}
 8012b60:	eb01 0402 	add.w	r4, r1, r2
 8012b64:	d902      	bls.n	8012b6c <memmove+0x10>
 8012b66:	4284      	cmp	r4, r0
 8012b68:	4623      	mov	r3, r4
 8012b6a:	d807      	bhi.n	8012b7c <memmove+0x20>
 8012b6c:	1e43      	subs	r3, r0, #1
 8012b6e:	42a1      	cmp	r1, r4
 8012b70:	d008      	beq.n	8012b84 <memmove+0x28>
 8012b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012b7a:	e7f8      	b.n	8012b6e <memmove+0x12>
 8012b7c:	4402      	add	r2, r0
 8012b7e:	4601      	mov	r1, r0
 8012b80:	428a      	cmp	r2, r1
 8012b82:	d100      	bne.n	8012b86 <memmove+0x2a>
 8012b84:	bd10      	pop	{r4, pc}
 8012b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012b8e:	e7f7      	b.n	8012b80 <memmove+0x24>

08012b90 <_sbrk_r>:
 8012b90:	b538      	push	{r3, r4, r5, lr}
 8012b92:	4d06      	ldr	r5, [pc, #24]	@ (8012bac <_sbrk_r+0x1c>)
 8012b94:	2300      	movs	r3, #0
 8012b96:	4604      	mov	r4, r0
 8012b98:	4608      	mov	r0, r1
 8012b9a:	602b      	str	r3, [r5, #0]
 8012b9c:	f7ef fe5a 	bl	8002854 <_sbrk>
 8012ba0:	1c43      	adds	r3, r0, #1
 8012ba2:	d102      	bne.n	8012baa <_sbrk_r+0x1a>
 8012ba4:	682b      	ldr	r3, [r5, #0]
 8012ba6:	b103      	cbz	r3, 8012baa <_sbrk_r+0x1a>
 8012ba8:	6023      	str	r3, [r4, #0]
 8012baa:	bd38      	pop	{r3, r4, r5, pc}
 8012bac:	240056f8 	.word	0x240056f8

08012bb0 <abort>:
 8012bb0:	b508      	push	{r3, lr}
 8012bb2:	2006      	movs	r0, #6
 8012bb4:	f000 fa62 	bl	801307c <raise>
 8012bb8:	2001      	movs	r0, #1
 8012bba:	f7ef fdd3 	bl	8002764 <_exit>

08012bbe <_calloc_r>:
 8012bbe:	b570      	push	{r4, r5, r6, lr}
 8012bc0:	fba1 5402 	umull	r5, r4, r1, r2
 8012bc4:	b93c      	cbnz	r4, 8012bd6 <_calloc_r+0x18>
 8012bc6:	4629      	mov	r1, r5
 8012bc8:	f7ff f9a4 	bl	8011f14 <_malloc_r>
 8012bcc:	4606      	mov	r6, r0
 8012bce:	b928      	cbnz	r0, 8012bdc <_calloc_r+0x1e>
 8012bd0:	2600      	movs	r6, #0
 8012bd2:	4630      	mov	r0, r6
 8012bd4:	bd70      	pop	{r4, r5, r6, pc}
 8012bd6:	220c      	movs	r2, #12
 8012bd8:	6002      	str	r2, [r0, #0]
 8012bda:	e7f9      	b.n	8012bd0 <_calloc_r+0x12>
 8012bdc:	462a      	mov	r2, r5
 8012bde:	4621      	mov	r1, r4
 8012be0:	f7fe fa43 	bl	801106a <memset>
 8012be4:	e7f5      	b.n	8012bd2 <_calloc_r+0x14>

08012be6 <__ascii_mbtowc>:
 8012be6:	b082      	sub	sp, #8
 8012be8:	b901      	cbnz	r1, 8012bec <__ascii_mbtowc+0x6>
 8012bea:	a901      	add	r1, sp, #4
 8012bec:	b142      	cbz	r2, 8012c00 <__ascii_mbtowc+0x1a>
 8012bee:	b14b      	cbz	r3, 8012c04 <__ascii_mbtowc+0x1e>
 8012bf0:	7813      	ldrb	r3, [r2, #0]
 8012bf2:	600b      	str	r3, [r1, #0]
 8012bf4:	7812      	ldrb	r2, [r2, #0]
 8012bf6:	1e10      	subs	r0, r2, #0
 8012bf8:	bf18      	it	ne
 8012bfa:	2001      	movne	r0, #1
 8012bfc:	b002      	add	sp, #8
 8012bfe:	4770      	bx	lr
 8012c00:	4610      	mov	r0, r2
 8012c02:	e7fb      	b.n	8012bfc <__ascii_mbtowc+0x16>
 8012c04:	f06f 0001 	mvn.w	r0, #1
 8012c08:	e7f8      	b.n	8012bfc <__ascii_mbtowc+0x16>

08012c0a <_realloc_r>:
 8012c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c0e:	4680      	mov	r8, r0
 8012c10:	4615      	mov	r5, r2
 8012c12:	460c      	mov	r4, r1
 8012c14:	b921      	cbnz	r1, 8012c20 <_realloc_r+0x16>
 8012c16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c1a:	4611      	mov	r1, r2
 8012c1c:	f7ff b97a 	b.w	8011f14 <_malloc_r>
 8012c20:	b92a      	cbnz	r2, 8012c2e <_realloc_r+0x24>
 8012c22:	f7ff f903 	bl	8011e2c <_free_r>
 8012c26:	2400      	movs	r4, #0
 8012c28:	4620      	mov	r0, r4
 8012c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c2e:	f000 fa41 	bl	80130b4 <_malloc_usable_size_r>
 8012c32:	4285      	cmp	r5, r0
 8012c34:	4606      	mov	r6, r0
 8012c36:	d802      	bhi.n	8012c3e <_realloc_r+0x34>
 8012c38:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012c3c:	d8f4      	bhi.n	8012c28 <_realloc_r+0x1e>
 8012c3e:	4629      	mov	r1, r5
 8012c40:	4640      	mov	r0, r8
 8012c42:	f7ff f967 	bl	8011f14 <_malloc_r>
 8012c46:	4607      	mov	r7, r0
 8012c48:	2800      	cmp	r0, #0
 8012c4a:	d0ec      	beq.n	8012c26 <_realloc_r+0x1c>
 8012c4c:	42b5      	cmp	r5, r6
 8012c4e:	462a      	mov	r2, r5
 8012c50:	4621      	mov	r1, r4
 8012c52:	bf28      	it	cs
 8012c54:	4632      	movcs	r2, r6
 8012c56:	f7fe fade 	bl	8011216 <memcpy>
 8012c5a:	4621      	mov	r1, r4
 8012c5c:	4640      	mov	r0, r8
 8012c5e:	f7ff f8e5 	bl	8011e2c <_free_r>
 8012c62:	463c      	mov	r4, r7
 8012c64:	e7e0      	b.n	8012c28 <_realloc_r+0x1e>

08012c66 <__ascii_wctomb>:
 8012c66:	4603      	mov	r3, r0
 8012c68:	4608      	mov	r0, r1
 8012c6a:	b141      	cbz	r1, 8012c7e <__ascii_wctomb+0x18>
 8012c6c:	2aff      	cmp	r2, #255	@ 0xff
 8012c6e:	d904      	bls.n	8012c7a <__ascii_wctomb+0x14>
 8012c70:	228a      	movs	r2, #138	@ 0x8a
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	f04f 30ff 	mov.w	r0, #4294967295
 8012c78:	4770      	bx	lr
 8012c7a:	700a      	strb	r2, [r1, #0]
 8012c7c:	2001      	movs	r0, #1
 8012c7e:	4770      	bx	lr

08012c80 <__sfputc_r>:
 8012c80:	6893      	ldr	r3, [r2, #8]
 8012c82:	3b01      	subs	r3, #1
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	b410      	push	{r4}
 8012c88:	6093      	str	r3, [r2, #8]
 8012c8a:	da08      	bge.n	8012c9e <__sfputc_r+0x1e>
 8012c8c:	6994      	ldr	r4, [r2, #24]
 8012c8e:	42a3      	cmp	r3, r4
 8012c90:	db01      	blt.n	8012c96 <__sfputc_r+0x16>
 8012c92:	290a      	cmp	r1, #10
 8012c94:	d103      	bne.n	8012c9e <__sfputc_r+0x1e>
 8012c96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012c9a:	f000 b933 	b.w	8012f04 <__swbuf_r>
 8012c9e:	6813      	ldr	r3, [r2, #0]
 8012ca0:	1c58      	adds	r0, r3, #1
 8012ca2:	6010      	str	r0, [r2, #0]
 8012ca4:	7019      	strb	r1, [r3, #0]
 8012ca6:	4608      	mov	r0, r1
 8012ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <__sfputs_r>:
 8012cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012cb0:	4606      	mov	r6, r0
 8012cb2:	460f      	mov	r7, r1
 8012cb4:	4614      	mov	r4, r2
 8012cb6:	18d5      	adds	r5, r2, r3
 8012cb8:	42ac      	cmp	r4, r5
 8012cba:	d101      	bne.n	8012cc0 <__sfputs_r+0x12>
 8012cbc:	2000      	movs	r0, #0
 8012cbe:	e007      	b.n	8012cd0 <__sfputs_r+0x22>
 8012cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cc4:	463a      	mov	r2, r7
 8012cc6:	4630      	mov	r0, r6
 8012cc8:	f7ff ffda 	bl	8012c80 <__sfputc_r>
 8012ccc:	1c43      	adds	r3, r0, #1
 8012cce:	d1f3      	bne.n	8012cb8 <__sfputs_r+0xa>
 8012cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012cd4 <_vfiprintf_r>:
 8012cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd8:	460d      	mov	r5, r1
 8012cda:	b09d      	sub	sp, #116	@ 0x74
 8012cdc:	4614      	mov	r4, r2
 8012cde:	4698      	mov	r8, r3
 8012ce0:	4606      	mov	r6, r0
 8012ce2:	b118      	cbz	r0, 8012cec <_vfiprintf_r+0x18>
 8012ce4:	6a03      	ldr	r3, [r0, #32]
 8012ce6:	b90b      	cbnz	r3, 8012cec <_vfiprintf_r+0x18>
 8012ce8:	f7fe f926 	bl	8010f38 <__sinit>
 8012cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012cee:	07d9      	lsls	r1, r3, #31
 8012cf0:	d405      	bmi.n	8012cfe <_vfiprintf_r+0x2a>
 8012cf2:	89ab      	ldrh	r3, [r5, #12]
 8012cf4:	059a      	lsls	r2, r3, #22
 8012cf6:	d402      	bmi.n	8012cfe <_vfiprintf_r+0x2a>
 8012cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012cfa:	f7fe fa8a 	bl	8011212 <__retarget_lock_acquire_recursive>
 8012cfe:	89ab      	ldrh	r3, [r5, #12]
 8012d00:	071b      	lsls	r3, r3, #28
 8012d02:	d501      	bpl.n	8012d08 <_vfiprintf_r+0x34>
 8012d04:	692b      	ldr	r3, [r5, #16]
 8012d06:	b99b      	cbnz	r3, 8012d30 <_vfiprintf_r+0x5c>
 8012d08:	4629      	mov	r1, r5
 8012d0a:	4630      	mov	r0, r6
 8012d0c:	f000 f938 	bl	8012f80 <__swsetup_r>
 8012d10:	b170      	cbz	r0, 8012d30 <_vfiprintf_r+0x5c>
 8012d12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d14:	07dc      	lsls	r4, r3, #31
 8012d16:	d504      	bpl.n	8012d22 <_vfiprintf_r+0x4e>
 8012d18:	f04f 30ff 	mov.w	r0, #4294967295
 8012d1c:	b01d      	add	sp, #116	@ 0x74
 8012d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d22:	89ab      	ldrh	r3, [r5, #12]
 8012d24:	0598      	lsls	r0, r3, #22
 8012d26:	d4f7      	bmi.n	8012d18 <_vfiprintf_r+0x44>
 8012d28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d2a:	f7fe fa73 	bl	8011214 <__retarget_lock_release_recursive>
 8012d2e:	e7f3      	b.n	8012d18 <_vfiprintf_r+0x44>
 8012d30:	2300      	movs	r3, #0
 8012d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8012d34:	2320      	movs	r3, #32
 8012d36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012d3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8012d3e:	2330      	movs	r3, #48	@ 0x30
 8012d40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012ef0 <_vfiprintf_r+0x21c>
 8012d44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012d48:	f04f 0901 	mov.w	r9, #1
 8012d4c:	4623      	mov	r3, r4
 8012d4e:	469a      	mov	sl, r3
 8012d50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d54:	b10a      	cbz	r2, 8012d5a <_vfiprintf_r+0x86>
 8012d56:	2a25      	cmp	r2, #37	@ 0x25
 8012d58:	d1f9      	bne.n	8012d4e <_vfiprintf_r+0x7a>
 8012d5a:	ebba 0b04 	subs.w	fp, sl, r4
 8012d5e:	d00b      	beq.n	8012d78 <_vfiprintf_r+0xa4>
 8012d60:	465b      	mov	r3, fp
 8012d62:	4622      	mov	r2, r4
 8012d64:	4629      	mov	r1, r5
 8012d66:	4630      	mov	r0, r6
 8012d68:	f7ff ffa1 	bl	8012cae <__sfputs_r>
 8012d6c:	3001      	adds	r0, #1
 8012d6e:	f000 80a7 	beq.w	8012ec0 <_vfiprintf_r+0x1ec>
 8012d72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d74:	445a      	add	r2, fp
 8012d76:	9209      	str	r2, [sp, #36]	@ 0x24
 8012d78:	f89a 3000 	ldrb.w	r3, [sl]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	f000 809f 	beq.w	8012ec0 <_vfiprintf_r+0x1ec>
 8012d82:	2300      	movs	r3, #0
 8012d84:	f04f 32ff 	mov.w	r2, #4294967295
 8012d88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012d8c:	f10a 0a01 	add.w	sl, sl, #1
 8012d90:	9304      	str	r3, [sp, #16]
 8012d92:	9307      	str	r3, [sp, #28]
 8012d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8012d9a:	4654      	mov	r4, sl
 8012d9c:	2205      	movs	r2, #5
 8012d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012da2:	4853      	ldr	r0, [pc, #332]	@ (8012ef0 <_vfiprintf_r+0x21c>)
 8012da4:	f7ed fab4 	bl	8000310 <memchr>
 8012da8:	9a04      	ldr	r2, [sp, #16]
 8012daa:	b9d8      	cbnz	r0, 8012de4 <_vfiprintf_r+0x110>
 8012dac:	06d1      	lsls	r1, r2, #27
 8012dae:	bf44      	itt	mi
 8012db0:	2320      	movmi	r3, #32
 8012db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012db6:	0713      	lsls	r3, r2, #28
 8012db8:	bf44      	itt	mi
 8012dba:	232b      	movmi	r3, #43	@ 0x2b
 8012dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8012dc4:	2b2a      	cmp	r3, #42	@ 0x2a
 8012dc6:	d015      	beq.n	8012df4 <_vfiprintf_r+0x120>
 8012dc8:	9a07      	ldr	r2, [sp, #28]
 8012dca:	4654      	mov	r4, sl
 8012dcc:	2000      	movs	r0, #0
 8012dce:	f04f 0c0a 	mov.w	ip, #10
 8012dd2:	4621      	mov	r1, r4
 8012dd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012dd8:	3b30      	subs	r3, #48	@ 0x30
 8012dda:	2b09      	cmp	r3, #9
 8012ddc:	d94b      	bls.n	8012e76 <_vfiprintf_r+0x1a2>
 8012dde:	b1b0      	cbz	r0, 8012e0e <_vfiprintf_r+0x13a>
 8012de0:	9207      	str	r2, [sp, #28]
 8012de2:	e014      	b.n	8012e0e <_vfiprintf_r+0x13a>
 8012de4:	eba0 0308 	sub.w	r3, r0, r8
 8012de8:	fa09 f303 	lsl.w	r3, r9, r3
 8012dec:	4313      	orrs	r3, r2
 8012dee:	9304      	str	r3, [sp, #16]
 8012df0:	46a2      	mov	sl, r4
 8012df2:	e7d2      	b.n	8012d9a <_vfiprintf_r+0xc6>
 8012df4:	9b03      	ldr	r3, [sp, #12]
 8012df6:	1d19      	adds	r1, r3, #4
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	9103      	str	r1, [sp, #12]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	bfbb      	ittet	lt
 8012e00:	425b      	neglt	r3, r3
 8012e02:	f042 0202 	orrlt.w	r2, r2, #2
 8012e06:	9307      	strge	r3, [sp, #28]
 8012e08:	9307      	strlt	r3, [sp, #28]
 8012e0a:	bfb8      	it	lt
 8012e0c:	9204      	strlt	r2, [sp, #16]
 8012e0e:	7823      	ldrb	r3, [r4, #0]
 8012e10:	2b2e      	cmp	r3, #46	@ 0x2e
 8012e12:	d10a      	bne.n	8012e2a <_vfiprintf_r+0x156>
 8012e14:	7863      	ldrb	r3, [r4, #1]
 8012e16:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e18:	d132      	bne.n	8012e80 <_vfiprintf_r+0x1ac>
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	1d1a      	adds	r2, r3, #4
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	9203      	str	r2, [sp, #12]
 8012e22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012e26:	3402      	adds	r4, #2
 8012e28:	9305      	str	r3, [sp, #20]
 8012e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012f00 <_vfiprintf_r+0x22c>
 8012e2e:	7821      	ldrb	r1, [r4, #0]
 8012e30:	2203      	movs	r2, #3
 8012e32:	4650      	mov	r0, sl
 8012e34:	f7ed fa6c 	bl	8000310 <memchr>
 8012e38:	b138      	cbz	r0, 8012e4a <_vfiprintf_r+0x176>
 8012e3a:	9b04      	ldr	r3, [sp, #16]
 8012e3c:	eba0 000a 	sub.w	r0, r0, sl
 8012e40:	2240      	movs	r2, #64	@ 0x40
 8012e42:	4082      	lsls	r2, r0
 8012e44:	4313      	orrs	r3, r2
 8012e46:	3401      	adds	r4, #1
 8012e48:	9304      	str	r3, [sp, #16]
 8012e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e4e:	4829      	ldr	r0, [pc, #164]	@ (8012ef4 <_vfiprintf_r+0x220>)
 8012e50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012e54:	2206      	movs	r2, #6
 8012e56:	f7ed fa5b 	bl	8000310 <memchr>
 8012e5a:	2800      	cmp	r0, #0
 8012e5c:	d03f      	beq.n	8012ede <_vfiprintf_r+0x20a>
 8012e5e:	4b26      	ldr	r3, [pc, #152]	@ (8012ef8 <_vfiprintf_r+0x224>)
 8012e60:	bb1b      	cbnz	r3, 8012eaa <_vfiprintf_r+0x1d6>
 8012e62:	9b03      	ldr	r3, [sp, #12]
 8012e64:	3307      	adds	r3, #7
 8012e66:	f023 0307 	bic.w	r3, r3, #7
 8012e6a:	3308      	adds	r3, #8
 8012e6c:	9303      	str	r3, [sp, #12]
 8012e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e70:	443b      	add	r3, r7
 8012e72:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e74:	e76a      	b.n	8012d4c <_vfiprintf_r+0x78>
 8012e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8012e7a:	460c      	mov	r4, r1
 8012e7c:	2001      	movs	r0, #1
 8012e7e:	e7a8      	b.n	8012dd2 <_vfiprintf_r+0xfe>
 8012e80:	2300      	movs	r3, #0
 8012e82:	3401      	adds	r4, #1
 8012e84:	9305      	str	r3, [sp, #20]
 8012e86:	4619      	mov	r1, r3
 8012e88:	f04f 0c0a 	mov.w	ip, #10
 8012e8c:	4620      	mov	r0, r4
 8012e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012e92:	3a30      	subs	r2, #48	@ 0x30
 8012e94:	2a09      	cmp	r2, #9
 8012e96:	d903      	bls.n	8012ea0 <_vfiprintf_r+0x1cc>
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d0c6      	beq.n	8012e2a <_vfiprintf_r+0x156>
 8012e9c:	9105      	str	r1, [sp, #20]
 8012e9e:	e7c4      	b.n	8012e2a <_vfiprintf_r+0x156>
 8012ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8012ea4:	4604      	mov	r4, r0
 8012ea6:	2301      	movs	r3, #1
 8012ea8:	e7f0      	b.n	8012e8c <_vfiprintf_r+0x1b8>
 8012eaa:	ab03      	add	r3, sp, #12
 8012eac:	9300      	str	r3, [sp, #0]
 8012eae:	462a      	mov	r2, r5
 8012eb0:	4b12      	ldr	r3, [pc, #72]	@ (8012efc <_vfiprintf_r+0x228>)
 8012eb2:	a904      	add	r1, sp, #16
 8012eb4:	4630      	mov	r0, r6
 8012eb6:	f7fd fc0b 	bl	80106d0 <_printf_float>
 8012eba:	4607      	mov	r7, r0
 8012ebc:	1c78      	adds	r0, r7, #1
 8012ebe:	d1d6      	bne.n	8012e6e <_vfiprintf_r+0x19a>
 8012ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012ec2:	07d9      	lsls	r1, r3, #31
 8012ec4:	d405      	bmi.n	8012ed2 <_vfiprintf_r+0x1fe>
 8012ec6:	89ab      	ldrh	r3, [r5, #12]
 8012ec8:	059a      	lsls	r2, r3, #22
 8012eca:	d402      	bmi.n	8012ed2 <_vfiprintf_r+0x1fe>
 8012ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ece:	f7fe f9a1 	bl	8011214 <__retarget_lock_release_recursive>
 8012ed2:	89ab      	ldrh	r3, [r5, #12]
 8012ed4:	065b      	lsls	r3, r3, #25
 8012ed6:	f53f af1f 	bmi.w	8012d18 <_vfiprintf_r+0x44>
 8012eda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012edc:	e71e      	b.n	8012d1c <_vfiprintf_r+0x48>
 8012ede:	ab03      	add	r3, sp, #12
 8012ee0:	9300      	str	r3, [sp, #0]
 8012ee2:	462a      	mov	r2, r5
 8012ee4:	4b05      	ldr	r3, [pc, #20]	@ (8012efc <_vfiprintf_r+0x228>)
 8012ee6:	a904      	add	r1, sp, #16
 8012ee8:	4630      	mov	r0, r6
 8012eea:	f7fd fe79 	bl	8010be0 <_printf_i>
 8012eee:	e7e4      	b.n	8012eba <_vfiprintf_r+0x1e6>
 8012ef0:	08013598 	.word	0x08013598
 8012ef4:	080135a2 	.word	0x080135a2
 8012ef8:	080106d1 	.word	0x080106d1
 8012efc:	08012caf 	.word	0x08012caf
 8012f00:	0801359e 	.word	0x0801359e

08012f04 <__swbuf_r>:
 8012f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f06:	460e      	mov	r6, r1
 8012f08:	4614      	mov	r4, r2
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	b118      	cbz	r0, 8012f16 <__swbuf_r+0x12>
 8012f0e:	6a03      	ldr	r3, [r0, #32]
 8012f10:	b90b      	cbnz	r3, 8012f16 <__swbuf_r+0x12>
 8012f12:	f7fe f811 	bl	8010f38 <__sinit>
 8012f16:	69a3      	ldr	r3, [r4, #24]
 8012f18:	60a3      	str	r3, [r4, #8]
 8012f1a:	89a3      	ldrh	r3, [r4, #12]
 8012f1c:	071a      	lsls	r2, r3, #28
 8012f1e:	d501      	bpl.n	8012f24 <__swbuf_r+0x20>
 8012f20:	6923      	ldr	r3, [r4, #16]
 8012f22:	b943      	cbnz	r3, 8012f36 <__swbuf_r+0x32>
 8012f24:	4621      	mov	r1, r4
 8012f26:	4628      	mov	r0, r5
 8012f28:	f000 f82a 	bl	8012f80 <__swsetup_r>
 8012f2c:	b118      	cbz	r0, 8012f36 <__swbuf_r+0x32>
 8012f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8012f32:	4638      	mov	r0, r7
 8012f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	6922      	ldr	r2, [r4, #16]
 8012f3a:	1a98      	subs	r0, r3, r2
 8012f3c:	6963      	ldr	r3, [r4, #20]
 8012f3e:	b2f6      	uxtb	r6, r6
 8012f40:	4283      	cmp	r3, r0
 8012f42:	4637      	mov	r7, r6
 8012f44:	dc05      	bgt.n	8012f52 <__swbuf_r+0x4e>
 8012f46:	4621      	mov	r1, r4
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7ff fdcd 	bl	8012ae8 <_fflush_r>
 8012f4e:	2800      	cmp	r0, #0
 8012f50:	d1ed      	bne.n	8012f2e <__swbuf_r+0x2a>
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	3b01      	subs	r3, #1
 8012f56:	60a3      	str	r3, [r4, #8]
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	1c5a      	adds	r2, r3, #1
 8012f5c:	6022      	str	r2, [r4, #0]
 8012f5e:	701e      	strb	r6, [r3, #0]
 8012f60:	6962      	ldr	r2, [r4, #20]
 8012f62:	1c43      	adds	r3, r0, #1
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d004      	beq.n	8012f72 <__swbuf_r+0x6e>
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	07db      	lsls	r3, r3, #31
 8012f6c:	d5e1      	bpl.n	8012f32 <__swbuf_r+0x2e>
 8012f6e:	2e0a      	cmp	r6, #10
 8012f70:	d1df      	bne.n	8012f32 <__swbuf_r+0x2e>
 8012f72:	4621      	mov	r1, r4
 8012f74:	4628      	mov	r0, r5
 8012f76:	f7ff fdb7 	bl	8012ae8 <_fflush_r>
 8012f7a:	2800      	cmp	r0, #0
 8012f7c:	d0d9      	beq.n	8012f32 <__swbuf_r+0x2e>
 8012f7e:	e7d6      	b.n	8012f2e <__swbuf_r+0x2a>

08012f80 <__swsetup_r>:
 8012f80:	b538      	push	{r3, r4, r5, lr}
 8012f82:	4b29      	ldr	r3, [pc, #164]	@ (8013028 <__swsetup_r+0xa8>)
 8012f84:	4605      	mov	r5, r0
 8012f86:	6818      	ldr	r0, [r3, #0]
 8012f88:	460c      	mov	r4, r1
 8012f8a:	b118      	cbz	r0, 8012f94 <__swsetup_r+0x14>
 8012f8c:	6a03      	ldr	r3, [r0, #32]
 8012f8e:	b90b      	cbnz	r3, 8012f94 <__swsetup_r+0x14>
 8012f90:	f7fd ffd2 	bl	8010f38 <__sinit>
 8012f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f98:	0719      	lsls	r1, r3, #28
 8012f9a:	d422      	bmi.n	8012fe2 <__swsetup_r+0x62>
 8012f9c:	06da      	lsls	r2, r3, #27
 8012f9e:	d407      	bmi.n	8012fb0 <__swsetup_r+0x30>
 8012fa0:	2209      	movs	r2, #9
 8012fa2:	602a      	str	r2, [r5, #0]
 8012fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fa8:	81a3      	strh	r3, [r4, #12]
 8012faa:	f04f 30ff 	mov.w	r0, #4294967295
 8012fae:	e033      	b.n	8013018 <__swsetup_r+0x98>
 8012fb0:	0758      	lsls	r0, r3, #29
 8012fb2:	d512      	bpl.n	8012fda <__swsetup_r+0x5a>
 8012fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fb6:	b141      	cbz	r1, 8012fca <__swsetup_r+0x4a>
 8012fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fbc:	4299      	cmp	r1, r3
 8012fbe:	d002      	beq.n	8012fc6 <__swsetup_r+0x46>
 8012fc0:	4628      	mov	r0, r5
 8012fc2:	f7fe ff33 	bl	8011e2c <_free_r>
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fca:	89a3      	ldrh	r3, [r4, #12]
 8012fcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012fd0:	81a3      	strh	r3, [r4, #12]
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	6063      	str	r3, [r4, #4]
 8012fd6:	6923      	ldr	r3, [r4, #16]
 8012fd8:	6023      	str	r3, [r4, #0]
 8012fda:	89a3      	ldrh	r3, [r4, #12]
 8012fdc:	f043 0308 	orr.w	r3, r3, #8
 8012fe0:	81a3      	strh	r3, [r4, #12]
 8012fe2:	6923      	ldr	r3, [r4, #16]
 8012fe4:	b94b      	cbnz	r3, 8012ffa <__swsetup_r+0x7a>
 8012fe6:	89a3      	ldrh	r3, [r4, #12]
 8012fe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012ff0:	d003      	beq.n	8012ffa <__swsetup_r+0x7a>
 8012ff2:	4621      	mov	r1, r4
 8012ff4:	4628      	mov	r0, r5
 8012ff6:	f000 f88b 	bl	8013110 <__smakebuf_r>
 8012ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012ffe:	f013 0201 	ands.w	r2, r3, #1
 8013002:	d00a      	beq.n	801301a <__swsetup_r+0x9a>
 8013004:	2200      	movs	r2, #0
 8013006:	60a2      	str	r2, [r4, #8]
 8013008:	6962      	ldr	r2, [r4, #20]
 801300a:	4252      	negs	r2, r2
 801300c:	61a2      	str	r2, [r4, #24]
 801300e:	6922      	ldr	r2, [r4, #16]
 8013010:	b942      	cbnz	r2, 8013024 <__swsetup_r+0xa4>
 8013012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013016:	d1c5      	bne.n	8012fa4 <__swsetup_r+0x24>
 8013018:	bd38      	pop	{r3, r4, r5, pc}
 801301a:	0799      	lsls	r1, r3, #30
 801301c:	bf58      	it	pl
 801301e:	6962      	ldrpl	r2, [r4, #20]
 8013020:	60a2      	str	r2, [r4, #8]
 8013022:	e7f4      	b.n	801300e <__swsetup_r+0x8e>
 8013024:	2000      	movs	r0, #0
 8013026:	e7f7      	b.n	8013018 <__swsetup_r+0x98>
 8013028:	24000020 	.word	0x24000020

0801302c <_raise_r>:
 801302c:	291f      	cmp	r1, #31
 801302e:	b538      	push	{r3, r4, r5, lr}
 8013030:	4605      	mov	r5, r0
 8013032:	460c      	mov	r4, r1
 8013034:	d904      	bls.n	8013040 <_raise_r+0x14>
 8013036:	2316      	movs	r3, #22
 8013038:	6003      	str	r3, [r0, #0]
 801303a:	f04f 30ff 	mov.w	r0, #4294967295
 801303e:	bd38      	pop	{r3, r4, r5, pc}
 8013040:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013042:	b112      	cbz	r2, 801304a <_raise_r+0x1e>
 8013044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013048:	b94b      	cbnz	r3, 801305e <_raise_r+0x32>
 801304a:	4628      	mov	r0, r5
 801304c:	f000 f830 	bl	80130b0 <_getpid_r>
 8013050:	4622      	mov	r2, r4
 8013052:	4601      	mov	r1, r0
 8013054:	4628      	mov	r0, r5
 8013056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801305a:	f000 b817 	b.w	801308c <_kill_r>
 801305e:	2b01      	cmp	r3, #1
 8013060:	d00a      	beq.n	8013078 <_raise_r+0x4c>
 8013062:	1c59      	adds	r1, r3, #1
 8013064:	d103      	bne.n	801306e <_raise_r+0x42>
 8013066:	2316      	movs	r3, #22
 8013068:	6003      	str	r3, [r0, #0]
 801306a:	2001      	movs	r0, #1
 801306c:	e7e7      	b.n	801303e <_raise_r+0x12>
 801306e:	2100      	movs	r1, #0
 8013070:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013074:	4620      	mov	r0, r4
 8013076:	4798      	blx	r3
 8013078:	2000      	movs	r0, #0
 801307a:	e7e0      	b.n	801303e <_raise_r+0x12>

0801307c <raise>:
 801307c:	4b02      	ldr	r3, [pc, #8]	@ (8013088 <raise+0xc>)
 801307e:	4601      	mov	r1, r0
 8013080:	6818      	ldr	r0, [r3, #0]
 8013082:	f7ff bfd3 	b.w	801302c <_raise_r>
 8013086:	bf00      	nop
 8013088:	24000020 	.word	0x24000020

0801308c <_kill_r>:
 801308c:	b538      	push	{r3, r4, r5, lr}
 801308e:	4d07      	ldr	r5, [pc, #28]	@ (80130ac <_kill_r+0x20>)
 8013090:	2300      	movs	r3, #0
 8013092:	4604      	mov	r4, r0
 8013094:	4608      	mov	r0, r1
 8013096:	4611      	mov	r1, r2
 8013098:	602b      	str	r3, [r5, #0]
 801309a:	f7ef fb53 	bl	8002744 <_kill>
 801309e:	1c43      	adds	r3, r0, #1
 80130a0:	d102      	bne.n	80130a8 <_kill_r+0x1c>
 80130a2:	682b      	ldr	r3, [r5, #0]
 80130a4:	b103      	cbz	r3, 80130a8 <_kill_r+0x1c>
 80130a6:	6023      	str	r3, [r4, #0]
 80130a8:	bd38      	pop	{r3, r4, r5, pc}
 80130aa:	bf00      	nop
 80130ac:	240056f8 	.word	0x240056f8

080130b0 <_getpid_r>:
 80130b0:	f7ef bb40 	b.w	8002734 <_getpid>

080130b4 <_malloc_usable_size_r>:
 80130b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80130b8:	1f18      	subs	r0, r3, #4
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	bfbc      	itt	lt
 80130be:	580b      	ldrlt	r3, [r1, r0]
 80130c0:	18c0      	addlt	r0, r0, r3
 80130c2:	4770      	bx	lr

080130c4 <__swhatbuf_r>:
 80130c4:	b570      	push	{r4, r5, r6, lr}
 80130c6:	460c      	mov	r4, r1
 80130c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80130cc:	2900      	cmp	r1, #0
 80130ce:	b096      	sub	sp, #88	@ 0x58
 80130d0:	4615      	mov	r5, r2
 80130d2:	461e      	mov	r6, r3
 80130d4:	da0d      	bge.n	80130f2 <__swhatbuf_r+0x2e>
 80130d6:	89a3      	ldrh	r3, [r4, #12]
 80130d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80130dc:	f04f 0100 	mov.w	r1, #0
 80130e0:	bf14      	ite	ne
 80130e2:	2340      	movne	r3, #64	@ 0x40
 80130e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130e8:	2000      	movs	r0, #0
 80130ea:	6031      	str	r1, [r6, #0]
 80130ec:	602b      	str	r3, [r5, #0]
 80130ee:	b016      	add	sp, #88	@ 0x58
 80130f0:	bd70      	pop	{r4, r5, r6, pc}
 80130f2:	466a      	mov	r2, sp
 80130f4:	f000 f848 	bl	8013188 <_fstat_r>
 80130f8:	2800      	cmp	r0, #0
 80130fa:	dbec      	blt.n	80130d6 <__swhatbuf_r+0x12>
 80130fc:	9901      	ldr	r1, [sp, #4]
 80130fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013106:	4259      	negs	r1, r3
 8013108:	4159      	adcs	r1, r3
 801310a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801310e:	e7eb      	b.n	80130e8 <__swhatbuf_r+0x24>

08013110 <__smakebuf_r>:
 8013110:	898b      	ldrh	r3, [r1, #12]
 8013112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013114:	079d      	lsls	r5, r3, #30
 8013116:	4606      	mov	r6, r0
 8013118:	460c      	mov	r4, r1
 801311a:	d507      	bpl.n	801312c <__smakebuf_r+0x1c>
 801311c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	6123      	str	r3, [r4, #16]
 8013124:	2301      	movs	r3, #1
 8013126:	6163      	str	r3, [r4, #20]
 8013128:	b003      	add	sp, #12
 801312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801312c:	ab01      	add	r3, sp, #4
 801312e:	466a      	mov	r2, sp
 8013130:	f7ff ffc8 	bl	80130c4 <__swhatbuf_r>
 8013134:	9f00      	ldr	r7, [sp, #0]
 8013136:	4605      	mov	r5, r0
 8013138:	4639      	mov	r1, r7
 801313a:	4630      	mov	r0, r6
 801313c:	f7fe feea 	bl	8011f14 <_malloc_r>
 8013140:	b948      	cbnz	r0, 8013156 <__smakebuf_r+0x46>
 8013142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013146:	059a      	lsls	r2, r3, #22
 8013148:	d4ee      	bmi.n	8013128 <__smakebuf_r+0x18>
 801314a:	f023 0303 	bic.w	r3, r3, #3
 801314e:	f043 0302 	orr.w	r3, r3, #2
 8013152:	81a3      	strh	r3, [r4, #12]
 8013154:	e7e2      	b.n	801311c <__smakebuf_r+0xc>
 8013156:	89a3      	ldrh	r3, [r4, #12]
 8013158:	6020      	str	r0, [r4, #0]
 801315a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801315e:	81a3      	strh	r3, [r4, #12]
 8013160:	9b01      	ldr	r3, [sp, #4]
 8013162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013166:	b15b      	cbz	r3, 8013180 <__smakebuf_r+0x70>
 8013168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801316c:	4630      	mov	r0, r6
 801316e:	f000 f81d 	bl	80131ac <_isatty_r>
 8013172:	b128      	cbz	r0, 8013180 <__smakebuf_r+0x70>
 8013174:	89a3      	ldrh	r3, [r4, #12]
 8013176:	f023 0303 	bic.w	r3, r3, #3
 801317a:	f043 0301 	orr.w	r3, r3, #1
 801317e:	81a3      	strh	r3, [r4, #12]
 8013180:	89a3      	ldrh	r3, [r4, #12]
 8013182:	431d      	orrs	r5, r3
 8013184:	81a5      	strh	r5, [r4, #12]
 8013186:	e7cf      	b.n	8013128 <__smakebuf_r+0x18>

08013188 <_fstat_r>:
 8013188:	b538      	push	{r3, r4, r5, lr}
 801318a:	4d07      	ldr	r5, [pc, #28]	@ (80131a8 <_fstat_r+0x20>)
 801318c:	2300      	movs	r3, #0
 801318e:	4604      	mov	r4, r0
 8013190:	4608      	mov	r0, r1
 8013192:	4611      	mov	r1, r2
 8013194:	602b      	str	r3, [r5, #0]
 8013196:	f7ef fb35 	bl	8002804 <_fstat>
 801319a:	1c43      	adds	r3, r0, #1
 801319c:	d102      	bne.n	80131a4 <_fstat_r+0x1c>
 801319e:	682b      	ldr	r3, [r5, #0]
 80131a0:	b103      	cbz	r3, 80131a4 <_fstat_r+0x1c>
 80131a2:	6023      	str	r3, [r4, #0]
 80131a4:	bd38      	pop	{r3, r4, r5, pc}
 80131a6:	bf00      	nop
 80131a8:	240056f8 	.word	0x240056f8

080131ac <_isatty_r>:
 80131ac:	b538      	push	{r3, r4, r5, lr}
 80131ae:	4d06      	ldr	r5, [pc, #24]	@ (80131c8 <_isatty_r+0x1c>)
 80131b0:	2300      	movs	r3, #0
 80131b2:	4604      	mov	r4, r0
 80131b4:	4608      	mov	r0, r1
 80131b6:	602b      	str	r3, [r5, #0]
 80131b8:	f7ef fb34 	bl	8002824 <_isatty>
 80131bc:	1c43      	adds	r3, r0, #1
 80131be:	d102      	bne.n	80131c6 <_isatty_r+0x1a>
 80131c0:	682b      	ldr	r3, [r5, #0]
 80131c2:	b103      	cbz	r3, 80131c6 <_isatty_r+0x1a>
 80131c4:	6023      	str	r3, [r4, #0]
 80131c6:	bd38      	pop	{r3, r4, r5, pc}
 80131c8:	240056f8 	.word	0x240056f8

080131cc <_init>:
 80131cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131ce:	bf00      	nop
 80131d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131d2:	bc08      	pop	{r3}
 80131d4:	469e      	mov	lr, r3
 80131d6:	4770      	bx	lr

080131d8 <_fini>:
 80131d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131da:	bf00      	nop
 80131dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80131de:	bc08      	pop	{r3}
 80131e0:	469e      	mov	lr, r3
 80131e2:	4770      	bx	lr
