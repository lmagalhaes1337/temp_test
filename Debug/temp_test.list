
temp_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a38  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08013d08  08013d08  00014d08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014180  08014180  00015180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014188  08014188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801418c  0801418c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e0  24000000  08014190  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  08014370  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  080143d0  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005454  240002a0  08014430  000162a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240056f4  08014430  000166f4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003d79a  00000000  00000000  000162ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000731b  00000000  00000000  00053a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002d58  00000000  00000000  0005ad88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002339  00000000  00000000  0005dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000423b1  00000000  00000000  0005fe19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f232  00000000  00000000  000a21ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019621f  00000000  00000000  000e13fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0027761b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000d230  00000000  00000000  00277660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00284890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002a0 	.word	0x240002a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013cf0 	.word	0x08013cf0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a4 	.word	0x240002a4
 800030c:	08013cf0 	.word	0x08013cf0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96a 	b.w	80006ac <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	460c      	mov	r4, r1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d14e      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fc:	4694      	mov	ip, r2
 80003fe:	458c      	cmp	ip, r1
 8000400:	4686      	mov	lr, r0
 8000402:	fab2 f282 	clz	r2, r2
 8000406:	d962      	bls.n	80004ce <__udivmoddi4+0xde>
 8000408:	b14a      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040a:	f1c2 0320 	rsb	r3, r2, #32
 800040e:	4091      	lsls	r1, r2
 8000410:	fa20 f303 	lsr.w	r3, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	4319      	orrs	r1, r3
 800041a:	fa00 fe02 	lsl.w	lr, r0, r2
 800041e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000422:	fa1f f68c 	uxth.w	r6, ip
 8000426:	fbb1 f4f7 	udiv	r4, r1, r7
 800042a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800042e:	fb07 1114 	mls	r1, r7, r4, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb04 f106 	mul.w	r1, r4, r6
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f104 30ff 	add.w	r0, r4, #4294967295
 8000446:	f080 8112 	bcs.w	800066e <__udivmoddi4+0x27e>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 810f 	bls.w	800066e <__udivmoddi4+0x27e>
 8000450:	3c02      	subs	r4, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a59      	subs	r1, r3, r1
 8000456:	fa1f f38e 	uxth.w	r3, lr
 800045a:	fbb1 f0f7 	udiv	r0, r1, r7
 800045e:	fb07 1110 	mls	r1, r7, r0, r1
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f606 	mul.w	r6, r0, r6
 800046a:	429e      	cmp	r6, r3
 800046c:	d90a      	bls.n	8000484 <__udivmoddi4+0x94>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 31ff 	add.w	r1, r0, #4294967295
 8000476:	f080 80fc 	bcs.w	8000672 <__udivmoddi4+0x282>
 800047a:	429e      	cmp	r6, r3
 800047c:	f240 80f9 	bls.w	8000672 <__udivmoddi4+0x282>
 8000480:	4463      	add	r3, ip
 8000482:	3802      	subs	r0, #2
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800048a:	2100      	movs	r1, #0
 800048c:	b11d      	cbz	r5, 8000496 <__udivmoddi4+0xa6>
 800048e:	40d3      	lsrs	r3, r2
 8000490:	2200      	movs	r2, #0
 8000492:	e9c5 3200 	strd	r3, r2, [r5]
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d905      	bls.n	80004aa <__udivmoddi4+0xba>
 800049e:	b10d      	cbz	r5, 80004a4 <__udivmoddi4+0xb4>
 80004a0:	e9c5 0100 	strd	r0, r1, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	4608      	mov	r0, r1
 80004a8:	e7f5      	b.n	8000496 <__udivmoddi4+0xa6>
 80004aa:	fab3 f183 	clz	r1, r3
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d146      	bne.n	8000540 <__udivmoddi4+0x150>
 80004b2:	42a3      	cmp	r3, r4
 80004b4:	d302      	bcc.n	80004bc <__udivmoddi4+0xcc>
 80004b6:	4290      	cmp	r0, r2
 80004b8:	f0c0 80f0 	bcc.w	800069c <__udivmoddi4+0x2ac>
 80004bc:	1a86      	subs	r6, r0, r2
 80004be:	eb64 0303 	sbc.w	r3, r4, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	2d00      	cmp	r5, #0
 80004c6:	d0e6      	beq.n	8000496 <__udivmoddi4+0xa6>
 80004c8:	e9c5 6300 	strd	r6, r3, [r5]
 80004cc:	e7e3      	b.n	8000496 <__udivmoddi4+0xa6>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	f040 8090 	bne.w	80005f4 <__udivmoddi4+0x204>
 80004d4:	eba1 040c 	sub.w	r4, r1, ip
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	2101      	movs	r1, #1
 80004e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ea:	fb08 4416 	mls	r4, r8, r6, r4
 80004ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004f2:	fb07 f006 	mul.w	r0, r7, r6
 80004f6:	4298      	cmp	r0, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x11c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x11a>
 8000504:	4298      	cmp	r0, r3
 8000506:	f200 80cd 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 800050a:	4626      	mov	r6, r4
 800050c:	1a1c      	subs	r4, r3, r0
 800050e:	fa1f f38e 	uxth.w	r3, lr
 8000512:	fbb4 f0f8 	udiv	r0, r4, r8
 8000516:	fb08 4410 	mls	r4, r8, r0, r4
 800051a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800051e:	fb00 f707 	mul.w	r7, r0, r7
 8000522:	429f      	cmp	r7, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x148>
 8000526:	eb1c 0303 	adds.w	r3, ip, r3
 800052a:	f100 34ff 	add.w	r4, r0, #4294967295
 800052e:	d202      	bcs.n	8000536 <__udivmoddi4+0x146>
 8000530:	429f      	cmp	r7, r3
 8000532:	f200 80b0 	bhi.w	8000696 <__udivmoddi4+0x2a6>
 8000536:	4620      	mov	r0, r4
 8000538:	1bdb      	subs	r3, r3, r7
 800053a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800053e:	e7a5      	b.n	800048c <__udivmoddi4+0x9c>
 8000540:	f1c1 0620 	rsb	r6, r1, #32
 8000544:	408b      	lsls	r3, r1
 8000546:	fa22 f706 	lsr.w	r7, r2, r6
 800054a:	431f      	orrs	r7, r3
 800054c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000550:	fa04 f301 	lsl.w	r3, r4, r1
 8000554:	ea43 030c 	orr.w	r3, r3, ip
 8000558:	40f4      	lsrs	r4, r6
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	0c38      	lsrs	r0, r7, #16
 8000560:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000564:	fbb4 fef0 	udiv	lr, r4, r0
 8000568:	fa1f fc87 	uxth.w	ip, r7
 800056c:	fb00 441e 	mls	r4, r0, lr, r4
 8000570:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000574:	fb0e f90c 	mul.w	r9, lr, ip
 8000578:	45a1      	cmp	r9, r4
 800057a:	fa02 f201 	lsl.w	r2, r2, r1
 800057e:	d90a      	bls.n	8000596 <__udivmoddi4+0x1a6>
 8000580:	193c      	adds	r4, r7, r4
 8000582:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000586:	f080 8084 	bcs.w	8000692 <__udivmoddi4+0x2a2>
 800058a:	45a1      	cmp	r9, r4
 800058c:	f240 8081 	bls.w	8000692 <__udivmoddi4+0x2a2>
 8000590:	f1ae 0e02 	sub.w	lr, lr, #2
 8000594:	443c      	add	r4, r7
 8000596:	eba4 0409 	sub.w	r4, r4, r9
 800059a:	fa1f f983 	uxth.w	r9, r3
 800059e:	fbb4 f3f0 	udiv	r3, r4, r0
 80005a2:	fb00 4413 	mls	r4, r0, r3, r4
 80005a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80005aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80005ae:	45a4      	cmp	ip, r4
 80005b0:	d907      	bls.n	80005c2 <__udivmoddi4+0x1d2>
 80005b2:	193c      	adds	r4, r7, r4
 80005b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005b8:	d267      	bcs.n	800068a <__udivmoddi4+0x29a>
 80005ba:	45a4      	cmp	ip, r4
 80005bc:	d965      	bls.n	800068a <__udivmoddi4+0x29a>
 80005be:	3b02      	subs	r3, #2
 80005c0:	443c      	add	r4, r7
 80005c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005c6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ca:	eba4 040c 	sub.w	r4, r4, ip
 80005ce:	429c      	cmp	r4, r3
 80005d0:	46ce      	mov	lr, r9
 80005d2:	469c      	mov	ip, r3
 80005d4:	d351      	bcc.n	800067a <__udivmoddi4+0x28a>
 80005d6:	d04e      	beq.n	8000676 <__udivmoddi4+0x286>
 80005d8:	b155      	cbz	r5, 80005f0 <__udivmoddi4+0x200>
 80005da:	ebb8 030e 	subs.w	r3, r8, lr
 80005de:	eb64 040c 	sbc.w	r4, r4, ip
 80005e2:	fa04 f606 	lsl.w	r6, r4, r6
 80005e6:	40cb      	lsrs	r3, r1
 80005e8:	431e      	orrs	r6, r3
 80005ea:	40cc      	lsrs	r4, r1
 80005ec:	e9c5 6400 	strd	r6, r4, [r5]
 80005f0:	2100      	movs	r1, #0
 80005f2:	e750      	b.n	8000496 <__udivmoddi4+0xa6>
 80005f4:	f1c2 0320 	rsb	r3, r2, #32
 80005f8:	fa20 f103 	lsr.w	r1, r0, r3
 80005fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000600:	fa24 f303 	lsr.w	r3, r4, r3
 8000604:	4094      	lsls	r4, r2
 8000606:	430c      	orrs	r4, r1
 8000608:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800060c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000610:	fa1f f78c 	uxth.w	r7, ip
 8000614:	fbb3 f0f8 	udiv	r0, r3, r8
 8000618:	fb08 3110 	mls	r1, r8, r0, r3
 800061c:	0c23      	lsrs	r3, r4, #16
 800061e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000622:	fb00 f107 	mul.w	r1, r0, r7
 8000626:	4299      	cmp	r1, r3
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0x24c>
 800062a:	eb1c 0303 	adds.w	r3, ip, r3
 800062e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000632:	d22c      	bcs.n	800068e <__udivmoddi4+0x29e>
 8000634:	4299      	cmp	r1, r3
 8000636:	d92a      	bls.n	800068e <__udivmoddi4+0x29e>
 8000638:	3802      	subs	r0, #2
 800063a:	4463      	add	r3, ip
 800063c:	1a5b      	subs	r3, r3, r1
 800063e:	b2a4      	uxth	r4, r4
 8000640:	fbb3 f1f8 	udiv	r1, r3, r8
 8000644:	fb08 3311 	mls	r3, r8, r1, r3
 8000648:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800064c:	fb01 f307 	mul.w	r3, r1, r7
 8000650:	42a3      	cmp	r3, r4
 8000652:	d908      	bls.n	8000666 <__udivmoddi4+0x276>
 8000654:	eb1c 0404 	adds.w	r4, ip, r4
 8000658:	f101 36ff 	add.w	r6, r1, #4294967295
 800065c:	d213      	bcs.n	8000686 <__udivmoddi4+0x296>
 800065e:	42a3      	cmp	r3, r4
 8000660:	d911      	bls.n	8000686 <__udivmoddi4+0x296>
 8000662:	3902      	subs	r1, #2
 8000664:	4464      	add	r4, ip
 8000666:	1ae4      	subs	r4, r4, r3
 8000668:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800066c:	e739      	b.n	80004e2 <__udivmoddi4+0xf2>
 800066e:	4604      	mov	r4, r0
 8000670:	e6f0      	b.n	8000454 <__udivmoddi4+0x64>
 8000672:	4608      	mov	r0, r1
 8000674:	e706      	b.n	8000484 <__udivmoddi4+0x94>
 8000676:	45c8      	cmp	r8, r9
 8000678:	d2ae      	bcs.n	80005d8 <__udivmoddi4+0x1e8>
 800067a:	ebb9 0e02 	subs.w	lr, r9, r2
 800067e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000682:	3801      	subs	r0, #1
 8000684:	e7a8      	b.n	80005d8 <__udivmoddi4+0x1e8>
 8000686:	4631      	mov	r1, r6
 8000688:	e7ed      	b.n	8000666 <__udivmoddi4+0x276>
 800068a:	4603      	mov	r3, r0
 800068c:	e799      	b.n	80005c2 <__udivmoddi4+0x1d2>
 800068e:	4630      	mov	r0, r6
 8000690:	e7d4      	b.n	800063c <__udivmoddi4+0x24c>
 8000692:	46d6      	mov	lr, sl
 8000694:	e77f      	b.n	8000596 <__udivmoddi4+0x1a6>
 8000696:	4463      	add	r3, ip
 8000698:	3802      	subs	r0, #2
 800069a:	e74d      	b.n	8000538 <__udivmoddi4+0x148>
 800069c:	4606      	mov	r6, r0
 800069e:	4623      	mov	r3, r4
 80006a0:	4608      	mov	r0, r1
 80006a2:	e70f      	b.n	80004c4 <__udivmoddi4+0xd4>
 80006a4:	3e02      	subs	r6, #2
 80006a6:	4463      	add	r3, ip
 80006a8:	e730      	b.n	800050c <__udivmoddi4+0x11c>
 80006aa:	bf00      	nop

080006ac <__aeabi_idiv0>:
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b08c      	sub	sp, #48	@ 0x30
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ba:	2200      	movs	r2, #0
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	605a      	str	r2, [r3, #4]
 80006c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006c2:	463b      	mov	r3, r7
 80006c4:	2224      	movs	r2, #36	@ 0x24
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f011 fa5e 	bl	8011b8a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006ce:	4b32      	ldr	r3, [pc, #200]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d0:	4a32      	ldr	r2, [pc, #200]	@ (800079c <MX_ADC1_Init+0xec>)
 80006d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006d4:	4b30      	ldr	r3, [pc, #192]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006e8:	2204      	movs	r2, #4
 80006ea:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f2:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_ADC1_Init+0xe8>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006fe:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000700:	2200      	movs	r2, #0
 8000702:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800070c:	4b22      	ldr	r3, [pc, #136]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800070e:	2200      	movs	r2, #0
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000712:	4b21      	ldr	r3, [pc, #132]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000714:	2200      	movs	r2, #0
 8000716:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800071a:	2200      	movs	r2, #0
 800071c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800071e:	4b1e      	ldr	r3, [pc, #120]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000720:	2200      	movs	r2, #0
 8000722:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000726:	2200      	movs	r2, #0
 8000728:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 800072c:	4b1a      	ldr	r3, [pc, #104]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800072e:	2201      	movs	r2, #1
 8000730:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000732:	4819      	ldr	r0, [pc, #100]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000734:	f003 f904 	bl	8003940 <HAL_ADC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800073e:	f001 fb47 	bl	8001dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800074a:	4619      	mov	r1, r3
 800074c:	4812      	ldr	r0, [pc, #72]	@ (8000798 <MX_ADC1_Init+0xe8>)
 800074e:	f004 f943 	bl	80049d8 <HAL_ADCEx_MultiModeConfigChannel>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000758:	f001 fb3a 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_ADC1_Init+0xf0>)
 800075e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000760:	2306      	movs	r3, #6
 8000762:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000768:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800076c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800076e:	2304      	movs	r3, #4
 8000770:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	4805      	ldr	r0, [pc, #20]	@ (8000798 <MX_ADC1_Init+0xe8>)
 8000782:	f003 fae5 	bl	8003d50 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800078c:	f001 fb20 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	3730      	adds	r7, #48	@ 0x30
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	240002bc 	.word	0x240002bc
 800079c:	40022000 	.word	0x40022000
 80007a0:	04300002 	.word	0x04300002

080007a4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2224      	movs	r2, #36	@ 0x24
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f011 f9ea 	bl	8011b8a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <MX_ADC2_Init+0xc8>)
 80007ba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007be:	2200      	movs	r2, #0
 80007c0:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80007c2:	4b29      	ldr	r3, [pc, #164]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c8:	4b27      	ldr	r3, [pc, #156]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ce:	4b26      	ldr	r3, [pc, #152]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d0:	2204      	movs	r2, #4
 80007d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80007da:	4b23      	ldr	r3, [pc, #140]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007dc:	2200      	movs	r2, #0
 80007de:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80007e0:	4b21      	ldr	r3, [pc, #132]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007e6:	4b20      	ldr	r3, [pc, #128]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000868 <MX_ADC2_Init+0xc4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000800:	4b19      	ldr	r3, [pc, #100]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000802:	2200      	movs	r2, #0
 8000804:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000806:	4b18      	ldr	r3, [pc, #96]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000808:	2200      	movs	r2, #0
 800080a:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800080e:	2200      	movs	r2, #0
 8000810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8000814:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000816:	2201      	movs	r2, #1
 8000818:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800081a:	4813      	ldr	r0, [pc, #76]	@ (8000868 <MX_ADC2_Init+0xc4>)
 800081c:	f003 f890 	bl	8003940 <HAL_ADC_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000826:	f001 fad3 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800082a:	2301      	movs	r3, #1
 800082c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800082e:	2306      	movs	r3, #6
 8000830:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000836:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800083a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800083c:	2304      	movs	r3, #4
 800083e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	@ (8000868 <MX_ADC2_Init+0xc4>)
 8000850:	f003 fa7e 	bl	8003d50 <HAL_ADC_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800085a:	f001 fab9 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3728      	adds	r7, #40	@ 0x28
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	2400032c 	.word	0x2400032c
 800086c:	40022100 	.word	0x40022100

08000870 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2224      	movs	r2, #36	@ 0x24
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f011 f984 	bl	8011b8a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000882:	4b33      	ldr	r3, [pc, #204]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000884:	4a33      	ldr	r2, [pc, #204]	@ (8000954 <MX_ADC3_Init+0xe4>)
 8000886:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000888:	4b31      	ldr	r3, [pc, #196]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800088e:	4b30      	ldr	r3, [pc, #192]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000890:	2208      	movs	r2, #8
 8000892:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8000894:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <MX_ADC3_Init+0xe0>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800089a:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a2:	2204      	movs	r2, #4
 80008a4:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008ac:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80008b2:	4b27      	ldr	r3, [pc, #156]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b23      	ldr	r3, [pc, #140]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c6:	4b22      	ldr	r3, [pc, #136]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80008cc:	4b20      	ldr	r3, [pc, #128]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008dc:	2200      	movs	r2, #0
 80008de:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.Ratio = ADC3_OVERSAMPLING_RATIO_2;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008fa:	4815      	ldr	r0, [pc, #84]	@ (8000950 <MX_ADC3_Init+0xe0>)
 80008fc:	f003 f820 	bl	8003940 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC3_Init+0x9a>
  {
    Error_Handler();
 8000906:	f001 fa63 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800090a:	2301      	movs	r3, #1
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800091a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091c:	2304      	movs	r3, #4
 800091e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  sConfig.OffsetSaturation = DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_ADC3_Init+0xe0>)
 800093a:	f003 fa09 	bl	8003d50 <HAL_ADC_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC3_Init+0xd8>
  {
    Error_Handler();
 8000944:	f001 fa44 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3728      	adds	r7, #40	@ 0x28
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2400039c 	.word	0x2400039c
 8000954:	58026000 	.word	0x58026000

08000958 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b090      	sub	sp, #64	@ 0x40
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a6c      	ldr	r2, [pc, #432]	@ (8000b28 <HAL_ADC_MspInit+0x1d0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d14e      	bne.n	8000a18 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800097a:	4b6c      	ldr	r3, [pc, #432]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	4a6a      	ldr	r2, [pc, #424]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000984:	4b69      	ldr	r3, [pc, #420]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d10e      	bne.n	80009aa <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800098c:	4b68      	ldr	r3, [pc, #416]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800098e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000992:	4a67      	ldr	r2, [pc, #412]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000994:	f043 0320 	orr.w	r3, r3, #32
 8000998:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800099c:	4b64      	ldr	r3, [pc, #400]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 800099e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80009a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b61      	ldr	r3, [pc, #388]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a5f      	ldr	r2, [pc, #380]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b5d      	ldr	r3, [pc, #372]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c8:	4b59      	ldr	r3, [pc, #356]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a58      	ldr	r2, [pc, #352]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b55      	ldr	r3, [pc, #340]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA1_C     ------> ADC1_INP1
    PA0_C     ------> ADC1_INP0
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin;
 80009e6:	2301      	movs	r3, #1
 80009e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ea:	2303      	movs	r3, #3
 80009ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A0_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80009f6:	4619      	mov	r1, r3
 80009f8:	484e      	ldr	r0, [pc, #312]	@ (8000b34 <HAL_ADC_MspInit+0x1dc>)
 80009fa:	f005 fb15 	bl	8006028 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80009fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a02:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a06:	f002 fd3f 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a0a:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a0e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a12:	f002 fd39 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a16:	e082      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC2)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a46      	ldr	r2, [pc, #280]	@ (8000b38 <HAL_ADC_MspInit+0x1e0>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d133      	bne.n	8000a8a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	3301      	adds	r3, #1
 8000a28:	4a40      	ldr	r2, [pc, #256]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b2c <HAL_ADC_MspInit+0x1d4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d10e      	bne.n	8000a52 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000a34:	4b3e      	ldr	r3, [pc, #248]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a36:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a3c:	f043 0320 	orr.w	r3, r3, #32
 8000a40:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a44:	4b3a      	ldr	r3, [pc, #232]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a4a:	f003 0320 	and.w	r3, r3, #32
 8000a4e:	61fb      	str	r3, [r7, #28]
 8000a50:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a5a:	f043 0301 	orr.w	r3, r3, #1
 8000a5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 8000a70:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8000a74:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 8000a78:	f002 fd06 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000a7c:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8000a80:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000a84:	f002 fd00 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8000a88:	e049      	b.n	8000b1e <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b3c <HAL_ADC_MspInit+0x1e4>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d144      	bne.n	8000b1e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a94:	4b26      	ldr	r3, [pc, #152]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a9a:	4a25      	ldr	r2, [pc, #148]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000a9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aa4:	4b22      	ldr	r3, [pc, #136]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aaa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	4a16      	ldr	r2, [pc, #88]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae0:	4b13      	ldr	r3, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0x1d8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000aee:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8000af2:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8000af6:	f002 fcc7 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000afa:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8000afe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b02:	f002 fcc1 	bl	8003488 <HAL_SYSCFG_AnalogSwitchConfig>
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8000b06:	2304      	movs	r3, #4
 8000b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 8000b12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b16:	4619      	mov	r1, r3
 8000b18:	4809      	ldr	r0, [pc, #36]	@ (8000b40 <HAL_ADC_MspInit+0x1e8>)
 8000b1a:	f005 fa85 	bl	8006028 <HAL_GPIO_Init>
}
 8000b1e:	bf00      	nop
 8000b20:	3740      	adds	r7, #64	@ 0x40
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	2400040c 	.word	0x2400040c
 8000b30:	58024400 	.word	0x58024400
 8000b34:	58020800 	.word	0x58020800
 8000b38:	40022100 	.word	0x40022100
 8000b3c:	58026000 	.word	0x58026000
 8000b40:	58021c00 	.word	0x58021c00

08000b44 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2224      	movs	r2, #36	@ 0x24
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f011 f81a 	bl	8011b8a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b56:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	@ (8000ba4 <MX_DAC1_Init+0x60>)
 8000b5a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b5c:	4810      	ldr	r0, [pc, #64]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b5e:	f004 f8fd 	bl	8004d5c <HAL_DAC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000b68:	f001 f932 	bl	8001dd0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2210      	movs	r2, #16
 8000b84:	4619      	mov	r1, r3
 8000b86:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_DAC1_Init+0x5c>)
 8000b88:	f004 f96a 	bl	8004e60 <HAL_DAC_ConfigChannel>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b92:	f001 f91d 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	@ 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	24000410 	.word	0x24000410
 8000ba4:	40007400 	.word	0x40007400

08000ba8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	@ 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c38 <HAL_DAC_MspInit+0x90>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d131      	bne.n	8000c2e <HAL_DAC_MspInit+0x86>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000bca:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bcc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000bd6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000be0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a13      	ldr	r2, [pc, #76]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_DAC_MspInit+0x94>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = DAC1_OUT2_Pin;
 8000c06:	2320      	movs	r3, #32
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC1_OUT2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4809      	ldr	r0, [pc, #36]	@ (8000c40 <HAL_DAC_MspInit+0x98>)
 8000c1a:	f005 fa05 	bl	8006028 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	210f      	movs	r1, #15
 8000c22:	2036      	movs	r0, #54	@ 0x36
 8000c24:	f004 f872 	bl	8004d0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c28:	2036      	movs	r0, #54	@ 0x36
 8000c2a:	f004 f889 	bl	8004d40 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000c2e:	bf00      	nop
 8000c30:	3728      	adds	r7, #40	@ 0x28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40007400 	.word	0x40007400
 8000c3c:	58024400 	.word	0x58024400
 8000c40:	58020000 	.word	0x58020000

08000c44 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c48:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <MX_ETH_Init+0x84>)
 8000c4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c56:	2280      	movs	r2, #128	@ 0x80
 8000c58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c5c:	22e1      	movs	r2, #225	@ 0xe1
 8000c5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c66:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c6c:	4b17      	ldr	r3, [pc, #92]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c72:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c74:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <MX_ETH_Init+0x88>)
 8000c76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c7e:	4b11      	ldr	r3, [pc, #68]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_ETH_Init+0x8c>)
 8000c82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c84:	4b0f      	ldr	r3, [pc, #60]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c86:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <MX_ETH_Init+0x90>)
 8000c88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c8c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c92:	480c      	ldr	r0, [pc, #48]	@ (8000cc4 <MX_ETH_Init+0x80>)
 8000c94:	f004 fa30 	bl	80050f8 <HAL_ETH_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c9e:	f001 f897 	bl	8001dd0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ca2:	2238      	movs	r2, #56	@ 0x38
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	480c      	ldr	r0, [pc, #48]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000ca8:	f010 ff6f 	bl	8011b8a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cae:	2221      	movs	r2, #33	@ 0x21
 8000cb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <MX_ETH_Init+0x94>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	2400045c 	.word	0x2400045c
 8000cc8:	40028000 	.word	0x40028000
 8000ccc:	2400050c 	.word	0x2400050c
 8000cd0:	24000240 	.word	0x24000240
 8000cd4:	240001e0 	.word	0x240001e0
 8000cd8:	24000424 	.word	0x24000424

08000cdc <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a49      	ldr	r2, [pc, #292]	@ (8000e20 <HAL_ETH_MspInit+0x144>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 808b 	bne.w	8000e16 <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d00:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d06:	4a47      	ldr	r2, [pc, #284]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d10:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d1a:	623b      	str	r3, [r7, #32]
 8000d1c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d1e:	4b41      	ldr	r3, [pc, #260]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d24:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d2a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d3c:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4c:	4b35      	ldr	r3, [pc, #212]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a30      	ldr	r2, [pc, #192]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d78:	4b2a      	ldr	r3, [pc, #168]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a29      	ldr	r2, [pc, #164]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d80:	f043 0302 	orr.w	r3, r3, #2
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b26      	ldr	r3, [pc, #152]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a21      	ldr	r2, [pc, #132]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e24 <HAL_ETH_MspInit+0x148>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0301 	and.w	r3, r3, #1
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PB11     ------> ETH_TX_EN
    PA2     ------> ETH_MDIO
    PC4     ------> ETH_RXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD1_Pin|RMII_RXD0_Pin;
 8000db4:	2332      	movs	r3, #50	@ 0x32
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc4:	230b      	movs	r3, #11
 8000dc6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4816      	ldr	r0, [pc, #88]	@ (8000e28 <HAL_ETH_MspInit+0x14c>)
 8000dd0:	f005 f92a 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_RX_ER_Pin|RMII_TX_EN_Pin;
 8000dd4:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000dd8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de6:	230b      	movs	r3, #11
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <HAL_ETH_MspInit+0x150>)
 8000df2:	f005 f919 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_CRS_DV_Pin|RMII_REF_CLK_Pin|RMII_MDIO_Pin;
 8000df6:	2386      	movs	r3, #134	@ 0x86
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <HAL_ETH_MspInit+0x154>)
 8000e12:	f005 f909 	bl	8006028 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	@ 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40028000 	.word	0x40028000
 8000e24:	58024400 	.word	0x58024400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	58020000 	.word	0x58020000

08000e34 <MX_FDCAN1_Init>:
FDCAN_HandleTypeDef hfdcan1;
FDCAN_HandleTypeDef hfdcan2;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e38:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef8 <MX_FDCAN1_Init+0xc4>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e44:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000e4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000e56:	4b27      	ldr	r3, [pc, #156]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2210      	movs	r2, #16
 8000e60:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000e62:	4b24      	ldr	r3, [pc, #144]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000e68:	4b22      	ldr	r3, [pc, #136]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e70:	2202      	movs	r2, #2
 8000e72:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e80:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000e92:	4b18      	ldr	r3, [pc, #96]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e98:	4b16      	ldr	r3, [pc, #88]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000e9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ea6:	2204      	movs	r2, #4
 8000ea8:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000eaa:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000eb0:	4b10      	ldr	r3, [pc, #64]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ebe:	2204      	movs	r2, #4
 8000ec0:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000edc:	2204      	movs	r2, #4
 8000ede:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000ee0:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <MX_FDCAN1_Init+0xc0>)
 8000ee2:	f004 fd3d 	bl	8005960 <HAL_FDCAN_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000eec:	f000 ff70 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	24000514 	.word	0x24000514
 8000ef8:	4000a000 	.word	0x4000a000

08000efc <MX_FDCAN2_Init>:
/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f02:	4a2f      	ldr	r2, [pc, #188]	@ (8000fc0 <MX_FDCAN2_Init+0xc4>)
 8000f04:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f06:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f12:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f18:	4b28      	ldr	r3, [pc, #160]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f1e:	4b27      	ldr	r3, [pc, #156]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f24:	4b25      	ldr	r3, [pc, #148]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f26:	2210      	movs	r2, #16
 8000f28:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f30:	4b22      	ldr	r3, [pc, #136]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f32:	2202      	movs	r2, #2
 8000f34:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f38:	2202      	movs	r2, #2
 8000f3a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f44:	2201      	movs	r2, #1
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f60:	4b16      	ldr	r3, [pc, #88]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f78:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f84:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f86:	2204      	movs	r2, #4
 8000f88:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	@ (8000fbc <MX_FDCAN2_Init+0xc0>)
 8000faa:	f004 fcd9 	bl	8005960 <HAL_FDCAN_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fb4:	f000 ff0c 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	240005b4 	.word	0x240005b4
 8000fc0:	4000a400 	.word	0x4000a400

08000fc4 <HAL_FDCAN_MspInit>:

static uint32_t HAL_RCC_FDCAN_CLK_ENABLED=0;

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	22b8      	movs	r2, #184	@ 0xb8
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f010 fdd0 	bl	8011b8a <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a57      	ldr	r2, [pc, #348]	@ (800114c <HAL_FDCAN_MspInit+0x188>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d151      	bne.n	8001098 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001000:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001008:	f107 0318 	add.w	r3, r7, #24
 800100c:	4618      	mov	r0, r3
 800100e:	f007 fc8f 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001018:	f000 feda 	bl	8001dd0 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800101c:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001024:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001026:	4b4a      	ldr	r3, [pc, #296]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10e      	bne.n	800104c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800102e:	4b49      	ldr	r3, [pc, #292]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001030:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001034:	4a47      	ldr	r2, [pc, #284]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800103a:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800103e:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001040:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800104c:	4b41      	ldr	r3, [pc, #260]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001052:	4a40      	ldr	r2, [pc, #256]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001058:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105c:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800105e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 800106a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800106e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001084:	2309      	movs	r3, #9
 8001086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800108a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800108e:	4619      	mov	r1, r3
 8001090:	4831      	ldr	r0, [pc, #196]	@ (8001158 <HAL_FDCAN_MspInit+0x194>)
 8001092:	f004 ffc9 	bl	8006028 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001096:	e054      	b.n	8001142 <HAL_FDCAN_MspInit+0x17e>
  else if(fdcanHandle->Instance==FDCAN2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a2f      	ldr	r2, [pc, #188]	@ (800115c <HAL_FDCAN_MspInit+0x198>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d14f      	bne.n	8001142 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80010a2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80010a6:	f04f 0300 	mov.w	r3, #0
 80010aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80010ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80010b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fc38 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 80010c6:	f000 fe83 	bl	8001dd0 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ca:	4b21      	ldr	r3, [pc, #132]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4a1f      	ldr	r2, [pc, #124]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001150 <HAL_FDCAN_MspInit+0x18c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d10e      	bne.n	80010fa <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010de:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010e8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80010f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001100:	4a14      	ldr	r2, [pc, #80]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800110a:	4b12      	ldr	r3, [pc, #72]	@ (8001154 <HAL_FDCAN_MspInit+0x190>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_TX_Pin|FDCAN2_RX_Pin;
 8001118:	2360      	movs	r3, #96	@ 0x60
 800111a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111e:	2302      	movs	r3, #2
 8001120:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001124:	2300      	movs	r3, #0
 8001126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001130:	2309      	movs	r3, #9
 8001132:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800113a:	4619      	mov	r1, r3
 800113c:	4808      	ldr	r0, [pc, #32]	@ (8001160 <HAL_FDCAN_MspInit+0x19c>)
 800113e:	f004 ff73 	bl	8006028 <HAL_GPIO_Init>
}
 8001142:	bf00      	nop
 8001144:	37e8      	adds	r7, #232	@ 0xe8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	4000a000 	.word	0x4000a000
 8001150:	24000654 	.word	0x24000654
 8001154:	58024400 	.word	0x58024400
 8001158:	58021c00 	.word	0x58021c00
 800115c:	4000a400 	.word	0x4000a400
 8001160:	58020400 	.word	0x58020400

08001164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	logMutexHandle = osMutexNew (0);
 8001168:	2000      	movs	r0, #0
 800116a:	f00c fe35 	bl	800ddd8 <osMutexNew>
 800116e:	4603      	mov	r3, r0
 8001170:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <MX_FREERTOS_Init+0x40>)
 8001172:	6013      	str	r3, [r2, #0]
	if (logMutexHandle == NULL) {
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <MX_FREERTOS_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <MX_FREERTOS_Init+0x1c>
	    while(1);
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MX_FREERTOS_Init+0x18>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of printToTerm */
  printToTermHandle = osThreadNew(StartDefaultTask, NULL, &printToTerm_attributes);
 8001180:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <MX_FREERTOS_Init+0x44>)
 8001182:	2100      	movs	r1, #0
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <MX_FREERTOS_Init+0x48>)
 8001186:	f00c fd59 	bl	800dc3c <osThreadNew>
 800118a:	4603      	mov	r3, r0
 800118c:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <MX_FREERTOS_Init+0x4c>)
 800118e:	6013      	str	r3, [r2, #0]

  /* creation of getTemp */
  getTempHandle = osThreadNew(StartTask02, NULL, &getTemp_attributes);
 8001190:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <MX_FREERTOS_Init+0x50>)
 8001192:	2100      	movs	r1, #0
 8001194:	4808      	ldr	r0, [pc, #32]	@ (80011b8 <MX_FREERTOS_Init+0x54>)
 8001196:	f00c fd51 	bl	800dc3c <osThreadNew>
 800119a:	4603      	mov	r3, r0
 800119c:	4a07      	ldr	r2, [pc, #28]	@ (80011bc <MX_FREERTOS_Init+0x58>)
 800119e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	24000658 	.word	0x24000658
 80011a8:	08013d8c 	.word	0x08013d8c
 80011ac:	080011c1 	.word	0x080011c1
 80011b0:	2400065c 	.word	0x2400065c
 80011b4:	08013db0 	.word	0x08013db0
 80011b8:	0800123d 	.word	0x0800123d
 80011bc:	24000660 	.word	0x24000660

080011c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osStatus_t status;
	uint8_t retries = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	72fb      	strb	r3, [r7, #11]
  for(;;)
  {


	/* Acquire mutex to ensure exclusive access to temperature log */
	while(retries < MAX_RETRIES){
 80011cc:	e00d      	b.n	80011ea <StartDefaultTask+0x2a>
	  status = osMutexAcquire(logMutexHandle, MAX_MUTEX_WAIT);
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <StartDefaultTask+0x78>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c fe84 	bl	800dee4 <osMutexAcquire>
 80011dc:	60f8      	str	r0, [r7, #12]
	  if(status == osOK){
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d006      	beq.n	80011f2 <StartDefaultTask+0x32>
		  break;
	  }
	  retries++;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	3301      	adds	r3, #1
 80011e8:	72fb      	strb	r3, [r7, #11]
	while(retries < MAX_RETRIES){
 80011ea:	7afb      	ldrb	r3, [r7, #11]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d9ee      	bls.n	80011ce <StartDefaultTask+0xe>
 80011f0:	e000      	b.n	80011f4 <StartDefaultTask+0x34>
		  break;
 80011f2:	bf00      	nop
	}
	if(status != osOK){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d11c      	bne.n	8001234 <StartDefaultTask+0x74>
	  continue;
	}
	retries = 0;
 80011fa:	2300      	movs	r3, #0
 80011fc:	72fb      	strb	r3, [r7, #11]
	/* Simulate logging a temperature value */
	add_new_temp_value();
 80011fe:	f002 f889 	bl	8003314 <add_new_temp_value>
	/* Release the mutex after updating the log */
	while(retries < MAX_RETRIES){
 8001202:	e00b      	b.n	800121c <StartDefaultTask+0x5c>
	  status = osMutexRelease(logMutexHandle);
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <StartDefaultTask+0x78>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f00c feb6 	bl	800df7a <osMutexRelease>
 800120e:	60f8      	str	r0, [r7, #12]
	  if(status == osOK){
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <StartDefaultTask+0x64>
		  break;
	  }
	  retries++;
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	3301      	adds	r3, #1
 800121a:	72fb      	strb	r3, [r7, #11]
	while(retries < MAX_RETRIES){
 800121c:	7afb      	ldrb	r3, [r7, #11]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d9f0      	bls.n	8001204 <StartDefaultTask+0x44>
 8001222:	e000      	b.n	8001226 <StartDefaultTask+0x66>
		  break;
 8001224:	bf00      	nop
	}
	retries = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	72fb      	strb	r3, [r7, #11]


	  osDelay(TEMP_WRITE_DELAY); /* Delay between temperature log entries */
 800122a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122e:	f00c fdb8 	bl	800dda2 <osDelay>
 8001232:	e7da      	b.n	80011ea <StartDefaultTask+0x2a>
	  continue;
 8001234:	bf00      	nop
	while(retries < MAX_RETRIES){
 8001236:	e7d8      	b.n	80011ea <StartDefaultTask+0x2a>
 8001238:	24000658 	.word	0x24000658

0800123c <StartTask02>:
  * @retval None
  * @note	If the printing fails, the task will be suspended since it has no purpose other than to print the log.
  */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	HAL_StatusTypeDef status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	727b      	strb	r3, [r7, #9]
	osStatus_t osStatus = osOK;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	uint8_t retries = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	72fb      	strb	r3, [r7, #11]
	uint8_t suspend_flag = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	72bb      	strb	r3, [r7, #10]
	/* Infinite loop to continuously print the temperature log */
  for(;;)
  {
	  /* Acquire mutex to ensure exclusive access to temperature log */
	  while(retries < MAX_RETRIES){
 8001254:	e00d      	b.n	8001272 <StartTask02+0x36>
		  osStatus = osMutexAcquire(logMutexHandle, MAX_MUTEX_WAIT);
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <StartTask02+0xa0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800125e:	4618      	mov	r0, r3
 8001260:	f00c fe40 	bl	800dee4 <osMutexAcquire>
 8001264:	60f8      	str	r0, [r7, #12]
		  if(osStatus == osOK){
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d006      	beq.n	800127a <StartTask02+0x3e>
			  break;
		  }
		  retries++;
 800126c:	7afb      	ldrb	r3, [r7, #11]
 800126e:	3301      	adds	r3, #1
 8001270:	72fb      	strb	r3, [r7, #11]
	  while(retries < MAX_RETRIES){
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	2b09      	cmp	r3, #9
 8001276:	d9ee      	bls.n	8001256 <StartTask02+0x1a>
 8001278:	e000      	b.n	800127c <StartTask02+0x40>
			  break;
 800127a:	bf00      	nop
	  }
	  if(osStatus != osOK){
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d12a      	bne.n	80012d8 <StartTask02+0x9c>
		  continue;
	  }
	  retries = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	72fb      	strb	r3, [r7, #11]

	  /* Simulate printing the temperature log */
	  status = Print_Temperature_Log(temperature_log);
 8001286:	4816      	ldr	r0, [pc, #88]	@ (80012e0 <StartTask02+0xa4>)
 8001288:	f001 ff94 	bl	80031b4 <Print_Temperature_Log>
 800128c:	4603      	mov	r3, r0
 800128e:	727b      	strb	r3, [r7, #9]
	  if(status != HAL_OK){
 8001290:	7a7b      	ldrb	r3, [r7, #9]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <StartTask02+0x78>
		  /* If printing the temperature log failed, then we suspend the task. However, we need to release the mutex first */
		  suspend_flag = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	72bb      	strb	r3, [r7, #10]
	  }
	  /* Release the mutex after printing the log */
	  while(retries < MAX_RETRIES){
 800129a:	e00b      	b.n	80012b4 <StartTask02+0x78>
		  osStatus = osMutexRelease(logMutexHandle);
 800129c:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <StartTask02+0xa0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00c fe6a 	bl	800df7a <osMutexRelease>
 80012a6:	60f8      	str	r0, [r7, #12]
		  if(osStatus != osOK){
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d106      	bne.n	80012bc <StartTask02+0x80>
			  break;
		  }
		  retries++;
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	3301      	adds	r3, #1
 80012b2:	72fb      	strb	r3, [r7, #11]
	  while(retries < MAX_RETRIES){
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	2b09      	cmp	r3, #9
 80012b8:	d9f0      	bls.n	800129c <StartTask02+0x60>
 80012ba:	e000      	b.n	80012be <StartTask02+0x82>
			  break;
 80012bc:	bf00      	nop
	  }
	  retries = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	72fb      	strb	r3, [r7, #11]

	  if(suspend_flag == 1){
 80012c2:	7abb      	ldrb	r3, [r7, #10]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d102      	bne.n	80012ce <StartTask02+0x92>
		  osThreadSuspend(NULL); // Suspend the current task
 80012c8:	2000      	movs	r0, #0
 80012ca:	f00c fd49 	bl	800dd60 <osThreadSuspend>
	  }

	  /* Delay between printing logs */
	  osDelay(LOG_PRINT_DELAY);
 80012ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80012d2:	f00c fd66 	bl	800dda2 <osDelay>
 80012d6:	e7cc      	b.n	8001272 <StartTask02+0x36>
		  continue;
 80012d8:	bf00      	nop
	  while(retries < MAX_RETRIES){
 80012da:	e7ca      	b.n	8001272 <StartTask02+0x36>
 80012dc:	24000658 	.word	0x24000658
 80012e0:	24000bb0 	.word	0x24000bb0

080012e4 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_HS_VBUS
     PH7   ------> SPI5_MISO
     PF11   ------> SPI5_MOSI
*/
void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08e      	sub	sp, #56	@ 0x38
 80012e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4bc1      	ldr	r3, [pc, #772]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80012fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001300:	4abf      	ldr	r2, [pc, #764]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001302:	f043 0302 	orr.w	r3, r3, #2
 8001306:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800130a:	4bbd      	ldr	r3, [pc, #756]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	623b      	str	r3, [r7, #32]
 8001316:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001318:	4bb9      	ldr	r3, [pc, #740]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800131a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800131e:	4ab8      	ldr	r2, [pc, #736]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001320:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001324:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001328:	4bb5      	ldr	r3, [pc, #724]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800132a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800132e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001332:	61fb      	str	r3, [r7, #28]
 8001334:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	4bb2      	ldr	r3, [pc, #712]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800133c:	4ab0      	ldr	r2, [pc, #704]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800133e:	f043 0308 	orr.w	r3, r3, #8
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001346:	4bae      	ldr	r3, [pc, #696]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	61bb      	str	r3, [r7, #24]
 8001352:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001354:	4baa      	ldr	r3, [pc, #680]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800135a:	4aa9      	ldr	r2, [pc, #676]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001364:	4ba6      	ldr	r3, [pc, #664]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001372:	4ba3      	ldr	r3, [pc, #652]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001378:	4aa1      	ldr	r2, [pc, #644]	@ (8001600 <MX_GPIO_Init+0x31c>)
 800137a:	f043 0310 	orr.w	r3, r3, #16
 800137e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001382:	4b9f      	ldr	r3, [pc, #636]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	4b9b      	ldr	r3, [pc, #620]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001396:	4a9a      	ldr	r2, [pc, #616]	@ (8001600 <MX_GPIO_Init+0x31c>)
 8001398:	f043 0304 	orr.w	r3, r3, #4
 800139c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a0:	4b97      	ldr	r3, [pc, #604]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	4b94      	ldr	r3, [pc, #592]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013b4:	4a92      	ldr	r2, [pc, #584]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013be:	4b90      	ldr	r3, [pc, #576]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013cc:	4b8c      	ldr	r3, [pc, #560]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d2:	4a8b      	ldr	r2, [pc, #556]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013d4:	f043 0320 	orr.w	r3, r3, #32
 80013d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013dc:	4b88      	ldr	r3, [pc, #544]	@ (8001600 <MX_GPIO_Init+0x31c>)
 80013de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e2:	f003 0320 	and.w	r3, r3, #32
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Detectn_Pin|LCD_DISP_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f240 4102 	movw	r1, #1026	@ 0x402
 80013f0:	4884      	ldr	r0, [pc, #528]	@ (8001604 <MX_GPIO_Init+0x320>)
 80013f2:	f004 ffc1 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 61d1 	mov.w	r1, #1672	@ 0x688
 80013fc:	4882      	ldr	r0, [pc, #520]	@ (8001608 <MX_GPIO_Init+0x324>)
 80013fe:	f004 ffbb 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 8001402:	2200      	movs	r2, #0
 8001404:	f248 1138 	movw	r1, #33080	@ 0x8138
 8001408:	4880      	ldr	r0, [pc, #512]	@ (800160c <MX_GPIO_Init+0x328>)
 800140a:	f004 ffb5 	bl	8006378 <HAL_GPIO_WritePin>
                          |ARD_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USER_LED2_Pin|USER_LED1_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	210c      	movs	r1, #12
 8001412:	487f      	ldr	r0, [pc, #508]	@ (8001610 <MX_GPIO_Init+0x32c>)
 8001414:	f004 ffb0 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STMOD_20_GPIO_Port, STMOD_20_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800141e:	487d      	ldr	r0, [pc, #500]	@ (8001614 <MX_GPIO_Init+0x330>)
 8001420:	f004 ffaa 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LCD_RST_Pin|USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001424:	2200      	movs	r2, #0
 8001426:	2160      	movs	r1, #96	@ 0x60
 8001428:	487b      	ldr	r0, [pc, #492]	@ (8001618 <MX_GPIO_Init+0x334>)
 800142a:	f004 ffa5 	bl	8006378 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = Detectn_Pin|LCD_DISP_Pin;
 800142e:	f240 4302 	movw	r3, #1026	@ 0x402
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001434:	2301      	movs	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143c:	2300      	movs	r3, #0
 800143e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001444:	4619      	mov	r1, r3
 8001446:	486f      	ldr	r0, [pc, #444]	@ (8001604 <MX_GPIO_Init+0x320>)
 8001448:	f004 fdee 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = SAI4_D2_Pin|SAI4_CK2_Pin;
 800144c:	2330      	movs	r3, #48	@ 0x30
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800145c:	230a      	movs	r3, #10
 800145e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4868      	ldr	r0, [pc, #416]	@ (8001608 <MX_GPIO_Init+0x324>)
 8001468:	f004 fdde 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|STMOD_17_Pin|STMOD_19_Pin|STMOD_18_Pin;
 800146c:	f44f 63d1 	mov.w	r3, #1672	@ 0x688
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001472:	2301      	movs	r3, #1
 8001474:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147a:	2300      	movs	r3, #0
 800147c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4860      	ldr	r0, [pc, #384]	@ (8001608 <MX_GPIO_Init+0x324>)
 8001486:	f004 fdcf 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin|CTP_INT_Pin;
 800148a:	f242 0304 	movw	r3, #8196	@ 0x2004
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001494:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	485a      	ldr	r0, [pc, #360]	@ (800160c <MX_GPIO_Init+0x328>)
 80014a2:	f004 fdc1 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_button_B2_used_for_wakeup_Pin;
 80014a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Blue_button_B2_used_for_wakeup_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4855      	ldr	r0, [pc, #340]	@ (8001610 <MX_GPIO_Init+0x32c>)
 80014bc:	f004 fdb4 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80014c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c6:	2302      	movs	r3, #2
 80014c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80014d2:	230a      	movs	r3, #10
 80014d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80014d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014da:	4619      	mov	r1, r3
 80014dc:	484f      	ldr	r0, [pc, #316]	@ (800161c <MX_GPIO_Init+0x338>)
 80014de:	f004 fda3 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin|ARD_D7_Pin|MEMS_LED_Pin|ARD_D4_Pin
 80014e2:	f248 1338 	movw	r3, #33080	@ 0x8138
 80014e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |ARD_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e8:	2301      	movs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f0:	2300      	movs	r3, #0
 80014f2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014f8:	4619      	mov	r1, r3
 80014fa:	4844      	ldr	r0, [pc, #272]	@ (800160c <MX_GPIO_Init+0x328>)
 80014fc:	f004 fd94 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001500:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800150e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001512:	4619      	mov	r1, r3
 8001514:	4841      	ldr	r0, [pc, #260]	@ (800161c <MX_GPIO_Init+0x338>)
 8001516:	f004 fd87 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 800151a:	2320      	movs	r3, #32
 800151c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001522:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	4839      	ldr	r0, [pc, #228]	@ (8001614 <MX_GPIO_Init+0x330>)
 8001530:	f004 fd7a 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = USER_LED2_Pin|USER_LED1_Pin;
 8001534:	230c      	movs	r3, #12
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001538:	2301      	movs	r3, #1
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4831      	ldr	r0, [pc, #196]	@ (8001610 <MX_GPIO_Init+0x32c>)
 800154c:	f004 fd6c 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MISO_Pin;
 8001550:	2380      	movs	r3, #128	@ 0x80
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001560:	2305      	movs	r3, #5
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MISO_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001568:	4619      	mov	r1, r3
 800156a:	482b      	ldr	r0, [pc, #172]	@ (8001618 <MX_GPIO_Init+0x334>)
 800156c:	f004 fd5c 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI5_MOSI_Pin;
 8001570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001574:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001582:	2305      	movs	r3, #5
 8001584:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SPI5_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4821      	ldr	r0, [pc, #132]	@ (8001614 <MX_GPIO_Init+0x330>)
 800158e:	f004 fd4b 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_Int_Pin;
 8001592:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001598:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800159c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_Int_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a6:	4619      	mov	r1, r3
 80015a8:	4817      	ldr	r0, [pc, #92]	@ (8001608 <MX_GPIO_Init+0x324>)
 80015aa:	f004 fd3d 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_20_Pin;
 80015ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b4:	2301      	movs	r3, #1
 80015b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(STMOD_20_GPIO_Port, &GPIO_InitStruct);
 80015c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015c4:	4619      	mov	r1, r3
 80015c6:	4813      	ldr	r0, [pc, #76]	@ (8001614 <MX_GPIO_Init+0x330>)
 80015c8:	f004 fd2e 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STMOD_11_INT_Pin;
 80015cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(STMOD_11_INT_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	@ (8001618 <MX_GPIO_Init+0x334>)
 80015e4:	f004 fd20 	bl	8006028 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|USB_FS_PWR_EN_Pin;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015fc:	e010      	b.n	8001620 <MX_GPIO_Init+0x33c>
 80015fe:	bf00      	nop
 8001600:	58024400 	.word	0x58024400
 8001604:	58020c00 	.word	0x58020c00
 8001608:	58021000 	.word	0x58021000
 800160c:	58021800 	.word	0x58021800
 8001610:	58020800 	.word	0x58020800
 8001614:	58021400 	.word	0x58021400
 8001618:	58021c00 	.word	0x58021c00
 800161c:	58020000 	.word	0x58020000
 8001620:	4619      	mov	r1, r3
 8001622:	4803      	ldr	r0, [pc, #12]	@ (8001630 <MX_GPIO_Init+0x34c>)
 8001624:	f004 fd00 	bl	8006028 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	@ 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58021c00 	.word	0x58021c00

08001634 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001638:	4b1b      	ldr	r3, [pc, #108]	@ (80016a8 <MX_I2C4_Init+0x74>)
 800163a:	4a1c      	ldr	r2, [pc, #112]	@ (80016ac <MX_I2C4_Init+0x78>)
 800163c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x60404E72;
 800163e:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001640:	4a1b      	ldr	r2, [pc, #108]	@ (80016b0 <MX_I2C4_Init+0x7c>)
 8001642:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001644:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164a:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_I2C4_Init+0x74>)
 800164c:	2201      	movs	r2, #1
 800164e:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_I2C4_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_I2C4_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800166e:	480e      	ldr	r0, [pc, #56]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001670:	f004 fe9c 	bl	80063ac <HAL_I2C_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800167a:	f000 fba9 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800167e:	2100      	movs	r1, #0
 8001680:	4809      	ldr	r0, [pc, #36]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001682:	f004 ff2f 	bl	80064e4 <HAL_I2CEx_ConfigAnalogFilter>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800168c:	f000 fba0 	bl	8001dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001690:	2100      	movs	r1, #0
 8001692:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <MX_I2C4_Init+0x74>)
 8001694:	f004 ff71 	bl	800657a <HAL_I2CEx_ConfigDigitalFilter>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800169e:	f000 fb97 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000664 	.word	0x24000664
 80016ac:	58001c00 	.word	0x58001c00
 80016b0:	60404e72 	.word	0x60404e72

080016b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b0b8      	sub	sp, #224	@ 0xe0
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	22b8      	movs	r2, #184	@ 0xb8
 80016d2:	2100      	movs	r1, #0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f010 fa58 	bl	8011b8a <memset>
  if(i2cHandle->Instance==I2C4)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a27      	ldr	r2, [pc, #156]	@ (800177c <HAL_I2C_MspInit+0xc8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d146      	bne.n	8001772 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80016e4:	f04f 0210 	mov.w	r2, #16
 80016e8:	f04f 0300 	mov.w	r3, #0
 80016ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	4618      	mov	r0, r3
 80016fc:	f007 f918 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001706:	f000 fb63 	bl	8001dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800170a:	4b1d      	ldr	r3, [pc, #116]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800170c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001710:	4a1b      	ldr	r2, [pc, #108]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001712:	f043 0320 	orr.w	r3, r3, #32
 8001716:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800171a:	4b19      	ldr	r3, [pc, #100]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800171c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PF15     ------> I2C4_SDA
    PF14     ------> I2C4_SCL
    */
    GPIO_InitStruct.Pin = I2C4_SDA_Pin|I2C4_SCL_Pin;
 8001728:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800172c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001742:	2304      	movs	r3, #4
 8001744:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001748:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <HAL_I2C_MspInit+0xd0>)
 8001750:	f004 fc6a 	bl	8006028 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001754:	4b0a      	ldr	r3, [pc, #40]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 800175c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001760:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_I2C_MspInit+0xcc>)
 8001766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800176a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001772:	bf00      	nop
 8001774:	37e0      	adds	r7, #224	@ 0xe0
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	58001c00 	.word	0x58001c00
 8001780:	58024400 	.word	0x58024400
 8001784:	58021400 	.word	0x58021400

08001788 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b09a      	sub	sp, #104	@ 0x68
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800178e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001792:	2234      	movs	r2, #52	@ 0x34
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f010 f9f7 	bl	8011b8a <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 800179c:	463b      	mov	r3, r7
 800179e:	2234      	movs	r2, #52	@ 0x34
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f010 f9f1 	bl	8011b8a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80017a8:	4b4e      	ldr	r3, [pc, #312]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017aa:	4a4f      	ldr	r2, [pc, #316]	@ (80018e8 <MX_LTDC_Init+0x160>)
 80017ac:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80017ae:	4b4d      	ldr	r3, [pc, #308]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017b4:	4b4b      	ldr	r3, [pc, #300]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80017ba:	4b4a      	ldr	r3, [pc, #296]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017c0:	4b48      	ldr	r3, [pc, #288]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80017c6:	4b47      	ldr	r3, [pc, #284]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80017cc:	4b45      	ldr	r3, [pc, #276]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017ce:	2203      	movs	r2, #3
 80017d0:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80017d2:	4b44      	ldr	r3, [pc, #272]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017d4:	220e      	movs	r2, #14
 80017d6:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80017d8:	4b42      	ldr	r3, [pc, #264]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017da:	2205      	movs	r2, #5
 80017dc:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80017de:	4b41      	ldr	r3, [pc, #260]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017e0:	f240 228e 	movw	r2, #654	@ 0x28e
 80017e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80017e6:	4b3f      	ldr	r3, [pc, #252]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017e8:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80017ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80017ee:	4b3d      	ldr	r3, [pc, #244]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017f0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80017f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80017f6:	4b3b      	ldr	r3, [pc, #236]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80017f8:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80017fe:	4b39      	ldr	r3, [pc, #228]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001806:	4b37      	ldr	r3, [pc, #220]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800180e:	4b35      	ldr	r3, [pc, #212]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 8001810:	2200      	movs	r2, #0
 8001812:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001816:	4833      	ldr	r0, [pc, #204]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 8001818:	f004 fefc 	bl	8006614 <HAL_LTDC_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001822:	f000 fad5 	bl	8001dd0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001832:	2300      	movs	r3, #0
 8001834:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001836:	2300      	movs	r3, #0
 8001838:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001842:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001846:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001848:	2305      	movs	r3, #5
 800184a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001850:	2300      	movs	r3, #0
 8001852:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800186a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800186e:	2200      	movs	r2, #0
 8001870:	4619      	mov	r1, r3
 8001872:	481c      	ldr	r0, [pc, #112]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 8001874:	f004 ff9e 	bl	80067b4 <HAL_LTDC_ConfigLayer>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800187e:	f000 faa7 	bl	8001dd0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800189e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80018a4:	2305      	movs	r3, #5
 80018a6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2201      	movs	r2, #1
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_LTDC_Init+0x15c>)
 80018ce:	f004 ff71 	bl	80067b4 <HAL_LTDC_ConfigLayer>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80018d8:	f000 fa7a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3768      	adds	r7, #104	@ 0x68
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	240006b8 	.word	0x240006b8
 80018e8:	50001000 	.word	0x50001000

080018ec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0be      	sub	sp, #248	@ 0xf8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001904:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001908:	22b8      	movs	r2, #184	@ 0xb8
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f010 f93c 	bl	8011b8a <memset>
  if(ltdcHandle->Instance==LTDC)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4ab1      	ldr	r2, [pc, #708]	@ (8001bdc <HAL_LTDC_MspInit+0x2f0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	f040 815b 	bne.w	8001bd4 <HAL_LTDC_MspInit+0x2e8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800191e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001922:	f04f 0300 	mov.w	r3, #0
 8001926:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 800192a:	2320      	movs	r3, #32
 800192c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3N = 129;
 800192e:	2381      	movs	r3, #129	@ 0x81
 8001930:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001932:	2302      	movs	r3, #2
 8001934:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001936:	2302      	movs	r3, #2
 8001938:	65fb      	str	r3, [r7, #92]	@ 0x5c
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800193a:	2302      	movs	r3, #2
 800193c:	663b      	str	r3, [r7, #96]	@ 0x60
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 800193e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001942:	667b      	str	r3, [r7, #100]	@ 0x64
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001944:	2300      	movs	r3, #0
 8001946:	66bb      	str	r3, [r7, #104]	@ 0x68
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800194c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001950:	4618      	mov	r0, r3
 8001952:	f006 ffed 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 800195c:	f000 fa38 	bl	8001dd0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001960:	4b9f      	ldr	r3, [pc, #636]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001962:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001966:	4a9e      	ldr	r2, [pc, #632]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8001970:	4b9b      	ldr	r3, [pc, #620]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001972:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
 800197c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	4b98      	ldr	r3, [pc, #608]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001980:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001984:	4a96      	ldr	r2, [pc, #600]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001986:	f043 0302 	orr.w	r3, r3, #2
 800198a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800198e:	4b94      	ldr	r3, [pc, #592]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001994:	f003 0302 	and.w	r3, r3, #2
 8001998:	623b      	str	r3, [r7, #32]
 800199a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800199c:	4b90      	ldr	r3, [pc, #576]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 800199e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019a2:	4a8f      	ldr	r2, [pc, #572]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ac:	4b8c      	ldr	r3, [pc, #560]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ba:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019c0:	4a87      	ldr	r2, [pc, #540]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019c2:	f043 0310 	orr.w	r3, r3, #16
 80019c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019ca:	4b85      	ldr	r3, [pc, #532]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b81      	ldr	r3, [pc, #516]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019de:	4a80      	ldr	r2, [pc, #512]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019e8:	4b7d      	ldr	r3, [pc, #500]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019f6:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019fc:	4a78      	ldr	r2, [pc, #480]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 80019fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a06:	4b76      	ldr	r3, [pc, #472]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a14:	4b72      	ldr	r3, [pc, #456]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a1a:	4a71      	ldr	r2, [pc, #452]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a24:	4b6e      	ldr	r3, [pc, #440]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a32:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a38:	4a69      	ldr	r2, [pc, #420]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a42:	4b67      	ldr	r3, [pc, #412]	@ (8001be0 <HAL_LTDC_MspInit+0x2f4>)
 8001a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
    PH3     ------> LTDC_R1
    PA6     ------> LTDC_G2
    PB0     ------> LTDC_G1
    PE11     ------> LTDC_G3
    */
    GPIO_InitStruct.Pin = LCD_B6_Pin|LCD_B7_Pin|LCD_G0_Pin|LCD_G1_Pin;
 8001a50:	f240 3303 	movw	r3, #771	@ 0x303
 8001a54:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a6a:	230e      	movs	r3, #14
 8001a6c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a74:	4619      	mov	r1, r3
 8001a76:	485b      	ldr	r0, [pc, #364]	@ (8001be4 <HAL_LTDC_MspInit+0x2f8>)
 8001a78:	f004 fad6 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G7_Pin|LCD_B1_Pin|LCD_B2_Pin;
 8001a7c:	2349      	movs	r3, #73	@ 0x49
 8001a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001a94:	230e      	movs	r3, #14
 8001a96:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4851      	ldr	r0, [pc, #324]	@ (8001be8 <HAL_LTDC_MspInit+0x2fc>)
 8001aa2:	f004 fac1 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_R0_Pin|LCD_R6_Pin|LCD_B4_Pin|LCD_DE_Pin
 8001aa6:	f64b 0303 	movw	r3, #47107	@ 0xb803
 8001aaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R7_Pin|LCD_G3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ac0:	230e      	movs	r3, #14
 8001ac2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001aca:	4619      	mov	r1, r3
 8001acc:	4847      	ldr	r0, [pc, #284]	@ (8001bec <HAL_LTDC_MspInit+0x300>)
 8001ace:	f004 faab 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B3_Pin;
 8001ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ada:	2302      	movs	r3, #2
 8001adc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LTDC;
 8001aec:	230d      	movs	r3, #13
 8001aee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_B3_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001af6:	4619      	mov	r1, r3
 8001af8:	483d      	ldr	r0, [pc, #244]	@ (8001bf0 <HAL_LTDC_MspInit+0x304>)
 8001afa:	f004 fa95 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B0_Pin|LCD_CLK_Pin;
 8001afe:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 8001b02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b12:	2300      	movs	r3, #0
 8001b14:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b18:	230e      	movs	r3, #14
 8001b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b22:	4619      	mov	r1, r3
 8001b24:	4833      	ldr	r0, [pc, #204]	@ (8001bf4 <HAL_LTDC_MspInit+0x308>)
 8001b26:	f004 fa7f 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G4_Pin|LCD_R5_Pin|LCD_R3_Pin|LCD_R2_Pin
 8001b2a:	f648 7308 	movw	r3, #36616	@ 0x8f08
 8001b2e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |LCD_R4_Pin|LCD_R1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b44:	230e      	movs	r3, #14
 8001b46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b4a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4829      	ldr	r0, [pc, #164]	@ (8001bf8 <HAL_LTDC_MspInit+0x30c>)
 8001b52:	f004 fa69 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G6_Pin|LCD_HSYNC_Pin;
 8001b56:	23c0      	movs	r3, #192	@ 0xc0
 8001b58:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b6e:	230e      	movs	r3, #14
 8001b70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4820      	ldr	r0, [pc, #128]	@ (8001bfc <HAL_LTDC_MspInit+0x310>)
 8001b7c:	f004 fa54 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B5_Pin|LCD_VSYNC_Pin|LCD_G2_Pin;
 8001b80:	2358      	movs	r3, #88	@ 0x58
 8001b82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b98:	230e      	movs	r3, #14
 8001b9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4812      	ldr	r0, [pc, #72]	@ (8001bf0 <HAL_LTDC_MspInit+0x304>)
 8001ba6:	f004 fa3f 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_G5_Pin;
 8001baa:	2310      	movs	r3, #16
 8001bac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001bc2:	2309      	movs	r3, #9
 8001bc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(LCD_G5_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480a      	ldr	r0, [pc, #40]	@ (8001bf8 <HAL_LTDC_MspInit+0x30c>)
 8001bd0:	f004 fa2a 	bl	8006028 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	37f8      	adds	r7, #248	@ 0xf8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	50001000 	.word	0x50001000
 8001be0:	58024400 	.word	0x58024400
 8001be4:	58020400 	.word	0x58020400
 8001be8:	58020c00 	.word	0x58020c00
 8001bec:	58021000 	.word	0x58021000
 8001bf0:	58020000 	.word	0x58020000
 8001bf4:	58021800 	.word	0x58021800
 8001bf8:	58021c00 	.word	0x58021c00
 8001bfc:	58020800 	.word	0x58020800

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c04:	f001 fbd0 	bl	80033a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c08:	f000 f830 	bl	8001c6c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c0c:	f000 f89e 	bl	8001d4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c10:	f7ff fb68 	bl	80012e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c14:	f7fe fd4c 	bl	80006b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001c18:	f7fe fdc4 	bl	80007a4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001c1c:	f7fe fe28 	bl	8000870 <MX_ADC3_Init>
  MX_DAC1_Init();
 8001c20:	f7fe ff90 	bl	8000b44 <MX_DAC1_Init>
  MX_ETH_Init();
 8001c24:	f7ff f80e 	bl	8000c44 <MX_ETH_Init>
  MX_FDCAN1_Init();
 8001c28:	f7ff f904 	bl	8000e34 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001c2c:	f7ff f966 	bl	8000efc <MX_FDCAN2_Init>
  MX_I2C4_Init();
 8001c30:	f7ff fd00 	bl	8001634 <MX_I2C4_Init>
  MX_LTDC_Init();
 8001c34:	f7ff fda8 	bl	8001788 <MX_LTDC_Init>
  MX_OCTOSPI1_Init();
 8001c38:	f000 f8d0 	bl	8001ddc <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001c3c:	f000 f932 	bl	8001ea4 <MX_OCTOSPI2_Init>
  MX_SAI1_Init();
 8001c40:	f000 fbb4 	bl	80023ac <MX_SAI1_Init>
  //MX_SDMMC1_SD_Init();
  MX_TIM1_Init();
 8001c44:	f000 ff0c 	bl	8002a60 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001c48:	f000 ff98 	bl	8002b7c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001c4c:	f001 f806 	bl	8002c5c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8001c50:	f001 f95e 	bl	8002f10 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001c54:	f001 f9a8 	bl	8002fa8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001c58:	f001 fb02 	bl	8003260 <MX_USB_OTG_HS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001c5c:	f00b ffa4 	bl	800dba8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001c60:	f7ff fa80 	bl	8001164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001c64:	f00b ffc4 	bl	800dbf0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <main+0x68>

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b09c      	sub	sp, #112	@ 0x70
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c76:	224c      	movs	r2, #76	@ 0x4c
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00f ff85 	bl	8011b8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	2220      	movs	r2, #32
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f00f ff7f 	bl	8011b8a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c8c:	2004      	movs	r0, #4
 8001c8e:	f005 fe4d 	bl	800792c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b2c      	ldr	r3, [pc, #176]	@ (8001d48 <SystemClock_Config+0xdc>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <SystemClock_Config+0xdc>)
 8001c9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b29      	ldr	r3, [pc, #164]	@ (8001d48 <SystemClock_Config+0xdc>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cae:	bf00      	nop
 8001cb0:	4b25      	ldr	r3, [pc, #148]	@ (8001d48 <SystemClock_Config+0xdc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cbc:	d1f8      	bne.n	8001cb0 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001cbe:	2321      	movs	r3, #33	@ 0x21
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cc2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8001cd4:	2305      	movs	r3, #5
 8001cd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 110;
 8001cd8:	236e      	movs	r3, #110	@ 0x6e
 8001cda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f005 fe71 	bl	80079e0 <HAL_RCC_OscConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d04:	f000 f864 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d08:	233f      	movs	r3, #63	@ 0x3f
 8001d0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d14:	2308      	movs	r3, #8
 8001d16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d18:	2340      	movs	r3, #64	@ 0x40
 8001d1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d1c:	2340      	movs	r3, #64	@ 0x40
 8001d1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d24:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d26:	2340      	movs	r3, #64	@ 0x40
 8001d28:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2103      	movs	r1, #3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f006 fa30 	bl	8008194 <HAL_RCC_ClockConfig>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001d3a:	f000 f849 	bl	8001dd0 <Error_Handler>
  }
}
 8001d3e:	bf00      	nop
 8001d40:	3770      	adds	r7, #112	@ 0x70
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	58024800 	.word	0x58024800

08001d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0ae      	sub	sp, #184	@ 0xb8
 8001d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d52:	463b      	mov	r3, r7
 8001d54:	22b8      	movs	r2, #184	@ 0xb8
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f00f ff16 	bl	8011b8a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 5;
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 80;
 8001d6e:	2350      	movs	r3, #80	@ 0x50
 8001d70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8001d72:	2305      	movs	r3, #5
 8001d74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001d76:	2302      	movs	r3, #2
 8001d78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4618      	mov	r0, r3
 8001d94:	f006 fdcc 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001d9e:	f000 f817 	bl	8001dd0 <Error_Handler>
  }
}
 8001da2:	bf00      	nop
 8001da4:	37b8      	adds	r7, #184	@ 0xb8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d101      	bne.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dbe:	f001 fb2f 	bl	8003420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40001000 	.word	0x40001000

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <MX_OCTOSPI1_Init>:
OSPI_HandleTypeDef hospi1;
OSPI_HandleTypeDef hospi2;

/* OCTOSPI1 init function */
void MX_OCTOSPI1_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001de2:	463b      	mov	r3, r7
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
 8001df0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  hospi1.Instance = OCTOSPI1;
 8001df2:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001df4:	4a29      	ldr	r2, [pc, #164]	@ (8001e9c <MX_OCTOSPI1_Init+0xc0>)
 8001df6:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001df8:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8001e04:	4b24      	ldr	r3, [pc, #144]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001e22:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e42:	2208      	movs	r2, #8
 8001e44:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi1.Init.MaxTran = 0;
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi1.Init.Refresh = 0;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001e52:	4811      	ldr	r0, [pc, #68]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e54:	f004 fe86 	bl	8006b64 <HAL_OSPI_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_OCTOSPI1_Init+0x86>
  {
    Error_Handler();
 8001e5e:	f7ff ffb7 	bl	8001dd0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	603b      	str	r3, [r7, #0]
  sOspiManagerCfg.DQSPort = 1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	607b      	str	r3, [r7, #4]
  sOspiManagerCfg.NCSPort = 1;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001e6e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001e72:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <MX_OCTOSPI1_Init+0xc4>)
 8001e76:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001e78:	463b      	mov	r3, r7
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	@ (8001e98 <MX_OCTOSPI1_Init+0xbc>)
 8001e82:	f004 ff79 	bl	8006d78 <HAL_OSPIM_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_OCTOSPI1_Init+0xb4>
  {
    Error_Handler();
 8001e8c:	f7ff ffa0 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	24000760 	.word	0x24000760
 8001e9c:	52005000 	.word	0x52005000
 8001ea0:	01000001 	.word	0x01000001

08001ea4 <MX_OCTOSPI2_Init>:
/* OCTOSPI2 init function */
void MX_OCTOSPI2_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	615a      	str	r2, [r3, #20]
  OSPI_HyperbusCfgTypeDef sHyperBusCfg = {0};
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  hospi2.Instance = OCTOSPI2;
 8001ec8:	4b33      	ldr	r3, [pc, #204]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001eca:	4a34      	ldr	r2, [pc, #208]	@ (8001f9c <MX_OCTOSPI2_Init+0xf8>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 1;
 8001ece:	4b32      	ldr	r3, [pc, #200]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001ed4:	4b30      	ldr	r3, [pc, #192]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_HYPERBUS;
 8001eda:	4b2f      	ldr	r3, [pc, #188]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001edc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001ee0:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 32;
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001ee4:	2220      	movs	r2, #32
 8001ee6:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 1;
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001eee:	4b2a      	ldr	r3, [pc, #168]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001ef4:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001efa:	4b27      	ldr	r3, [pc, #156]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 1;
 8001f00:	4b25      	ldr	r3, [pc, #148]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001f06:	4b24      	ldr	r3, [pc, #144]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001f12:	4b21      	ldr	r3, [pc, #132]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	631a      	str	r2, [r3, #48]	@ 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001f18:	4b1f      	ldr	r3, [pc, #124]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f1a:	2208      	movs	r2, #8
 8001f1c:	635a      	str	r2, [r3, #52]	@ 0x34
  hospi2.Init.MaxTran = 0;
 8001f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
  hospi2.Init.Refresh = 0;
 8001f24:	4b1c      	ldr	r3, [pc, #112]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001f2a:	481b      	ldr	r0, [pc, #108]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f2c:	f004 fe1a 	bl	8006b64 <HAL_OSPI_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_OCTOSPI2_Init+0x96>
  {
    Error_Handler();
 8001f36:	f7ff ff4b 	bl	8001dd0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.DQSPort = 2;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.NCSPort = 2;
 8001f42:	2302      	movs	r3, #2
 8001f44:	61bb      	str	r3, [r7, #24]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <MX_OCTOSPI2_Init+0xfc>)
 8001f48:	61fb      	str	r3, [r7, #28]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001f4a:	4b16      	ldr	r3, [pc, #88]	@ (8001fa4 <MX_OCTOSPI2_Init+0x100>)
 8001f4c:	623b      	str	r3, [r7, #32]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f4e:	f107 0310 	add.w	r3, r7, #16
 8001f52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f5a:	f004 ff0d 	bl	8006d78 <HAL_OSPIM_Config>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_OCTOSPI2_Init+0xc4>
  {
    Error_Handler();
 8001f64:	f7ff ff34 	bl	8001dd0 <Error_Handler>
  }
  sHyperBusCfg.RWRecoveryTime = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	603b      	str	r3, [r7, #0]
  sHyperBusCfg.AccessTime = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	607b      	str	r3, [r7, #4]
  sHyperBusCfg.WriteZeroLatency = HAL_OSPI_NO_LATENCY_ON_WRITE;
 8001f70:	2302      	movs	r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
  sHyperBusCfg.LatencyMode = HAL_OSPI_VARIABLE_LATENCY;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  if (HAL_OSPI_HyperbusCfg(&hospi2, &sHyperBusCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4805      	ldr	r0, [pc, #20]	@ (8001f98 <MX_OCTOSPI2_Init+0xf4>)
 8001f82:	f004 feab 	bl	8006cdc <HAL_OSPI_HyperbusCfg>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_OCTOSPI2_Init+0xec>
  {
    Error_Handler();
 8001f8c:	f7ff ff20 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	3728      	adds	r7, #40	@ 0x28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	240007bc 	.word	0x240007bc
 8001f9c:	5200a000 	.word	0x5200a000
 8001fa0:	00010002 	.word	0x00010002
 8001fa4:	01000002 	.word	0x01000002

08001fa8 <HAL_OSPI_MspInit>:

static uint32_t HAL_RCC_OCTOSPIM_CLK_ENABLED=0;

void HAL_OSPI_MspInit(OSPI_HandleTypeDef* ospiHandle)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0c2      	sub	sp, #264	@ 0x108
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fb6:	6018      	str	r0, [r3, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fc8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001fcc:	22b8      	movs	r2, #184	@ 0xb8
 8001fce:	2100      	movs	r1, #0
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f00f fdda 	bl	8011b8a <memset>
  if(ospiHandle->Instance==OCTOSPI1)
 8001fd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001fda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a90      	ldr	r2, [pc, #576]	@ (8002224 <HAL_OSPI_MspInit+0x27c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 812d 	bne.w	8002244 <HAL_OSPI_MspInit+0x29c>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001fea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002000:	4618      	mov	r0, r3
 8002002:	f006 fc95 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 800200c:	f7ff fee0 	bl	8001dd0 <Error_Handler>
    }

    /* OCTOSPI1 clock enable */
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 8002010:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_OSPI_MspInit+0x280>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	3301      	adds	r3, #1
 8002016:	4a84      	ldr	r2, [pc, #528]	@ (8002228 <HAL_OSPI_MspInit+0x280>)
 8002018:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 800201a:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <HAL_OSPI_MspInit+0x280>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d10e      	bne.n	8002040 <HAL_OSPI_MspInit+0x98>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002024:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002028:	4a80      	ldr	r2, [pc, #512]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 800202a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800202e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002032:	4b7e      	ldr	r3, [pc, #504]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002034:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	637b      	str	r3, [r7, #52]	@ 0x34
 800203e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002040:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002042:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002046:	4a79      	ldr	r2, [pc, #484]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8002050:	4b76      	ldr	r3, [pc, #472]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002052:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002056:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205a:	633b      	str	r3, [r7, #48]	@ 0x30
 800205c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800205e:	4b73      	ldr	r3, [pc, #460]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002064:	4a71      	ldr	r2, [pc, #452]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800206a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800206e:	4b6f      	ldr	r3, [pc, #444]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800207a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207c:	4b6b      	ldr	r3, [pc, #428]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 800207e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002082:	4a6a      	ldr	r2, [pc, #424]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 8002084:	f043 0308 	orr.w	r3, r3, #8
 8002088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208c:	4b67      	ldr	r3, [pc, #412]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 800208e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002092:	f003 0308 	and.w	r3, r3, #8
 8002096:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	4b64      	ldr	r3, [pc, #400]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020a0:	4a62      	ldr	r2, [pc, #392]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020aa:	4b60      	ldr	r3, [pc, #384]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80020b8:	4b5c      	ldr	r3, [pc, #368]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020be:	4a5b      	ldr	r2, [pc, #364]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020c0:	f043 0320 	orr.w	r3, r3, #32
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c8:	4b58      	ldr	r3, [pc, #352]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	623b      	str	r3, [r7, #32]
 80020d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d6:	4b55      	ldr	r3, [pc, #340]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020dc:	4a53      	ldr	r2, [pc, #332]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e6:	4b51      	ldr	r3, [pc, #324]	@ (800222c <HAL_OSPI_MspInit+0x284>)
 80020e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	61fb      	str	r3, [r7, #28]
 80020f2:	69fb      	ldr	r3, [r7, #28]
    PD11     ------> OCTOSPIM_P1_IO0
    PD12     ------> OCTOSPIM_P1_IO1
    PF10     ------> OCTOSPIM_P1_CLK
    PB2     ------> OCTOSPIM_P1_DQS
    */
    GPIO_InitStruct.Pin = OCSPI1_IO6_Pin;
 80020f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fc:	2302      	movs	r3, #2
 80020fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 800210e:	2309      	movs	r3, #9
 8002110:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO6_GPIO_Port, &GPIO_InitStruct);
 8002114:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002118:	4619      	mov	r1, r3
 800211a:	4845      	ldr	r0, [pc, #276]	@ (8002230 <HAL_OSPI_MspInit+0x288>)
 800211c:	f003 ff84 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO7_Pin|OCSPI1_IO5_Pin|OCSPI1_IO4_Pin;
 8002120:	23b0      	movs	r3, #176	@ 0xb0
 8002122:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002132:	2303      	movs	r3, #3
 8002134:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8002138:	230a      	movs	r3, #10
 800213a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800213e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002142:	4619      	mov	r1, r3
 8002144:	483b      	ldr	r0, [pc, #236]	@ (8002234 <HAL_OSPI_MspInit+0x28c>)
 8002146:	f003 ff6f 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO2_Pin;
 800214a:	2304      	movs	r3, #4
 800214c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 8002162:	2309      	movs	r3, #9
 8002164:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_IO2_GPIO_Port, &GPIO_InitStruct);
 8002168:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800216c:	4619      	mov	r1, r3
 800216e:	4832      	ldr	r0, [pc, #200]	@ (8002238 <HAL_OSPI_MspInit+0x290>)
 8002170:	f003 ff5a 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_NCS_Pin;
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002186:	2303      	movs	r3, #3
 8002188:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800218c:	230a      	movs	r3, #10
 800218e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_NCS_GPIO_Port, &GPIO_InitStruct);
 8002192:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002196:	4619      	mov	r1, r3
 8002198:	4825      	ldr	r0, [pc, #148]	@ (8002230 <HAL_OSPI_MspInit+0x288>)
 800219a:	f003 ff45 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_IO3_Pin|OCSPI1_IO0_Pin|OCSPI1_IO1_Pin;
 800219e:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80021a2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b2:	2303      	movs	r3, #3
 80021b4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80021b8:	2309      	movs	r3, #9
 80021ba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021be:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021c2:	4619      	mov	r1, r3
 80021c4:	481b      	ldr	r0, [pc, #108]	@ (8002234 <HAL_OSPI_MspInit+0x28c>)
 80021c6:	f003 ff2f 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_CLK_Pin;
 80021ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021ce:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021de:	2303      	movs	r3, #3
 80021e0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P1;
 80021e4:	2309      	movs	r3, #9
 80021e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_CLK_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80021ee:	4619      	mov	r1, r3
 80021f0:	4812      	ldr	r0, [pc, #72]	@ (800223c <HAL_OSPI_MspInit+0x294>)
 80021f2:	f003 ff19 	bl	8006028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCSPI1_DQS_Pin;
 80021f6:	2304      	movs	r3, #4
 80021f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fc:	2302      	movs	r3, #2
 80021fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002208:	2303      	movs	r3, #3
 800220a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800220e:	230a      	movs	r3, #10
 8002210:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(OCSPI1_DQS_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002218:	4619      	mov	r1, r3
 800221a:	4809      	ldr	r0, [pc, #36]	@ (8002240 <HAL_OSPI_MspInit+0x298>)
 800221c:	f003 ff04 	bl	8006028 <HAL_GPIO_Init>

  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }
}
 8002220:	e0b4      	b.n	800238c <HAL_OSPI_MspInit+0x3e4>
 8002222:	bf00      	nop
 8002224:	52005000 	.word	0x52005000
 8002228:	24000818 	.word	0x24000818
 800222c:	58024400 	.word	0x58024400
 8002230:	58021800 	.word	0x58021800
 8002234:	58020c00 	.word	0x58020c00
 8002238:	58021000 	.word	0x58021000
 800223c:	58021400 	.word	0x58021400
 8002240:	58020400 	.word	0x58020400
  else if(ospiHandle->Instance==OCTOSPI2)
 8002244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002248:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a51      	ldr	r2, [pc, #324]	@ (8002398 <HAL_OSPI_MspInit+0x3f0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	f040 809a 	bne.w	800238c <HAL_OSPI_MspInit+0x3e4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002258:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.OspiClockSelection = RCC_OSPICLKSOURCE_D1HCLK;
 8002264:	2300      	movs	r3, #0
 8002266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800226a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f006 fb5e 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_OSPI_MspInit+0x2d6>
      Error_Handler();
 800227a:	f7ff fda9 	bl	8001dd0 <Error_Handler>
    HAL_RCC_OCTOSPIM_CLK_ENABLED++;
 800227e:	4b47      	ldr	r3, [pc, #284]	@ (800239c <HAL_OSPI_MspInit+0x3f4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	4a45      	ldr	r2, [pc, #276]	@ (800239c <HAL_OSPI_MspInit+0x3f4>)
 8002286:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OCTOSPIM_CLK_ENABLED==1){
 8002288:	4b44      	ldr	r3, [pc, #272]	@ (800239c <HAL_OSPI_MspInit+0x3f4>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d10e      	bne.n	80022ae <HAL_OSPI_MspInit+0x306>
      __HAL_RCC_OCTOSPIM_CLK_ENABLE();
 8002290:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 8002292:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002296:	4a42      	ldr	r2, [pc, #264]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 8002298:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800229c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80022ae:	4b3c      	ldr	r3, [pc, #240]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022b0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022b4:	4a3a      	ldr	r2, [pc, #232]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80022ba:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80022be:	4b38      	ldr	r3, [pc, #224]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80022c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022cc:	4b34      	ldr	r3, [pc, #208]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022d2:	4a33      	ldr	r2, [pc, #204]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022dc:	4b30      	ldr	r3, [pc, #192]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ea:	4b2d      	ldr	r3, [pc, #180]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f0:	4a2b      	ldr	r2, [pc, #172]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022f2:	f043 0320 	orr.w	r3, r3, #32
 80022f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fa:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <HAL_OSPI_MspInit+0x3f8>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = OCSPI2_IO7_Pin|OCSPI2_IO5_Pin|OCSPI2_IO4_Pin;
 8002308:	f640 0303 	movw	r3, #2051	@ 0x803
 800230c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 8002322:	2309      	movs	r3, #9
 8002324:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002328:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800232c:	4619      	mov	r1, r3
 800232e:	481d      	ldr	r0, [pc, #116]	@ (80023a4 <HAL_OSPI_MspInit+0x3fc>)
 8002330:	f003 fe7a 	bl	8006028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO6_Pin|OCSPI2_NCS_Pin;
 8002334:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002338:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233c:	2302      	movs	r3, #2
 800233e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPIM_P2;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002354:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002358:	4619      	mov	r1, r3
 800235a:	4812      	ldr	r0, [pc, #72]	@ (80023a4 <HAL_OSPI_MspInit+0x3fc>)
 800235c:	f003 fe64 	bl	8006028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCSPI2_IO1_Pin|OCSPI2_IO0_Pin|OCSPI2_IO2_Pin|OCSPI2_CLK_Pin
 8002360:	f241 031f 	movw	r3, #4127	@ 0x101f
 8002364:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF9_OCTOSPIM_P2;
 800237a:	2309      	movs	r3, #9
 800237c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002380:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002384:	4619      	mov	r1, r3
 8002386:	4808      	ldr	r0, [pc, #32]	@ (80023a8 <HAL_OSPI_MspInit+0x400>)
 8002388:	f003 fe4e 	bl	8006028 <HAL_GPIO_Init>
}
 800238c:	bf00      	nop
 800238e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	5200a000 	.word	0x5200a000
 800239c:	24000818 	.word	0x24000818
 80023a0:	58024400 	.word	0x58024400
 80023a4:	58021800 	.word	0x58021800
 80023a8:	58021400 	.word	0x58021400

080023ac <MX_SAI1_Init>:
SAI_HandleTypeDef hsai_BlockA1;
SAI_HandleTypeDef hsai_BlockB1;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 80023b0:	4b58      	ldr	r3, [pc, #352]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023b2:	4a59      	ldr	r2, [pc, #356]	@ (8002518 <MX_SAI1_Init+0x16c>)
 80023b4:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 80023b6:	4b57      	ldr	r3, [pc, #348]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODESLAVE_RX;
 80023bc:	4b55      	ldr	r3, [pc, #340]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023be:	2203      	movs	r2, #3
 80023c0:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 80023c2:	4b54      	ldr	r3, [pc, #336]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023c4:	2240      	movs	r2, #64	@ 0x40
 80023c6:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80023c8:	4b52      	ldr	r3, [pc, #328]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80023ce:	4b51      	ldr	r3, [pc, #324]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_SYNCHRONOUS;
 80023d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80023da:	4b4e      	ldr	r3, [pc, #312]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80023e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80023e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80023ec:	4b49      	ldr	r3, [pc, #292]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80023f2:	4b48      	ldr	r3, [pc, #288]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80023f8:	4b46      	ldr	r3, [pc, #280]	@ (8002514 <MX_SAI1_Init+0x168>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80023fe:	4b45      	ldr	r3, [pc, #276]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002400:	2200      	movs	r2, #0
 8002402:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 0;
 8002406:	4b43      	ldr	r3, [pc, #268]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002408:	2200      	movs	r2, #0
 800240a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800240c:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <MX_SAI1_Init+0x168>)
 800240e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002412:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8002414:	4b3f      	ldr	r3, [pc, #252]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002416:	2208      	movs	r2, #8
 8002418:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 800241a:	4b3e      	ldr	r3, [pc, #248]	@ (8002514 <MX_SAI1_Init+0x168>)
 800241c:	2201      	movs	r2, #1
 800241e:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8002420:	4b3c      	ldr	r3, [pc, #240]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002422:	2200      	movs	r2, #0
 8002424:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002426:	4b3b      	ldr	r3, [pc, #236]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002428:	2200      	movs	r2, #0
 800242a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800242c:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <MX_SAI1_Init+0x168>)
 800242e:	2200      	movs	r2, #0
 8002430:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8002432:	4b38      	ldr	r3, [pc, #224]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002434:	2200      	movs	r2, #0
 8002436:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002438:	4b36      	ldr	r3, [pc, #216]	@ (8002514 <MX_SAI1_Init+0x168>)
 800243a:	2200      	movs	r2, #0
 800243c:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800243e:	4b35      	ldr	r3, [pc, #212]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002440:	2201      	movs	r2, #1
 8002442:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <MX_SAI1_Init+0x168>)
 8002446:	2200      	movs	r2, #0
 8002448:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 800244a:	4832      	ldr	r0, [pc, #200]	@ (8002514 <MX_SAI1_Init+0x168>)
 800244c:	f008 fe56 	bl	800b0fc <HAL_SAI_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_SAI1_Init+0xae>
  {
    Error_Handler();
 8002456:	f7ff fcbb 	bl	8001dd0 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800245a:	4b30      	ldr	r3, [pc, #192]	@ (800251c <MX_SAI1_Init+0x170>)
 800245c:	4a30      	ldr	r2, [pc, #192]	@ (8002520 <MX_SAI1_Init+0x174>)
 800245e:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <MX_SAI1_Init+0x170>)
 8002462:	2200      	movs	r2, #0
 8002464:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8002466:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <MX_SAI1_Init+0x170>)
 8002468:	2200      	movs	r2, #0
 800246a:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 800246c:	4b2b      	ldr	r3, [pc, #172]	@ (800251c <MX_SAI1_Init+0x170>)
 800246e:	2240      	movs	r2, #64	@ 0x40
 8002470:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <MX_SAI1_Init+0x170>)
 8002474:	2200      	movs	r2, #0
 8002476:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8002478:	4b28      	ldr	r3, [pc, #160]	@ (800251c <MX_SAI1_Init+0x170>)
 800247a:	2200      	movs	r2, #0
 800247c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 800247e:	4b27      	ldr	r3, [pc, #156]	@ (800251c <MX_SAI1_Init+0x170>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8002484:	4b25      	ldr	r3, [pc, #148]	@ (800251c <MX_SAI1_Init+0x170>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800248a:	4b24      	ldr	r3, [pc, #144]	@ (800251c <MX_SAI1_Init+0x170>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8002490:	4b22      	ldr	r3, [pc, #136]	@ (800251c <MX_SAI1_Init+0x170>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <MX_SAI1_Init+0x170>)
 8002498:	4a22      	ldr	r2, [pc, #136]	@ (8002524 <MX_SAI1_Init+0x178>)
 800249a:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <MX_SAI1_Init+0x170>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80024a2:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <MX_SAI1_Init+0x170>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80024a8:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <MX_SAI1_Init+0x170>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <MX_SAI1_Init+0x170>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 80024b4:	4b19      	ldr	r3, [pc, #100]	@ (800251c <MX_SAI1_Init+0x170>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 0;
 80024bc:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_SAI1_Init+0x170>)
 80024be:	2200      	movs	r2, #0
 80024c0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <MX_SAI1_Init+0x170>)
 80024c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB1.FrameInit.FrameLength = 8;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_SAI1_Init+0x170>)
 80024cc:	2208      	movs	r2, #8
 80024ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_SAI1_Init+0x170>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_SAI1_Init+0x170>)
 80024d8:	2200      	movs	r2, #0
 80024da:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_SAI1_Init+0x170>)
 80024de:	2200      	movs	r2, #0
 80024e0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	@ (800251c <MX_SAI1_Init+0x170>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <MX_SAI1_Init+0x170>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <MX_SAI1_Init+0x170>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 80024f4:	4b09      	ldr	r3, [pc, #36]	@ (800251c <MX_SAI1_Init+0x170>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <MX_SAI1_Init+0x170>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8002500:	4806      	ldr	r0, [pc, #24]	@ (800251c <MX_SAI1_Init+0x170>)
 8002502:	f008 fdfb 	bl	800b0fc <HAL_SAI_Init>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_SAI1_Init+0x164>
  {
    Error_Handler();
 800250c:	f7ff fc60 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	2400081c 	.word	0x2400081c
 8002518:	40015804 	.word	0x40015804
 800251c:	240008b4 	.word	0x240008b4
 8002520:	40015824 	.word	0x40015824
 8002524:	0002ee00 	.word	0x0002ee00

08002528 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0b8      	sub	sp, #224	@ 0xe0
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002530:	f107 0310 	add.w	r3, r7, #16
 8002534:	22b8      	movs	r2, #184	@ 0xb8
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f00f fb26 	bl	8011b8a <memset>
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a45      	ldr	r2, [pc, #276]	@ (8002658 <HAL_SAI_MspInit+0x130>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d13e      	bne.n	80025c6 <HAL_SAI_MspInit+0x9e>
    {
    /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8002548:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8002554:	2300      	movs	r3, #0
 8002556:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002558:	f107 0310 	add.w	r3, r7, #16
 800255c:	4618      	mov	r0, r3
 800255e:	f006 f9e7 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8002568:	f7ff fc32 	bl	8001dd0 <Error_Handler>
    }

    if (SAI1_client == 0)
 800256c:	4b3b      	ldr	r3, [pc, #236]	@ (800265c <HAL_SAI_MspInit+0x134>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d10e      	bne.n	8002592 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002574:	4b3a      	ldr	r3, [pc, #232]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 8002576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800257a:	4a39      	ldr	r2, [pc, #228]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 800257c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002580:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 8002586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800258a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HAL_SAI_MspInit+0x134>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_SAI_MspInit+0x134>)
 800259a:	6013      	str	r3, [r2, #0]

    /**SAI1_A_Block_A GPIO Configuration
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = SAI1_SD_A_Pin;
 800259c:	2340      	movs	r3, #64	@ 0x40
 800259e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a2:	2302      	movs	r3, #2
 80025a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80025b4:	2306      	movs	r3, #6
 80025b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(SAI1_SD_A_GPIO_Port, &GPIO_InitStruct);
 80025ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80025be:	4619      	mov	r1, r3
 80025c0:	4828      	ldr	r0, [pc, #160]	@ (8002664 <HAL_SAI_MspInit+0x13c>)
 80025c2:	f003 fd31 	bl	8006028 <HAL_GPIO_Init>

    }
    if(saiHandle->Instance==SAI1_Block_B)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <HAL_SAI_MspInit+0x140>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d13f      	bne.n	8002650 <HAL_SAI_MspInit+0x128>
    {
      /* SAI1 clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 80025d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 80025dc:	2300      	movs	r3, #0
 80025de:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e0:	f107 0310 	add.w	r3, r7, #16
 80025e4:	4618      	mov	r0, r3
 80025e6:	f006 f9a3 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 80025f0:	f7ff fbee 	bl	8001dd0 <Error_Handler>
    }

      if (SAI1_client == 0)
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_SAI_MspInit+0x134>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10e      	bne.n	800261a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 80025fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002602:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 8002604:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002608:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800260c:	4b14      	ldr	r3, [pc, #80]	@ (8002660 <HAL_SAI_MspInit+0x138>)
 800260e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002616:	60bb      	str	r3, [r7, #8]
 8002618:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 800261a:	4b10      	ldr	r3, [pc, #64]	@ (800265c <HAL_SAI_MspInit+0x134>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	4a0e      	ldr	r2, [pc, #56]	@ (800265c <HAL_SAI_MspInit+0x134>)
 8002622:	6013      	str	r3, [r2, #0]
    PF6     ------> SAI1_SD_B
    PF8     ------> SAI1_SCK_B
    PF7     ------> SAI1_MCLK_B
    PF9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin|SAI1_SCK_B_Pin|SAI1_MCLK_B_Pin|SAI1_FS_B_Pin;
 8002624:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002628:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800263e:	2306      	movs	r3, #6
 8002640:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002644:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8002648:	4619      	mov	r1, r3
 800264a:	4808      	ldr	r0, [pc, #32]	@ (800266c <HAL_SAI_MspInit+0x144>)
 800264c:	f003 fcec 	bl	8006028 <HAL_GPIO_Init>

    }
}
 8002650:	bf00      	nop
 8002652:	37e0      	adds	r7, #224	@ 0xe0
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40015804 	.word	0x40015804
 800265c:	2400094c 	.word	0x2400094c
 8002660:	58024400 	.word	0x58024400
 8002664:	58021000 	.word	0x58021000
 8002668:	40015824 	.word	0x40015824
 800266c:	58021400 	.word	0x58021400

08002670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_MspInit+0x38>)
 8002678:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800267c:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <HAL_MspInit+0x38>)
 800267e:	f043 0302 	orr.w	r3, r3, #2
 8002682:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002686:	4b08      	ldr	r3, [pc, #32]	@ (80026a8 <HAL_MspInit+0x38>)
 8002688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	607b      	str	r3, [r7, #4]
 8002692:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	210f      	movs	r1, #15
 8002698:	f06f 0001 	mvn.w	r0, #1
 800269c:	f002 fb36 	bl	8004d0c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	58024400 	.word	0x58024400

080026ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b090      	sub	sp, #64	@ 0x40
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d827      	bhi.n	800270a <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80026ba:	2200      	movs	r2, #0
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	2036      	movs	r0, #54	@ 0x36
 80026c0:	f002 fb24 	bl	8004d0c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026c4:	2036      	movs	r0, #54	@ 0x36
 80026c6:	f002 fb3b 	bl	8004d40 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80026ca:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_InitTick+0xc4>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026d0:	4b28      	ldr	r3, [pc, #160]	@ (8002774 <HAL_InitTick+0xc8>)
 80026d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026d6:	4a27      	ldr	r2, [pc, #156]	@ (8002774 <HAL_InitTick+0xc8>)
 80026d8:	f043 0310 	orr.w	r3, r3, #16
 80026dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026e0:	4b24      	ldr	r3, [pc, #144]	@ (8002774 <HAL_InitTick+0xc8>)
 80026e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ee:	f107 0210 	add.w	r2, r7, #16
 80026f2:	f107 0314 	add.w	r3, r7, #20
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f006 f8d7 	bl	80088ac <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	2b00      	cmp	r3, #0
 8002706:	d106      	bne.n	8002716 <HAL_InitTick+0x6a>
 8002708:	e001      	b.n	800270e <HAL_InitTick+0x62>
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e02b      	b.n	8002766 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800270e:	f006 f8a1 	bl	8008854 <HAL_RCC_GetPCLK1Freq>
 8002712:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002714:	e004      	b.n	8002720 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002716:	f006 f89d 	bl	8008854 <HAL_RCC_GetPCLK1Freq>
 800271a:	4603      	mov	r3, r0
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002722:	4a15      	ldr	r2, [pc, #84]	@ (8002778 <HAL_InitTick+0xcc>)
 8002724:	fba2 2303 	umull	r2, r3, r2, r3
 8002728:	0c9b      	lsrs	r3, r3, #18
 800272a:	3b01      	subs	r3, #1
 800272c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800272e:	4b13      	ldr	r3, [pc, #76]	@ (800277c <HAL_InitTick+0xd0>)
 8002730:	4a13      	ldr	r2, [pc, #76]	@ (8002780 <HAL_InitTick+0xd4>)
 8002732:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002734:	4b11      	ldr	r3, [pc, #68]	@ (800277c <HAL_InitTick+0xd0>)
 8002736:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800273a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800273c:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_InitTick+0xd0>)
 800273e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002740:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002742:	4b0e      	ldr	r3, [pc, #56]	@ (800277c <HAL_InitTick+0xd0>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002748:	4b0c      	ldr	r3, [pc, #48]	@ (800277c <HAL_InitTick+0xd0>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800274e:	480b      	ldr	r0, [pc, #44]	@ (800277c <HAL_InitTick+0xd0>)
 8002750:	f008 ff28 	bl	800b5a4 <HAL_TIM_Base_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d104      	bne.n	8002764 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800275a:	4808      	ldr	r0, [pc, #32]	@ (800277c <HAL_InitTick+0xd0>)
 800275c:	f008 ff84 	bl	800b668 <HAL_TIM_Base_Start_IT>
 8002760:	4603      	mov	r3, r0
 8002762:	e000      	b.n	8002766 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
}
 8002766:	4618      	mov	r0, r3
 8002768:	3740      	adds	r7, #64	@ 0x40
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2400000c 	.word	0x2400000c
 8002774:	58024400 	.word	0x58024400
 8002778:	431bde83 	.word	0x431bde83
 800277c:	24000950 	.word	0x24000950
 8002780:	40001000 	.word	0x40001000

08002784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002788:	bf00      	nop
 800278a:	e7fd      	b.n	8002788 <NMI_Handler+0x4>

0800278c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002790:	bf00      	nop
 8002792:	e7fd      	b.n	8002790 <HardFault_Handler+0x4>

08002794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002798:	bf00      	nop
 800279a:	e7fd      	b.n	8002798 <MemManage_Handler+0x4>

0800279c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a0:	bf00      	nop
 80027a2:	e7fd      	b.n	80027a0 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	bf00      	nop
 80027aa:	e7fd      	b.n	80027a8 <UsageFault_Handler+0x4>

080027ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <TIM6_DAC_IRQHandler+0x20>)
 80027c2:	791b      	ldrb	r3, [r3, #4]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80027ca:	4804      	ldr	r0, [pc, #16]	@ (80027dc <TIM6_DAC_IRQHandler+0x20>)
 80027cc:	f002 fae8 	bl	8004da0 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80027d0:	4803      	ldr	r0, [pc, #12]	@ (80027e0 <TIM6_DAC_IRQHandler+0x24>)
 80027d2:	f009 f826 	bl	800b822 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	24000410 	.word	0x24000410
 80027e0:	24000950 	.word	0x24000950

080027e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return 1;
 80027e8:	2301      	movs	r3, #1
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr

080027f4 <_kill>:

int _kill(int pid, int sig)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027fe:	f00f fa6d 	bl	8011cdc <__errno>
 8002802:	4603      	mov	r3, r0
 8002804:	2216      	movs	r2, #22
 8002806:	601a      	str	r2, [r3, #0]
  return -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_exit>:

void _exit (int status)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ffe7 	bl	80027f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002826:	bf00      	nop
 8002828:	e7fd      	b.n	8002826 <_exit+0x12>

0800282a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b086      	sub	sp, #24
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	60b9      	str	r1, [r7, #8]
 8002834:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	e00a      	b.n	8002852 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800283c:	f3af 8000 	nop.w
 8002840:	4601      	mov	r1, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	60ba      	str	r2, [r7, #8]
 8002848:	b2ca      	uxtb	r2, r1
 800284a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	429a      	cmp	r2, r3
 8002858:	dbf0      	blt.n	800283c <_read+0x12>
  }

  return len;
 800285a:	687b      	ldr	r3, [r7, #4]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	e009      	b.n	800288a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	60ba      	str	r2, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	429a      	cmp	r2, r3
 8002890:	dbf1      	blt.n	8002876 <_write+0x12>
  }
  return len;
 8002892:	687b      	ldr	r3, [r7, #4]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <_close>:

int _close(int file)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c4:	605a      	str	r2, [r3, #4]
  return 0;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_isatty>:

int _isatty(int file)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028dc:	2301      	movs	r3, #1
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b085      	sub	sp, #20
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3714      	adds	r7, #20
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800290c:	4a14      	ldr	r2, [pc, #80]	@ (8002960 <_sbrk+0x5c>)
 800290e:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <_sbrk+0x60>)
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <_sbrk+0x64>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d102      	bne.n	8002926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002920:	4b11      	ldr	r3, [pc, #68]	@ (8002968 <_sbrk+0x64>)
 8002922:	4a12      	ldr	r2, [pc, #72]	@ (800296c <_sbrk+0x68>)
 8002924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002926:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <_sbrk+0x64>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4413      	add	r3, r2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	429a      	cmp	r2, r3
 8002932:	d207      	bcs.n	8002944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002934:	f00f f9d2 	bl	8011cdc <__errno>
 8002938:	4603      	mov	r3, r0
 800293a:	220c      	movs	r2, #12
 800293c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800293e:	f04f 33ff 	mov.w	r3, #4294967295
 8002942:	e009      	b.n	8002958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002944:	4b08      	ldr	r3, [pc, #32]	@ (8002968 <_sbrk+0x64>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294a:	4b07      	ldr	r3, [pc, #28]	@ (8002968 <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <_sbrk+0x64>)
 8002954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002956:	68fb      	ldr	r3, [r7, #12]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	24050000 	.word	0x24050000
 8002964:	00000400 	.word	0x00000400
 8002968:	2400099c 	.word	0x2400099c
 800296c:	240056f8 	.word	0x240056f8

08002970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002974:	4b32      	ldr	r3, [pc, #200]	@ (8002a40 <SystemInit+0xd0>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297a:	4a31      	ldr	r2, [pc, #196]	@ (8002a40 <SystemInit+0xd0>)
 800297c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002980:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002984:	4b2f      	ldr	r3, [pc, #188]	@ (8002a44 <SystemInit+0xd4>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	2b06      	cmp	r3, #6
 800298e:	d807      	bhi.n	80029a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002990:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <SystemInit+0xd4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f023 030f 	bic.w	r3, r3, #15
 8002998:	4a2a      	ldr	r2, [pc, #168]	@ (8002a44 <SystemInit+0xd4>)
 800299a:	f043 0307 	orr.w	r3, r3, #7
 800299e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029a0:	4b29      	ldr	r3, [pc, #164]	@ (8002a48 <SystemInit+0xd8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a28      	ldr	r2, [pc, #160]	@ (8002a48 <SystemInit+0xd8>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029ac:	4b26      	ldr	r3, [pc, #152]	@ (8002a48 <SystemInit+0xd8>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029b2:	4b25      	ldr	r3, [pc, #148]	@ (8002a48 <SystemInit+0xd8>)
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	4924      	ldr	r1, [pc, #144]	@ (8002a48 <SystemInit+0xd8>)
 80029b8:	4b24      	ldr	r3, [pc, #144]	@ (8002a4c <SystemInit+0xdc>)
 80029ba:	4013      	ands	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029be:	4b21      	ldr	r3, [pc, #132]	@ (8002a44 <SystemInit+0xd4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d007      	beq.n	80029da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ca:	4b1e      	ldr	r3, [pc, #120]	@ (8002a44 <SystemInit+0xd4>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 030f 	bic.w	r3, r3, #15
 80029d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a44 <SystemInit+0xd4>)
 80029d4:	f043 0307 	orr.w	r3, r3, #7
 80029d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029da:	4b1b      	ldr	r3, [pc, #108]	@ (8002a48 <SystemInit+0xd8>)
 80029dc:	2200      	movs	r2, #0
 80029de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <SystemInit+0xd8>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80029e6:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <SystemInit+0xd8>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80029ec:	4b16      	ldr	r3, [pc, #88]	@ (8002a48 <SystemInit+0xd8>)
 80029ee:	4a18      	ldr	r2, [pc, #96]	@ (8002a50 <SystemInit+0xe0>)
 80029f0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <SystemInit+0xd8>)
 80029f4:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <SystemInit+0xe4>)
 80029f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <SystemInit+0xd8>)
 80029fa:	4a17      	ldr	r2, [pc, #92]	@ (8002a58 <SystemInit+0xe8>)
 80029fc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <SystemInit+0xd8>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a04:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <SystemInit+0xd8>)
 8002a06:	4a14      	ldr	r2, [pc, #80]	@ (8002a58 <SystemInit+0xe8>)
 8002a08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <SystemInit+0xd8>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a10:	4b0d      	ldr	r3, [pc, #52]	@ (8002a48 <SystemInit+0xd8>)
 8002a12:	4a11      	ldr	r2, [pc, #68]	@ (8002a58 <SystemInit+0xe8>)
 8002a14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <SystemInit+0xd8>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a48 <SystemInit+0xd8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a09      	ldr	r2, [pc, #36]	@ (8002a48 <SystemInit+0xd8>)
 8002a22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a28:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <SystemInit+0xd8>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <SystemInit+0xec>)
 8002a30:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002a34:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a36:	bf00      	nop
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr
 8002a40:	e000ed00 	.word	0xe000ed00
 8002a44:	52002000 	.word	0x52002000
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a50:	02020200 	.word	0x02020200
 8002a54:	01ff0000 	.word	0x01ff0000
 8002a58:	01010280 	.word	0x01010280
 8002a5c:	52004000 	.word	0x52004000

08002a60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b098      	sub	sp, #96	@ 0x60
 8002a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a72:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
 8002a80:	611a      	str	r2, [r3, #16]
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a86:	1d3b      	adds	r3, r7, #4
 8002a88:	2234      	movs	r2, #52	@ 0x34
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f00f f87c 	bl	8011b8a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a92:	4b38      	ldr	r3, [pc, #224]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002a94:	4a38      	ldr	r2, [pc, #224]	@ (8002b78 <MX_TIM1_Init+0x118>)
 8002a96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a98:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a9e:	4b35      	ldr	r3, [pc, #212]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002aa4:	4b33      	ldr	r3, [pc, #204]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002aac:	4b31      	ldr	r3, [pc, #196]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab2:	4b30      	ldr	r3, [pc, #192]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002abe:	482d      	ldr	r0, [pc, #180]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002ac0:	f008 fe58 	bl	800b774 <HAL_TIM_PWM_Init>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002aca:	f7ff f981 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002ada:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4824      	ldr	r0, [pc, #144]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002ae2:	f009 fc69 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002aec:	f7ff f970 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002af0:	2360      	movs	r3, #96	@ 0x60
 8002af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002af8:	2300      	movs	r3, #0
 8002afa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b00:	2300      	movs	r3, #0
 8002b02:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b04:	2300      	movs	r3, #0
 8002b06:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b08:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002b0c:	220c      	movs	r2, #12
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4818      	ldr	r0, [pc, #96]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002b12:	f008 ff8d 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002b1c:	f7ff f958 	bl	8001dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002b42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4807      	ldr	r0, [pc, #28]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002b56:	f009 fccb 	bl	800c4f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM1_Init+0x104>
  {
    Error_Handler();
 8002b60:	f7ff f936 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002b64:	4803      	ldr	r0, [pc, #12]	@ (8002b74 <MX_TIM1_Init+0x114>)
 8002b66:	f000 f923 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8002b6a:	bf00      	nop
 8002b6c:	3760      	adds	r7, #96	@ 0x60
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	240009a0 	.word	0x240009a0
 8002b78:	40010000 	.word	0x40010000

08002b7c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	@ 0x28
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b82:	f107 031c 	add.w	r3, r7, #28
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	605a      	str	r2, [r3, #4]
 8002b8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b8e:	463b      	mov	r3, r7
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
 8002b98:	60da      	str	r2, [r3, #12]
 8002b9a:	611a      	str	r2, [r3, #16]
 8002b9c:	615a      	str	r2, [r3, #20]
 8002b9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8002c58 <MX_TIM4_Init+0xdc>)
 8002ba4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002ba6:	4b2b      	ldr	r3, [pc, #172]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002bb2:	4b28      	ldr	r3, [pc, #160]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002bb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bba:	4b26      	ldr	r3, [pc, #152]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002bc6:	4823      	ldr	r0, [pc, #140]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002bc8:	f008 fdd4 	bl	800b774 <HAL_TIM_PWM_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002bd2:	f7ff f8fd 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	481b      	ldr	r0, [pc, #108]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002be6:	f009 fbe7 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002bf0:	f7ff f8ee 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf4:	2360      	movs	r3, #96	@ 0x60
 8002bf6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c04:	463b      	mov	r3, r7
 8002c06:	2204      	movs	r2, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4812      	ldr	r0, [pc, #72]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002c0c:	f008 ff10 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002c16:	f7ff f8db 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	4619      	mov	r1, r3
 8002c20:	480c      	ldr	r0, [pc, #48]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002c22:	f008 ff05 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002c2c:	f7ff f8d0 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c30:	463b      	mov	r3, r7
 8002c32:	220c      	movs	r2, #12
 8002c34:	4619      	mov	r1, r3
 8002c36:	4807      	ldr	r0, [pc, #28]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002c38:	f008 fefa 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002c42:	f7ff f8c5 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002c46:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <MX_TIM4_Init+0xd8>)
 8002c48:	f000 f8b2 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8002c4c:	bf00      	nop
 8002c4e:	3728      	adds	r7, #40	@ 0x28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	240009ec 	.word	0x240009ec
 8002c58:	40000800 	.word	0x40000800

08002c5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c6e:	463b      	mov	r3, r7
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
 8002c7c:	615a      	str	r2, [r3, #20]
 8002c7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002c80:	4b21      	ldr	r3, [pc, #132]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002c82:	4a22      	ldr	r2, [pc, #136]	@ (8002d0c <MX_TIM5_Init+0xb0>)
 8002c84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002c86:	4b20      	ldr	r3, [pc, #128]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002c92:	4b1d      	ldr	r3, [pc, #116]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca0:	4b19      	ldr	r3, [pc, #100]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ca6:	4818      	ldr	r0, [pc, #96]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002ca8:	f008 fd64 	bl	800b774 <HAL_TIM_PWM_Init>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002cb2:	f7ff f88d 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002cbe:	f107 031c 	add.w	r3, r7, #28
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4810      	ldr	r0, [pc, #64]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002cc6:	f009 fb77 	bl	800c3b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002cd0:	f7ff f87e 	bl	8001dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002cd4:	2360      	movs	r3, #96	@ 0x60
 8002cd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4807      	ldr	r0, [pc, #28]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002cec:	f008 fea0 	bl	800ba30 <HAL_TIM_PWM_ConfigChannel>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002cf6:	f7ff f86b 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002cfa:	4803      	ldr	r0, [pc, #12]	@ (8002d08 <MX_TIM5_Init+0xac>)
 8002cfc:	f000 f858 	bl	8002db0 <HAL_TIM_MspPostInit>

}
 8002d00:	bf00      	nop
 8002d02:	3728      	adds	r7, #40	@ 0x28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	24000a38 	.word	0x24000a38
 8002d0c:	40000c00 	.word	0x40000c00

08002d10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b087      	sub	sp, #28
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a20      	ldr	r2, [pc, #128]	@ (8002da0 <HAL_TIM_PWM_MspInit+0x90>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10f      	bne.n	8002d42 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d22:	4b20      	ldr	r3, [pc, #128]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d28:	4a1e      	ldr	r2, [pc, #120]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002d40:	e028      	b.n	8002d94 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM4)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a18      	ldr	r2, [pc, #96]	@ (8002da8 <HAL_TIM_PWM_MspInit+0x98>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10f      	bne.n	8002d6c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d4c:	4b15      	ldr	r3, [pc, #84]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d52:	4a14      	ldr	r2, [pc, #80]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d62:	f003 0304 	and.w	r3, r3, #4
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
}
 8002d6a:	e013      	b.n	8002d94 <HAL_TIM_PWM_MspInit+0x84>
  else if(tim_pwmHandle->Instance==TIM5)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0e      	ldr	r2, [pc, #56]	@ (8002dac <HAL_TIM_PWM_MspInit+0x9c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10e      	bne.n	8002d94 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d76:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d7c:	4a09      	ldr	r2, [pc, #36]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d7e:	f043 0308 	orr.w	r3, r3, #8
 8002d82:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_TIM_PWM_MspInit+0x94>)
 8002d88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002d8c:	f003 0308 	and.w	r3, r3, #8
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40010000 	.word	0x40010000
 8002da4:	58024400 	.word	0x58024400
 8002da8:	40000800 	.word	0x40000800
 8002dac:	40000c00 	.word	0x40000c00

08002db0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08c      	sub	sp, #48	@ 0x30
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 031c 	add.w	r3, r7, #28
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a48      	ldr	r2, [pc, #288]	@ (8002ef0 <HAL_TIM_MspPostInit+0x140>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d120      	bne.n	8002e14 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dd2:	4b48      	ldr	r3, [pc, #288]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd8:	4a46      	ldr	r2, [pc, #280]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002dda:	f043 0310 	orr.w	r3, r3, #16
 8002dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002de2:	4b44      	ldr	r3, [pc, #272]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ARD_D5_Pin;
 8002df0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002df4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df6:	2302      	movs	r3, #2
 8002df8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e02:	2301      	movs	r3, #1
 8002e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 031c 	add.w	r3, r7, #28
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	483a      	ldr	r0, [pc, #232]	@ (8002ef8 <HAL_TIM_MspPostInit+0x148>)
 8002e0e:	f003 f90b 	bl	8006028 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002e12:	e068      	b.n	8002ee6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM4)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a38      	ldr	r2, [pc, #224]	@ (8002efc <HAL_TIM_MspPostInit+0x14c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d13f      	bne.n	8002e9e <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e1e:	4b35      	ldr	r3, [pc, #212]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e24:	4a33      	ldr	r2, [pc, #204]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e26:	f043 0302 	orr.w	r3, r3, #2
 8002e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e2e:	4b31      	ldr	r3, [pc, #196]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e42:	4a2c      	ldr	r2, [pc, #176]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e4c:	4b29      	ldr	r3, [pc, #164]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	613b      	str	r3, [r7, #16]
 8002e58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_D9_Pin;
 8002e5a:	2380      	movs	r3, #128	@ 0x80
 8002e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e66:	2300      	movs	r3, #0
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 031c 	add.w	r3, r7, #28
 8002e72:	4619      	mov	r1, r3
 8002e74:	4822      	ldr	r0, [pc, #136]	@ (8002f00 <HAL_TIM_MspPostInit+0x150>)
 8002e76:	f003 f8d7 	bl	8006028 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_14_PWM_Pin|ARD_D6_Pin;
 8002e7a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	481b      	ldr	r0, [pc, #108]	@ (8002f04 <HAL_TIM_MspPostInit+0x154>)
 8002e98:	f003 f8c6 	bl	8006028 <HAL_GPIO_Init>
}
 8002e9c:	e023      	b.n	8002ee6 <HAL_TIM_MspPostInit+0x136>
  else if(timHandle->Instance==TIM5)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a19      	ldr	r2, [pc, #100]	@ (8002f08 <HAL_TIM_MspPostInit+0x158>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d11e      	bne.n	8002ee6 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea8:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002eae:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <HAL_TIM_MspPostInit+0x144>)
 8002eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARD_D3_Pin;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8002eda:	f107 031c 	add.w	r3, r7, #28
 8002ede:	4619      	mov	r1, r3
 8002ee0:	480a      	ldr	r0, [pc, #40]	@ (8002f0c <HAL_TIM_MspPostInit+0x15c>)
 8002ee2:	f003 f8a1 	bl	8006028 <HAL_GPIO_Init>
}
 8002ee6:	bf00      	nop
 8002ee8:	3730      	adds	r7, #48	@ 0x30
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40010000 	.word	0x40010000
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	58021000 	.word	0x58021000
 8002efc:	40000800 	.word	0x40000800
 8002f00:	58020400 	.word	0x58020400
 8002f04:	58020c00 	.word	0x58020c00
 8002f08:	40000c00 	.word	0x40000c00
 8002f0c:	58020000 	.word	0x58020000

08002f10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f14:	4b22      	ldr	r3, [pc, #136]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f16:	4a23      	ldr	r2, [pc, #140]	@ (8002fa4 <MX_USART1_UART_Init+0x94>)
 8002f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f1a:	4b21      	ldr	r3, [pc, #132]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f22:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f34:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f36:	220c      	movs	r2, #12
 8002f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f3a:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f46:	4b16      	ldr	r3, [pc, #88]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f4c:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f52:	4b13      	ldr	r3, [pc, #76]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f58:	4811      	ldr	r0, [pc, #68]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f5a:	f009 fb73 	bl	800c644 <HAL_UART_Init>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002f64:	f7fe ff34 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f68:	2100      	movs	r1, #0
 8002f6a:	480d      	ldr	r0, [pc, #52]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f6c:	f00a fd0d 	bl	800d98a <HAL_UARTEx_SetTxFifoThreshold>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002f76:	f7fe ff2b 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4808      	ldr	r0, [pc, #32]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f7e:	f00a fd42 	bl	800da06 <HAL_UARTEx_SetRxFifoThreshold>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002f88:	f7fe ff22 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f8c:	4804      	ldr	r0, [pc, #16]	@ (8002fa0 <MX_USART1_UART_Init+0x90>)
 8002f8e:	f00a fcc3 	bl	800d918 <HAL_UARTEx_DisableFifoMode>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002f98:	f7fe ff1a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	24000a88 	.word	0x24000a88
 8002fa4:	40011000 	.word	0x40011000

08002fa8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fae:	4a23      	ldr	r2, [pc, #140]	@ (800303c <MX_USART3_UART_Init+0x94>)
 8002fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fb2:	4b21      	ldr	r3, [pc, #132]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fba:	4b1f      	ldr	r3, [pc, #124]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fce:	220c      	movs	r2, #12
 8002fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd8:	4b17      	ldr	r3, [pc, #92]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fde:	4b16      	ldr	r3, [pc, #88]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002fe4:	4b14      	ldr	r3, [pc, #80]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ff0:	4811      	ldr	r0, [pc, #68]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8002ff2:	f009 fb27 	bl	800c644 <HAL_UART_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002ffc:	f7fe fee8 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003000:	2100      	movs	r1, #0
 8003002:	480d      	ldr	r0, [pc, #52]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8003004:	f00a fcc1 	bl	800d98a <HAL_UARTEx_SetTxFifoThreshold>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800300e:	f7fe fedf 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003012:	2100      	movs	r1, #0
 8003014:	4808      	ldr	r0, [pc, #32]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8003016:	f00a fcf6 	bl	800da06 <HAL_UARTEx_SetRxFifoThreshold>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003020:	f7fe fed6 	bl	8001dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003024:	4804      	ldr	r0, [pc, #16]	@ (8003038 <MX_USART3_UART_Init+0x90>)
 8003026:	f00a fc77 	bl	800d918 <HAL_UARTEx_DisableFifoMode>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003030:	f7fe fece 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}
 8003038:	24000b1c 	.word	0x24000b1c
 800303c:	40004800 	.word	0x40004800

08003040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0ba      	sub	sp, #232	@ 0xe8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003048:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	605a      	str	r2, [r3, #4]
 8003052:	609a      	str	r2, [r3, #8]
 8003054:	60da      	str	r2, [r3, #12]
 8003056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	22b8      	movs	r2, #184	@ 0xb8
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f00e fd92 	bl	8011b8a <memset>
  if(uartHandle->Instance==USART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a4d      	ldr	r2, [pc, #308]	@ (80031a0 <HAL_UART_MspInit+0x160>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d147      	bne.n	8003100 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003070:	f04f 0201 	mov.w	r2, #1
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800307c:	2300      	movs	r3, #0
 800307e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003082:	f107 0318 	add.w	r3, r7, #24
 8003086:	4618      	mov	r0, r3
 8003088:	f005 fc52 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003092:	f7fe fe9d 	bl	8001dd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003096:	4b43      	ldr	r3, [pc, #268]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800309c:	4a41      	ldr	r2, [pc, #260]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 800309e:	f043 0310 	orr.w	r3, r3, #16
 80030a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 80030a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b4:	4b3b      	ldr	r3, [pc, #236]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 80030b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ba:	4a3a      	ldr	r2, [pc, #232]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 80030bc:	f043 0302 	orr.w	r3, r3, #2
 80030c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030c4:	4b37      	ldr	r3, [pc, #220]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 80030c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 80030d2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80030d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e0:	2300      	movs	r3, #0
 80030e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80030ec:	2304      	movs	r3, #4
 80030ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030f6:	4619      	mov	r1, r3
 80030f8:	482b      	ldr	r0, [pc, #172]	@ (80031a8 <HAL_UART_MspInit+0x168>)
 80030fa:	f002 ff95 	bl	8006028 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80030fe:	e04b      	b.n	8003198 <HAL_UART_MspInit+0x158>
  else if(uartHandle->Instance==USART3)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a29      	ldr	r2, [pc, #164]	@ (80031ac <HAL_UART_MspInit+0x16c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d146      	bne.n	8003198 <HAL_UART_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800310a:	f04f 0202 	mov.w	r2, #2
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003116:	2300      	movs	r3, #0
 8003118:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800311c:	f107 0318 	add.w	r3, r7, #24
 8003120:	4618      	mov	r0, r3
 8003122:	f005 fc05 	bl	8008930 <HAL_RCCEx_PeriphCLKConfig>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800312c:	f7fe fe50 	bl	8001dd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003130:	4b1c      	ldr	r3, [pc, #112]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003132:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003136:	4a1b      	ldr	r2, [pc, #108]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003138:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800313c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003140:	4b18      	ldr	r3, [pc, #96]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003142:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003146:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800314e:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003154:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003156:	f043 0308 	orr.w	r3, r3, #8
 800315a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_UART_MspInit+0x164>)
 8003160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 800316c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	2302      	movs	r3, #2
 8003176:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003180:	2300      	movs	r3, #0
 8003182:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003186:	2307      	movs	r3, #7
 8003188:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800318c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003190:	4619      	mov	r1, r3
 8003192:	4807      	ldr	r0, [pc, #28]	@ (80031b0 <HAL_UART_MspInit+0x170>)
 8003194:	f002 ff48 	bl	8006028 <HAL_GPIO_Init>
}
 8003198:	bf00      	nop
 800319a:	37e8      	adds	r7, #232	@ 0xe8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	40011000 	.word	0x40011000
 80031a4:	58024400 	.word	0x58024400
 80031a8:	58020400 	.word	0x58020400
 80031ac:	40004800 	.word	0x40004800
 80031b0:	58020c00 	.word	0x58020c00

080031b4 <Print_Temperature_Log>:
  * @retval HAL_StatusTypeDef: Returns HAL_OK if all transmissions were successful.
  * 							Returns HAL_ERROR if the argument is a null pointer.
  * 							Returns HAL_ERROR if the size of the resulting string is larger than the buffer.
  *                             Otherwise, it returns the appropriate error status from HAL_UART_Transmit.
  */
HAL_StatusTypeDef Print_Temperature_Log(uint8_t *array) {
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b094      	sub	sp, #80	@ 0x50
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t buffer[BUFFER_SIZE];  // Replaced magic number with constant

    if(array == NULL){
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <Print_Temperature_Log+0x18>
    	return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e03f      	b.n	800324c <Print_Temperature_Log+0x98>
    }

    for (int n = 0; n < MAX_NUMBER_OF_WRITES; n++) {
 80031cc:	2300      	movs	r3, #0
 80031ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80031d0:	e037      	b.n	8003242 <Print_Temperature_Log+0x8e>

        // Create the log entry
        snprintf((char *)buffer, BUFFER_SIZE, "%d: %d\r\n", n + 1, array[n]);
 80031d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d4:	1c59      	adds	r1, r3, #1
 80031d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	4413      	add	r3, r2
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f107 000c 	add.w	r0, r7, #12
 80031e2:	9300      	str	r3, [sp, #0]
 80031e4:	460b      	mov	r3, r1
 80031e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003254 <Print_Temperature_Log+0xa0>)
 80031e8:	2132      	movs	r1, #50	@ 0x32
 80031ea:	f00e fc57 	bl	8011a9c <sniprintf>
        if(strlen((char *)buffer) > BUFFER_SIZE){
 80031ee:	f107 030c 	add.w	r3, r7, #12
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f8dc 	bl	80003b0 <strlen>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b32      	cmp	r3, #50	@ 0x32
 80031fc:	d901      	bls.n	8003202 <Print_Temperature_Log+0x4e>
        	return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e024      	b.n	800324c <Print_Temperature_Log+0x98>
        }

        // Transmit the log entry over UART
        status = HAL_UART_Transmit(&huart3, buffer, strlen((char *)buffer), UART_TIMEOUT);
 8003202:	f107 030c 	add.w	r3, r7, #12
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f8d2 	bl	80003b0 <strlen>
 800320c:	4603      	mov	r3, r0
 800320e:	b29a      	uxth	r2, r3
 8003210:	f107 010c 	add.w	r1, r7, #12
 8003214:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003218:	480f      	ldr	r0, [pc, #60]	@ (8003258 <Print_Temperature_Log+0xa4>)
 800321a:	f009 fa63 	bl	800c6e4 <HAL_UART_Transmit>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (status != HAL_OK) {
 8003224:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003228:	2b00      	cmp	r3, #0
 800322a:	d007      	beq.n	800323c <Print_Temperature_Log+0x88>
        	number_of_uart_fails++;
 800322c:	4b0b      	ldr	r3, [pc, #44]	@ (800325c <Print_Temperature_Log+0xa8>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3301      	adds	r3, #1
 8003232:	4a0a      	ldr	r2, [pc, #40]	@ (800325c <Print_Temperature_Log+0xa8>)
 8003234:	6013      	str	r3, [r2, #0]
            return status;  // Handle UART transmission error
 8003236:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800323a:	e007      	b.n	800324c <Print_Temperature_Log+0x98>
    for (int n = 0; n < MAX_NUMBER_OF_WRITES; n++) {
 800323c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323e:	3301      	adds	r3, #1
 8003240:	643b      	str	r3, [r7, #64]	@ 0x40
 8003242:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003244:	2b09      	cmp	r3, #9
 8003246:	ddc4      	ble.n	80031d2 <Print_Temperature_Log+0x1e>
        }
    }

    return status;
 8003248:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800324c:	4618      	mov	r0, r3
 800324e:	3748      	adds	r7, #72	@ 0x48
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	08013d1c 	.word	0x08013d1c
 8003258:	24000b1c 	.word	0x24000b1c
 800325c:	24000a84 	.word	0x24000a84

08003260 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <generate_random>:
  * @param  seed Pointer to the seed value
  * @retval Generated random number
  * @note   This function updates the seed and returns the next random value.
  */
static uint32_t generate_random(uint32_t *seed)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
    /* Ensure the seed pointer is valid */
    if (seed == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <generate_random+0x12>
    {
        return 0; /* Error case, return a default value */
 800327e:	2300      	movs	r3, #0
 8003280:	e00a      	b.n	8003298 <generate_random+0x28>
    }

    /* Update the seed using the LCG formula */
    *seed = (RNG_MULTIPLIER * (*seed) + RNG_INCREMENT) & RNG_MODULUS;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a07      	ldr	r2, [pc, #28]	@ (80032a4 <generate_random+0x34>)
 8003288:	fb03 f202 	mul.w	r2, r3, r2
 800328c:	4b06      	ldr	r3, [pc, #24]	@ (80032a8 <generate_random+0x38>)
 800328e:	4413      	add	r3, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6013      	str	r3, [r2, #0]

    /* Return the generated random number */
    return *seed;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	0019660d 	.word	0x0019660d
 80032a8:	3c6ef35f 	.word	0x3c6ef35f

080032ac <random_in_range>:
  * @param  max Maximum value of the range
  * @retval Random number within the specified range
  * @note   This function scales the random value to the desired range [min, max].
  */
static uint32_t random_in_range(uint32_t *seed, uint32_t min, uint32_t max)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
	/* Ensure valid input range */
    if (seed == NULL || min > max)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <random_in_range+0x1a>
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d901      	bls.n	80032ca <random_in_range+0x1e>
    {
        return 0; /* Error case, return a default value */
 80032c6:	2300      	movs	r3, #0
 80032c8:	e00f      	b.n	80032ea <random_in_range+0x3e>
    }

    /* Generate a random number and scale it to the desired range */
    uint32_t rand_value = generate_random(seed);
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff ffd0 	bl	8003270 <generate_random>
 80032d0:	6178      	str	r0, [r7, #20]
    return min + (rand_value % (max - min + 1));
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80032e0:	fb01 f202 	mul.w	r2, r1, r2
 80032e4:	1a9a      	subs	r2, r3, r2
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	4413      	add	r3, r2
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3718      	adds	r7, #24
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
	...

080032f4 <get_temperature>:
/**
  * @brief  Simulates retrieving the current temperature using random number generation
  * @retval Temperature value
  * @note	This function will always return a random value between 0 and 40 as those were the values chosen
  */
int get_temperature(void){
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0

	uint32_t temp = random_in_range(&seed, MIN_VAL_FOR_RAND, MAX_VAL_FOR_RAND);
 80032fa:	2228      	movs	r2, #40	@ 0x28
 80032fc:	2100      	movs	r1, #0
 80032fe:	4804      	ldr	r0, [pc, #16]	@ (8003310 <get_temperature+0x1c>)
 8003300:	f7ff ffd4 	bl	80032ac <random_in_range>
 8003304:	6078      	str	r0, [r7, #4]
	return (int)temp; /* Ensure range is valid */
 8003306:	687b      	ldr	r3, [r7, #4]

}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	24000008 	.word	0x24000008

08003314 <add_new_temp_value>:

/**
  * @brief  Adds a new random temperature value to the circular buffer (temperature_log)
  */
void add_new_temp_value(void){
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0

	if (temp_index < MAX_TEMP_INDEX) {
 8003318:	4b0c      	ldr	r3, [pc, #48]	@ (800334c <add_new_temp_value+0x38>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d80f      	bhi.n	8003340 <add_new_temp_value+0x2c>

		/* Simulate logging a temperature value */
		temperature_log[temp_index] = get_temperature();
 8003320:	f7ff ffe8 	bl	80032f4 <get_temperature>
 8003324:	4601      	mov	r1, r0
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <add_new_temp_value+0x38>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	b2c9      	uxtb	r1, r1
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <add_new_temp_value+0x3c>)
 8003330:	5499      	strb	r1, [r3, r2]

		temp_index++; /* Increment the log index */
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <add_new_temp_value+0x38>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	3301      	adds	r3, #1
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <add_new_temp_value+0x38>)
 800333c:	701a      	strb	r2, [r3, #0]
	} else {
		temp_index = 0; /* Reset log index if maximum log size reached */
	}
}
 800333e:	e002      	b.n	8003346 <add_new_temp_value+0x32>
		temp_index = 0; /* Reset log index if maximum log size reached */
 8003340:	4b02      	ldr	r3, [pc, #8]	@ (800334c <add_new_temp_value+0x38>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	24000bba 	.word	0x24000bba
 8003350:	24000bb0 	.word	0x24000bb0

08003354 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003354:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800338c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003358:	f7ff fb0a 	bl	8002970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800335c:	480c      	ldr	r0, [pc, #48]	@ (8003390 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800335e:	490d      	ldr	r1, [pc, #52]	@ (8003394 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003360:	4a0d      	ldr	r2, [pc, #52]	@ (8003398 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003364:	e002      	b.n	800336c <LoopCopyDataInit>

08003366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800336a:	3304      	adds	r3, #4

0800336c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800336c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800336e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003370:	d3f9      	bcc.n	8003366 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003372:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003374:	4c0a      	ldr	r4, [pc, #40]	@ (80033a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003378:	e001      	b.n	800337e <LoopFillZerobss>

0800337a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800337a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800337c:	3204      	adds	r2, #4

0800337e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800337e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003380:	d3fb      	bcc.n	800337a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003382:	f00e fcb1 	bl	8011ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003386:	f7fe fc3b 	bl	8001c00 <main>
  bx  lr
 800338a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800338c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003390:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003394:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8003398:	08014190 	.word	0x08014190
  ldr r2, =_sbss
 800339c:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 80033a0:	240056f4 	.word	0x240056f4

080033a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033a4:	e7fe      	b.n	80033a4 <ADC3_IRQHandler>
	...

080033a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033ae:	2003      	movs	r0, #3
 80033b0:	f001 fca1 	bl	8004cf6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80033b4:	f005 f8a4 	bl	8008500 <HAL_RCC_GetSysClockFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <HAL_Init+0x68>)
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	4913      	ldr	r1, [pc, #76]	@ (8003414 <HAL_Init+0x6c>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
 80033d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003410 <HAL_Init+0x68>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	4a0e      	ldr	r2, [pc, #56]	@ (8003414 <HAL_Init+0x6c>)
 80033dc:	5cd3      	ldrb	r3, [r2, r3]
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	fa22 f303 	lsr.w	r3, r2, r3
 80033e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003418 <HAL_Init+0x70>)
 80033ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ec:	4a0b      	ldr	r2, [pc, #44]	@ (800341c <HAL_Init+0x74>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f2:	200f      	movs	r0, #15
 80033f4:	f7ff f95a 	bl	80026ac <HAL_InitTick>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d001      	beq.n	8003402 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e002      	b.n	8003408 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003402:	f7ff f935 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	58024400 	.word	0x58024400
 8003414:	08013dd4 	.word	0x08013dd4
 8003418:	24000004 	.word	0x24000004
 800341c:	24000000 	.word	0x24000000

08003420 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003424:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_IncTick+0x20>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_IncTick+0x24>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4413      	add	r3, r2
 8003430:	4a04      	ldr	r2, [pc, #16]	@ (8003444 <HAL_IncTick+0x24>)
 8003432:	6013      	str	r3, [r2, #0]
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	24000010 	.word	0x24000010
 8003444:	24000bbc 	.word	0x24000bbc

08003448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return uwTick;
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <HAL_GetTick+0x14>)
 800344e:	681b      	ldr	r3, [r3, #0]
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	24000bbc 	.word	0x24000bbc

08003460 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003468:	4b06      	ldr	r3, [pc, #24]	@ (8003484 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003470:	4904      	ldr	r1, [pc, #16]	@ (8003484 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	604b      	str	r3, [r1, #4]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	58000400 	.word	0x58000400

08003488 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003492:	4b07      	ldr	r3, [pc, #28]	@ (80034b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	58000400 	.word	0x58000400

080034b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	609a      	str	r2, [r3, #8]
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	609a      	str	r2, [r3, #8]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3360      	adds	r3, #96	@ 0x60
 800352e:	461a      	mov	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	4413      	add	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a10      	ldr	r2, [pc, #64]	@ (800357c <LL_ADC_SetOffset+0x60>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10b      	bne.n	8003558 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003556:	e00b      	b.n	8003570 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	431a      	orrs	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	601a      	str	r2, [r3, #0]
}
 8003570:	bf00      	nop
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	58026000 	.word	0x58026000

08003580 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3360      	adds	r3, #96	@ 0x60
 800358e:	461a      	mov	r2, r3
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	431a      	orrs	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	611a      	str	r2, [r3, #16]
}
 80035d2:	bf00      	nop
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3360      	adds	r3, #96	@ 0x60
 80035f8:	461a      	mov	r2, r3
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4413      	add	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	431a      	orrs	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	601a      	str	r2, [r3, #0]
  }
}
 8003612:	bf00      	nop
 8003614:	371c      	adds	r7, #28
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	58026000 	.word	0x58026000

08003624 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003624:	b480      	push	{r7}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4a0c      	ldr	r2, [pc, #48]	@ (8003664 <LL_ADC_SetOffsetSaturation+0x40>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10e      	bne.n	8003656 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3360      	adds	r3, #96	@ 0x60
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	431a      	orrs	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003656:	bf00      	nop
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	58026000 	.word	0x58026000

08003668 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <LL_ADC_SetOffsetSign+0x40>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d10e      	bne.n	800369a <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3360      	adds	r3, #96	@ 0x60
 8003680:	461a      	mov	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	431a      	orrs	r2, r3
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	58026000 	.word	0x58026000

080036ac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3360      	adds	r3, #96	@ 0x60
 80036bc:	461a      	mov	r2, r3
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4413      	add	r3, r2
 80036c4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <LL_ADC_SetOffsetState+0x50>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	431a      	orrs	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80036de:	e007      	b.n	80036f0 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	601a      	str	r2, [r3, #0]
}
 80036f0:	bf00      	nop
 80036f2:	371c      	adds	r7, #28
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	58026000 	.word	0x58026000

08003700 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	3330      	adds	r3, #48	@ 0x30
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0a1b      	lsrs	r3, r3, #8
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	4413      	add	r3, r2
 800371e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 031f 	and.w	r3, r3, #31
 800372a:	211f      	movs	r1, #31
 800372c:	fa01 f303 	lsl.w	r3, r1, r3
 8003730:	43db      	mvns	r3, r3
 8003732:	401a      	ands	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0e9b      	lsrs	r3, r3, #26
 8003738:	f003 011f 	and.w	r1, r3, #31
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	fa01 f303 	lsl.w	r3, r1, r3
 8003746:	431a      	orrs	r2, r3
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	3314      	adds	r3, #20
 8003768:	461a      	mov	r2, r3
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	0e5b      	lsrs	r3, r3, #25
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	4413      	add	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	0d1b      	lsrs	r3, r3, #20
 8003780:	f003 031f 	and.w	r3, r3, #31
 8003784:	2107      	movs	r1, #7
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	0d1b      	lsrs	r3, r3, #20
 8003792:	f003 031f 	and.w	r3, r3, #31
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	fa01 f303 	lsl.w	r3, r1, r3
 800379c:	431a      	orrs	r2, r3
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80037a2:	bf00      	nop
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
	...

080037b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a1a      	ldr	r2, [pc, #104]	@ (8003828 <LL_ADC_SetChannelSingleDiff+0x78>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d115      	bne.n	80037f0 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0318 	and.w	r3, r3, #24
 80037da:	4914      	ldr	r1, [pc, #80]	@ (800382c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80037dc:	40d9      	lsrs	r1, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	400b      	ands	r3, r1
 80037e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e6:	431a      	orrs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80037ee:	e014      	b.n	800381a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037fc:	43db      	mvns	r3, r3
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0318 	and.w	r3, r3, #24
 8003806:	4909      	ldr	r1, [pc, #36]	@ (800382c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003808:	40d9      	lsrs	r1, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	400b      	ands	r3, r1
 800380e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003812:	431a      	orrs	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800381a:	bf00      	nop
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	58026000 	.word	0x58026000
 800382c:	000fffff 	.word	0x000fffff

08003830 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	4b04      	ldr	r3, [pc, #16]	@ (8003850 <LL_ADC_DisableDeepPowerDown+0x20>)
 800383e:	4013      	ands	r3, r2
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6093      	str	r3, [r2, #8]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	5fffffc0 	.word	0x5fffffc0

08003854 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003868:	d101      	bne.n	800386e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	4b05      	ldr	r3, [pc, #20]	@ (80038a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800388a:	4013      	ands	r3, r2
 800388c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	6fffffc0 	.word	0x6fffffc0

080038a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038b8:	d101      	bne.n	80038be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <LL_ADC_IsEnabled+0x18>
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <LL_ADC_IsEnabled+0x1a>
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 0304 	and.w	r3, r3, #4
 8003902:	2b04      	cmp	r3, #4
 8003904:	d101      	bne.n	800390a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d101      	bne.n	8003930 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1ee      	b.n	8003d38 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fc fff5 	bl	8000958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff67 	bl	8003854 <LL_ADC_IsDeepPowerDownEnabled>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff4d 	bl	8003830 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff82 	bl	80038a4 <LL_ADC_IsInternalRegulatorEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d114      	bne.n	80039d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff66 	bl	800387c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b0:	4b8e      	ldr	r3, [pc, #568]	@ (8003bec <HAL_ADC_Init+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	4a8e      	ldr	r2, [pc, #568]	@ (8003bf0 <HAL_ADC_Init+0x2b0>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039c2:	e002      	b.n	80039ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f9      	bne.n	80039c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff65 	bl	80038a4 <LL_ADC_IsInternalRegulatorEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff76 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 8003a06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 8188 	bne.w	8003d26 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8184 	bne.w	8003d26 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003a26:	f043 0202 	orr.w	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff ff4a 	bl	80038cc <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d136      	bne.n	8003aac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_Init+0x112>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10e      	bne.n	8003a70 <HAL_ADC_Init+0x130>
 8003a52:	4868      	ldr	r0, [pc, #416]	@ (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a54:	f7ff ff3a 	bl	80038cc <LL_ADC_IsEnabled>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4867      	ldr	r0, [pc, #412]	@ (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a5c:	f7ff ff36 	bl	80038cc <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4323      	orrs	r3, r4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e008      	b.n	8003a82 <HAL_ADC_Init+0x142>
 8003a70:	4862      	ldr	r0, [pc, #392]	@ (8003bfc <HAL_ADC_Init+0x2bc>)
 8003a72:	f7ff ff2b 	bl	80038cc <LL_ADC_IsEnabled>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5a      	ldr	r2, [pc, #360]	@ (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_Init+0x15a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a58      	ldr	r2, [pc, #352]	@ (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_Init+0x15e>
 8003a9a:	4a59      	ldr	r2, [pc, #356]	@ (8003c00 <HAL_ADC_Init+0x2c0>)
 8003a9c:	e000      	b.n	8003aa0 <HAL_ADC_Init+0x160>
 8003a9e:	4a59      	ldr	r2, [pc, #356]	@ (8003c04 <HAL_ADC_Init+0x2c4>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7ff fd04 	bl	80034b4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	@ (8003bfc <HAL_ADC_Init+0x2bc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d129      	bne.n	8003b0a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7e5b      	ldrb	r3, [r3, #25]
 8003aba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ac0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003ac6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d013      	beq.n	8003af8 <HAL_ADC_Init+0x1b8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d00d      	beq.n	8003af4 <HAL_ADC_Init+0x1b4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b1c      	cmp	r3, #28
 8003ade:	d007      	beq.n	8003af0 <HAL_ADC_Init+0x1b0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b18      	cmp	r3, #24
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_Init+0x1ac>
 8003ae8:	2318      	movs	r3, #24
 8003aea:	e006      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e004      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af0:	2310      	movs	r3, #16
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af4:	2308      	movs	r3, #8
 8003af6:	e000      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003afa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e00e      	b.n	8003b28 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7e5b      	ldrb	r3, [r3, #25]
 8003b0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d106      	bne.n	8003b40 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b36:	3b01      	subs	r3, #1
 8003b38:	045b      	lsls	r3, r3, #17
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <HAL_ADC_Init+0x2bc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4b26      	ldr	r3, [pc, #152]	@ (8003c08 <HAL_ADC_Init+0x2c8>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	430b      	orrs	r3, r1
 8003b78:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	e009      	b.n	8003ba6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b1c      	ldr	r3, [pc, #112]	@ (8003c0c <HAL_ADC_Init+0x2cc>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fea1 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff feae 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 8003bbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 808e 	bne.w	8003ce2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 808a 	bne.w	8003ce2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003bfc <HAL_ADC_Init+0x2bc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7e1b      	ldrb	r3, [r3, #24]
 8003bdc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003be4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e018      	b.n	8003c1e <HAL_ADC_Init+0x2de>
 8003bec:	24000000 	.word	0x24000000
 8003bf0:	053e2d63 	.word	0x053e2d63
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022100 	.word	0x40022100
 8003bfc:	58026000 	.word	0x58026000
 8003c00:	40022300 	.word	0x40022300
 8003c04:	58026300 	.word	0x58026300
 8003c08:	fff04007 	.word	0xfff04007
 8003c0c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b46      	ldr	r3, [pc, #280]	@ (8003d40 <HAL_ADC_Init+0x400>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d137      	bne.n	8003cac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c40:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3f      	ldr	r2, [pc, #252]	@ (8003d44 <HAL_ADC_Init+0x404>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d116      	bne.n	8003c7a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	4b3d      	ldr	r3, [pc, #244]	@ (8003d48 <HAL_ADC_Init+0x408>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	611a      	str	r2, [r3, #16]
 8003c78:	e020      	b.n	8003cbc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	4b32      	ldr	r3, [pc, #200]	@ (8003d4c <HAL_ADC_Init+0x40c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0411      	lsls	r1, r2, #16
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	e007      	b.n	8003cbc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d44 <HAL_ADC_Init+0x404>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fd67 	bl	80047b0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10c      	bne.n	8003d04 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	f023 010f 	bic.w	r1, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d02:	e007      	b.n	8003d14 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020f 	bic.w	r2, r2, #15
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d18:	f023 0303 	bic.w	r3, r3, #3
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	661a      	str	r2, [r3, #96]	@ 0x60
 8003d24:	e007      	b.n	8003d36 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d2a:	f043 0210 	orr.w	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3724      	adds	r7, #36	@ 0x24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	ffffbffc 	.word	0xffffbffc
 8003d44:	58026000 	.word	0x58026000
 8003d48:	fc00f81f 	.word	0xfc00f81f
 8003d4c:	fc00f81e 	.word	0xfc00f81e

08003d50 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b0b9      	sub	sp, #228	@ 0xe4
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d6a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	4aab      	ldr	r2, [pc, #684]	@ (8004020 <HAL_ADC_ConfigChannel+0x2d0>)
 8003d72:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d102      	bne.n	8003d84 <HAL_ADC_ConfigChannel+0x34>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	f000 bcfe 	b.w	8004780 <HAL_ADC_ConfigChannel+0xa30>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff fdae 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f040 84e2 	bne.w	8004762 <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	db38      	blt.n	8003e18 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a9e      	ldr	r2, [pc, #632]	@ (8004024 <HAL_ADC_ConfigChannel+0x2d4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d033      	beq.n	8003e18 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d108      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x7e>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	0e9b      	lsrs	r3, r3, #26
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	e01d      	b.n	8003e0a <HAL_ADC_ConfigChannel+0xba>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003dda:	fa93 f3a3 	rbit	r3, r3
 8003dde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003de2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8003df2:	2320      	movs	r3, #32
 8003df4:	e004      	b.n	8003e00 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8003df6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 031f 	and.w	r3, r3, #31
 8003e04:	2201      	movs	r2, #1
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	69d1      	ldr	r1, [r2, #28]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6859      	ldr	r1, [r3, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f7ff fc6b 	bl	8003700 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fd5f 	bl	80038f2 <LL_ADC_REG_IsConversionOngoing>
 8003e34:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fd6b 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 8003e42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 8270 	bne.w	8004330 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f040 826b 	bne.w	8004330 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6819      	ldr	r1, [r3, #0]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	461a      	mov	r2, r3
 8003e68:	f7ff fc76 	bl	8003758 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a6c      	ldr	r2, [pc, #432]	@ (8004024 <HAL_ADC_ConfigChannel+0x2d4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d10d      	bne.n	8003e92 <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	08db      	lsrs	r3, r3, #3
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e90:	e032      	b.n	8003ef8 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e92:	4b65      	ldr	r3, [pc, #404]	@ (8004028 <HAL_ADC_ConfigChannel+0x2d8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003e9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e9e:	d10b      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x168>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695a      	ldr	r2, [r3, #20]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	e01d      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1a4>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10b      	bne.n	8003ede <HAL_ADC_ConfigChannel+0x18e>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	089b      	lsrs	r3, r3, #2
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	e00a      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x1a4>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	005b      	lsls	r3, r3, #1
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d048      	beq.n	8003f92 <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	6919      	ldr	r1, [r3, #16]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f10:	f7ff fb04 	bl	800351c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	@ (8004024 <HAL_ADC_ConfigChannel+0x2d4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d119      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f7ff fb9c 	bl	8003668 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6818      	ldr	r0, [r3, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	6919      	ldr	r1, [r3, #16]
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x1f8>
 8003f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f46:	e000      	b.n	8003f4a <HAL_ADC_ConfigChannel+0x1fa>
 8003f48:	2300      	movs	r3, #0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f7ff fb6a 	bl	8003624 <LL_ADC_SetOffsetSaturation>
 8003f50:	e1ee      	b.n	8004330 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6919      	ldr	r1, [r3, #16]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d102      	bne.n	8003f6a <HAL_ADC_ConfigChannel+0x21a>
 8003f64:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f68:	e000      	b.n	8003f6c <HAL_ADC_ConfigChannel+0x21c>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	f7ff fb37 	bl	80035e0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6818      	ldr	r0, [r3, #0]
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6919      	ldr	r1, [r3, #16]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	7e1b      	ldrb	r3, [r3, #24]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d102      	bne.n	8003f88 <HAL_ADC_ConfigChannel+0x238>
 8003f82:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003f86:	e000      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x23a>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	f7ff fb0e 	bl	80035ac <LL_ADC_SetDataRightShift>
 8003f90:	e1ce      	b.n	8004330 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a23      	ldr	r2, [pc, #140]	@ (8004024 <HAL_ADC_ConfigChannel+0x2d4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	f040 8181 	bne.w	80042a0 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff faeb 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8003faa:	4603      	mov	r3, r0
 8003fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <HAL_ADC_ConfigChannel+0x27a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff fae0 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	0e9b      	lsrs	r3, r3, #26
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	e01e      	b.n	8004008 <HAL_ADC_ConfigChannel+0x2b8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2100      	movs	r1, #0
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7ff fad5 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8003fe8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003fec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8003ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8003ff8:	2320      	movs	r3, #32
 8003ffa:	e004      	b.n	8004006 <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8003ffc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004000:	fab3 f383 	clz	r3, r3
 8004004:	b2db      	uxtb	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <HAL_ADC_ConfigChannel+0x2dc>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	0e9b      	lsrs	r3, r3, #26
 800401a:	f003 031f 	and.w	r3, r3, #31
 800401e:	e01e      	b.n	800405e <HAL_ADC_ConfigChannel+0x30e>
 8004020:	47ff0000 	.word	0x47ff0000
 8004024:	58026000 	.word	0x58026000
 8004028:	5c001000 	.word	0x5c001000
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004038:	fa93 f3a3 	rbit	r3, r3
 800403c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8004040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8004048:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d101      	bne.n	8004054 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8004050:	2320      	movs	r3, #32
 8004052:	e004      	b.n	800405e <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8004054:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004058:	fab3 f383 	clz	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	429a      	cmp	r2, r3
 8004060:	d106      	bne.n	8004070 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2200      	movs	r2, #0
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fb1e 	bl	80036ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff fa82 	bl	8003580 <LL_ADC_GetOffsetChannel>
 800407c:	4603      	mov	r3, r0
 800407e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10a      	bne.n	800409c <HAL_ADC_ConfigChannel+0x34c>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fa77 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8004092:	4603      	mov	r3, r0
 8004094:	0e9b      	lsrs	r3, r3, #26
 8004096:	f003 021f 	and.w	r2, r3, #31
 800409a:	e01e      	b.n	80040da <HAL_ADC_ConfigChannel+0x38a>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fa6c 	bl	8003580 <LL_ADC_GetOffsetChannel>
 80040a8:	4603      	mov	r3, r0
 80040aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80040ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80040c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 80040ca:	2320      	movs	r3, #32
 80040cc:	e004      	b.n	80040d8 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 80040ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80040d2:	fab3 f383 	clz	r3, r3
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <HAL_ADC_ConfigChannel+0x3a2>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	0e9b      	lsrs	r3, r3, #26
 80040ec:	f003 031f 	and.w	r3, r3, #31
 80040f0:	e018      	b.n	8004124 <HAL_ADC_ConfigChannel+0x3d4>
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040fe:	fa93 f3a3 	rbit	r3, r3
 8004102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8004106:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800410a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800410e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 8004116:	2320      	movs	r3, #32
 8004118:	e004      	b.n	8004124 <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 800411a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800411e:	fab3 f383 	clz	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	429a      	cmp	r2, r3
 8004126:	d106      	bne.n	8004136 <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff fabb 	bl	80036ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2102      	movs	r1, #2
 800413c:	4618      	mov	r0, r3
 800413e:	f7ff fa1f 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8004142:	4603      	mov	r3, r0
 8004144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x412>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff fa14 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8004158:	4603      	mov	r3, r0
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	f003 021f 	and.w	r2, r3, #31
 8004160:	e01e      	b.n	80041a0 <HAL_ADC_ConfigChannel+0x450>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2102      	movs	r1, #2
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fa09 	bl	8003580 <LL_ADC_GetOffsetChannel>
 800416e:	4603      	mov	r3, r0
 8004170:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004178:	fa93 f3a3 	rbit	r3, r3
 800417c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8004180:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004184:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8004188:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8004190:	2320      	movs	r3, #32
 8004192:	e004      	b.n	800419e <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x468>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	e014      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x492>
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041be:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80041c0:	fa93 f3a3 	rbit	r3, r3
 80041c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80041c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 80041cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80041d4:	2320      	movs	r3, #32
 80041d6:	e004      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80041d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80041dc:	fab3 f383 	clz	r3, r3
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d106      	bne.n	80041f4 <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	2102      	movs	r1, #2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fa5c 	bl	80036ac <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2103      	movs	r1, #3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f9c0 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8004200:	4603      	mov	r3, r0
 8004202:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004206:	2b00      	cmp	r3, #0
 8004208:	d10a      	bne.n	8004220 <HAL_ADC_ConfigChannel+0x4d0>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2103      	movs	r1, #3
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff f9b5 	bl	8003580 <LL_ADC_GetOffsetChannel>
 8004216:	4603      	mov	r3, r0
 8004218:	0e9b      	lsrs	r3, r3, #26
 800421a:	f003 021f 	and.w	r2, r3, #31
 800421e:	e017      	b.n	8004250 <HAL_ADC_ConfigChannel+0x500>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2103      	movs	r1, #3
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f9aa 	bl	8003580 <LL_ADC_GetOffsetChannel>
 800422c:	4603      	mov	r3, r0
 800422e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004232:	fa93 f3a3 	rbit	r3, r3
 8004236:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800423a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800423c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8004242:	2320      	movs	r3, #32
 8004244:	e003      	b.n	800424e <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8004246:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004258:	2b00      	cmp	r3, #0
 800425a:	d105      	bne.n	8004268 <HAL_ADC_ConfigChannel+0x518>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	0e9b      	lsrs	r3, r3, #26
 8004262:	f003 031f 	and.w	r3, r3, #31
 8004266:	e011      	b.n	800428c <HAL_ADC_ConfigChannel+0x53c>
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004270:	fa93 f3a3 	rbit	r3, r3
 8004274:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8004276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004278:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800427a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8004280:	2320      	movs	r3, #32
 8004282:	e003      	b.n	800428c <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8004284:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004286:	fab3 f383 	clz	r3, r3
 800428a:	b2db      	uxtb	r3, r3
 800428c:	429a      	cmp	r2, r3
 800428e:	d14f      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2200      	movs	r2, #0
 8004296:	2103      	movs	r1, #3
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fa07 	bl	80036ac <LL_ADC_SetOffsetState>
 800429e:	e047      	b.n	8004330 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	069b      	lsls	r3, r3, #26
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d107      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042c2:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	069b      	lsls	r3, r3, #26
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80042e6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	069b      	lsls	r3, r3, #26
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d107      	bne.n	800430c <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800430a:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004312:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	069b      	lsls	r3, r3, #26
 800431c:	429a      	cmp	r2, r3
 800431e:	d107      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800432e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff fac9 	bl	80038cc <LL_ADC_IsEnabled>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f040 8219 	bne.w	8004774 <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6818      	ldr	r0, [r3, #0]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	6819      	ldr	r1, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	461a      	mov	r2, r3
 8004350:	f7ff fa2e 	bl	80037b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4aa1      	ldr	r2, [pc, #644]	@ (80045e0 <HAL_ADC_ConfigChannel+0x890>)
 800435a:	4293      	cmp	r3, r2
 800435c:	f040 812e 	bne.w	80045bc <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10b      	bne.n	8004388 <HAL_ADC_ConfigChannel+0x638>
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	0e9b      	lsrs	r3, r3, #26
 8004376:	3301      	adds	r3, #1
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	2b09      	cmp	r3, #9
 800437e:	bf94      	ite	ls
 8004380:	2301      	movls	r3, #1
 8004382:	2300      	movhi	r3, #0
 8004384:	b2db      	uxtb	r3, r3
 8004386:	e019      	b.n	80043bc <HAL_ADC_ConfigChannel+0x66c>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004390:	fa93 f3a3 	rbit	r3, r3
 8004394:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8004396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004398:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 800439a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80043a0:	2320      	movs	r3, #32
 80043a2:	e003      	b.n	80043ac <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80043a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	3301      	adds	r3, #1
 80043ae:	f003 031f 	and.w	r3, r3, #31
 80043b2:	2b09      	cmp	r3, #9
 80043b4:	bf94      	ite	ls
 80043b6:	2301      	movls	r3, #1
 80043b8:	2300      	movhi	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d079      	beq.n	80044b4 <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d107      	bne.n	80043dc <HAL_ADC_ConfigChannel+0x68c>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	0e9b      	lsrs	r3, r3, #26
 80043d2:	3301      	adds	r3, #1
 80043d4:	069b      	lsls	r3, r3, #26
 80043d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043da:	e015      	b.n	8004408 <HAL_ADC_ConfigChannel+0x6b8>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e4:	fa93 f3a3 	rbit	r3, r3
 80043e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80043ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80043ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 80043f4:	2320      	movs	r3, #32
 80043f6:	e003      	b.n	8004400 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80043f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	3301      	adds	r3, #1
 8004402:	069b      	lsls	r3, r3, #26
 8004404:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_ADC_ConfigChannel+0x6d8>
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	0e9b      	lsrs	r3, r3, #26
 800441a:	3301      	adds	r3, #1
 800441c:	f003 031f 	and.w	r3, r3, #31
 8004420:	2101      	movs	r1, #1
 8004422:	fa01 f303 	lsl.w	r3, r1, r3
 8004426:	e017      	b.n	8004458 <HAL_ADC_ConfigChannel+0x708>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8004436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800443a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8004440:	2320      	movs	r3, #32
 8004442:	e003      	b.n	800444c <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8004444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	3301      	adds	r3, #1
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2101      	movs	r1, #1
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	ea42 0103 	orr.w	r1, r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10a      	bne.n	800447e <HAL_ADC_ConfigChannel+0x72e>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	0e9b      	lsrs	r3, r3, #26
 800446e:	3301      	adds	r3, #1
 8004470:	f003 021f 	and.w	r2, r3, #31
 8004474:	4613      	mov	r3, r2
 8004476:	005b      	lsls	r3, r3, #1
 8004478:	4413      	add	r3, r2
 800447a:	051b      	lsls	r3, r3, #20
 800447c:	e018      	b.n	80044b0 <HAL_ADC_ConfigChannel+0x760>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	fa93 f3a3 	rbit	r3, r3
 800448a:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800448e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8004490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8004496:	2320      	movs	r3, #32
 8004498:	e003      	b.n	80044a2 <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	fab3 f383 	clz	r3, r3
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	3301      	adds	r3, #1
 80044a4:	f003 021f 	and.w	r2, r3, #31
 80044a8:	4613      	mov	r3, r2
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	4413      	add	r3, r2
 80044ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044b0:	430b      	orrs	r3, r1
 80044b2:	e07e      	b.n	80045b2 <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d107      	bne.n	80044d0 <HAL_ADC_ConfigChannel+0x780>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	0e9b      	lsrs	r3, r3, #26
 80044c6:	3301      	adds	r3, #1
 80044c8:	069b      	lsls	r3, r3, #26
 80044ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ce:	e015      	b.n	80044fc <HAL_ADC_ConfigChannel+0x7ac>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	fa93 f3a3 	rbit	r3, r3
 80044dc:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80044de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80044e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d101      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 80044e8:	2320      	movs	r3, #32
 80044ea:	e003      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	3301      	adds	r3, #1
 80044f6:	069b      	lsls	r3, r3, #26
 80044f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004504:	2b00      	cmp	r3, #0
 8004506:	d109      	bne.n	800451c <HAL_ADC_ConfigChannel+0x7cc>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	3301      	adds	r3, #1
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2101      	movs	r1, #1
 8004516:	fa01 f303 	lsl.w	r3, r1, r3
 800451a:	e017      	b.n	800454c <HAL_ADC_ConfigChannel+0x7fc>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	fa93 f3a3 	rbit	r3, r3
 8004528:	61bb      	str	r3, [r7, #24]
  return result;
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d101      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8004534:	2320      	movs	r3, #32
 8004536:	e003      	b.n	8004540 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	fab3 f383 	clz	r3, r3
 800453e:	b2db      	uxtb	r3, r3
 8004540:	3301      	adds	r3, #1
 8004542:	f003 031f 	and.w	r3, r3, #31
 8004546:	2101      	movs	r1, #1
 8004548:	fa01 f303 	lsl.w	r3, r1, r3
 800454c:	ea42 0103 	orr.w	r1, r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10d      	bne.n	8004578 <HAL_ADC_ConfigChannel+0x828>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	0e9b      	lsrs	r3, r3, #26
 8004562:	3301      	adds	r3, #1
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	4613      	mov	r3, r2
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	4413      	add	r3, r2
 800456e:	3b1e      	subs	r3, #30
 8004570:	051b      	lsls	r3, r3, #20
 8004572:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004576:	e01b      	b.n	80045b0 <HAL_ADC_ConfigChannel+0x860>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	60fb      	str	r3, [r7, #12]
  return result;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8004590:	2320      	movs	r3, #32
 8004592:	e003      	b.n	800459c <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	fab3 f383 	clz	r3, r3
 800459a:	b2db      	uxtb	r3, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f003 021f 	and.w	r2, r3, #31
 80045a2:	4613      	mov	r3, r2
 80045a4:	005b      	lsls	r3, r3, #1
 80045a6:	4413      	add	r3, r2
 80045a8:	3b1e      	subs	r3, #30
 80045aa:	051b      	lsls	r3, r3, #20
 80045ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045b0:	430b      	orrs	r3, r1
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	6892      	ldr	r2, [r2, #8]
 80045b6:	4619      	mov	r1, r3
 80045b8:	f7ff f8ce 	bl	8003758 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f280 80d7 	bge.w	8004774 <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a06      	ldr	r2, [pc, #24]	@ (80045e4 <HAL_ADC_ConfigChannel+0x894>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_ADC_ConfigChannel+0x88a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a04      	ldr	r2, [pc, #16]	@ (80045e8 <HAL_ADC_ConfigChannel+0x898>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d10a      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x8a0>
 80045da:	4b04      	ldr	r3, [pc, #16]	@ (80045ec <HAL_ADC_ConfigChannel+0x89c>)
 80045dc:	e009      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x8a2>
 80045de:	bf00      	nop
 80045e0:	47ff0000 	.word	0x47ff0000
 80045e4:	40022000 	.word	0x40022000
 80045e8:	40022100 	.word	0x40022100
 80045ec:	40022300 	.word	0x40022300
 80045f0:	4b65      	ldr	r3, [pc, #404]	@ (8004788 <HAL_ADC_ConfigChannel+0xa38>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff84 	bl	8003500 <LL_ADC_GetCommonPathInternalCh>
 80045f8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a62      	ldr	r2, [pc, #392]	@ (800478c <HAL_ADC_ConfigChannel+0xa3c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_ADC_ConfigChannel+0x8c0>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a61      	ldr	r2, [pc, #388]	@ (8004790 <HAL_ADC_ConfigChannel+0xa40>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d10e      	bne.n	800462e <HAL_ADC_ConfigChannel+0x8de>
 8004610:	485e      	ldr	r0, [pc, #376]	@ (800478c <HAL_ADC_ConfigChannel+0xa3c>)
 8004612:	f7ff f95b 	bl	80038cc <LL_ADC_IsEnabled>
 8004616:	4604      	mov	r4, r0
 8004618:	485d      	ldr	r0, [pc, #372]	@ (8004790 <HAL_ADC_ConfigChannel+0xa40>)
 800461a:	f7ff f957 	bl	80038cc <LL_ADC_IsEnabled>
 800461e:	4603      	mov	r3, r0
 8004620:	4323      	orrs	r3, r4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf0c      	ite	eq
 8004626:	2301      	moveq	r3, #1
 8004628:	2300      	movne	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	e008      	b.n	8004640 <HAL_ADC_ConfigChannel+0x8f0>
 800462e:	4859      	ldr	r0, [pc, #356]	@ (8004794 <HAL_ADC_ConfigChannel+0xa44>)
 8004630:	f7ff f94c 	bl	80038cc <LL_ADC_IsEnabled>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	bf0c      	ite	eq
 800463a:	2301      	moveq	r3, #1
 800463c:	2300      	movne	r3, #0
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 8084 	beq.w	800474e <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a53      	ldr	r2, [pc, #332]	@ (8004798 <HAL_ADC_ConfigChannel+0xa48>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d132      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x966>
 8004650:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d12c      	bne.n	80046b6 <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a4c      	ldr	r2, [pc, #304]	@ (8004794 <HAL_ADC_ConfigChannel+0xa44>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f040 8086 	bne.w	8004774 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a47      	ldr	r2, [pc, #284]	@ (800478c <HAL_ADC_ConfigChannel+0xa3c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d004      	beq.n	800467c <HAL_ADC_ConfigChannel+0x92c>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a46      	ldr	r2, [pc, #280]	@ (8004790 <HAL_ADC_ConfigChannel+0xa40>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d101      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x930>
 800467c:	4a47      	ldr	r2, [pc, #284]	@ (800479c <HAL_ADC_ConfigChannel+0xa4c>)
 800467e:	e000      	b.n	8004682 <HAL_ADC_ConfigChannel+0x932>
 8004680:	4a41      	ldr	r2, [pc, #260]	@ (8004788 <HAL_ADC_ConfigChannel+0xa38>)
 8004682:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004686:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe ff24 	bl	80034da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004692:	4b43      	ldr	r3, [pc, #268]	@ (80047a0 <HAL_ADC_ConfigChannel+0xa50>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	4a42      	ldr	r2, [pc, #264]	@ (80047a4 <HAL_ADC_ConfigChannel+0xa54>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	099b      	lsrs	r3, r3, #6
 80046a0:	3301      	adds	r3, #1
 80046a2:	005b      	lsls	r3, r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046a6:	e002      	b.n	80046ae <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	3b01      	subs	r3, #1
 80046ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1f9      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046b4:	e05e      	b.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a3b      	ldr	r2, [pc, #236]	@ (80047a8 <HAL_ADC_ConfigChannel+0xa58>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d120      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x9b2>
 80046c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11a      	bne.n	8004702 <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a30      	ldr	r2, [pc, #192]	@ (8004794 <HAL_ADC_ConfigChannel+0xa44>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d14e      	bne.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a2c      	ldr	r2, [pc, #176]	@ (800478c <HAL_ADC_ConfigChannel+0xa3c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_ADC_ConfigChannel+0x99a>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004790 <HAL_ADC_ConfigChannel+0xa40>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x99e>
 80046ea:	4a2c      	ldr	r2, [pc, #176]	@ (800479c <HAL_ADC_ConfigChannel+0xa4c>)
 80046ec:	e000      	b.n	80046f0 <HAL_ADC_ConfigChannel+0x9a0>
 80046ee:	4a26      	ldr	r2, [pc, #152]	@ (8004788 <HAL_ADC_ConfigChannel+0xa38>)
 80046f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046f8:	4619      	mov	r1, r3
 80046fa:	4610      	mov	r0, r2
 80046fc:	f7fe feed 	bl	80034da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004700:	e038      	b.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a29      	ldr	r2, [pc, #164]	@ (80047ac <HAL_ADC_ConfigChannel+0xa5c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d133      	bne.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
 800470c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004710:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d12d      	bne.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <HAL_ADC_ConfigChannel+0xa44>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d128      	bne.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a19      	ldr	r2, [pc, #100]	@ (800478c <HAL_ADC_ConfigChannel+0xa3c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_ADC_ConfigChannel+0x9e6>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a17      	ldr	r2, [pc, #92]	@ (8004790 <HAL_ADC_ConfigChannel+0xa40>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x9ea>
 8004736:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_ADC_ConfigChannel+0xa4c>)
 8004738:	e000      	b.n	800473c <HAL_ADC_ConfigChannel+0x9ec>
 800473a:	4a13      	ldr	r2, [pc, #76]	@ (8004788 <HAL_ADC_ConfigChannel+0xa38>)
 800473c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f7fe fec7 	bl	80034da <LL_ADC_SetCommonPathInternalCh>
 800474c:	e012      	b.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8004760:	e008      	b.n	8004774 <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004766:	f043 0220 	orr.w	r2, r3, #32
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800477c:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8004780:	4618      	mov	r0, r3
 8004782:	37e4      	adds	r7, #228	@ 0xe4
 8004784:	46bd      	mov	sp, r7
 8004786:	bd90      	pop	{r4, r7, pc}
 8004788:	58026300 	.word	0x58026300
 800478c:	40022000 	.word	0x40022000
 8004790:	40022100 	.word	0x40022100
 8004794:	58026000 	.word	0x58026000
 8004798:	c7520000 	.word	0xc7520000
 800479c:	40022300 	.word	0x40022300
 80047a0:	24000000 	.word	0x24000000
 80047a4:	053e2d63 	.word	0x053e2d63
 80047a8:	c3210000 	.word	0xc3210000
 80047ac:	cb840000 	.word	0xcb840000

080047b0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a6c      	ldr	r2, [pc, #432]	@ (8004970 <ADC_ConfigureBoostMode+0x1c0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <ADC_ConfigureBoostMode+0x1c>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a6b      	ldr	r2, [pc, #428]	@ (8004974 <ADC_ConfigureBoostMode+0x1c4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d109      	bne.n	80047e0 <ADC_ConfigureBoostMode+0x30>
 80047cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004978 <ADC_ConfigureBoostMode+0x1c8>)
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <ADC_ConfigureBoostMode+0x42>
 80047e0:	4b66      	ldr	r3, [pc, #408]	@ (800497c <ADC_ConfigureBoostMode+0x1cc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01c      	beq.n	8004830 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80047f6:	f003 fffd 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 80047fa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004804:	d010      	beq.n	8004828 <ADC_ConfigureBoostMode+0x78>
 8004806:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800480a:	d873      	bhi.n	80048f4 <ADC_ConfigureBoostMode+0x144>
 800480c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004810:	d002      	beq.n	8004818 <ADC_ConfigureBoostMode+0x68>
 8004812:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004816:	d16d      	bne.n	80048f4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	60fb      	str	r3, [r7, #12]
        break;
 8004826:	e068      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	089b      	lsrs	r3, r3, #2
 800482c:	60fb      	str	r3, [r7, #12]
        break;
 800482e:	e064      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004830:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004834:	f04f 0100 	mov.w	r1, #0
 8004838:	f005 fa1a 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800483c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004846:	d051      	beq.n	80048ec <ADC_ConfigureBoostMode+0x13c>
 8004848:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800484c:	d854      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 800484e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004852:	d047      	beq.n	80048e4 <ADC_ConfigureBoostMode+0x134>
 8004854:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004858:	d84e      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 800485a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800485e:	d03d      	beq.n	80048dc <ADC_ConfigureBoostMode+0x12c>
 8004860:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004864:	d848      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 8004866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800486a:	d033      	beq.n	80048d4 <ADC_ConfigureBoostMode+0x124>
 800486c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004870:	d842      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 8004872:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004876:	d029      	beq.n	80048cc <ADC_ConfigureBoostMode+0x11c>
 8004878:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800487c:	d83c      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 800487e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004882:	d01a      	beq.n	80048ba <ADC_ConfigureBoostMode+0x10a>
 8004884:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004888:	d836      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 800488a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800488e:	d014      	beq.n	80048ba <ADC_ConfigureBoostMode+0x10a>
 8004890:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004894:	d830      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800489a:	d00e      	beq.n	80048ba <ADC_ConfigureBoostMode+0x10a>
 800489c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048a0:	d82a      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 80048a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048a6:	d008      	beq.n	80048ba <ADC_ConfigureBoostMode+0x10a>
 80048a8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80048ac:	d824      	bhi.n	80048f8 <ADC_ConfigureBoostMode+0x148>
 80048ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80048b2:	d002      	beq.n	80048ba <ADC_ConfigureBoostMode+0x10a>
 80048b4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80048b8:	d11e      	bne.n	80048f8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	0c9b      	lsrs	r3, r3, #18
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	60fb      	str	r3, [r7, #12]
        break;
 80048ca:	e016      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
        break;
 80048d2:	e012      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	60fb      	str	r3, [r7, #12]
        break;
 80048da:	e00e      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	099b      	lsrs	r3, r3, #6
 80048e0:	60fb      	str	r3, [r7, #12]
        break;
 80048e2:	e00a      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	09db      	lsrs	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
        break;
 80048ea:	e006      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	0a1b      	lsrs	r3, r3, #8
 80048f0:	60fb      	str	r3, [r7, #12]
        break;
 80048f2:	e002      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
        break;
 80048f4:	bf00      	nop
 80048f6:	e000      	b.n	80048fa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80048f8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	085b      	lsrs	r3, r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4a1f      	ldr	r2, [pc, #124]	@ (8004980 <ADC_ConfigureBoostMode+0x1d0>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d808      	bhi.n	800491a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004916:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004918:	e025      	b.n	8004966 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a19      	ldr	r2, [pc, #100]	@ (8004984 <ADC_ConfigureBoostMode+0x1d4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d80a      	bhi.n	8004938 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004934:	609a      	str	r2, [r3, #8]
}
 8004936:	e016      	b.n	8004966 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a13      	ldr	r2, [pc, #76]	@ (8004988 <ADC_ConfigureBoostMode+0x1d8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d80a      	bhi.n	8004956 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004952:	609a      	str	r2, [r3, #8]
}
 8004954:	e007      	b.n	8004966 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004964:	609a      	str	r2, [r3, #8]
}
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40022000 	.word	0x40022000
 8004974:	40022100 	.word	0x40022100
 8004978:	40022300 	.word	0x40022300
 800497c:	58026300 	.word	0x58026300
 8004980:	005f5e10 	.word	0x005f5e10
 8004984:	00bebc20 	.word	0x00bebc20
 8004988:	017d7840 	.word	0x017d7840

0800498c <LL_ADC_IsEnabled>:
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 0301 	and.w	r3, r3, #1
 800499c:	2b01      	cmp	r3, #1
 800499e:	d101      	bne.n	80049a4 <LL_ADC_IsEnabled+0x18>
 80049a0:	2301      	movs	r3, #1
 80049a2:	e000      	b.n	80049a6 <LL_ADC_IsEnabled+0x1a>
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049b2:	b480      	push	{r7}
 80049b4:	b083      	sub	sp, #12
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 0304 	and.w	r3, r3, #4
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d101      	bne.n	80049ca <LL_ADC_REG_IsConversionOngoing+0x18>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e000      	b.n	80049cc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	b0a3      	sub	sp, #140	@ 0x8c
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e0c1      	b.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a5e      	ldr	r2, [pc, #376]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d102      	bne.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a10:	4b5d      	ldr	r3, [pc, #372]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	e001      	b.n	8004a1a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004a16:	2300      	movs	r3, #0
 8004a18:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d10b      	bne.n	8004a38 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0a0      	b.n	8004b7a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff ffb9 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004a40:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff ffb2 	bl	80049b2 <LL_ADC_REG_IsConversionOngoing>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 8081 	bne.w	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a56:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d17c      	bne.n	8004b58 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a48      	ldr	r2, [pc, #288]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d004      	beq.n	8004a72 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a46      	ldr	r2, [pc, #280]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d101      	bne.n	8004a76 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004a72:	4b46      	ldr	r3, [pc, #280]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004a74:	e000      	b.n	8004a78 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004a76:	4b46      	ldr	r3, [pc, #280]	@ (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004a78:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d039      	beq.n	8004af6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004a82:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004a92:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a3a      	ldr	r2, [pc, #232]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d004      	beq.n	8004aa8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a39      	ldr	r2, [pc, #228]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004aa8:	4836      	ldr	r0, [pc, #216]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004aaa:	f7ff ff6f 	bl	800498c <LL_ADC_IsEnabled>
 8004aae:	4604      	mov	r4, r0
 8004ab0:	4835      	ldr	r0, [pc, #212]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ab2:	f7ff ff6b 	bl	800498c <LL_ADC_IsEnabled>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	4323      	orrs	r3, r4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	e008      	b.n	8004ad8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004ac6:	4833      	ldr	r0, [pc, #204]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ac8:	f7ff ff60 	bl	800498c <LL_ADC_IsEnabled>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d047      	beq.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004adc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	6811      	ldr	r1, [r2, #0]
 8004ae8:	683a      	ldr	r2, [r7, #0]
 8004aea:	6892      	ldr	r2, [r2, #8]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	431a      	orrs	r2, r3
 8004af0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004af4:	e03a      	b.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004af6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004afe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b00:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a1f      	ldr	r2, [pc, #124]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10e      	bne.n	8004b34 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004b16:	481b      	ldr	r0, [pc, #108]	@ (8004b84 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004b18:	f7ff ff38 	bl	800498c <LL_ADC_IsEnabled>
 8004b1c:	4604      	mov	r4, r0
 8004b1e:	481a      	ldr	r0, [pc, #104]	@ (8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004b20:	f7ff ff34 	bl	800498c <LL_ADC_IsEnabled>
 8004b24:	4603      	mov	r3, r0
 8004b26:	4323      	orrs	r3, r4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	e008      	b.n	8004b46 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004b34:	4817      	ldr	r0, [pc, #92]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004b36:	f7ff ff29 	bl	800498c <LL_ADC_IsEnabled>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bf0c      	ite	eq
 8004b40:	2301      	moveq	r3, #1
 8004b42:	2300      	movne	r3, #0
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	4b12      	ldr	r3, [pc, #72]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004b50:	4013      	ands	r3, r2
 8004b52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004b54:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b56:	e009      	b.n	8004b6c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8004b6a:	e000      	b.n	8004b6e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b76:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	378c      	adds	r7, #140	@ 0x8c
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd90      	pop	{r4, r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40022100 	.word	0x40022100
 8004b8c:	40022300 	.word	0x40022300
 8004b90:	58026300 	.word	0x58026300
 8004b94:	58026000 	.word	0x58026000
 8004b98:	fffff0e0 	.word	0xfffff0e0

08004b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <__NVIC_SetPriorityGrouping+0x40>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bb8:	4013      	ands	r3, r2
 8004bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bc4:	4b06      	ldr	r3, [pc, #24]	@ (8004be0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bca:	4a04      	ldr	r2, [pc, #16]	@ (8004bdc <__NVIC_SetPriorityGrouping+0x40>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	60d3      	str	r3, [r2, #12]
}
 8004bd0:	bf00      	nop
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr
 8004bdc:	e000ed00 	.word	0xe000ed00
 8004be0:	05fa0000 	.word	0x05fa0000

08004be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004be4:	b480      	push	{r7}
 8004be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <__NVIC_GetPriorityGrouping+0x18>)
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	0a1b      	lsrs	r3, r3, #8
 8004bee:	f003 0307 	and.w	r3, r3, #7
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr
 8004bfc:	e000ed00 	.word	0xe000ed00

08004c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	4603      	mov	r3, r0
 8004c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	db0b      	blt.n	8004c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	f003 021f 	and.w	r2, r3, #31
 8004c18:	4907      	ldr	r1, [pc, #28]	@ (8004c38 <__NVIC_EnableIRQ+0x38>)
 8004c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	2001      	movs	r0, #1
 8004c22:	fa00 f202 	lsl.w	r2, r0, r2
 8004c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	e000e100 	.word	0xe000e100

08004c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	6039      	str	r1, [r7, #0]
 8004c46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db0a      	blt.n	8004c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	490c      	ldr	r1, [pc, #48]	@ (8004c88 <__NVIC_SetPriority+0x4c>)
 8004c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	b2d2      	uxtb	r2, r2
 8004c5e:	440b      	add	r3, r1
 8004c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c64:	e00a      	b.n	8004c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	b2da      	uxtb	r2, r3
 8004c6a:	4908      	ldr	r1, [pc, #32]	@ (8004c8c <__NVIC_SetPriority+0x50>)
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	3b04      	subs	r3, #4
 8004c74:	0112      	lsls	r2, r2, #4
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	440b      	add	r3, r1
 8004c7a:	761a      	strb	r2, [r3, #24]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	e000e100 	.word	0xe000e100
 8004c8c:	e000ed00 	.word	0xe000ed00

08004c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b089      	sub	sp, #36	@ 0x24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	f1c3 0307 	rsb	r3, r3, #7
 8004caa:	2b04      	cmp	r3, #4
 8004cac:	bf28      	it	cs
 8004cae:	2304      	movcs	r3, #4
 8004cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	3304      	adds	r3, #4
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d902      	bls.n	8004cc0 <NVIC_EncodePriority+0x30>
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3b03      	subs	r3, #3
 8004cbe:	e000      	b.n	8004cc2 <NVIC_EncodePriority+0x32>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	fa02 f303 	lsl.w	r3, r2, r3
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	401a      	ands	r2, r3
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	43d9      	mvns	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ce8:	4313      	orrs	r3, r2
         );
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3724      	adds	r7, #36	@ 0x24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff4c 	bl	8004b9c <__NVIC_SetPriorityGrouping>
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
 8004d18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d1a:	f7ff ff63 	bl	8004be4 <__NVIC_GetPriorityGrouping>
 8004d1e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	6978      	ldr	r0, [r7, #20]
 8004d26:	f7ff ffb3 	bl	8004c90 <NVIC_EncodePriority>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f7ff ff82 	bl	8004c3c <__NVIC_SetPriority>
}
 8004d38:	bf00      	nop
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff56 	bl	8004c00 <__NVIC_EnableIRQ>
}
 8004d54:	bf00      	nop
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e014      	b.n	8004d98 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	791b      	ldrb	r3, [r3, #4]
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d105      	bne.n	8004d84 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fb ff12 	bl	8000ba8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01d      	beq.n	8004dfe <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d018      	beq.n	8004dfe <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2204      	movs	r2, #4
 8004dd0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004de6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004df6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f827 	bl	8004e4c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d018      	beq.n	8004e44 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f043 0202 	orr.w	r2, r3, #2
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e2c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f950 	bl	80050e4 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08a      	sub	sp, #40	@ 0x28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_DAC_ConfigChannel+0x1e>
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e12a      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	795b      	ldrb	r3, [r3, #5]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d101      	bne.n	8004e8e <HAL_DAC_ConfigChannel+0x2e>
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	e124      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x278>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2202      	movs	r2, #2
 8004e98:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d17a      	bne.n	8004f98 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004ea2:	f7fe fad1 	bl	8003448 <HAL_GetTick>
 8004ea6:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d13d      	bne.n	8004f2a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004eae:	e018      	b.n	8004ee2 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004eb0:	f7fe faca 	bl	8003448 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d911      	bls.n	8004ee2 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ec4:	4b86      	ldr	r3, [pc, #536]	@ (80050e0 <HAL_DAC_ConfigChannel+0x280>)
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f043 0208 	orr.w	r2, r3, #8
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2203      	movs	r2, #3
 8004edc:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e0fa      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ee8:	4b7d      	ldr	r3, [pc, #500]	@ (80050e0 <HAL_DAC_ConfigChannel+0x280>)
 8004eea:	4013      	ands	r3, r2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1df      	bne.n	8004eb0 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	6992      	ldr	r2, [r2, #24]
 8004ef8:	641a      	str	r2, [r3, #64]	@ 0x40
 8004efa:	e020      	b.n	8004f3e <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004efc:	f7fe faa4 	bl	8003448 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d90f      	bls.n	8004f2a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	da0a      	bge.n	8004f2a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	f043 0208 	orr.w	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2203      	movs	r2, #3
 8004f24:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e0d6      	b.n	80050d8 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	dbe3      	blt.n	8004efc <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	6992      	ldr	r2, [r2, #24]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	43db      	mvns	r3, r3
 8004f54:	ea02 0103 	and.w	r1, r2, r3
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f003 0310 	and.w	r3, r3, #16
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f003 0310 	and.w	r3, r3, #16
 8004f78:	21ff      	movs	r1, #255	@ 0xff
 8004f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	ea02 0103 	and.w	r1, r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6a1a      	ldr	r2, [r3, #32]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	409a      	lsls	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d11d      	bne.n	8004fdc <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fa6:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	221f      	movs	r2, #31
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f003 0310 	and.w	r3, r3, #16
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	fa02 f303 	lsl.w	r3, r2, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fe2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2207      	movs	r2, #7
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d102      	bne.n	8005006 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005000:	2300      	movs	r3, #0
 8005002:	627b      	str	r3, [r7, #36]	@ 0x24
 8005004:	e00f      	b.n	8005026 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d102      	bne.n	8005014 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800500e:	2301      	movs	r3, #1
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
 8005012:	e008      	b.n	8005026 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d102      	bne.n	8005022 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800501c:	2301      	movs	r3, #1
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005020:	e001      	b.n	8005026 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005022:	2300      	movs	r3, #0
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005026:	68bb      	ldr	r3, [r7, #8]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f003 0310 	and.w	r3, r3, #16
 800503c:	697a      	ldr	r2, [r7, #20]
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	69ba      	ldr	r2, [r7, #24]
 800504e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6819      	ldr	r1, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005060:	fa02 f303 	lsl.w	r3, r2, r3
 8005064:	43da      	mvns	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	400a      	ands	r2, r1
 800506c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8005080:	fa02 f303 	lsl.w	r3, r2, r3
 8005084:	43db      	mvns	r3, r3
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4013      	ands	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	6819      	ldr	r1, [r3, #0]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0310 	and.w	r3, r3, #16
 80050b8:	22c0      	movs	r2, #192	@ 0xc0
 80050ba:	fa02 f303 	lsl.w	r3, r2, r3
 80050be:	43da      	mvns	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	400a      	ands	r2, r1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80050d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3728      	adds	r7, #40	@ 0x28
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	20008000 	.word	0x20008000

080050e4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0e3      	b.n	80052d2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2223      	movs	r2, #35	@ 0x23
 8005118:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fb fddd 	bl	8000cdc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005122:	4b6e      	ldr	r3, [pc, #440]	@ (80052dc <HAL_ETH_Init+0x1e4>)
 8005124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005128:	4a6c      	ldr	r2, [pc, #432]	@ (80052dc <HAL_ETH_Init+0x1e4>)
 800512a:	f043 0302 	orr.w	r3, r3, #2
 800512e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005132:	4b6a      	ldr	r3, [pc, #424]	@ (80052dc <HAL_ETH_Init+0x1e4>)
 8005134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	60bb      	str	r3, [r7, #8]
 800513e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	7a1b      	ldrb	r3, [r3, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d103      	bne.n	8005150 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005148:	2000      	movs	r0, #0
 800514a:	f7fe f989 	bl	8003460 <HAL_SYSCFG_ETHInterfaceSelect>
 800514e:	e003      	b.n	8005158 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005150:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8005154:	f7fe f984 	bl	8003460 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005158:	4b61      	ldr	r3, [pc, #388]	@ (80052e0 <HAL_ETH_Init+0x1e8>)
 800515a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6812      	ldr	r2, [r2, #0]
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005172:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005174:	f7fe f968 	bl	8003448 <HAL_GetTick>
 8005178:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800517a:	e011      	b.n	80051a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800517c:	f7fe f964 	bl	8003448 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800518a:	d909      	bls.n	80051a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2204      	movs	r2, #4
 8005190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	22e0      	movs	r2, #224	@ 0xe0
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e098      	b.n	80052d2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e4      	bne.n	800517c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f89e 	bl	80052f4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80051b8:	f003 fb1c 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 80051bc:	4603      	mov	r3, r0
 80051be:	4a49      	ldr	r2, [pc, #292]	@ (80052e4 <HAL_ETH_Init+0x1ec>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	0c9a      	lsrs	r2, r3, #18
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3a01      	subs	r2, #1
 80051cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 fa81 	bl	80056d8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80051e2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	6812      	ldr	r2, [r2, #0]
 80051ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80051f2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	22e0      	movs	r2, #224	@ 0xe0
 800520e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e05d      	b.n	80052d2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8005222:	4b31      	ldr	r3, [pc, #196]	@ (80052e8 <HAL_ETH_Init+0x1f0>)
 8005224:	4013      	ands	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6952      	ldr	r2, [r2, #20]
 800522a:	0051      	lsls	r1, r2, #1
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	430b      	orrs	r3, r1
 8005232:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005236:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fae9 	bl	8005812 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fb2f 	bl	80058a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	3305      	adds	r3, #5
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	021a      	lsls	r2, r3, #8
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	3304      	adds	r3, #4
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	4619      	mov	r1, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	430a      	orrs	r2, r1
 8005260:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	3303      	adds	r3, #3
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	061a      	lsls	r2, r3, #24
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	3302      	adds	r3, #2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	041b      	lsls	r3, r3, #16
 8005278:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005284:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005292:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005294:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b11      	ldr	r3, [pc, #68]	@ (80052ec <HAL_ETH_Init+0x1f4>)
 80052a6:	430b      	orrs	r3, r1
 80052a8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <HAL_ETH_Init+0x1f8>)
 80052ba:	430b      	orrs	r3, r1
 80052bc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2210      	movs	r2, #16
 80052cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	58024400 	.word	0x58024400
 80052e0:	58000400 	.word	0x58000400
 80052e4:	431bde83 	.word	0x431bde83
 80052e8:	ffff8001 	.word	0xffff8001
 80052ec:	0c020060 	.word	0x0c020060
 80052f0:	0c20c000 	.word	0x0c20c000

080052f4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005304:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800530c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800530e:	f003 fa71 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8005312:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4a1a      	ldr	r2, [pc, #104]	@ (8005380 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d804      	bhi.n	8005326 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e022      	b.n	800536c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <HAL_ETH_SetMDIOClockRange+0x90>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d204      	bcs.n	8005338 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	e019      	b.n	800536c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4a13      	ldr	r2, [pc, #76]	@ (8005388 <HAL_ETH_SetMDIOClockRange+0x94>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d915      	bls.n	800536c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	4a12      	ldr	r2, [pc, #72]	@ (800538c <HAL_ETH_SetMDIOClockRange+0x98>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d804      	bhi.n	8005352 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	e00c      	b.n	800536c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a0e      	ldr	r2, [pc, #56]	@ (8005390 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d804      	bhi.n	8005364 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	e003      	b.n	800536c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800536a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	02160ebf 	.word	0x02160ebf
 8005384:	03938700 	.word	0x03938700
 8005388:	05f5e0ff 	.word	0x05f5e0ff
 800538c:	08f0d17f 	.word	0x08f0d17f
 8005390:	0ee6b27f 	.word	0x0ee6b27f

08005394 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80053a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	791b      	ldrb	r3, [r3, #4]
 80053ac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80053ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	7b1b      	ldrb	r3, [r3, #12]
 80053b4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80053b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	7b5b      	ldrb	r3, [r3, #13]
 80053bc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80053be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7b9b      	ldrb	r3, [r3, #14]
 80053c4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80053c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	7bdb      	ldrb	r3, [r3, #15]
 80053cc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80053ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	7c12      	ldrb	r2, [r2, #16]
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d102      	bne.n	80053de <ETH_SetMACConfig+0x4a>
 80053d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80053dc:	e000      	b.n	80053e0 <ETH_SetMACConfig+0x4c>
 80053de:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80053e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	7c52      	ldrb	r2, [r2, #17]
 80053e6:	2a00      	cmp	r2, #0
 80053e8:	d102      	bne.n	80053f0 <ETH_SetMACConfig+0x5c>
 80053ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053ee:	e000      	b.n	80053f2 <ETH_SetMACConfig+0x5e>
 80053f0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80053f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	7c9b      	ldrb	r3, [r3, #18]
 80053f8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80053fa:	431a      	orrs	r2, r3
               macconf->Speed |
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005400:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	7f1b      	ldrb	r3, [r3, #28]
 800540c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800540e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	7f5b      	ldrb	r3, [r3, #29]
 8005414:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005416:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	7f92      	ldrb	r2, [r2, #30]
 800541c:	2a00      	cmp	r2, #0
 800541e:	d102      	bne.n	8005426 <ETH_SetMACConfig+0x92>
 8005420:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005424:	e000      	b.n	8005428 <ETH_SetMACConfig+0x94>
 8005426:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005428:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	7fdb      	ldrb	r3, [r3, #31]
 800542e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005430:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005432:	683a      	ldr	r2, [r7, #0]
 8005434:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005438:	2a00      	cmp	r2, #0
 800543a:	d102      	bne.n	8005442 <ETH_SetMACConfig+0xae>
 800543c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005440:	e000      	b.n	8005444 <ETH_SetMACConfig+0xb0>
 8005442:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005444:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800544a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005452:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005454:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	4b56      	ldr	r3, [pc, #344]	@ (80055c0 <ETH_SetMACConfig+0x22c>)
 8005466:	4013      	ands	r3, r2
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	6812      	ldr	r2, [r2, #0]
 800546c:	68f9      	ldr	r1, [r7, #12]
 800546e:	430b      	orrs	r3, r1
 8005470:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005476:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800547e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005480:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005488:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800548a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005492:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005494:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800549c:	2a00      	cmp	r2, #0
 800549e:	d102      	bne.n	80054a6 <ETH_SetMACConfig+0x112>
 80054a0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80054a4:	e000      	b.n	80054a8 <ETH_SetMACConfig+0x114>
 80054a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80054a8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	4b42      	ldr	r3, [pc, #264]	@ (80055c4 <ETH_SetMACConfig+0x230>)
 80054ba:	4013      	ands	r3, r2
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	68f9      	ldr	r1, [r7, #12]
 80054c2:	430b      	orrs	r3, r1
 80054c4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054cc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	4b3a      	ldr	r3, [pc, #232]	@ (80055c8 <ETH_SetMACConfig+0x234>)
 80054de:	4013      	ands	r3, r2
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	6812      	ldr	r2, [r2, #0]
 80054e4:	68f9      	ldr	r1, [r7, #12]
 80054e6:	430b      	orrs	r3, r1
 80054e8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80054f0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80054f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80054fe:	2a00      	cmp	r2, #0
 8005500:	d101      	bne.n	8005506 <ETH_SetMACConfig+0x172>
 8005502:	2280      	movs	r2, #128	@ 0x80
 8005504:	e000      	b.n	8005508 <ETH_SetMACConfig+0x174>
 8005506:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005508:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800550e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800551a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	68f9      	ldr	r1, [r7, #12]
 8005526:	430b      	orrs	r3, r1
 8005528:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005530:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005538:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005546:	f023 0103 	bic.w	r1, r3, #3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	430a      	orrs	r2, r1
 8005552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800555e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800557a:	2a00      	cmp	r2, #0
 800557c:	d101      	bne.n	8005582 <ETH_SetMACConfig+0x1ee>
 800557e:	2240      	movs	r2, #64	@ 0x40
 8005580:	e000      	b.n	8005584 <ETH_SetMACConfig+0x1f0>
 8005582:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005584:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800558c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800558e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8005596:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80055a4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80055b4:	bf00      	nop
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	00048083 	.word	0x00048083
 80055c4:	c0f88000 	.word	0xc0f88000
 80055c8:	fffffef0 	.word	0xfffffef0

080055cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b38      	ldr	r3, [pc, #224]	@ (80056c4 <ETH_SetDMAConfig+0xf8>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	683a      	ldr	r2, [r7, #0]
 80055e6:	6811      	ldr	r1, [r2, #0]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80055f2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	791b      	ldrb	r3, [r3, #4]
 80055f8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80055fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	7b1b      	ldrb	r3, [r3, #12]
 8005604:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	4b2c      	ldr	r3, [pc, #176]	@ (80056c8 <ETH_SetDMAConfig+0xfc>)
 8005616:	4013      	ands	r3, r2
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	68f9      	ldr	r1, [r7, #12]
 800561e:	430b      	orrs	r3, r1
 8005620:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005624:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	7b5b      	ldrb	r3, [r3, #13]
 800562a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800563c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005640:	4b22      	ldr	r3, [pc, #136]	@ (80056cc <ETH_SetDMAConfig+0x100>)
 8005642:	4013      	ands	r3, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6812      	ldr	r2, [r2, #0]
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	430b      	orrs	r3, r1
 800564c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005650:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	7d1b      	ldrb	r3, [r3, #20]
 800565c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800565e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	7f5b      	ldrb	r3, [r3, #29]
 8005664:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005672:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8005676:	4b16      	ldr	r3, [pc, #88]	@ (80056d0 <ETH_SetDMAConfig+0x104>)
 8005678:	4013      	ands	r3, r2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	6812      	ldr	r2, [r2, #0]
 800567e:	68f9      	ldr	r1, [r7, #12]
 8005680:	430b      	orrs	r3, r1
 8005682:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005686:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	7f1b      	ldrb	r3, [r3, #28]
 800568e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005694:	4313      	orrs	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80056a0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80056a4:	4b0b      	ldr	r3, [pc, #44]	@ (80056d4 <ETH_SetDMAConfig+0x108>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	430b      	orrs	r3, r1
 80056b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80056b4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80056b8:	bf00      	nop
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	ffff87fd 	.word	0xffff87fd
 80056c8:	ffff2ffe 	.word	0xffff2ffe
 80056cc:	fffec000 	.word	0xfffec000
 80056d0:	ffc0efef 	.word	0xffc0efef
 80056d4:	7fc0ffff 	.word	0x7fc0ffff

080056d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b0a4      	sub	sp, #144	@ 0x90
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80056e6:	2300      	movs	r3, #0
 80056e8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80056ea:	2300      	movs	r3, #0
 80056ec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80056f0:	2300      	movs	r3, #0
 80056f2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80056f6:	2301      	movs	r3, #1
 80056f8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800570e:	2301      	movs	r3, #1
 8005710:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8005720:	2300      	movs	r3, #0
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800572a:	2300      	movs	r3, #0
 800572c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8005730:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8005734:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005736:	2300      	movs	r3, #0
 8005738:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800573c:	2300      	movs	r3, #0
 800573e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005740:	2301      	movs	r3, #1
 8005742:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005746:	2300      	movs	r3, #0
 8005748:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005752:	2300      	movs	r3, #0
 8005754:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005756:	2300      	movs	r3, #0
 8005758:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800575a:	2300      	movs	r3, #0
 800575c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800575e:	2300      	movs	r3, #0
 8005760:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005764:	2300      	movs	r3, #0
 8005766:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005770:	2320      	movs	r3, #32
 8005772:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800577c:	2300      	movs	r3, #0
 800577e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005782:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005788:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800578c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800578e:	2300      	movs	r3, #0
 8005790:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005794:	2302      	movs	r3, #2
 8005796:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800579a:	2300      	movs	r3, #0
 800579c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80057ac:	2301      	movs	r3, #1
 80057ae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80057b2:	2300      	movs	r3, #0
 80057b4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80057bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7ff fde6 	bl	8005394 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80057c8:	2301      	movs	r3, #1
 80057ca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80057cc:	2301      	movs	r3, #1
 80057ce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80057d4:	2300      	movs	r3, #0
 80057d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80057da:	2300      	movs	r3, #0
 80057dc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80057de:	2300      	movs	r3, #0
 80057e0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80057e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057e6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80057e8:	2300      	movs	r3, #0
 80057ea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80057ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80057f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80057f8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80057fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80057fe:	f107 0308 	add.w	r3, r7, #8
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f7ff fee1 	bl	80055cc <ETH_SetDMAConfig>
}
 800580a:	bf00      	nop
 800580c:	3790      	adds	r7, #144	@ 0x90
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
 800581e:	e01d      	b.n	800585c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	4613      	mov	r3, r2
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	4413      	add	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	440b      	add	r3, r1
 8005830:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	2200      	movs	r2, #0
 800583c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2200      	movs	r2, #0
 8005842:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800584a:	68b9      	ldr	r1, [r7, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	3206      	adds	r2, #6
 8005852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3301      	adds	r3, #1
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2b03      	cmp	r3, #3
 8005860:	d9de      	bls.n	8005820 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005870:	461a      	mov	r2, r3
 8005872:	2303      	movs	r3, #3
 8005874:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005884:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68da      	ldr	r2, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005894:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005898:	bf00      	nop
 800589a:	3714      	adds	r7, #20
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	e023      	b.n	80058fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6919      	ldr	r1, [r3, #16]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	4613      	mov	r3, r2
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	4413      	add	r3, r2
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	440b      	add	r3, r1
 80058c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	2200      	movs	r2, #0
 80058d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2200      	movs	r2, #0
 80058da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2200      	movs	r2, #0
 80058e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2200      	movs	r2, #0
 80058e6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	3212      	adds	r2, #18
 80058f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d9d8      	bls.n	80058b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005926:	461a      	mov	r2, r3
 8005928:	2303      	movs	r3, #3
 800592a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691a      	ldr	r2, [r3, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	691b      	ldr	r3, [r3, #16]
 8005942:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005952:	bf00      	nop
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b098      	sub	sp, #96	@ 0x60
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005968:	4a84      	ldr	r2, [pc, #528]	@ (8005b7c <HAL_FDCAN_Init+0x21c>)
 800596a:	f107 030c 	add.w	r3, r7, #12
 800596e:	4611      	mov	r1, r2
 8005970:	224c      	movs	r2, #76	@ 0x4c
 8005972:	4618      	mov	r0, r3
 8005974:	f00c f9df 	bl	8011d36 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e1c6      	b.n	8005d10 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a7e      	ldr	r2, [pc, #504]	@ (8005b80 <HAL_FDCAN_Init+0x220>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d106      	bne.n	800599a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8005994:	461a      	mov	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7fb fb08 	bl	8000fc4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0210 	bic.w	r2, r2, #16
 80059c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059c4:	f7fd fd40 	bl	8003448 <HAL_GetTick>
 80059c8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059ca:	e014      	b.n	80059f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80059cc:	f7fd fd3c 	bl	8003448 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b0a      	cmp	r3, #10
 80059d8:	d90d      	bls.n	80059f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80059e0:	f043 0201 	orr.w	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2203      	movs	r2, #3
 80059ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e18c      	b.n	8005d10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	f003 0308 	and.w	r3, r3, #8
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d0e3      	beq.n	80059cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699a      	ldr	r2, [r3, #24]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 0201 	orr.w	r2, r2, #1
 8005a12:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a14:	f7fd fd18 	bl	8003448 <HAL_GetTick>
 8005a18:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a1a:	e014      	b.n	8005a46 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005a1c:	f7fd fd14 	bl	8003448 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b0a      	cmp	r3, #10
 8005a28:	d90d      	bls.n	8005a46 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a30:	f043 0201 	orr.w	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e164      	b.n	8005d10 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0e3      	beq.n	8005a1c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f042 0202 	orr.w	r2, r2, #2
 8005a62:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7c1b      	ldrb	r3, [r3, #16]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d108      	bne.n	8005a7e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a7a:	619a      	str	r2, [r3, #24]
 8005a7c:	e007      	b.n	8005a8e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699a      	ldr	r2, [r3, #24]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a8c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	7c5b      	ldrb	r3, [r3, #17]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d108      	bne.n	8005aa8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	699a      	ldr	r2, [r3, #24]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005aa4:	619a      	str	r2, [r3, #24]
 8005aa6:	e007      	b.n	8005ab8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699a      	ldr	r2, [r3, #24]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ab6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	7c9b      	ldrb	r3, [r3, #18]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d108      	bne.n	8005ad2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	699a      	ldr	r2, [r3, #24]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ace:	619a      	str	r2, [r3, #24]
 8005ad0:	e007      	b.n	8005ae2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	699a      	ldr	r2, [r3, #24]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005ae0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005b06:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0210 	bic.w	r2, r2, #16
 8005b16:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d108      	bne.n	8005b32 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0204 	orr.w	r2, r2, #4
 8005b2e:	619a      	str	r2, [r3, #24]
 8005b30:	e030      	b.n	8005b94 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d02c      	beq.n	8005b94 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d020      	beq.n	8005b84 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699a      	ldr	r2, [r3, #24]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b50:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f042 0210 	orr.w	r2, r2, #16
 8005b60:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b03      	cmp	r3, #3
 8005b68:	d114      	bne.n	8005b94 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0220 	orr.w	r2, r2, #32
 8005b78:	619a      	str	r2, [r3, #24]
 8005b7a:	e00b      	b.n	8005b94 <HAL_FDCAN_Init+0x234>
 8005b7c:	08013d28 	.word	0x08013d28
 8005b80:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0220 	orr.w	r2, r2, #32
 8005b92:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699b      	ldr	r3, [r3, #24]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ba4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005bac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005bbc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005bbe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc8:	d115      	bne.n	8005bf6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bd8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	3b01      	subs	r3, #1
 8005be0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005be2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	3b01      	subs	r3, #1
 8005bec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005bf2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005bf4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c1c:	4413      	add	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d011      	beq.n	8005c46 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005c2a:	f023 0107 	bic.w	r1, r3, #7
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	3360      	adds	r3, #96	@ 0x60
 8005c36:	443b      	add	r3, r7
 8005c38:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d011      	beq.n	8005c72 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c56:	f023 0107 	bic.w	r1, r3, #7
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	3360      	adds	r3, #96	@ 0x60
 8005c62:	443b      	add	r3, r7
 8005c64:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d012      	beq.n	8005ca0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c82:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	3360      	adds	r3, #96	@ 0x60
 8005c8e:	443b      	add	r3, r7
 8005c90:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005c94:	011a      	lsls	r2, r3, #4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d012      	beq.n	8005cce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005cb0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	3360      	adds	r3, #96	@ 0x60
 8005cbc:	443b      	add	r3, r7
 8005cbe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a11      	ldr	r2, [pc, #68]	@ (8005d18 <HAL_FDCAN_Init+0x3b8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d107      	bne.n	8005ce8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	f022 0203 	bic.w	r2, r2, #3
 8005ce6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f80b 	bl	8005d1c <FDCAN_CalcultateRamBlockAddresses>
 8005d06:	4603      	mov	r3, r0
 8005d08:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8005d0c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3760      	adds	r7, #96	@ 0x60
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	4000a000 	.word	0x4000a000

08005d1c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d28:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005d32:	4ba7      	ldr	r3, [pc, #668]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	0091      	lsls	r1, r2, #2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005d4c:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	041a      	lsls	r2, r3, #16
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	4413      	add	r3, r2
 8005d68:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005d72:	4b97      	ldr	r3, [pc, #604]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	0091      	lsls	r1, r2, #2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6812      	ldr	r2, [r2, #0]
 8005d7e:	430b      	orrs	r3, r1
 8005d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d8c:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d94:	041a      	lsls	r2, r3, #16
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	4413      	add	r3, r2
 8005daa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8005db4:	4b86      	ldr	r3, [pc, #536]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	0091      	lsls	r1, r2, #2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	430b      	orrs	r3, r1
 8005dc2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005dce:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd6:	041a      	lsls	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005dea:	fb02 f303 	mul.w	r3, r2, r3
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4413      	add	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005dfc:	4b74      	ldr	r3, [pc, #464]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005dfe:	4013      	ands	r3, r2
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	0091      	lsls	r1, r2, #2
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e16:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1e:	041a      	lsls	r2, r3, #16
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8005e44:	4b62      	ldr	r3, [pc, #392]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e46:	4013      	ands	r3, r2
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	0091      	lsls	r1, r2, #2
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	6812      	ldr	r2, [r2, #0]
 8005e50:	430b      	orrs	r3, r1
 8005e52:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	68ba      	ldr	r2, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8005e70:	4b57      	ldr	r3, [pc, #348]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e72:	4013      	ands	r3, r2
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	0091      	lsls	r1, r2, #2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	430b      	orrs	r3, r1
 8005e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005e8a:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e92:	041a      	lsls	r2, r3, #16
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8005eb2:	4b47      	ldr	r3, [pc, #284]	@ (8005fd0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	0091      	lsls	r1, r2, #2
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ecc:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ed4:	041a      	lsls	r2, r3, #16
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ee8:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef0:	061a      	lsls	r2, r3, #24
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f00:	4b34      	ldr	r3, [pc, #208]	@ (8005fd4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005f02:	4413      	add	r3, r2
 8005f04:	009a      	lsls	r2, r3, #2
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8005f36:	fb01 f303 	mul.w	r3, r1, r3
 8005f3a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8005f3c:	441a      	add	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f4a:	6879      	ldr	r1, [r7, #4]
 8005f4c:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8005f4e:	fb01 f303 	mul.w	r3, r1, r3
 8005f52:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8005f54:	441a      	add	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f62:	6879      	ldr	r1, [r7, #4]
 8005f64:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8005f66:	fb01 f303 	mul.w	r3, r1, r3
 8005f6a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8005f6c:	441a      	add	r2, r3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	441a      	add	r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005f96:	fb01 f303 	mul.w	r3, r1, r3
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	441a      	add	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8005fb2:	fb01 f303 	mul.w	r3, r1, r3
 8005fb6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8005fb8:	441a      	add	r2, r3
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005fc6:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d915      	bls.n	8005ff8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005fcc:	e006      	b.n	8005fdc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005fce:	bf00      	nop
 8005fd0:	ffff0003 	.word	0xffff0003
 8005fd4:	10002b00 	.word	0x10002b00
 8005fd8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2203      	movs	r2, #3
 8005ff0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e010      	b.n	800601a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	e005      	b.n	800600c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	429a      	cmp	r2, r3
 8006016:	d3f3      	bcc.n	8006000 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop

08006028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006028:	b480      	push	{r7}
 800602a:	b089      	sub	sp, #36	@ 0x24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006036:	4b86      	ldr	r3, [pc, #536]	@ (8006250 <HAL_GPIO_Init+0x228>)
 8006038:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800603a:	e18c      	b.n	8006356 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	2101      	movs	r1, #1
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	fa01 f303 	lsl.w	r3, r1, r3
 8006048:	4013      	ands	r3, r2
 800604a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 817e 	beq.w	8006350 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	f003 0303 	and.w	r3, r3, #3
 800605c:	2b01      	cmp	r3, #1
 800605e:	d005      	beq.n	800606c <HAL_GPIO_Init+0x44>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	2b02      	cmp	r3, #2
 800606a:	d130      	bne.n	80060ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	2203      	movs	r2, #3
 8006078:	fa02 f303 	lsl.w	r3, r2, r3
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69ba      	ldr	r2, [r7, #24]
 800609a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060a2:	2201      	movs	r2, #1
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	091b      	lsrs	r3, r3, #4
 80060b8:	f003 0201 	and.w	r2, r3, #1
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d017      	beq.n	800610a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	005b      	lsls	r3, r3, #1
 80060e4:	2203      	movs	r2, #3
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	43db      	mvns	r3, r3
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	4013      	ands	r3, r2
 80060f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	69ba      	ldr	r2, [r7, #24]
 8006100:	4313      	orrs	r3, r2
 8006102:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b02      	cmp	r3, #2
 8006114:	d123      	bne.n	800615e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	08da      	lsrs	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	3208      	adds	r2, #8
 800611e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	220f      	movs	r2, #15
 800612e:	fa02 f303 	lsl.w	r3, r2, r3
 8006132:	43db      	mvns	r3, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4013      	ands	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	f003 0307 	and.w	r3, r3, #7
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	08da      	lsrs	r2, r3, #3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	3208      	adds	r2, #8
 8006158:	69b9      	ldr	r1, [r7, #24]
 800615a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	2203      	movs	r2, #3
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	69ba      	ldr	r2, [r7, #24]
 8006172:	4013      	ands	r3, r2
 8006174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f003 0203 	and.w	r2, r3, #3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	4313      	orrs	r3, r2
 800618a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	69ba      	ldr	r2, [r7, #24]
 8006190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800619a:	2b00      	cmp	r3, #0
 800619c:	f000 80d8 	beq.w	8006350 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006254 <HAL_GPIO_Init+0x22c>)
 80061a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006254 <HAL_GPIO_Init+0x22c>)
 80061a8:	f043 0302 	orr.w	r3, r3, #2
 80061ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <HAL_GPIO_Init+0x22c>)
 80061b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061b6:	f003 0302 	and.w	r3, r3, #2
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061be:	4a26      	ldr	r2, [pc, #152]	@ (8006258 <HAL_GPIO_Init+0x230>)
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	3302      	adds	r3, #2
 80061c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	220f      	movs	r2, #15
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4013      	ands	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1d      	ldr	r2, [pc, #116]	@ (800625c <HAL_GPIO_Init+0x234>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d04a      	beq.n	8006280 <HAL_GPIO_Init+0x258>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1c      	ldr	r2, [pc, #112]	@ (8006260 <HAL_GPIO_Init+0x238>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02b      	beq.n	800624a <HAL_GPIO_Init+0x222>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006264 <HAL_GPIO_Init+0x23c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d025      	beq.n	8006246 <HAL_GPIO_Init+0x21e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006268 <HAL_GPIO_Init+0x240>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d01f      	beq.n	8006242 <HAL_GPIO_Init+0x21a>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a19      	ldr	r2, [pc, #100]	@ (800626c <HAL_GPIO_Init+0x244>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d019      	beq.n	800623e <HAL_GPIO_Init+0x216>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a18      	ldr	r2, [pc, #96]	@ (8006270 <HAL_GPIO_Init+0x248>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d013      	beq.n	800623a <HAL_GPIO_Init+0x212>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a17      	ldr	r2, [pc, #92]	@ (8006274 <HAL_GPIO_Init+0x24c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d00d      	beq.n	8006236 <HAL_GPIO_Init+0x20e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a16      	ldr	r2, [pc, #88]	@ (8006278 <HAL_GPIO_Init+0x250>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d007      	beq.n	8006232 <HAL_GPIO_Init+0x20a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a15      	ldr	r2, [pc, #84]	@ (800627c <HAL_GPIO_Init+0x254>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d101      	bne.n	800622e <HAL_GPIO_Init+0x206>
 800622a:	2309      	movs	r3, #9
 800622c:	e029      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 800622e:	230a      	movs	r3, #10
 8006230:	e027      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 8006232:	2307      	movs	r3, #7
 8006234:	e025      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 8006236:	2306      	movs	r3, #6
 8006238:	e023      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 800623a:	2305      	movs	r3, #5
 800623c:	e021      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 800623e:	2304      	movs	r3, #4
 8006240:	e01f      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 8006242:	2303      	movs	r3, #3
 8006244:	e01d      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 8006246:	2302      	movs	r3, #2
 8006248:	e01b      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 800624a:	2301      	movs	r3, #1
 800624c:	e019      	b.n	8006282 <HAL_GPIO_Init+0x25a>
 800624e:	bf00      	nop
 8006250:	58000080 	.word	0x58000080
 8006254:	58024400 	.word	0x58024400
 8006258:	58000400 	.word	0x58000400
 800625c:	58020000 	.word	0x58020000
 8006260:	58020400 	.word	0x58020400
 8006264:	58020800 	.word	0x58020800
 8006268:	58020c00 	.word	0x58020c00
 800626c:	58021000 	.word	0x58021000
 8006270:	58021400 	.word	0x58021400
 8006274:	58021800 	.word	0x58021800
 8006278:	58021c00 	.word	0x58021c00
 800627c:	58022400 	.word	0x58022400
 8006280:	2300      	movs	r3, #0
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	f002 0203 	and.w	r2, r2, #3
 8006288:	0092      	lsls	r2, r2, #2
 800628a:	4093      	lsls	r3, r2
 800628c:	69ba      	ldr	r2, [r7, #24]
 800628e:	4313      	orrs	r3, r2
 8006290:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006292:	4938      	ldr	r1, [pc, #224]	@ (8006374 <HAL_GPIO_Init+0x34c>)
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	3302      	adds	r3, #2
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	43db      	mvns	r3, r3
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d003      	beq.n	80062f4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	43db      	mvns	r3, r3
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	4013      	ands	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	43db      	mvns	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	4013      	ands	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d003      	beq.n	800634a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	fa22 f303 	lsr.w	r3, r2, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	f47f ae6b 	bne.w	800603c <HAL_GPIO_Init+0x14>
  }
}
 8006366:	bf00      	nop
 8006368:	bf00      	nop
 800636a:	3724      	adds	r7, #36	@ 0x24
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	58000400 	.word	0x58000400

08006378 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	460b      	mov	r3, r1
 8006382:	807b      	strh	r3, [r7, #2]
 8006384:	4613      	mov	r3, r2
 8006386:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006388:	787b      	ldrb	r3, [r7, #1]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800638e:	887a      	ldrh	r2, [r7, #2]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006394:	e003      	b.n	800639e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006396:	887b      	ldrh	r3, [r7, #2]
 8006398:	041a      	lsls	r2, r3, #16
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	619a      	str	r2, [r3, #24]
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e08b      	b.n	80064d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fb f96e 	bl	80016b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	@ 0x24
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0201 	bic.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80063fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800640c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d107      	bne.n	8006426 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006422:	609a      	str	r2, [r3, #8]
 8006424:	e006      	b.n	8006434 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	689a      	ldr	r2, [r3, #8]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006432:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d108      	bne.n	800644e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800644a:	605a      	str	r2, [r3, #4]
 800644c:	e007      	b.n	800645e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800645c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6859      	ldr	r1, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	4b1d      	ldr	r3, [pc, #116]	@ (80064e0 <HAL_I2C_Init+0x134>)
 800646a:	430b      	orrs	r3, r1
 800646c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800647c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69d9      	ldr	r1, [r3, #28]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2220      	movs	r2, #32
 80064c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	02008000 	.word	0x02008000

080064e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d138      	bne.n	800656c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006504:	2302      	movs	r3, #2
 8006506:	e032      	b.n	800656e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2224      	movs	r2, #36	@ 0x24
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0201 	bic.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006536:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6819      	ldr	r1, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	430a      	orrs	r2, r1
 8006546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f042 0201 	orr.w	r2, r2, #1
 8006556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800657a:	b480      	push	{r7}
 800657c:	b085      	sub	sp, #20
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b20      	cmp	r3, #32
 800658e:	d139      	bne.n	8006604 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800659a:	2302      	movs	r3, #2
 800659c:	e033      	b.n	8006606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2224      	movs	r2, #36	@ 0x24
 80065aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0201 	bic.w	r2, r2, #1
 80065bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
	...

08006614 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d101      	bne.n	8006626 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e0bf      	b.n	80067a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800662c:	b2db      	uxtb	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d106      	bne.n	8006640 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7fb f956 	bl	80018ec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	699a      	ldr	r2, [r3, #24]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006656:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	6999      	ldr	r1, [r3, #24]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685a      	ldr	r2, [r3, #4]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800666c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6899      	ldr	r1, [r3, #8]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	4b4a      	ldr	r3, [pc, #296]	@ (80067b0 <HAL_LTDC_Init+0x19c>)
 8006688:	400b      	ands	r3, r1
 800668a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	041b      	lsls	r3, r3, #16
 8006692:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6899      	ldr	r1, [r3, #8]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	699a      	ldr	r2, [r3, #24]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	431a      	orrs	r2, r3
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	430a      	orrs	r2, r1
 80066a8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68d9      	ldr	r1, [r3, #12]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4b3e      	ldr	r3, [pc, #248]	@ (80067b0 <HAL_LTDC_Init+0x19c>)
 80066b6:	400b      	ands	r3, r1
 80066b8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	041b      	lsls	r3, r3, #16
 80066c0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68d9      	ldr	r1, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a1a      	ldr	r2, [r3, #32]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6919      	ldr	r1, [r3, #16]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b33      	ldr	r3, [pc, #204]	@ (80067b0 <HAL_LTDC_Init+0x19c>)
 80066e4:	400b      	ands	r3, r1
 80066e6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ec:	041b      	lsls	r3, r3, #16
 80066ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6919      	ldr	r1, [r3, #16]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	431a      	orrs	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6959      	ldr	r1, [r3, #20]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b27      	ldr	r3, [pc, #156]	@ (80067b0 <HAL_LTDC_Init+0x19c>)
 8006712:	400b      	ands	r3, r1
 8006714:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	041b      	lsls	r3, r3, #16
 800671c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6959      	ldr	r1, [r3, #20]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	431a      	orrs	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	430a      	orrs	r2, r1
 8006732:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800673a:	021b      	lsls	r3, r3, #8
 800673c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006744:	041b      	lsls	r3, r3, #16
 8006746:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006756:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4313      	orrs	r3, r2
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800676a:	431a      	orrs	r2, r3
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0206 	orr.w	r2, r2, #6
 8006782:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	699a      	ldr	r2, [r3, #24]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0201 	orr.w	r2, r2, #1
 8006792:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	f000f800 	.word	0xf000f800

080067b4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80067b4:	b5b0      	push	{r4, r5, r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_LTDC_ConfigLayer+0x1a>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e02c      	b.n	8006828 <HAL_LTDC_ConfigLayer+0x74>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2134      	movs	r1, #52	@ 0x34
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	4413      	add	r3, r2
 80067ea:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4614      	mov	r4, r2
 80067f2:	461d      	mov	r5, r3
 80067f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	68b9      	ldr	r1, [r7, #8]
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f811 	bl	8006830 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2201      	movs	r2, #1
 8006814:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bdb0      	pop	{r4, r5, r7, pc}

08006830 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006830:	b480      	push	{r7}
 8006832:	b089      	sub	sp, #36	@ 0x24
 8006834:	af00      	add	r7, sp, #0
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800684c:	4413      	add	r3, r2
 800684e:	041b      	lsls	r3, r3, #16
 8006850:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	01db      	lsls	r3, r3, #7
 800685c:	4413      	add	r3, r2
 800685e:	3384      	adds	r3, #132	@ 0x84
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	6812      	ldr	r2, [r2, #0]
 8006866:	4611      	mov	r1, r2
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	01d2      	lsls	r2, r2, #7
 800686c:	440a      	add	r2, r1
 800686e:	3284      	adds	r2, #132	@ 0x84
 8006870:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006874:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	0c1b      	lsrs	r3, r3, #16
 8006882:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006886:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006888:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4619      	mov	r1, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	01db      	lsls	r3, r3, #7
 8006894:	440b      	add	r3, r1
 8006896:	3384      	adds	r3, #132	@ 0x84
 8006898:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800689e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ae:	4413      	add	r3, r2
 80068b0:	041b      	lsls	r3, r3, #16
 80068b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	01db      	lsls	r3, r3, #7
 80068be:	4413      	add	r3, r2
 80068c0:	3384      	adds	r3, #132	@ 0x84
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	4611      	mov	r1, r2
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	01d2      	lsls	r2, r2, #7
 80068ce:	440a      	add	r2, r1
 80068d0:	3284      	adds	r2, #132	@ 0x84
 80068d2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80068d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068e6:	4413      	add	r3, r2
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4619      	mov	r1, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	01db      	lsls	r3, r3, #7
 80068f4:	440b      	add	r3, r1
 80068f6:	3384      	adds	r3, #132	@ 0x84
 80068f8:	4619      	mov	r1, r3
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	461a      	mov	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	01db      	lsls	r3, r3, #7
 800690a:	4413      	add	r3, r2
 800690c:	3384      	adds	r3, #132	@ 0x84
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	6812      	ldr	r2, [r2, #0]
 8006914:	4611      	mov	r1, r2
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	01d2      	lsls	r2, r2, #7
 800691a:	440a      	add	r2, r1
 800691c:	3284      	adds	r2, #132	@ 0x84
 800691e:	f023 0307 	bic.w	r3, r3, #7
 8006922:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	01db      	lsls	r3, r3, #7
 800692e:	4413      	add	r3, r2
 8006930:	3384      	adds	r3, #132	@ 0x84
 8006932:	461a      	mov	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006940:	021b      	lsls	r3, r3, #8
 8006942:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800694a:	041b      	lsls	r3, r3, #16
 800694c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	061b      	lsls	r3, r3, #24
 8006954:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	01db      	lsls	r3, r3, #7
 8006960:	4413      	add	r3, r2
 8006962:	3384      	adds	r3, #132	@ 0x84
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	01db      	lsls	r3, r3, #7
 8006970:	4413      	add	r3, r2
 8006972:	3384      	adds	r3, #132	@ 0x84
 8006974:	461a      	mov	r2, r3
 8006976:	2300      	movs	r3, #0
 8006978:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006980:	461a      	mov	r2, r3
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	431a      	orrs	r2, r3
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	431a      	orrs	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4619      	mov	r1, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	01db      	lsls	r3, r3, #7
 8006994:	440b      	add	r3, r1
 8006996:	3384      	adds	r3, #132	@ 0x84
 8006998:	4619      	mov	r1, r3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4313      	orrs	r3, r2
 800699e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	01db      	lsls	r3, r3, #7
 80069aa:	4413      	add	r3, r2
 80069ac:	3384      	adds	r3, #132	@ 0x84
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	6812      	ldr	r2, [r2, #0]
 80069b4:	4611      	mov	r1, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	01d2      	lsls	r2, r2, #7
 80069ba:	440a      	add	r2, r1
 80069bc:	3284      	adds	r2, #132	@ 0x84
 80069be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80069c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	01db      	lsls	r3, r3, #7
 80069ce:	4413      	add	r3, r2
 80069d0:	3384      	adds	r3, #132	@ 0x84
 80069d2:	461a      	mov	r2, r3
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	695b      	ldr	r3, [r3, #20]
 80069d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	01db      	lsls	r3, r3, #7
 80069e4:	4413      	add	r3, r2
 80069e6:	3384      	adds	r3, #132	@ 0x84
 80069e8:	69da      	ldr	r2, [r3, #28]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4619      	mov	r1, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	01db      	lsls	r3, r3, #7
 80069f4:	440b      	add	r3, r1
 80069f6:	3384      	adds	r3, #132	@ 0x84
 80069f8:	4619      	mov	r1, r3
 80069fa:	4b58      	ldr	r3, [pc, #352]	@ (8006b5c <LTDC_SetConfig+0x32c>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	69da      	ldr	r2, [r3, #28]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	68f9      	ldr	r1, [r7, #12]
 8006a0a:	6809      	ldr	r1, [r1, #0]
 8006a0c:	4608      	mov	r0, r1
 8006a0e:	6879      	ldr	r1, [r7, #4]
 8006a10:	01c9      	lsls	r1, r1, #7
 8006a12:	4401      	add	r1, r0
 8006a14:	3184      	adds	r1, #132	@ 0x84
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	01db      	lsls	r3, r3, #7
 8006a24:	4413      	add	r3, r2
 8006a26:	3384      	adds	r3, #132	@ 0x84
 8006a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	01db      	lsls	r3, r3, #7
 8006a34:	4413      	add	r3, r2
 8006a36:	3384      	adds	r3, #132	@ 0x84
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	01db      	lsls	r3, r3, #7
 8006a48:	4413      	add	r3, r2
 8006a4a:	3384      	adds	r3, #132	@ 0x84
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a52:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d102      	bne.n	8006a62 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006a5c:	2304      	movs	r3, #4
 8006a5e:	61fb      	str	r3, [r7, #28]
 8006a60:	e01b      	b.n	8006a9a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d102      	bne.n	8006a70 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	e014      	b.n	8006a9a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d00b      	beq.n	8006a90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d007      	beq.n	8006a90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d003      	beq.n	8006a90 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006a8c:	2b07      	cmp	r3, #7
 8006a8e:	d102      	bne.n	8006a96 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8006a90:	2302      	movs	r3, #2
 8006a92:	61fb      	str	r3, [r7, #28]
 8006a94:	e001      	b.n	8006a9a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8006a96:	2301      	movs	r3, #1
 8006a98:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	01db      	lsls	r3, r3, #7
 8006aa4:	4413      	add	r3, r2
 8006aa6:	3384      	adds	r3, #132	@ 0x84
 8006aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	4611      	mov	r1, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	01d2      	lsls	r2, r2, #7
 8006ab4:	440a      	add	r2, r1
 8006ab6:	3284      	adds	r2, #132	@ 0x84
 8006ab8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	fb02 f303 	mul.w	r3, r2, r3
 8006ac8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6859      	ldr	r1, [r3, #4]
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	1acb      	subs	r3, r1, r3
 8006ad4:	69f9      	ldr	r1, [r7, #28]
 8006ad6:	fb01 f303 	mul.w	r3, r1, r3
 8006ada:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8006adc:	68f9      	ldr	r1, [r7, #12]
 8006ade:	6809      	ldr	r1, [r1, #0]
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	01c9      	lsls	r1, r1, #7
 8006ae6:	4401      	add	r1, r0
 8006ae8:	3184      	adds	r1, #132	@ 0x84
 8006aea:	4313      	orrs	r3, r2
 8006aec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	01db      	lsls	r3, r3, #7
 8006af8:	4413      	add	r3, r2
 8006afa:	3384      	adds	r3, #132	@ 0x84
 8006afc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	01db      	lsls	r3, r3, #7
 8006b08:	440b      	add	r3, r1
 8006b0a:	3384      	adds	r3, #132	@ 0x84
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4b14      	ldr	r3, [pc, #80]	@ (8006b60 <LTDC_SetConfig+0x330>)
 8006b10:	4013      	ands	r3, r2
 8006b12:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	461a      	mov	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	01db      	lsls	r3, r3, #7
 8006b1e:	4413      	add	r3, r2
 8006b20:	3384      	adds	r3, #132	@ 0x84
 8006b22:	461a      	mov	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b28:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	4413      	add	r3, r2
 8006b36:	3384      	adds	r3, #132	@ 0x84
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	4611      	mov	r1, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	01d2      	lsls	r2, r2, #7
 8006b44:	440a      	add	r2, r1
 8006b46:	3284      	adds	r2, #132	@ 0x84
 8006b48:	f043 0301 	orr.w	r3, r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
}
 8006b4e:	bf00      	nop
 8006b50:	3724      	adds	r7, #36	@ 0x24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	fffff8f8 	.word	0xfffff8f8
 8006b60:	fffff800 	.word	0xfffff800

08006b64 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af02      	add	r7, sp, #8
 8006b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8006b70:	f7fc fc6a 	bl	8003448 <HAL_GetTick>
 8006b74:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d102      	bne.n	8006b82 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	73fb      	strb	r3, [r7, #15]
 8006b80:	e0a5      	b.n	8006cce <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f040 809e 	bne.w	8006cce <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7fb fa08 	bl	8001fa8 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8006b98:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f8dc 	bl	8006d5a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689a      	ldr	r2, [r3, #8]
 8006ba8:	4b4b      	ldr	r3, [pc, #300]	@ (8006cd8 <HAL_OSPI_Init+0x174>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	687a      	ldr	r2, [r7, #4]
 8006bae:	68d1      	ldr	r1, [r2, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6912      	ldr	r2, [r2, #16]
 8006bb4:	3a01      	subs	r2, #1
 8006bb6:	0412      	lsls	r2, r2, #16
 8006bb8:	4311      	orrs	r1, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6952      	ldr	r2, [r2, #20]
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	0212      	lsls	r2, r2, #8
 8006bc2:	4311      	orrs	r1, r2
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006bc8:	4311      	orrs	r1, r2
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	69d2      	ldr	r2, [r2, #28]
 8006bce:	4311      	orrs	r1, r2
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6812      	ldr	r2, [r2, #0]
 8006bd4:	430b      	orrs	r3, r1
 8006bd6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1a      	ldr	r2, [r3, #32]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	430a      	orrs	r2, r1
 8006bec:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf2:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006c08:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	3b01      	subs	r3, #1
 8006c1a:	021a      	lsls	r2, r3, #8
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2120      	movs	r1, #32
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fd89 	bl	8007748 <OSPI_WaitFlagStateUntilTimeout>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d146      	bne.n	8006cce <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4e:	1e5a      	subs	r2, r3, #1
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006c76:	f023 41a0 	bic.w	r1, r3, #1342177280	@ 0x50000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c82:	431a      	orrs	r2, r3
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d107      	bne.n	8006cb6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689a      	ldr	r2, [r3, #8]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f042 0202 	orr.w	r2, r2, #2
 8006cb4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006cbe:	d103      	bne.n	8006cc8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	651a      	str	r2, [r3, #80]	@ 0x50
 8006cc6:	e002      	b.n	8006cce <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2202      	movs	r2, #2
 8006ccc:	651a      	str	r2, [r3, #80]	@ 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8006cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3710      	adds	r7, #16
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	f8e0f8f4 	.word	0xf8e0f8f4

08006cdc <HAL_OSPI_HyperbusCfg>:
  * @param  cfg     : Structure containing the Hyperbus configuration
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_HyperbusCfg(OSPI_HandleTypeDef *hospi, OSPI_HyperbusCfgTypeDef *cfg, uint32_t Timeout)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	@ 0x28
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8006ce8:	f7fc fbae 	bl	8003448 <HAL_GetTick>
 8006cec:	61b8      	str	r0, [r7, #24]
  assert_param(IS_OSPI_ACCESS_TIME(cfg->AccessTime));
  assert_param(IS_OSPI_WRITE_ZERO_LATENCY(cfg->WriteZeroLatency));
  assert_param(IS_OSPI_LATENCY_MODE(cfg->LatencyMode));

  /* Check the state of the driver */
  state = hospi->State;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cf2:	617b      	str	r3, [r7, #20]
  if ((state == HAL_OSPI_STATE_HYPERBUS_INIT) || (state == HAL_OSPI_STATE_READY))
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d002      	beq.n	8006d00 <HAL_OSPI_HyperbusCfg+0x24>
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d122      	bne.n	8006d46 <HAL_OSPI_HyperbusCfg+0x6a>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	69bb      	ldr	r3, [r7, #24]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2120      	movs	r1, #32
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f000 fd1c 	bl	8007748 <OSPI_WaitFlagStateUntilTimeout>
 8006d10:	4603      	mov	r3, r0
 8006d12:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8006d14:	7ffb      	ldrb	r3, [r7, #31]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d11a      	bne.n	8006d50 <HAL_OSPI_HyperbusCfg+0x74>
    {
      /* Configure Hyperbus configuration Latency register */
      WRITE_REG(hospi->Instance->HLCR, ((cfg->RWRecoveryTime << OCTOSPI_HLCR_TRWR_Pos) |
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	041a      	lsls	r2, r3, #16
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	431a      	orrs	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	ea42 0103 	orr.w	r1, r2, r3
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	68da      	ldr	r2, [r3, #12]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
                                        (cfg->AccessTime << OCTOSPI_HLCR_TACC_Pos)     |
                                        cfg->WriteZeroLatency | cfg->LatencyMode));

      /* Update the state */
      hospi->State = HAL_OSPI_STATE_READY;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2202      	movs	r2, #2
 8006d42:	651a      	str	r2, [r3, #80]	@ 0x50
    if (status == HAL_OK)
 8006d44:	e004      	b.n	8006d50 <HAL_OSPI_HyperbusCfg+0x74>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Return function status */
  return status;
 8006d50:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	659a      	str	r2, [r3, #88]	@ 0x58
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b094      	sub	sp, #80	@ 0x50
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));

  if (hospi->Instance == OCTOSPI1)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a9d      	ldr	r2, [pc, #628]	@ (800700c <HAL_OSPIM_Config+0x294>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d105      	bne.n	8006da6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 1U;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8006da4:	e004      	b.n	8006db0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8006da6:	2301      	movs	r3, #1
 8006da8:	64bb      	str	r3, [r7, #72]	@ 0x48
    other_instance = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006db0:	2300      	movs	r3, #0
 8006db2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006db6:	e01d      	b.n	8006df4 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8006db8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	b2d8      	uxtb	r0, r3
 8006dc0:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8006dc4:	f107 0114 	add.w	r1, r7, #20
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	440b      	add	r3, r1
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f000 fcf0 	bl	80077b8 <OSPIM_GetConfig>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d005      	beq.n	8006dea <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2208      	movs	r2, #8
 8006de8:	655a      	str	r2, [r3, #84]	@ 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8006dea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006dee:	3301      	adds	r3, #1
 8006df0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006df4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d9dd      	bls.n	8006db8 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8006dfc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8495 	bne.w	8007730 <HAL_OSPIM_Config+0x9b8>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8006e06:	4b81      	ldr	r3, [pc, #516]	@ (800700c <HAL_OSPIM_Config+0x294>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8006e12:	4b7e      	ldr	r3, [pc, #504]	@ (800700c <HAL_OSPIM_Config+0x294>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a7d      	ldr	r2, [pc, #500]	@ (800700c <HAL_OSPIM_Config+0x294>)
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8006e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006e22:	f043 0301 	orr.w	r3, r3, #1
 8006e26:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8006e2a:	4b79      	ldr	r3, [pc, #484]	@ (8007010 <HAL_OSPIM_Config+0x298>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8006e36:	4b76      	ldr	r3, [pc, #472]	@ (8007010 <HAL_OSPIM_Config+0x298>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a75      	ldr	r2, [pc, #468]	@ (8007010 <HAL_OSPIM_Config+0x298>)
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8006e42:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006e46:	f043 0302 	orr.w	r3, r3, #2
 8006e4a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8006e4e:	4971      	ldr	r1, [pc, #452]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e52:	4613      	mov	r3, r2
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	4413      	add	r3, r2
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	3350      	adds	r3, #80	@ 0x50
 8006e5c:	443b      	add	r3, r7
 8006e5e:	3b34      	subs	r3, #52	@ 0x34
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	6859      	ldr	r1, [r3, #4]
 8006e6a:	486a      	ldr	r0, [pc, #424]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006e6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e6e:	4613      	mov	r3, r2
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	4413      	add	r3, r2
 8006e74:	00db      	lsls	r3, r3, #3
 8006e76:	3350      	adds	r3, #80	@ 0x50
 8006e78:	443b      	add	r3, r7
 8006e7a:	3b34      	subs	r3, #52	@ 0x34
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3b01      	subs	r3, #1
 8006e80:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4403      	add	r3, r0
 8006e88:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8006e8a:	4b62      	ldr	r3, [pc, #392]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 80c0 	beq.w	8007018 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8006e98:	4b5e      	ldr	r3, [pc, #376]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8006ea4:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	f040 8162 	bne.w	8007172 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8006eae:	4959      	ldr	r1, [pc, #356]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006eb0:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4413      	add	r3, r2
 8006eba:	00db      	lsls	r3, r3, #3
 8006ebc:	3350      	adds	r3, #80	@ 0x50
 8006ebe:	443b      	add	r3, r7
 8006ec0:	3b3c      	subs	r3, #60	@ 0x3c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	6859      	ldr	r1, [r3, #4]
 8006ecc:	4851      	ldr	r0, [pc, #324]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006ece:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ed2:	4613      	mov	r3, r2
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	4413      	add	r3, r2
 8006ed8:	00db      	lsls	r3, r3, #3
 8006eda:	3350      	adds	r3, #80	@ 0x50
 8006edc:	443b      	add	r3, r7
 8006ede:	3b3c      	subs	r3, #60	@ 0x3c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f041 0202 	orr.w	r2, r1, #2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4403      	add	r3, r0
 8006eec:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8006eee:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	005b      	lsls	r3, r3, #1
 8006ef6:	4413      	add	r3, r2
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	3350      	adds	r3, #80	@ 0x50
 8006efc:	443b      	add	r3, r7
 8006efe:	3b38      	subs	r3, #56	@ 0x38
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01f      	beq.n	8006f46 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8006f06:	4943      	ldr	r1, [pc, #268]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006f08:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	4413      	add	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	3350      	adds	r3, #80	@ 0x50
 8006f16:	443b      	add	r3, r7
 8006f18:	3b38      	subs	r3, #56	@ 0x38
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	6859      	ldr	r1, [r3, #4]
 8006f24:	483b      	ldr	r0, [pc, #236]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006f26:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	4413      	add	r3, r2
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	3350      	adds	r3, #80	@ 0x50
 8006f34:	443b      	add	r3, r7
 8006f36:	3b38      	subs	r3, #56	@ 0x38
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	f041 0220 	orr.w	r2, r1, #32
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4403      	add	r3, r0
 8006f44:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8006f46:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	00db      	lsls	r3, r3, #3
 8006f52:	3350      	adds	r3, #80	@ 0x50
 8006f54:	443b      	add	r3, r7
 8006f56:	3b30      	subs	r3, #48	@ 0x30
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d023      	beq.n	8006fa6 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006f5e:	492d      	ldr	r1, [pc, #180]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006f60:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f64:	4613      	mov	r3, r2
 8006f66:	005b      	lsls	r3, r3, #1
 8006f68:	4413      	add	r3, r2
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	3350      	adds	r3, #80	@ 0x50
 8006f6e:	443b      	add	r3, r7
 8006f70:	3b30      	subs	r3, #48	@ 0x30
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	4824      	ldr	r0, [pc, #144]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006f82:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006f86:	4613      	mov	r3, r2
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	4413      	add	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	3350      	adds	r3, #80	@ 0x50
 8006f90:	443b      	add	r3, r7
 8006f92:	3b30      	subs	r3, #48	@ 0x30
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	f003 0301 	and.w	r3, r3, #1
 8006f9c:	f441 2280 	orr.w	r2, r1, #262144	@ 0x40000
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4403      	add	r3, r0
 8006fa4:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8006fa6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	00db      	lsls	r3, r3, #3
 8006fb2:	3350      	adds	r3, #80	@ 0x50
 8006fb4:	443b      	add	r3, r7
 8006fb6:	3b2c      	subs	r3, #44	@ 0x2c
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f000 80d9 	beq.w	8007172 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], \
 8006fc0:	4914      	ldr	r1, [pc, #80]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006fc2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	4413      	add	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	3350      	adds	r3, #80	@ 0x50
 8006fd0:	443b      	add	r3, r7
 8006fd2:	3b2c      	subs	r3, #44	@ 0x2c
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	440b      	add	r3, r1
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	480c      	ldr	r0, [pc, #48]	@ (8007014 <HAL_OSPIM_Config+0x29c>)
 8006fe4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8006fe8:	4613      	mov	r3, r2
 8006fea:	005b      	lsls	r3, r3, #1
 8006fec:	4413      	add	r3, r2
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	3350      	adds	r3, #80	@ 0x50
 8006ff2:	443b      	add	r3, r7
 8006ff4:	3b2c      	subs	r3, #44	@ 0x2c
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	f041 6280 	orr.w	r2, r1, #67108864	@ 0x4000000
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4403      	add	r3, r0
 8007006:	605a      	str	r2, [r3, #4]
 8007008:	e0b3      	b.n	8007172 <HAL_OSPIM_Config+0x3fa>
 800700a:	bf00      	nop
 800700c:	52005000 	.word	0x52005000
 8007010:	5200a000 	.word	0x5200a000
 8007014:	5200b400 	.word	0x5200b400
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8007018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800701a:	4613      	mov	r3, r2
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	4413      	add	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	3350      	adds	r3, #80	@ 0x50
 8007024:	443b      	add	r3, r7
 8007026:	3b3c      	subs	r3, #60	@ 0x3c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80a1 	beq.w	8007172 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007030:	4993      	ldr	r1, [pc, #588]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007032:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007034:	4613      	mov	r3, r2
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	4413      	add	r3, r2
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	3350      	adds	r3, #80	@ 0x50
 800703e:	443b      	add	r3, r7
 8007040:	3b3c      	subs	r3, #60	@ 0x3c
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	3b01      	subs	r3, #1
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	440b      	add	r3, r1
 800704a:	6859      	ldr	r1, [r3, #4]
 800704c:	488c      	ldr	r0, [pc, #560]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 800704e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007050:	4613      	mov	r3, r2
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	4413      	add	r3, r2
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	3350      	adds	r3, #80	@ 0x50
 800705a:	443b      	add	r3, r7
 800705c:	3b3c      	subs	r3, #60	@ 0x3c
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	3b01      	subs	r3, #1
 8007062:	f021 0201 	bic.w	r2, r1, #1
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	4403      	add	r3, r0
 800706a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800706c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800706e:	4613      	mov	r3, r2
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	3350      	adds	r3, #80	@ 0x50
 8007078:	443b      	add	r3, r7
 800707a:	3b38      	subs	r3, #56	@ 0x38
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d01d      	beq.n	80070be <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8007082:	497f      	ldr	r1, [pc, #508]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007084:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007086:	4613      	mov	r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	4413      	add	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	3350      	adds	r3, #80	@ 0x50
 8007090:	443b      	add	r3, r7
 8007092:	3b38      	subs	r3, #56	@ 0x38
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3b01      	subs	r3, #1
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	440b      	add	r3, r1
 800709c:	6859      	ldr	r1, [r3, #4]
 800709e:	4878      	ldr	r0, [pc, #480]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 80070a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070a2:	4613      	mov	r3, r2
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	4413      	add	r3, r2
 80070a8:	00db      	lsls	r3, r3, #3
 80070aa:	3350      	adds	r3, #80	@ 0x50
 80070ac:	443b      	add	r3, r7
 80070ae:	3b38      	subs	r3, #56	@ 0x38
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	f021 0210 	bic.w	r2, r1, #16
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4403      	add	r3, r0
 80070bc:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80070be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	00db      	lsls	r3, r3, #3
 80070c8:	3350      	adds	r3, #80	@ 0x50
 80070ca:	443b      	add	r3, r7
 80070cc:	3b30      	subs	r3, #48	@ 0x30
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d021      	beq.n	8007118 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80070d4:	496a      	ldr	r1, [pc, #424]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 80070d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	3350      	adds	r3, #80	@ 0x50
 80070e2:	443b      	add	r3, r7
 80070e4:	3b30      	subs	r3, #48	@ 0x30
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	440b      	add	r3, r1
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	4862      	ldr	r0, [pc, #392]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 80070f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	3350      	adds	r3, #80	@ 0x50
 8007102:	443b      	add	r3, r7
 8007104:	3b30      	subs	r3, #48	@ 0x30
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3b01      	subs	r3, #1
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	4403      	add	r3, r0
 8007116:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007118:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800711a:	4613      	mov	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	4413      	add	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	3350      	adds	r3, #80	@ 0x50
 8007124:	443b      	add	r3, r7
 8007126:	3b2c      	subs	r3, #44	@ 0x2c
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d021      	beq.n	8007172 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 800712e:	4954      	ldr	r1, [pc, #336]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007130:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007132:	4613      	mov	r3, r2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	3350      	adds	r3, #80	@ 0x50
 800713c:	443b      	add	r3, r7
 800713e:	3b2c      	subs	r3, #44	@ 0x2c
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3b01      	subs	r3, #1
 8007144:	f003 0301 	and.w	r3, r3, #1
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	440b      	add	r3, r1
 800714c:	6859      	ldr	r1, [r3, #4]
 800714e:	484c      	ldr	r0, [pc, #304]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007150:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007152:	4613      	mov	r3, r2
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4413      	add	r3, r2
 8007158:	00db      	lsls	r3, r3, #3
 800715a:	3350      	adds	r3, #80	@ 0x50
 800715c:	443b      	add	r3, r7
 800715e:	3b2c      	subs	r3, #44	@ 0x2c
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3b01      	subs	r3, #1
 8007164:	f003 0301 	and.w	r3, r3, #1
 8007168:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4403      	add	r3, r0
 8007170:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800717a:	4613      	mov	r3, r2
 800717c:	005b      	lsls	r3, r3, #1
 800717e:	4413      	add	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	3350      	adds	r3, #80	@ 0x50
 8007184:	443b      	add	r3, r7
 8007186:	3b3c      	subs	r3, #60	@ 0x3c
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4299      	cmp	r1, r3
 800718c:	d038      	beq.n	8007200 <HAL_OSPIM_Config+0x488>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	6859      	ldr	r1, [r3, #4]
 8007192:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	00db      	lsls	r3, r3, #3
 800719e:	3350      	adds	r3, #80	@ 0x50
 80071a0:	443b      	add	r3, r7
 80071a2:	3b38      	subs	r3, #56	@ 0x38
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4299      	cmp	r1, r3
 80071a8:	d02a      	beq.n	8007200 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	6899      	ldr	r1, [r3, #8]
 80071ae:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071b2:	4613      	mov	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	3350      	adds	r3, #80	@ 0x50
 80071bc:	443b      	add	r3, r7
 80071be:	3b34      	subs	r3, #52	@ 0x34
 80071c0:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80071c2:	4299      	cmp	r1, r3
 80071c4:	d01c      	beq.n	8007200 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	68d9      	ldr	r1, [r3, #12]
 80071ca:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071ce:	4613      	mov	r3, r2
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	4413      	add	r3, r2
 80071d4:	00db      	lsls	r3, r3, #3
 80071d6:	3350      	adds	r3, #80	@ 0x50
 80071d8:	443b      	add	r3, r7
 80071da:	3b30      	subs	r3, #48	@ 0x30
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4299      	cmp	r1, r3
 80071e0:	d00e      	beq.n	8007200 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6919      	ldr	r1, [r3, #16]
 80071e6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80071ea:	4613      	mov	r3, r2
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	4413      	add	r3, r2
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	3350      	adds	r3, #80	@ 0x50
 80071f4:	443b      	add	r3, r7
 80071f6:	3b2c      	subs	r3, #44	@ 0x2c
 80071f8:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80071fa:	4299      	cmp	r1, r3
 80071fc:	f040 810e 	bne.w	800741c <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	6819      	ldr	r1, [r3, #0]
 8007204:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007208:	4613      	mov	r3, r2
 800720a:	005b      	lsls	r3, r3, #1
 800720c:	4413      	add	r3, r2
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	3350      	adds	r3, #80	@ 0x50
 8007212:	443b      	add	r3, r7
 8007214:	3b3c      	subs	r3, #60	@ 0x3c
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4299      	cmp	r1, r3
 800721a:	d133      	bne.n	8007284 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6859      	ldr	r1, [r3, #4]
 8007220:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007224:	4613      	mov	r3, r2
 8007226:	005b      	lsls	r3, r3, #1
 8007228:	4413      	add	r3, r2
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	3350      	adds	r3, #80	@ 0x50
 800722e:	443b      	add	r3, r7
 8007230:	3b38      	subs	r3, #56	@ 0x38
 8007232:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8007234:	4299      	cmp	r1, r3
 8007236:	d125      	bne.n	8007284 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	68d9      	ldr	r1, [r3, #12]
 800723c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007240:	4613      	mov	r3, r2
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	4413      	add	r3, r2
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	3350      	adds	r3, #80	@ 0x50
 800724a:	443b      	add	r3, r7
 800724c:	3b30      	subs	r3, #48	@ 0x30
 800724e:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8007250:	4299      	cmp	r1, r3
 8007252:	d117      	bne.n	8007284 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6919      	ldr	r1, [r3, #16]
 8007258:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800725c:	4613      	mov	r3, r2
 800725e:	005b      	lsls	r3, r3, #1
 8007260:	4413      	add	r3, r2
 8007262:	00db      	lsls	r3, r3, #3
 8007264:	3350      	adds	r3, #80	@ 0x50
 8007266:	443b      	add	r3, r7
 8007268:	3b2c      	subs	r3, #44	@ 0x2c
 800726a:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800726c:	4299      	cmp	r1, r3
 800726e:	d109      	bne.n	8007284 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8007270:	4b03      	ldr	r3, [pc, #12]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a02      	ldr	r2, [pc, #8]	@ (8007280 <HAL_OSPIM_Config+0x508>)
 8007276:	f043 0301 	orr.w	r3, r3, #1
 800727a:	6013      	str	r3, [r2, #0]
 800727c:	e0ce      	b.n	800741c <HAL_OSPIM_Config+0x6a4>
 800727e:	bf00      	nop
 8007280:	5200b400 	.word	0x5200b400
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8007284:	49bb      	ldr	r1, [pc, #748]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007286:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800728a:	4613      	mov	r3, r2
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	4413      	add	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	3350      	adds	r3, #80	@ 0x50
 8007294:	443b      	add	r3, r7
 8007296:	3b3c      	subs	r3, #60	@ 0x3c
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3b01      	subs	r3, #1
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	440b      	add	r3, r1
 80072a0:	6859      	ldr	r1, [r3, #4]
 80072a2:	48b4      	ldr	r0, [pc, #720]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80072a4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072a8:	4613      	mov	r3, r2
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	4413      	add	r3, r2
 80072ae:	00db      	lsls	r3, r3, #3
 80072b0:	3350      	adds	r3, #80	@ 0x50
 80072b2:	443b      	add	r3, r7
 80072b4:	3b3c      	subs	r3, #60	@ 0x3c
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	f021 0201 	bic.w	r2, r1, #1
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4403      	add	r3, r0
 80072c2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80072c4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072c8:	4613      	mov	r3, r2
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	4413      	add	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	3350      	adds	r3, #80	@ 0x50
 80072d2:	443b      	add	r3, r7
 80072d4:	3b38      	subs	r3, #56	@ 0x38
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d01f      	beq.n	800731c <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80072dc:	49a5      	ldr	r1, [pc, #660]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80072de:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80072e2:	4613      	mov	r3, r2
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	4413      	add	r3, r2
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	3350      	adds	r3, #80	@ 0x50
 80072ec:	443b      	add	r3, r7
 80072ee:	3b38      	subs	r3, #56	@ 0x38
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	6859      	ldr	r1, [r3, #4]
 80072fa:	489e      	ldr	r0, [pc, #632]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80072fc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007300:	4613      	mov	r3, r2
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	4413      	add	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	3350      	adds	r3, #80	@ 0x50
 800730a:	443b      	add	r3, r7
 800730c:	3b38      	subs	r3, #56	@ 0x38
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3b01      	subs	r3, #1
 8007312:	f021 0210 	bic.w	r2, r1, #16
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4403      	add	r3, r0
 800731a:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800731c:	4995      	ldr	r1, [pc, #596]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800731e:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007322:	4613      	mov	r3, r2
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	4413      	add	r3, r2
 8007328:	00db      	lsls	r3, r3, #3
 800732a:	3350      	adds	r3, #80	@ 0x50
 800732c:	443b      	add	r3, r7
 800732e:	3b34      	subs	r3, #52	@ 0x34
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	3b01      	subs	r3, #1
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	440b      	add	r3, r1
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	488e      	ldr	r0, [pc, #568]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800733c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007340:	4613      	mov	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	3350      	adds	r3, #80	@ 0x50
 800734a:	443b      	add	r3, r7
 800734c:	3b34      	subs	r3, #52	@ 0x34
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3b01      	subs	r3, #1
 8007352:	f421 7280 	bic.w	r2, r1, #256	@ 0x100
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4403      	add	r3, r0
 800735a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800735c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8007360:	4613      	mov	r3, r2
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	3350      	adds	r3, #80	@ 0x50
 800736a:	443b      	add	r3, r7
 800736c:	3b30      	subs	r3, #48	@ 0x30
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d023      	beq.n	80073bc <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007374:	497f      	ldr	r1, [pc, #508]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007376:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	3350      	adds	r3, #80	@ 0x50
 8007384:	443b      	add	r3, r7
 8007386:	3b30      	subs	r3, #48	@ 0x30
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	3b01      	subs	r3, #1
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	440b      	add	r3, r1
 8007394:	6859      	ldr	r1, [r3, #4]
 8007396:	4877      	ldr	r0, [pc, #476]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007398:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	00db      	lsls	r3, r3, #3
 80073a4:	3350      	adds	r3, #80	@ 0x50
 80073a6:	443b      	add	r3, r7
 80073a8:	3b30      	subs	r3, #48	@ 0x30
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3b01      	subs	r3, #1
 80073ae:	f003 0301 	and.w	r3, r3, #1
 80073b2:	f421 3280 	bic.w	r2, r1, #65536	@ 0x10000
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4403      	add	r3, r0
 80073ba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80073bc:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073c0:	4613      	mov	r3, r2
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	4413      	add	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	3350      	adds	r3, #80	@ 0x50
 80073ca:	443b      	add	r3, r7
 80073cc:	3b2c      	subs	r3, #44	@ 0x2c
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d023      	beq.n	800741c <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80073d4:	4967      	ldr	r1, [pc, #412]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80073d6:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073da:	4613      	mov	r3, r2
 80073dc:	005b      	lsls	r3, r3, #1
 80073de:	4413      	add	r3, r2
 80073e0:	00db      	lsls	r3, r3, #3
 80073e2:	3350      	adds	r3, #80	@ 0x50
 80073e4:	443b      	add	r3, r7
 80073e6:	3b2c      	subs	r3, #44	@ 0x2c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	6859      	ldr	r1, [r3, #4]
 80073f6:	485f      	ldr	r0, [pc, #380]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80073f8:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	00db      	lsls	r3, r3, #3
 8007404:	3350      	adds	r3, #80	@ 0x50
 8007406:	443b      	add	r3, r7
 8007408:	3b2c      	subs	r3, #44	@ 0x2c
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	3b01      	subs	r3, #1
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	f021 7280 	bic.w	r2, r1, #16777216	@ 0x1000000
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4403      	add	r3, r0
 800741a:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800741c:	4a55      	ldr	r2, [pc, #340]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	3b01      	subs	r3, #1
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4413      	add	r3, r2
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800742e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007430:	025b      	lsls	r3, r3, #9
 8007432:	431a      	orrs	r2, r3
 8007434:	494f      	ldr	r1, [pc, #316]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	3b01      	subs	r3, #1
 800743c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	1e5a      	subs	r2, r3, #1
 800744c:	4b49      	ldr	r3, [pc, #292]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	b2db      	uxtb	r3, r3
 8007454:	429a      	cmp	r2, r3
 8007456:	d90a      	bls.n	800746e <HAL_OSPIM_Config+0x6f6>
    {
      MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8007458:	4b46      	ldr	r3, [pc, #280]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	695b      	ldr	r3, [r3, #20]
 8007464:	3b01      	subs	r3, #1
 8007466:	041b      	lsls	r3, r3, #16
 8007468:	4942      	ldr	r1, [pc, #264]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800746a:	4313      	orrs	r3, r2
 800746c:	600b      	str	r3, [r1, #0]
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800746e:	4b41      	ldr	r3, [pc, #260]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 809a 	beq.w	80075b0 <HAL_OSPIM_Config+0x838>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800747c:	4a3d      	ldr	r2, [pc, #244]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3b01      	subs	r3, #1
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	4413      	add	r3, r2
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f023 0203 	bic.w	r2, r3, #3
 800748e:	4939      	ldr	r1, [pc, #228]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_OSPIM_Config+0x754>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80074a8:	4a32      	ldr	r2, [pc, #200]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	009b      	lsls	r3, r3, #2
 80074b2:	4413      	add	r3, r2
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074ba:	492e      	ldr	r1, [pc, #184]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	3b01      	subs	r3, #1
 80074c2:	f042 0210 	orr.w	r2, r2, #16
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	440b      	add	r3, r1
 80074ca:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d016      	beq.n	8007506 <HAL_OSPIM_Config+0x78e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80074d8:	4a26      	ldr	r2, [pc, #152]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	3b01      	subs	r3, #1
 80074e0:	f003 0301 	and.w	r3, r3, #1
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80074ee:	4921      	ldr	r1, [pc, #132]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	68db      	ldr	r3, [r3, #12]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	440b      	add	r3, r1
 8007502:	605a      	str	r2, [r3, #4]
 8007504:	e019      	b.n	800753a <HAL_OSPIM_Config+0x7c2>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d015      	beq.n	800753a <HAL_OSPIM_Config+0x7c2>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800750e:	4a19      	ldr	r2, [pc, #100]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	3b01      	subs	r3, #1
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007524:	4913      	ldr	r1, [pc, #76]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	3b01      	subs	r3, #1
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d018      	beq.n	8007578 <HAL_OSPIM_Config+0x800>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007546:	4a0b      	ldr	r2, [pc, #44]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	3b01      	subs	r3, #1
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	4413      	add	r3, r2
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800755c:	4905      	ldr	r1, [pc, #20]	@ (8007574 <HAL_OSPIM_Config+0x7fc>)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	3b01      	subs	r3, #1
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	e0c5      	b.n	8007700 <HAL_OSPIM_Config+0x988>
 8007574:	5200b400 	.word	0x5200b400
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691b      	ldr	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	f000 80bf 	beq.w	8007700 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007582:	4a6e      	ldr	r2, [pc, #440]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	3b01      	subs	r3, #1
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 8007598:	4968      	ldr	r1, [pc, #416]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	3b01      	subs	r3, #1
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	440b      	add	r3, r1
 80075ac:	605a      	str	r2, [r3, #4]
 80075ae:	e0a7      	b.n	8007700 <HAL_OSPIM_Config+0x988>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80075b0:	4a62      	ldr	r2, [pc, #392]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f023 0203 	bic.w	r2, r3, #3
 80075c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	431a      	orrs	r2, r3
 80075c8:	495c      	ldr	r1, [pc, #368]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	f042 0201 	orr.w	r2, r2, #1
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	440b      	add	r3, r1
 80075d8:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d014      	beq.n	800760c <HAL_OSPIM_Config+0x894>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80075e2:	4a56      	ldr	r2, [pc, #344]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	685b      	ldr	r3, [r3, #4]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	4413      	add	r3, r2
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80075f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075f6:	015b      	lsls	r3, r3, #5
 80075f8:	431a      	orrs	r2, r3
 80075fa:	4950      	ldr	r1, [pc, #320]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	3b01      	subs	r3, #1
 8007602:	f042 0210 	orr.w	r2, r2, #16
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	440b      	add	r3, r1
 800760a:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d019      	beq.n	800764c <HAL_OSPIM_Config+0x8d4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007618:	4a48      	ldr	r2, [pc, #288]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	3b01      	subs	r3, #1
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	009b      	lsls	r3, r3, #2
 8007626:	4413      	add	r3, r2
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800762e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007630:	049b      	lsls	r3, r3, #18
 8007632:	431a      	orrs	r2, r3
 8007634:	4941      	ldr	r1, [pc, #260]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	3b01      	subs	r3, #1
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	440b      	add	r3, r1
 8007648:	605a      	str	r2, [r3, #4]
 800764a:	e01c      	b.n	8007686 <HAL_OSPIM_Config+0x90e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d018      	beq.n	8007686 <HAL_OSPIM_Config+0x90e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007654:	4a39      	ldr	r2, [pc, #228]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	3b01      	subs	r3, #1
 800765c:	f003 0301 	and.w	r3, r3, #1
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 800766a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800766c:	069b      	lsls	r3, r3, #26
 800766e:	431a      	orrs	r2, r3
 8007670:	4932      	ldr	r1, [pc, #200]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	3b01      	subs	r3, #1
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d019      	beq.n	80076c6 <HAL_OSPIM_Config+0x94e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8007692:	4a2a      	ldr	r2, [pc, #168]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	3b01      	subs	r3, #1
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 80076a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076aa:	049b      	lsls	r3, r3, #18
 80076ac:	431a      	orrs	r2, r3
 80076ae:	4923      	ldr	r1, [pc, #140]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	f442 3240 	orr.w	r2, r2, #196608	@ 0x30000
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	e01c      	b.n	8007700 <HAL_OSPIM_Config+0x988>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d018      	beq.n	8007700 <HAL_OSPIM_Config+0x988>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80076ce:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	3b01      	subs	r3, #1
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80076e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076e6:	069b      	lsls	r3, r3, #26
 80076e8:	431a      	orrs	r2, r3
 80076ea:	4914      	ldr	r1, [pc, #80]	@ (800773c <HAL_OSPIM_Config+0x9c4>)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	3b01      	subs	r3, #1
 80076f2:	f003 0301 	and.w	r3, r3, #1
 80076f6:	f042 7240 	orr.w	r2, r2, #50331648	@ 0x3000000
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	440b      	add	r3, r1
 80076fe:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8007700:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <HAL_OSPIM_Config+0x9a0>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800770c:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <HAL_OSPIM_Config+0x9c8>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a0b      	ldr	r2, [pc, #44]	@ (8007740 <HAL_OSPIM_Config+0x9c8>)
 8007712:	f043 0301 	orr.w	r3, r3, #1
 8007716:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8007718:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800771c:	f003 0302 	and.w	r3, r3, #2
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <HAL_OSPIM_Config+0x9b8>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8007724:	4b07      	ldr	r3, [pc, #28]	@ (8007744 <HAL_OSPIM_Config+0x9cc>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a06      	ldr	r2, [pc, #24]	@ (8007744 <HAL_OSPIM_Config+0x9cc>)
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8007730:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8007734:	4618      	mov	r0, r3
 8007736:	3750      	adds	r7, #80	@ 0x50
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	5200b400 	.word	0x5200b400
 8007740:	52005000 	.word	0x52005000
 8007744:	5200a000 	.word	0x5200a000

08007748 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	603b      	str	r3, [r7, #0]
 8007754:	4613      	mov	r3, r2
 8007756:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007758:	e01a      	b.n	8007790 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007760:	d016      	beq.n	8007790 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007762:	f7fb fe71 	bl	8003448 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	69ba      	ldr	r2, [r7, #24]
 800776e:	429a      	cmp	r2, r3
 8007770:	d302      	bcc.n	8007778 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10b      	bne.n	8007790 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800777e:	651a      	str	r2, [r3, #80]	@ 0x50
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007784:	f043 0201 	orr.w	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	655a      	str	r2, [r3, #84]	@ 0x54

        return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e00e      	b.n	80077ae <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6a1a      	ldr	r2, [r3, #32]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4013      	ands	r3, r2
 800779a:	2b00      	cmp	r3, #0
 800779c:	bf14      	ite	ne
 800779e:	2301      	movne	r3, #1
 80077a0:	2300      	moveq	r3, #0
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	79fb      	ldrb	r3, [r7, #7]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d1d6      	bne.n	800775a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	4603      	mov	r3, r0
 80077c0:	6039      	str	r1, [r7, #0]
 80077c2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80077cc:	79fb      	ldrb	r3, [r7, #7]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d005      	beq.n	80077de <OSPIM_GetConfig+0x26>
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d802      	bhi.n	80077de <OSPIM_GetConfig+0x26>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d102      	bne.n	80077e4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
 80077e2:	e098      	b.n	8007916 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2200      	movs	r2, #0
 80077ee:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2200      	movs	r2, #0
 80077f4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2200      	movs	r2, #0
 80077fa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8007802:	79fb      	ldrb	r3, [r7, #7]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d10b      	bne.n	8007820 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8007808:	4b46      	ldr	r3, [pc, #280]	@ (8007924 <OSPIM_GetConfig+0x16c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8007814:	4b44      	ldr	r3, [pc, #272]	@ (8007928 <OSPIM_GetConfig+0x170>)
 8007816:	613b      	str	r3, [r7, #16]
 8007818:	e002      	b.n	8007820 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800781a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800781e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e074      	b.n	8007910 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8007826:	4a3f      	ldr	r2, [pc, #252]	@ (8007924 <OSPIM_GetConfig+0x16c>)
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	009b      	lsls	r3, r3, #2
 800782c:	4413      	add	r3, r2
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d00a      	beq.n	8007852 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4053      	eors	r3, r2
 8007842:	f003 0302 	and.w	r3, r3, #2
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	1c5a      	adds	r2, r3, #1
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d00a      	beq.n	8007872 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	4053      	eors	r3, r2
 8007862:	f003 0320 	and.w	r3, r3, #32
 8007866:	2b00      	cmp	r3, #0
 8007868:	d103      	bne.n	8007872 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4053      	eors	r3, r2
 8007882:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007886:	2b00      	cmp	r3, #0
 8007888:	d103      	bne.n	8007892 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d018      	beq.n	80078ce <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	4053      	eors	r3, r2
 80078a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d111      	bne.n	80078ce <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d106      	bne.n	80078c2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e005      	b.n	80078ce <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	3301      	adds	r3, #1
 80078c6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d018      	beq.n	800790a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80078d8:	68ba      	ldr	r2, [r7, #8]
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	4053      	eors	r3, r2
 80078de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d111      	bne.n	800790a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d106      	bne.n	80078fe <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	3301      	adds	r3, #1
 80078f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	611a      	str	r2, [r3, #16]
 80078fc:	e005      	b.n	800790a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	3301      	adds	r3, #1
 8007902:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	3301      	adds	r3, #1
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d987      	bls.n	8007826 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8007916:	7dfb      	ldrb	r3, [r7, #23]
}
 8007918:	4618      	mov	r0, r3
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	5200b400 	.word	0x5200b400
 8007928:	04040222 	.word	0x04040222

0800792c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007934:	4b29      	ldr	r3, [pc, #164]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	2b06      	cmp	r3, #6
 800793e:	d00a      	beq.n	8007956 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007940:	4b26      	ldr	r3, [pc, #152]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 8007942:	68db      	ldr	r3, [r3, #12]
 8007944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	429a      	cmp	r2, r3
 800794c:	d001      	beq.n	8007952 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e03f      	b.n	80079d2 <HAL_PWREx_ConfigSupply+0xa6>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	e03d      	b.n	80079d2 <HAL_PWREx_ConfigSupply+0xa6>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007956:	4b21      	ldr	r3, [pc, #132]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800795e:	491f      	ldr	r1, [pc, #124]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	4313      	orrs	r3, r2
 8007964:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007966:	f7fb fd6f 	bl	8003448 <HAL_GetTick>
 800796a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800796c:	e009      	b.n	8007982 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800796e:	f7fb fd6b 	bl	8003448 <HAL_GetTick>
 8007972:	4602      	mov	r2, r0
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800797c:	d901      	bls.n	8007982 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
 8007980:	e027      	b.n	80079d2 <HAL_PWREx_ConfigSupply+0xa6>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007982:	4b16      	ldr	r3, [pc, #88]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800798e:	d1ee      	bne.n	800796e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b1e      	cmp	r3, #30
 8007994:	d008      	beq.n	80079a8 <HAL_PWREx_ConfigSupply+0x7c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b2e      	cmp	r3, #46	@ 0x2e
 800799a:	d005      	beq.n	80079a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b1d      	cmp	r3, #29
 80079a0:	d002      	beq.n	80079a8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b2d      	cmp	r3, #45	@ 0x2d
 80079a6:	d113      	bne.n	80079d0 <HAL_PWREx_ConfigSupply+0xa4>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80079a8:	f7fb fd4e 	bl	8003448 <HAL_GetTick>
 80079ac:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80079ae:	e009      	b.n	80079c4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079b0:	f7fb fd4a 	bl	8003448 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079be:	d901      	bls.n	80079c4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e006      	b.n	80079d2 <HAL_PWREx_ConfigSupply+0xa6>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80079c4:	4b05      	ldr	r3, [pc, #20]	@ (80079dc <HAL_PWREx_ConfigSupply+0xb0>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f003 0311 	and.w	r3, r3, #17
 80079cc:	2b11      	cmp	r3, #17
 80079ce:	d1ef      	bne.n	80079b0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	58024800 	.word	0x58024800

080079e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	@ 0x30
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e3c8      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0301 	and.w	r3, r3, #1
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8087 	beq.w	8007b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a00:	4b88      	ldr	r3, [pc, #544]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a0a:	4b86      	ldr	r3, [pc, #536]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d007      	beq.n	8007a26 <HAL_RCC_OscConfig+0x46>
 8007a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a18:	2b18      	cmp	r3, #24
 8007a1a:	d110      	bne.n	8007a3e <HAL_RCC_OscConfig+0x5e>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d10b      	bne.n	8007a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a26:	4b7f      	ldr	r3, [pc, #508]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d06c      	beq.n	8007b0c <HAL_RCC_OscConfig+0x12c>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d168      	bne.n	8007b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e3a2      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a46:	d106      	bne.n	8007a56 <HAL_RCC_OscConfig+0x76>
 8007a48:	4b76      	ldr	r3, [pc, #472]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a75      	ldr	r2, [pc, #468]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a52:	6013      	str	r3, [r2, #0]
 8007a54:	e02e      	b.n	8007ab4 <HAL_RCC_OscConfig+0xd4>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10c      	bne.n	8007a78 <HAL_RCC_OscConfig+0x98>
 8007a5e:	4b71      	ldr	r3, [pc, #452]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a70      	ldr	r2, [pc, #448]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4b6e      	ldr	r3, [pc, #440]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a6d      	ldr	r2, [pc, #436]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a74:	6013      	str	r3, [r2, #0]
 8007a76:	e01d      	b.n	8007ab4 <HAL_RCC_OscConfig+0xd4>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a80:	d10c      	bne.n	8007a9c <HAL_RCC_OscConfig+0xbc>
 8007a82:	4b68      	ldr	r3, [pc, #416]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a67      	ldr	r2, [pc, #412]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b65      	ldr	r3, [pc, #404]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a64      	ldr	r2, [pc, #400]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a98:	6013      	str	r3, [r2, #0]
 8007a9a:	e00b      	b.n	8007ab4 <HAL_RCC_OscConfig+0xd4>
 8007a9c:	4b61      	ldr	r3, [pc, #388]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a60      	ldr	r2, [pc, #384]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007aa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a5d      	ldr	r2, [pc, #372]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007aae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ab2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d013      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abc:	f7fb fcc4 	bl	8003448 <HAL_GetTick>
 8007ac0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ac4:	f7fb fcc0 	bl	8003448 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b64      	cmp	r3, #100	@ 0x64
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e356      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ad6:	4b53      	ldr	r3, [pc, #332]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d0f0      	beq.n	8007ac4 <HAL_RCC_OscConfig+0xe4>
 8007ae2:	e014      	b.n	8007b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae4:	f7fb fcb0 	bl	8003448 <HAL_GetTick>
 8007ae8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007aea:	e008      	b.n	8007afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007aec:	f7fb fcac 	bl	8003448 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	2b64      	cmp	r3, #100	@ 0x64
 8007af8:	d901      	bls.n	8007afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e342      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007afe:	4b49      	ldr	r3, [pc, #292]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f0      	bne.n	8007aec <HAL_RCC_OscConfig+0x10c>
 8007b0a:	e000      	b.n	8007b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0302 	and.w	r3, r3, #2
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 808c 	beq.w	8007c34 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b1c:	4b41      	ldr	r3, [pc, #260]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b1e:	691b      	ldr	r3, [r3, #16]
 8007b20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b26:	4b3f      	ldr	r3, [pc, #252]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d007      	beq.n	8007b42 <HAL_RCC_OscConfig+0x162>
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	2b18      	cmp	r3, #24
 8007b36:	d137      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x1c8>
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d132      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b42:	4b38      	ldr	r3, [pc, #224]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0304 	and.w	r3, r3, #4
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d005      	beq.n	8007b5a <HAL_RCC_OscConfig+0x17a>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d101      	bne.n	8007b5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e314      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b5a:	4b32      	ldr	r3, [pc, #200]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f023 0219 	bic.w	r2, r3, #25
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	492f      	ldr	r1, [pc, #188]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7fb fc6c 	bl	8003448 <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b74:	f7fb fc68 	bl	8003448 <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e2fe      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b86:	4b27      	ldr	r3, [pc, #156]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d0f0      	beq.n	8007b74 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b92:	4b24      	ldr	r3, [pc, #144]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	061b      	lsls	r3, r3, #24
 8007ba0:	4920      	ldr	r1, [pc, #128]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ba6:	e045      	b.n	8007c34 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d026      	beq.n	8007bfe <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f023 0219 	bic.w	r2, r3, #25
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	4919      	ldr	r1, [pc, #100]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc2:	f7fb fc41 	bl	8003448 <HAL_GetTick>
 8007bc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bca:	f7fb fc3d 	bl	8003448 <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e2d3      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bdc:	4b11      	ldr	r3, [pc, #68]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0304 	and.w	r3, r3, #4
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	061b      	lsls	r3, r3, #24
 8007bf6:	490b      	ldr	r1, [pc, #44]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	604b      	str	r3, [r1, #4]
 8007bfc:	e01a      	b.n	8007c34 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bfe:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a08      	ldr	r2, [pc, #32]	@ (8007c24 <HAL_RCC_OscConfig+0x244>)
 8007c04:	f023 0301 	bic.w	r3, r3, #1
 8007c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c0a:	f7fb fc1d 	bl	8003448 <HAL_GetTick>
 8007c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c10:	e00a      	b.n	8007c28 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c12:	f7fb fc19 	bl	8003448 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d903      	bls.n	8007c28 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	e2af      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
 8007c24:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c28:	4b96      	ldr	r3, [pc, #600]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1ee      	bne.n	8007c12 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d06a      	beq.n	8007d16 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c40:	4b90      	ldr	r3, [pc, #576]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c48:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c4a:	4b8e      	ldr	r3, [pc, #568]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	2b08      	cmp	r3, #8
 8007c54:	d007      	beq.n	8007c66 <HAL_RCC_OscConfig+0x286>
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	2b18      	cmp	r3, #24
 8007c5a:	d11b      	bne.n	8007c94 <HAL_RCC_OscConfig+0x2b4>
 8007c5c:	697b      	ldr	r3, [r7, #20]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d116      	bne.n	8007c94 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c66:	4b87      	ldr	r3, [pc, #540]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d005      	beq.n	8007c7e <HAL_RCC_OscConfig+0x29e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	2b80      	cmp	r3, #128	@ 0x80
 8007c78:	d001      	beq.n	8007c7e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e282      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c7e:	4b81      	ldr	r3, [pc, #516]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	061b      	lsls	r3, r3, #24
 8007c8c:	497d      	ldr	r1, [pc, #500]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c92:	e040      	b.n	8007d16 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d023      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007c9c:	4b79      	ldr	r3, [pc, #484]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a78      	ldr	r2, [pc, #480]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007ca2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fb fbce 	bl	8003448 <HAL_GetTick>
 8007cac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cb0:	f7fb fbca 	bl	8003448 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e260      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cc2:	4b70      	ldr	r3, [pc, #448]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0f0      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cce:	4b6d      	ldr	r3, [pc, #436]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	061b      	lsls	r3, r3, #24
 8007cdc:	4969      	ldr	r1, [pc, #420]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60cb      	str	r3, [r1, #12]
 8007ce2:	e018      	b.n	8007d16 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ce4:	4b67      	ldr	r3, [pc, #412]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a66      	ldr	r2, [pc, #408]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007cea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf0:	f7fb fbaa 	bl	8003448 <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cf8:	f7fb fba6 	bl	8003448 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e23c      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1f0      	bne.n	8007cf8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0308 	and.w	r3, r3, #8
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d036      	beq.n	8007d90 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d019      	beq.n	8007d5e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d2a:	4b56      	ldr	r3, [pc, #344]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d2e:	4a55      	ldr	r2, [pc, #340]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d36:	f7fb fb87 	bl	8003448 <HAL_GetTick>
 8007d3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d3c:	e008      	b.n	8007d50 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d3e:	f7fb fb83 	bl	8003448 <HAL_GetTick>
 8007d42:	4602      	mov	r2, r0
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	1ad3      	subs	r3, r2, r3
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d901      	bls.n	8007d50 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e219      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d50:	4b4c      	ldr	r3, [pc, #304]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d54:	f003 0302 	and.w	r3, r3, #2
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d0f0      	beq.n	8007d3e <HAL_RCC_OscConfig+0x35e>
 8007d5c:	e018      	b.n	8007d90 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d5e:	4b49      	ldr	r3, [pc, #292]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d62:	4a48      	ldr	r2, [pc, #288]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d64:	f023 0301 	bic.w	r3, r3, #1
 8007d68:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d6a:	f7fb fb6d 	bl	8003448 <HAL_GetTick>
 8007d6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d70:	e008      	b.n	8007d84 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d72:	f7fb fb69 	bl	8003448 <HAL_GetTick>
 8007d76:	4602      	mov	r2, r0
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	1ad3      	subs	r3, r2, r3
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d901      	bls.n	8007d84 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007d80:	2303      	movs	r3, #3
 8007d82:	e1ff      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007d84:	4b3f      	ldr	r3, [pc, #252]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007d86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d1f0      	bne.n	8007d72 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d036      	beq.n	8007e0a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d019      	beq.n	8007dd8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007da4:	4b37      	ldr	r3, [pc, #220]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a36      	ldr	r2, [pc, #216]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007daa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007db0:	f7fb fb4a 	bl	8003448 <HAL_GetTick>
 8007db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007db6:	e008      	b.n	8007dca <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007db8:	f7fb fb46 	bl	8003448 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e1dc      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007dca:	4b2e      	ldr	r3, [pc, #184]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d0f0      	beq.n	8007db8 <HAL_RCC_OscConfig+0x3d8>
 8007dd6:	e018      	b.n	8007e0a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007dd8:	4b2a      	ldr	r3, [pc, #168]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a29      	ldr	r2, [pc, #164]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007dde:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007de2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007de4:	f7fb fb30 	bl	8003448 <HAL_GetTick>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007dec:	f7fb fb2c 	bl	8003448 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e1c2      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007dfe:	4b21      	ldr	r3, [pc, #132]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d1f0      	bne.n	8007dec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f000 8086 	beq.w	8007f24 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e18:	4b1b      	ldr	r3, [pc, #108]	@ (8007e88 <HAL_RCC_OscConfig+0x4a8>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8007e88 <HAL_RCC_OscConfig+0x4a8>)
 8007e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e24:	f7fb fb10 	bl	8003448 <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e2a:	e008      	b.n	8007e3e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e2c:	f7fb fb0c 	bl	8003448 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	2b64      	cmp	r3, #100	@ 0x64
 8007e38:	d901      	bls.n	8007e3e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007e3a:	2303      	movs	r3, #3
 8007e3c:	e1a2      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e3e:	4b12      	ldr	r3, [pc, #72]	@ (8007e88 <HAL_RCC_OscConfig+0x4a8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d0f0      	beq.n	8007e2c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d106      	bne.n	8007e60 <HAL_RCC_OscConfig+0x480>
 8007e52:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e56:	4a0b      	ldr	r2, [pc, #44]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e5e:	e032      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e6>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d111      	bne.n	8007e8c <HAL_RCC_OscConfig+0x4ac>
 8007e68:	4b06      	ldr	r3, [pc, #24]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6c:	4a05      	ldr	r2, [pc, #20]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e6e:	f023 0301 	bic.w	r3, r3, #1
 8007e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e74:	4b03      	ldr	r3, [pc, #12]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e78:	4a02      	ldr	r2, [pc, #8]	@ (8007e84 <HAL_RCC_OscConfig+0x4a4>)
 8007e7a:	f023 0304 	bic.w	r3, r3, #4
 8007e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e80:	e021      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e6>
 8007e82:	bf00      	nop
 8007e84:	58024400 	.word	0x58024400
 8007e88:	58024800 	.word	0x58024800
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b05      	cmp	r3, #5
 8007e92:	d10c      	bne.n	8007eae <HAL_RCC_OscConfig+0x4ce>
 8007e94:	4b83      	ldr	r3, [pc, #524]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e98:	4a82      	ldr	r2, [pc, #520]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007e9a:	f043 0304 	orr.w	r3, r3, #4
 8007e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ea0:	4b80      	ldr	r3, [pc, #512]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ea4:	4a7f      	ldr	r2, [pc, #508]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eac:	e00b      	b.n	8007ec6 <HAL_RCC_OscConfig+0x4e6>
 8007eae:	4b7d      	ldr	r3, [pc, #500]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007eb2:	4a7c      	ldr	r2, [pc, #496]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007eb4:	f023 0301 	bic.w	r3, r3, #1
 8007eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007eba:	4b7a      	ldr	r3, [pc, #488]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ebe:	4a79      	ldr	r2, [pc, #484]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ec0:	f023 0304 	bic.w	r3, r3, #4
 8007ec4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d015      	beq.n	8007efa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ece:	f7fb fabb 	bl	8003448 <HAL_GetTick>
 8007ed2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007ed4:	e00a      	b.n	8007eec <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ed6:	f7fb fab7 	bl	8003448 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e14b      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007eec:	4b6d      	ldr	r3, [pc, #436]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ef0:	f003 0302 	and.w	r3, r3, #2
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0ee      	beq.n	8007ed6 <HAL_RCC_OscConfig+0x4f6>
 8007ef8:	e014      	b.n	8007f24 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efa:	f7fb faa5 	bl	8003448 <HAL_GetTick>
 8007efe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f00:	e00a      	b.n	8007f18 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f02:	f7fb faa1 	bl	8003448 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e135      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f18:	4b62      	ldr	r3, [pc, #392]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f1c:	f003 0302 	and.w	r3, r3, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1ee      	bne.n	8007f02 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 812a 	beq.w	8008182 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f36:	2b18      	cmp	r3, #24
 8007f38:	f000 80ba 	beq.w	80080b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	f040 8095 	bne.w	8008070 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f46:	4b57      	ldr	r3, [pc, #348]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a56      	ldr	r2, [pc, #344]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007f50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f52:	f7fb fa79 	bl	8003448 <HAL_GetTick>
 8007f56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f5a:	f7fb fa75 	bl	8003448 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e10b      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1f0      	bne.n	8007f5a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f78:	4b4a      	ldr	r3, [pc, #296]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80080a8 <HAL_RCC_OscConfig+0x6c8>)
 8007f7e:	4013      	ands	r3, r2
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007f88:	0112      	lsls	r2, r2, #4
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	4945      	ldr	r1, [pc, #276]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	628b      	str	r3, [r1, #40]	@ 0x28
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	3b01      	subs	r3, #1
 8007f98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	025b      	lsls	r3, r3, #9
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	431a      	orrs	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fac:	3b01      	subs	r3, #1
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007fb4:	431a      	orrs	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	061b      	lsls	r3, r3, #24
 8007fbe:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007fc2:	4938      	ldr	r1, [pc, #224]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007fc8:	4b36      	ldr	r3, [pc, #216]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	4a35      	ldr	r2, [pc, #212]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007fd4:	4b33      	ldr	r3, [pc, #204]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fd8:	4b34      	ldr	r3, [pc, #208]	@ (80080ac <HAL_RCC_OscConfig+0x6cc>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007fe0:	00d2      	lsls	r2, r2, #3
 8007fe2:	4930      	ldr	r1, [pc, #192]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007fe8:	4b2e      	ldr	r3, [pc, #184]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fec:	f023 020c 	bic.w	r2, r3, #12
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff4:	492b      	ldr	r1, [pc, #172]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ffa:	4b2a      	ldr	r3, [pc, #168]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8007ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ffe:	f023 0202 	bic.w	r2, r3, #2
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008006:	4927      	ldr	r1, [pc, #156]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008008:	4313      	orrs	r3, r2
 800800a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800800c:	4b25      	ldr	r3, [pc, #148]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 800800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008010:	4a24      	ldr	r2, [pc, #144]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008018:	4b22      	ldr	r3, [pc, #136]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 800801a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801c:	4a21      	ldr	r2, [pc, #132]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 800801e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008024:	4b1f      	ldr	r3, [pc, #124]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008026:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008028:	4a1e      	ldr	r2, [pc, #120]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 800802a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800802e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008030:	4b1c      	ldr	r3, [pc, #112]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008034:	4a1b      	ldr	r2, [pc, #108]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008036:	f043 0301 	orr.w	r3, r3, #1
 800803a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800803c:	4b19      	ldr	r3, [pc, #100]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a18      	ldr	r2, [pc, #96]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008042:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008048:	f7fb f9fe 	bl	8003448 <HAL_GetTick>
 800804c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800804e:	e008      	b.n	8008062 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008050:	f7fb f9fa 	bl	8003448 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	2b02      	cmp	r3, #2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e090      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0f0      	beq.n	8008050 <HAL_RCC_OscConfig+0x670>
 800806e:	e088      	b.n	8008182 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008070:	4b0c      	ldr	r3, [pc, #48]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a0b      	ldr	r2, [pc, #44]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800807a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807c:	f7fb f9e4 	bl	8003448 <HAL_GetTick>
 8008080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008082:	e008      	b.n	8008096 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008084:	f7fb f9e0 	bl	8003448 <HAL_GetTick>
 8008088:	4602      	mov	r2, r0
 800808a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	2b02      	cmp	r3, #2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e076      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008096:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <HAL_RCC_OscConfig+0x6c4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1f0      	bne.n	8008084 <HAL_RCC_OscConfig+0x6a4>
 80080a2:	e06e      	b.n	8008182 <HAL_RCC_OscConfig+0x7a2>
 80080a4:	58024400 	.word	0x58024400
 80080a8:	fffffc0c 	.word	0xfffffc0c
 80080ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80080b0:	4b36      	ldr	r3, [pc, #216]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80080b6:	4b35      	ldr	r3, [pc, #212]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 80080b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ba:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d031      	beq.n	8008128 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	f003 0203 	and.w	r2, r3, #3
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d12a      	bne.n	8008128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	091b      	lsrs	r3, r3, #4
 80080d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080de:	429a      	cmp	r2, r3
 80080e0:	d122      	bne.n	8008128 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ec:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d11a      	bne.n	8008128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	0a5b      	lsrs	r3, r3, #9
 80080f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d111      	bne.n	8008128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0c1b      	lsrs	r3, r3, #16
 8008108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008112:	429a      	cmp	r2, r3
 8008114:	d108      	bne.n	8008128 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	0e1b      	lsrs	r3, r3, #24
 800811a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008122:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008124:	429a      	cmp	r2, r3
 8008126:	d001      	beq.n	800812c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008128:	2301      	movs	r3, #1
 800812a:	e02b      	b.n	8008184 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800812c:	4b17      	ldr	r3, [pc, #92]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 800812e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008130:	08db      	lsrs	r3, r3, #3
 8008132:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008136:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	429a      	cmp	r2, r3
 8008140:	d01f      	beq.n	8008182 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008142:	4b12      	ldr	r3, [pc, #72]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 8008144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008146:	4a11      	ldr	r2, [pc, #68]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 8008148:	f023 0301 	bic.w	r3, r3, #1
 800814c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800814e:	f7fb f97b 	bl	8003448 <HAL_GetTick>
 8008152:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008154:	bf00      	nop
 8008156:	f7fb f977 	bl	8003448 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815e:	4293      	cmp	r3, r2
 8008160:	d0f9      	beq.n	8008156 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008162:	4b0a      	ldr	r3, [pc, #40]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 8008164:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008166:	4b0a      	ldr	r3, [pc, #40]	@ (8008190 <HAL_RCC_OscConfig+0x7b0>)
 8008168:	4013      	ands	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800816e:	00d2      	lsls	r2, r2, #3
 8008170:	4906      	ldr	r1, [pc, #24]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 8008172:	4313      	orrs	r3, r2
 8008174:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008176:	4b05      	ldr	r3, [pc, #20]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 8008178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817a:	4a04      	ldr	r2, [pc, #16]	@ (800818c <HAL_RCC_OscConfig+0x7ac>)
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3730      	adds	r7, #48	@ 0x30
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	58024400 	.word	0x58024400
 8008190:	ffff0007 	.word	0xffff0007

08008194 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e19c      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081a8:	4b8a      	ldr	r3, [pc, #552]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d910      	bls.n	80081d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081b6:	4b87      	ldr	r3, [pc, #540]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f023 020f 	bic.w	r2, r3, #15
 80081be:	4985      	ldr	r1, [pc, #532]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	4313      	orrs	r3, r2
 80081c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081c6:	4b83      	ldr	r3, [pc, #524]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 030f 	and.w	r3, r3, #15
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d001      	beq.n	80081d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e184      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f003 0304 	and.w	r3, r3, #4
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d010      	beq.n	8008206 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691a      	ldr	r2, [r3, #16]
 80081e8:	4b7b      	ldr	r3, [pc, #492]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d908      	bls.n	8008206 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081f4:	4b78      	ldr	r3, [pc, #480]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80081f6:	699b      	ldr	r3, [r3, #24]
 80081f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	4975      	ldr	r1, [pc, #468]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008202:	4313      	orrs	r3, r2
 8008204:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	695a      	ldr	r2, [r3, #20]
 8008216:	4b70      	ldr	r3, [pc, #448]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800821e:	429a      	cmp	r2, r3
 8008220:	d908      	bls.n	8008234 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008222:	4b6d      	ldr	r3, [pc, #436]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	496a      	ldr	r1, [pc, #424]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008230:	4313      	orrs	r3, r2
 8008232:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0310 	and.w	r3, r3, #16
 800823c:	2b00      	cmp	r3, #0
 800823e:	d010      	beq.n	8008262 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	4b64      	ldr	r3, [pc, #400]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800824c:	429a      	cmp	r2, r3
 800824e:	d908      	bls.n	8008262 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008250:	4b61      	ldr	r3, [pc, #388]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	495e      	ldr	r1, [pc, #376]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 800825e:	4313      	orrs	r3, r2
 8008260:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0320 	and.w	r3, r3, #32
 800826a:	2b00      	cmp	r3, #0
 800826c:	d010      	beq.n	8008290 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	69da      	ldr	r2, [r3, #28]
 8008272:	4b59      	ldr	r3, [pc, #356]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800827a:	429a      	cmp	r2, r3
 800827c:	d908      	bls.n	8008290 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800827e:	4b56      	ldr	r3, [pc, #344]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	4953      	ldr	r1, [pc, #332]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 800828c:	4313      	orrs	r3, r2
 800828e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 0302 	and.w	r3, r3, #2
 8008298:	2b00      	cmp	r3, #0
 800829a:	d010      	beq.n	80082be <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	4b4d      	ldr	r3, [pc, #308]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 030f 	and.w	r3, r3, #15
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d908      	bls.n	80082be <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ac:	4b4a      	ldr	r3, [pc, #296]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082ae:	699b      	ldr	r3, [r3, #24]
 80082b0:	f023 020f 	bic.w	r2, r3, #15
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	68db      	ldr	r3, [r3, #12]
 80082b8:	4947      	ldr	r1, [pc, #284]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082ba:	4313      	orrs	r3, r2
 80082bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d055      	beq.n	8008376 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80082ca:	4b43      	ldr	r3, [pc, #268]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082cc:	699b      	ldr	r3, [r3, #24]
 80082ce:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	4940      	ldr	r1, [pc, #256]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082d8:	4313      	orrs	r3, r2
 80082da:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b02      	cmp	r3, #2
 80082e2:	d107      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80082e4:	4b3c      	ldr	r3, [pc, #240]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d121      	bne.n	8008334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e0f6      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b03      	cmp	r3, #3
 80082fa:	d107      	bne.n	800830c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80082fc:	4b36      	ldr	r3, [pc, #216]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d115      	bne.n	8008334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e0ea      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d107      	bne.n	8008324 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008314:	4b30      	ldr	r3, [pc, #192]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e0de      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008324:	4b2c      	ldr	r3, [pc, #176]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0304 	and.w	r3, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	d101      	bne.n	8008334 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008330:	2301      	movs	r3, #1
 8008332:	e0d6      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008334:	4b28      	ldr	r3, [pc, #160]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008336:	691b      	ldr	r3, [r3, #16]
 8008338:	f023 0207 	bic.w	r2, r3, #7
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	4925      	ldr	r1, [pc, #148]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008342:	4313      	orrs	r3, r2
 8008344:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008346:	f7fb f87f 	bl	8003448 <HAL_GetTick>
 800834a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800834c:	e00a      	b.n	8008364 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800834e:	f7fb f87b 	bl	8003448 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800835c:	4293      	cmp	r3, r2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e0be      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008364:	4b1c      	ldr	r3, [pc, #112]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008366:	691b      	ldr	r3, [r3, #16]
 8008368:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	429a      	cmp	r2, r3
 8008374:	d1eb      	bne.n	800834e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d010      	beq.n	80083a4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	68da      	ldr	r2, [r3, #12]
 8008386:	4b14      	ldr	r3, [pc, #80]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	429a      	cmp	r2, r3
 8008390:	d208      	bcs.n	80083a4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008392:	4b11      	ldr	r3, [pc, #68]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	f023 020f 	bic.w	r2, r3, #15
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	490e      	ldr	r1, [pc, #56]	@ (80083d8 <HAL_RCC_ClockConfig+0x244>)
 80083a0:	4313      	orrs	r3, r2
 80083a2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083a4:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	683a      	ldr	r2, [r7, #0]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d214      	bcs.n	80083dc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b2:	4b08      	ldr	r3, [pc, #32]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f023 020f 	bic.w	r2, r3, #15
 80083ba:	4906      	ldr	r1, [pc, #24]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	4313      	orrs	r3, r2
 80083c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083c2:	4b04      	ldr	r3, [pc, #16]	@ (80083d4 <HAL_RCC_ClockConfig+0x240>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 030f 	and.w	r3, r3, #15
 80083ca:	683a      	ldr	r2, [r7, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d005      	beq.n	80083dc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e086      	b.n	80084e2 <HAL_RCC_ClockConfig+0x34e>
 80083d4:	52002000 	.word	0x52002000
 80083d8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0304 	and.w	r3, r3, #4
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d010      	beq.n	800840a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	4b3f      	ldr	r3, [pc, #252]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d208      	bcs.n	800840a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083f8:	4b3c      	ldr	r3, [pc, #240]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	691b      	ldr	r3, [r3, #16]
 8008404:	4939      	ldr	r1, [pc, #228]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008406:	4313      	orrs	r3, r2
 8008408:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f003 0308 	and.w	r3, r3, #8
 8008412:	2b00      	cmp	r3, #0
 8008414:	d010      	beq.n	8008438 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	695a      	ldr	r2, [r3, #20]
 800841a:	4b34      	ldr	r3, [pc, #208]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008422:	429a      	cmp	r2, r3
 8008424:	d208      	bcs.n	8008438 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008426:	4b31      	ldr	r3, [pc, #196]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008428:	69db      	ldr	r3, [r3, #28]
 800842a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	492e      	ldr	r1, [pc, #184]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008434:	4313      	orrs	r3, r2
 8008436:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0310 	and.w	r3, r3, #16
 8008440:	2b00      	cmp	r3, #0
 8008442:	d010      	beq.n	8008466 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699a      	ldr	r2, [r3, #24]
 8008448:	4b28      	ldr	r3, [pc, #160]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008450:	429a      	cmp	r2, r3
 8008452:	d208      	bcs.n	8008466 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008454:	4b25      	ldr	r3, [pc, #148]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008456:	69db      	ldr	r3, [r3, #28]
 8008458:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	4922      	ldr	r1, [pc, #136]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008462:	4313      	orrs	r3, r2
 8008464:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b00      	cmp	r3, #0
 8008470:	d010      	beq.n	8008494 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69da      	ldr	r2, [r3, #28]
 8008476:	4b1d      	ldr	r3, [pc, #116]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800847e:	429a      	cmp	r2, r3
 8008480:	d208      	bcs.n	8008494 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008482:	4b1a      	ldr	r3, [pc, #104]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	4917      	ldr	r1, [pc, #92]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 8008490:	4313      	orrs	r3, r2
 8008492:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008494:	f000 f834 	bl	8008500 <HAL_RCC_GetSysClockFreq>
 8008498:	4602      	mov	r2, r0
 800849a:	4b14      	ldr	r3, [pc, #80]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	f003 030f 	and.w	r3, r3, #15
 80084a4:	4912      	ldr	r1, [pc, #72]	@ (80084f0 <HAL_RCC_ClockConfig+0x35c>)
 80084a6:	5ccb      	ldrb	r3, [r1, r3]
 80084a8:	f003 031f 	and.w	r3, r3, #31
 80084ac:	fa22 f303 	lsr.w	r3, r2, r3
 80084b0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80084b2:	4b0e      	ldr	r3, [pc, #56]	@ (80084ec <HAL_RCC_ClockConfig+0x358>)
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f003 030f 	and.w	r3, r3, #15
 80084ba:	4a0d      	ldr	r2, [pc, #52]	@ (80084f0 <HAL_RCC_ClockConfig+0x35c>)
 80084bc:	5cd3      	ldrb	r3, [r2, r3]
 80084be:	f003 031f 	and.w	r3, r3, #31
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	fa22 f303 	lsr.w	r3, r2, r3
 80084c8:	4a0a      	ldr	r2, [pc, #40]	@ (80084f4 <HAL_RCC_ClockConfig+0x360>)
 80084ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80084cc:	4a0a      	ldr	r2, [pc, #40]	@ (80084f8 <HAL_RCC_ClockConfig+0x364>)
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80084d2:	4b0a      	ldr	r3, [pc, #40]	@ (80084fc <HAL_RCC_ClockConfig+0x368>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa f8e8 	bl	80026ac <HAL_InitTick>
 80084dc:	4603      	mov	r3, r0
 80084de:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80084e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	58024400 	.word	0x58024400
 80084f0:	08013dd4 	.word	0x08013dd4
 80084f4:	24000004 	.word	0x24000004
 80084f8:	24000000 	.word	0x24000000
 80084fc:	2400000c 	.word	0x2400000c

08008500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008500:	b480      	push	{r7}
 8008502:	b089      	sub	sp, #36	@ 0x24
 8008504:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008506:	4bb3      	ldr	r3, [pc, #716]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800850e:	2b18      	cmp	r3, #24
 8008510:	f200 8155 	bhi.w	80087be <HAL_RCC_GetSysClockFreq+0x2be>
 8008514:	a201      	add	r2, pc, #4	@ (adr r2, 800851c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851a:	bf00      	nop
 800851c:	08008581 	.word	0x08008581
 8008520:	080087bf 	.word	0x080087bf
 8008524:	080087bf 	.word	0x080087bf
 8008528:	080087bf 	.word	0x080087bf
 800852c:	080087bf 	.word	0x080087bf
 8008530:	080087bf 	.word	0x080087bf
 8008534:	080087bf 	.word	0x080087bf
 8008538:	080087bf 	.word	0x080087bf
 800853c:	080085a7 	.word	0x080085a7
 8008540:	080087bf 	.word	0x080087bf
 8008544:	080087bf 	.word	0x080087bf
 8008548:	080087bf 	.word	0x080087bf
 800854c:	080087bf 	.word	0x080087bf
 8008550:	080087bf 	.word	0x080087bf
 8008554:	080087bf 	.word	0x080087bf
 8008558:	080087bf 	.word	0x080087bf
 800855c:	080085ad 	.word	0x080085ad
 8008560:	080087bf 	.word	0x080087bf
 8008564:	080087bf 	.word	0x080087bf
 8008568:	080087bf 	.word	0x080087bf
 800856c:	080087bf 	.word	0x080087bf
 8008570:	080087bf 	.word	0x080087bf
 8008574:	080087bf 	.word	0x080087bf
 8008578:	080087bf 	.word	0x080087bf
 800857c:	080085b3 	.word	0x080085b3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008580:	4b94      	ldr	r3, [pc, #592]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f003 0320 	and.w	r3, r3, #32
 8008588:	2b00      	cmp	r3, #0
 800858a:	d009      	beq.n	80085a0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800858c:	4b91      	ldr	r3, [pc, #580]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	08db      	lsrs	r3, r3, #3
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	4a90      	ldr	r2, [pc, #576]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008598:	fa22 f303 	lsr.w	r3, r2, r3
 800859c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800859e:	e111      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80085a0:	4b8d      	ldr	r3, [pc, #564]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80085a2:	61bb      	str	r3, [r7, #24]
      break;
 80085a4:	e10e      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80085a6:	4b8d      	ldr	r3, [pc, #564]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085a8:	61bb      	str	r3, [r7, #24]
      break;
 80085aa:	e10b      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80085ac:	4b8c      	ldr	r3, [pc, #560]	@ (80087e0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80085ae:	61bb      	str	r3, [r7, #24]
      break;
 80085b0:	e108      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085b2:	4b88      	ldr	r3, [pc, #544]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b6:	f003 0303 	and.w	r3, r3, #3
 80085ba:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80085bc:	4b85      	ldr	r3, [pc, #532]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	091b      	lsrs	r3, r3, #4
 80085c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085c6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80085c8:	4b82      	ldr	r3, [pc, #520]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085cc:	f003 0301 	and.w	r3, r3, #1
 80085d0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80085d2:	4b80      	ldr	r3, [pc, #512]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d6:	08db      	lsrs	r3, r3, #3
 80085d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	fb02 f303 	mul.w	r3, r2, r3
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f000 80e1 	beq.w	80087b8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	f000 8083 	beq.w	8008704 <HAL_RCC_GetSysClockFreq+0x204>
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2b02      	cmp	r3, #2
 8008602:	f200 80a1 	bhi.w	8008748 <HAL_RCC_GetSysClockFreq+0x248>
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d003      	beq.n	8008614 <HAL_RCC_GetSysClockFreq+0x114>
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d056      	beq.n	80086c0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008612:	e099      	b.n	8008748 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008614:	4b6f      	ldr	r3, [pc, #444]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f003 0320 	and.w	r3, r3, #32
 800861c:	2b00      	cmp	r3, #0
 800861e:	d02d      	beq.n	800867c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008620:	4b6c      	ldr	r3, [pc, #432]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	08db      	lsrs	r3, r3, #3
 8008626:	f003 0303 	and.w	r3, r3, #3
 800862a:	4a6b      	ldr	r2, [pc, #428]	@ (80087d8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800862c:	fa22 f303 	lsr.w	r3, r2, r3
 8008630:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	ee07 3a90 	vmov	s15, r3
 8008638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	ee07 3a90 	vmov	s15, r3
 8008642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864a:	4b62      	ldr	r3, [pc, #392]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008652:	ee07 3a90 	vmov	s15, r3
 8008656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800865a:	ed97 6a02 	vldr	s12, [r7, #8]
 800865e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80087e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800866a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800866e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008676:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800867a:	e087      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800867c:	693b      	ldr	r3, [r7, #16]
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80087e8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800868a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868e:	4b51      	ldr	r3, [pc, #324]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008696:	ee07 3a90 	vmov	s15, r3
 800869a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869e:	ed97 6a02 	vldr	s12, [r7, #8]
 80086a2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80087e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086be:	e065      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ca:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2ec>
 80086ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086d2:	4b40      	ldr	r3, [pc, #256]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086da:	ee07 3a90 	vmov	s15, r3
 80086de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80086e6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80087e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008702:	e043      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80087f0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008716:	4b2f      	ldr	r3, [pc, #188]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800871a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871e:	ee07 3a90 	vmov	s15, r3
 8008722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008726:	ed97 6a02 	vldr	s12, [r7, #8]
 800872a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80087e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800872e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800873a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008742:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008746:	e021      	b.n	800878c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	ee07 3a90 	vmov	s15, r3
 800874e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008752:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80087ec <HAL_RCC_GetSysClockFreq+0x2ec>
 8008756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800875a:	4b1e      	ldr	r3, [pc, #120]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800875e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008762:	ee07 3a90 	vmov	s15, r3
 8008766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800876a:	ed97 6a02 	vldr	s12, [r7, #8]
 800876e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80087e4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800877a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800877e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008786:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800878a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800878c:	4b11      	ldr	r3, [pc, #68]	@ (80087d4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008790:	0a5b      	lsrs	r3, r3, #9
 8008792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008796:	3301      	adds	r3, #1
 8008798:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	ee07 3a90 	vmov	s15, r3
 80087a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80087a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80087a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b0:	ee17 3a90 	vmov	r3, s15
 80087b4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80087b6:	e005      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80087b8:	2300      	movs	r3, #0
 80087ba:	61bb      	str	r3, [r7, #24]
      break;
 80087bc:	e002      	b.n	80087c4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80087be:	4b07      	ldr	r3, [pc, #28]	@ (80087dc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087c0:	61bb      	str	r3, [r7, #24]
      break;
 80087c2:	bf00      	nop
  }

  return sysclockfreq;
 80087c4:	69bb      	ldr	r3, [r7, #24]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3724      	adds	r7, #36	@ 0x24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	58024400 	.word	0x58024400
 80087d8:	03d09000 	.word	0x03d09000
 80087dc:	003d0900 	.word	0x003d0900
 80087e0:	017d7840 	.word	0x017d7840
 80087e4:	46000000 	.word	0x46000000
 80087e8:	4c742400 	.word	0x4c742400
 80087ec:	4a742400 	.word	0x4a742400
 80087f0:	4bbebc20 	.word	0x4bbebc20

080087f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80087fa:	f7ff fe81 	bl	8008500 <HAL_RCC_GetSysClockFreq>
 80087fe:	4602      	mov	r2, r0
 8008800:	4b10      	ldr	r3, [pc, #64]	@ (8008844 <HAL_RCC_GetHCLKFreq+0x50>)
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	0a1b      	lsrs	r3, r3, #8
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	490f      	ldr	r1, [pc, #60]	@ (8008848 <HAL_RCC_GetHCLKFreq+0x54>)
 800880c:	5ccb      	ldrb	r3, [r1, r3]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	fa22 f303 	lsr.w	r3, r2, r3
 8008816:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <HAL_RCC_GetHCLKFreq+0x50>)
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	4a09      	ldr	r2, [pc, #36]	@ (8008848 <HAL_RCC_GetHCLKFreq+0x54>)
 8008822:	5cd3      	ldrb	r3, [r2, r3]
 8008824:	f003 031f 	and.w	r3, r3, #31
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	fa22 f303 	lsr.w	r3, r2, r3
 800882e:	4a07      	ldr	r2, [pc, #28]	@ (800884c <HAL_RCC_GetHCLKFreq+0x58>)
 8008830:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008832:	4a07      	ldr	r2, [pc, #28]	@ (8008850 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008838:	4b04      	ldr	r3, [pc, #16]	@ (800884c <HAL_RCC_GetHCLKFreq+0x58>)
 800883a:	681b      	ldr	r3, [r3, #0]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3708      	adds	r7, #8
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	58024400 	.word	0x58024400
 8008848:	08013dd4 	.word	0x08013dd4
 800884c:	24000004 	.word	0x24000004
 8008850:	24000000 	.word	0x24000000

08008854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008858:	f7ff ffcc 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 800885c:	4602      	mov	r2, r0
 800885e:	4b06      	ldr	r3, [pc, #24]	@ (8008878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008860:	69db      	ldr	r3, [r3, #28]
 8008862:	091b      	lsrs	r3, r3, #4
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	4904      	ldr	r1, [pc, #16]	@ (800887c <HAL_RCC_GetPCLK1Freq+0x28>)
 800886a:	5ccb      	ldrb	r3, [r1, r3]
 800886c:	f003 031f 	and.w	r3, r3, #31
 8008870:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008874:	4618      	mov	r0, r3
 8008876:	bd80      	pop	{r7, pc}
 8008878:	58024400 	.word	0x58024400
 800887c:	08013dd4 	.word	0x08013dd4

08008880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008884:	f7ff ffb6 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 8008888:	4602      	mov	r2, r0
 800888a:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	0a1b      	lsrs	r3, r3, #8
 8008890:	f003 0307 	and.w	r3, r3, #7
 8008894:	4904      	ldr	r1, [pc, #16]	@ (80088a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008896:	5ccb      	ldrb	r3, [r1, r3]
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	58024400 	.word	0x58024400
 80088a8:	08013dd4 	.word	0x08013dd4

080088ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	223f      	movs	r2, #63	@ 0x3f
 80088ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80088bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	f003 0207 	and.w	r2, r3, #7
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80088c8:	4b17      	ldr	r3, [pc, #92]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80088d4:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	f003 020f 	and.w	r2, r3, #15
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80088e0:	4b11      	ldr	r3, [pc, #68]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80088ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80088f8:	4b0b      	ldr	r3, [pc, #44]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 80088fa:	69db      	ldr	r3, [r3, #28]
 80088fc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8008904:	4b08      	ldr	r3, [pc, #32]	@ (8008928 <HAL_RCC_GetClockConfig+0x7c>)
 8008906:	6a1b      	ldr	r3, [r3, #32]
 8008908:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008910:	4b06      	ldr	r3, [pc, #24]	@ (800892c <HAL_RCC_GetClockConfig+0x80>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 020f 	and.w	r2, r3, #15
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	601a      	str	r2, [r3, #0]
}
 800891c:	bf00      	nop
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	58024400 	.word	0x58024400
 800892c:	52002000 	.word	0x52002000

08008930 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008934:	b0c6      	sub	sp, #280	@ 0x118
 8008936:	af00      	add	r7, sp, #0
 8008938:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800893c:	2300      	movs	r3, #0
 800893e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008942:	2300      	movs	r3, #0
 8008944:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008954:	2500      	movs	r5, #0
 8008956:	ea54 0305 	orrs.w	r3, r4, r5
 800895a:	d049      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800895c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008962:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008966:	d02f      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008968:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800896c:	d828      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800896e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008972:	d01a      	beq.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008974:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008978:	d822      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800897e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008982:	d007      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008984:	e01c      	b.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008986:	4bab      	ldr	r3, [pc, #684]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898a:	4aaa      	ldr	r2, [pc, #680]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800898c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008990:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008992:	e01a      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008998:	3308      	adds	r3, #8
 800899a:	2102      	movs	r1, #2
 800899c:	4618      	mov	r0, r3
 800899e:	f002 fa49 	bl	800ae34 <RCCEx_PLL2_Config>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089a8:	e00f      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ae:	3328      	adds	r3, #40	@ 0x28
 80089b0:	2102      	movs	r1, #2
 80089b2:	4618      	mov	r0, r3
 80089b4:	f002 faf0 	bl	800af98 <RCCEx_PLL3_Config>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089be:	e004      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80089c6:	e000      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80089c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10a      	bne.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80089d2:	4b98      	ldr	r3, [pc, #608]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089e0:	4a94      	ldr	r2, [pc, #592]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80089e2:	430b      	orrs	r3, r1
 80089e4:	6513      	str	r3, [r2, #80]	@ 0x50
 80089e6:	e003      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80089ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80089fc:	f04f 0900 	mov.w	r9, #0
 8008a00:	ea58 0309 	orrs.w	r3, r8, r9
 8008a04:	d047      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a0c:	2b04      	cmp	r3, #4
 8008a0e:	d82a      	bhi.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a10:	a201      	add	r2, pc, #4	@ (adr r2, 8008a18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a2d 	.word	0x08008a2d
 8008a1c:	08008a3b 	.word	0x08008a3b
 8008a20:	08008a51 	.word	0x08008a51
 8008a24:	08008a6f 	.word	0x08008a6f
 8008a28:	08008a6f 	.word	0x08008a6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a2c:	4b81      	ldr	r3, [pc, #516]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a30:	4a80      	ldr	r2, [pc, #512]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a38:	e01a      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a3e:	3308      	adds	r3, #8
 8008a40:	2100      	movs	r1, #0
 8008a42:	4618      	mov	r0, r3
 8008a44:	f002 f9f6 	bl	800ae34 <RCCEx_PLL2_Config>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a4e:	e00f      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a54:	3328      	adds	r3, #40	@ 0x28
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f002 fa9d 	bl	800af98 <RCCEx_PLL3_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a64:	e004      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a6c:	e000      	b.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008a6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008a78:	4b6e      	ldr	r3, [pc, #440]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a7c:	f023 0107 	bic.w	r1, r3, #7
 8008a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a86:	4a6b      	ldr	r2, [pc, #428]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008a88:	430b      	orrs	r3, r1
 8008a8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a8c:	e003      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a92:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a9e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008aa2:	f04f 0b00 	mov.w	fp, #0
 8008aa6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008aaa:	d05b      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ab0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008ab4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008ab8:	d03b      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8008aba:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008abe:	d834      	bhi.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ac0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ac4:	d037      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008ac6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008aca:	d82e      	bhi.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008acc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ad0:	d033      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008ad2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ad6:	d828      	bhi.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008adc:	d01a      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8008ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008ae2:	d822      	bhi.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d003      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aec:	d007      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8008aee:	e01c      	b.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af0:	4b50      	ldr	r3, [pc, #320]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af4:	4a4f      	ldr	r2, [pc, #316]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008af6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008afa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008afc:	e01e      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b02:	3308      	adds	r3, #8
 8008b04:	2100      	movs	r1, #0
 8008b06:	4618      	mov	r0, r3
 8008b08:	f002 f994 	bl	800ae34 <RCCEx_PLL2_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b12:	e013      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b18:	3328      	adds	r3, #40	@ 0x28
 8008b1a:	2100      	movs	r1, #0
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f002 fa3b 	bl	800af98 <RCCEx_PLL3_Config>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b28:	e008      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008b30:	e004      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b32:	bf00      	nop
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b36:	bf00      	nop
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8008b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008b44:	4b3b      	ldr	r3, [pc, #236]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b48:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008b54:	4a37      	ldr	r2, [pc, #220]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008b56:	430b      	orrs	r3, r1
 8008b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b5a:	e003      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008b70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008b74:	2300      	movs	r3, #0
 8008b76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008b7a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d05d      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b88:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008b8c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b90:	d03b      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008b92:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008b96:	d834      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008b98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b9c:	d037      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008b9e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ba2:	d82e      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008ba4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008ba8:	d033      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8008baa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008bae:	d828      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bb4:	d01a      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008bb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bba:	d822      	bhi.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d003      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008bc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008bc4:	d007      	beq.n	8008bd6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008bc6:	e01c      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bcc:	4a19      	ldr	r2, [pc, #100]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd4:	e01e      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bda:	3308      	adds	r3, #8
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f002 f928 	bl	800ae34 <RCCEx_PLL2_Config>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008bea:	e013      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bf0:	3328      	adds	r3, #40	@ 0x28
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f002 f9cf 	bl	800af98 <RCCEx_PLL3_Config>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c00:	e008      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c08:	e004      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c0a:	bf00      	nop
 8008c0c:	e002      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c0e:	bf00      	nop
 8008c10:	e000      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8008c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d10d      	bne.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008c1c:	4b05      	ldr	r3, [pc, #20]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c20:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c2c:	4a01      	ldr	r2, [pc, #4]	@ (8008c34 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008c2e:	430b      	orrs	r3, r1
 8008c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c32:	e005      	b.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c48:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008c4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c50:	2300      	movs	r3, #0
 8008c52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c56:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	d03a      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c66:	2b30      	cmp	r3, #48	@ 0x30
 8008c68:	d01f      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8008c6a:	2b30      	cmp	r3, #48	@ 0x30
 8008c6c:	d819      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	d00c      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008c72:	2b20      	cmp	r3, #32
 8008c74:	d815      	bhi.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d019      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c7a:	2b10      	cmp	r3, #16
 8008c7c:	d111      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c7e:	4baa      	ldr	r3, [pc, #680]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c82:	4aa9      	ldr	r2, [pc, #676]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008c8a:	e011      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c90:	3308      	adds	r3, #8
 8008c92:	2102      	movs	r1, #2
 8008c94:	4618      	mov	r0, r3
 8008c96:	f002 f8cd 	bl	800ae34 <RCCEx_PLL2_Config>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008ca0:	e006      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ca8:	e002      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008caa:	bf00      	nop
 8008cac:	e000      	b.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8008cae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d10a      	bne.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008cb8:	4b9b      	ldr	r3, [pc, #620]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cbc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cc6:	4a98      	ldr	r2, [pc, #608]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008cc8:	430b      	orrs	r3, r1
 8008cca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ccc:	e003      	b.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008cd2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008cec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008cf0:	460b      	mov	r3, r1
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	d051      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008cf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008cfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d00:	d035      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8008d02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008d06:	d82e      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d0c:	d031      	beq.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8008d0e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008d12:	d828      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d18:	d01a      	beq.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8008d1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d1e:	d822      	bhi.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8008d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d28:	d007      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8008d2a:	e01c      	b.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d30:	4a7d      	ldr	r2, [pc, #500]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d38:	e01c      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d3e:	3308      	adds	r3, #8
 8008d40:	2100      	movs	r1, #0
 8008d42:	4618      	mov	r0, r3
 8008d44:	f002 f876 	bl	800ae34 <RCCEx_PLL2_Config>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d4e:	e011      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d54:	3328      	adds	r3, #40	@ 0x28
 8008d56:	2100      	movs	r1, #0
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f002 f91d 	bl	800af98 <RCCEx_PLL3_Config>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008d64:	e006      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d6c:	e002      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d6e:	bf00      	nop
 8008d70:	e000      	b.n	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008d72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d80:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008d8a:	4a67      	ldr	r2, [pc, #412]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008d8c:	430b      	orrs	r3, r1
 8008d8e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d90:	e003      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d96:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008da6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008daa:	2300      	movs	r3, #0
 8008dac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008db0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4313      	orrs	r3, r2
 8008db8:	d053      	beq.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dc4:	d033      	beq.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008dc6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008dca:	d82c      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008dcc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008dd0:	d02f      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008dd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008dd6:	d826      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008dd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ddc:	d02b      	beq.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008dde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008de2:	d820      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008de4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008de8:	d012      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008dea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008dee:	d81a      	bhi.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d022      	beq.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008df8:	d115      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfe:	3308      	adds	r3, #8
 8008e00:	2101      	movs	r1, #1
 8008e02:	4618      	mov	r0, r3
 8008e04:	f002 f816 	bl	800ae34 <RCCEx_PLL2_Config>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e0e:	e015      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e14:	3328      	adds	r3, #40	@ 0x28
 8008e16:	2101      	movs	r1, #1
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f002 f8bd 	bl	800af98 <RCCEx_PLL3_Config>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008e24:	e00a      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008e2c:	e006      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e2e:	bf00      	nop
 8008e30:	e004      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e32:	bf00      	nop
 8008e34:	e002      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e36:	bf00      	nop
 8008e38:	e000      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008e3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10a      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008e44:	4b38      	ldr	r3, [pc, #224]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e48:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e52:	4a35      	ldr	r2, [pc, #212]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008e54:	430b      	orrs	r3, r1
 8008e56:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e58:	e003      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e5e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008e62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008e6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e72:	2300      	movs	r3, #0
 8008e74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	d058      	beq.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e8e:	d033      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e94:	d82c      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e9a:	d02f      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ea0:	d826      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008ea2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008ea6:	d02b      	beq.n	8008f00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008ea8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008eac:	d820      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008eae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb2:	d012      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008eb8:	d81a      	bhi.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d022      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ebe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ec2:	d115      	bne.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ec8:	3308      	adds	r3, #8
 8008eca:	2101      	movs	r1, #1
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f001 ffb1 	bl	800ae34 <RCCEx_PLL2_Config>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008ed8:	e015      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ede:	3328      	adds	r3, #40	@ 0x28
 8008ee0:	2101      	movs	r1, #1
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f002 f858 	bl	800af98 <RCCEx_PLL3_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008eee:	e00a      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ef6:	e006      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ef8:	bf00      	nop
 8008efa:	e004      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008efc:	bf00      	nop
 8008efe:	e002      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f00:	bf00      	nop
 8008f02:	e000      	b.n	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f06:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d10e      	bne.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008f0e:	4b06      	ldr	r3, [pc, #24]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f12:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008f1e:	4a02      	ldr	r2, [pc, #8]	@ (8008f28 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8008f24:	e006      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008f26:	bf00      	nop
 8008f28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008f40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f44:	2300      	movs	r3, #0
 8008f46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f4a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4313      	orrs	r3, r2
 8008f52:	d037      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008f54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f5e:	d00e      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f64:	d816      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d018      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008f6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f6e:	d111      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f70:	4bc4      	ldr	r3, [pc, #784]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f74:	4ac3      	ldr	r2, [pc, #780]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f7c:	e00f      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f82:	3308      	adds	r3, #8
 8008f84:	2101      	movs	r1, #1
 8008f86:	4618      	mov	r0, r3
 8008f88:	f001 ff54 	bl	800ae34 <RCCEx_PLL2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f92:	e004      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f9a:	e000      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008fa6:	4bb7      	ldr	r3, [pc, #732]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008faa:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008fae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008fb4:	4ab3      	ldr	r2, [pc, #716]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fba:	e003      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008fc0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	d039      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d81c      	bhi.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008fee:	a201      	add	r2, pc, #4	@ (adr r2, 8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff4:	08009031 	.word	0x08009031
 8008ff8:	08009005 	.word	0x08009005
 8008ffc:	08009013 	.word	0x08009013
 8009000:	08009031 	.word	0x08009031
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009004:	4b9f      	ldr	r3, [pc, #636]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009008:	4a9e      	ldr	r2, [pc, #632]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800900a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800900e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009010:	e00f      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009016:	3308      	adds	r3, #8
 8009018:	2102      	movs	r1, #2
 800901a:	4618      	mov	r0, r3
 800901c:	f001 ff0a 	bl	800ae34 <RCCEx_PLL2_Config>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009026:	e004      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800902e:	e000      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009032:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009036:	2b00      	cmp	r3, #0
 8009038:	d10a      	bne.n	8009050 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800903a:	4b92      	ldr	r3, [pc, #584]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800903c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800903e:	f023 0103 	bic.w	r1, r3, #3
 8009042:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009048:	4a8e      	ldr	r2, [pc, #568]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800904a:	430b      	orrs	r3, r1
 800904c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800904e:	e003      	b.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009050:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009054:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009058:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800905c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009060:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009064:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009068:	2300      	movs	r3, #0
 800906a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800906e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009072:	460b      	mov	r3, r1
 8009074:	4313      	orrs	r3, r2
 8009076:	f000 8099 	beq.w	80091ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800907a:	4b83      	ldr	r3, [pc, #524]	@ (8009288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a82      	ldr	r2, [pc, #520]	@ (8009288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009084:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009086:	f7fa f9df 	bl	8003448 <HAL_GetTick>
 800908a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800908e:	e00b      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009090:	f7fa f9da 	bl	8003448 <HAL_GetTick>
 8009094:	4602      	mov	r2, r0
 8009096:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800909a:	1ad3      	subs	r3, r2, r3
 800909c:	2b64      	cmp	r3, #100	@ 0x64
 800909e:	d903      	bls.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80090a0:	2303      	movs	r3, #3
 80090a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090a6:	e005      	b.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090a8:	4b77      	ldr	r3, [pc, #476]	@ (8009288 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d0ed      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80090b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d173      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80090bc:	4b71      	ldr	r3, [pc, #452]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80090c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090c8:	4053      	eors	r3, r2
 80090ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d015      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80090d2:	4b6c      	ldr	r3, [pc, #432]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090da:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80090de:	4b69      	ldr	r3, [pc, #420]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090e2:	4a68      	ldr	r2, [pc, #416]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80090ea:	4b66      	ldr	r3, [pc, #408]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090ee:	4a65      	ldr	r2, [pc, #404]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80090f6:	4a63      	ldr	r2, [pc, #396]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80090f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80090fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80090fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009102:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910a:	d118      	bne.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800910c:	f7fa f99c 	bl	8003448 <HAL_GetTick>
 8009110:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009114:	e00d      	b.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009116:	f7fa f997 	bl	8003448 <HAL_GetTick>
 800911a:	4602      	mov	r2, r0
 800911c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009120:	1ad2      	subs	r2, r2, r3
 8009122:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009126:	429a      	cmp	r2, r3
 8009128:	d903      	bls.n	8009132 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8009130:	e005      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009132:	4b54      	ldr	r3, [pc, #336]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0eb      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800913e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009142:	2b00      	cmp	r3, #0
 8009144:	d129      	bne.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800914a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800914e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009152:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009156:	d10e      	bne.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009158:	4b4a      	ldr	r3, [pc, #296]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009164:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009168:	091a      	lsrs	r2, r3, #4
 800916a:	4b48      	ldr	r3, [pc, #288]	@ (800928c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800916c:	4013      	ands	r3, r2
 800916e:	4a45      	ldr	r2, [pc, #276]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009170:	430b      	orrs	r3, r1
 8009172:	6113      	str	r3, [r2, #16]
 8009174:	e005      	b.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009176:	4b43      	ldr	r3, [pc, #268]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4a42      	ldr	r2, [pc, #264]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800917c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009180:	6113      	str	r3, [r2, #16]
 8009182:	4b40      	ldr	r3, [pc, #256]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009184:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800918a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800918e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009192:	4a3c      	ldr	r2, [pc, #240]	@ (8009284 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009194:	430b      	orrs	r3, r1
 8009196:	6713      	str	r3, [r2, #112]	@ 0x70
 8009198:	e008      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800919a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800919e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80091a2:	e003      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80091ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	f002 0301 	and.w	r3, r2, #1
 80091b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80091bc:	2300      	movs	r3, #0
 80091be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80091c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80091c6:	460b      	mov	r3, r1
 80091c8:	4313      	orrs	r3, r2
 80091ca:	f000 808f 	beq.w	80092ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80091ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091d4:	2b28      	cmp	r3, #40	@ 0x28
 80091d6:	d871      	bhi.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80091d8:	a201      	add	r2, pc, #4	@ (adr r2, 80091e0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	080092c5 	.word	0x080092c5
 80091e4:	080092bd 	.word	0x080092bd
 80091e8:	080092bd 	.word	0x080092bd
 80091ec:	080092bd 	.word	0x080092bd
 80091f0:	080092bd 	.word	0x080092bd
 80091f4:	080092bd 	.word	0x080092bd
 80091f8:	080092bd 	.word	0x080092bd
 80091fc:	080092bd 	.word	0x080092bd
 8009200:	08009291 	.word	0x08009291
 8009204:	080092bd 	.word	0x080092bd
 8009208:	080092bd 	.word	0x080092bd
 800920c:	080092bd 	.word	0x080092bd
 8009210:	080092bd 	.word	0x080092bd
 8009214:	080092bd 	.word	0x080092bd
 8009218:	080092bd 	.word	0x080092bd
 800921c:	080092bd 	.word	0x080092bd
 8009220:	080092a7 	.word	0x080092a7
 8009224:	080092bd 	.word	0x080092bd
 8009228:	080092bd 	.word	0x080092bd
 800922c:	080092bd 	.word	0x080092bd
 8009230:	080092bd 	.word	0x080092bd
 8009234:	080092bd 	.word	0x080092bd
 8009238:	080092bd 	.word	0x080092bd
 800923c:	080092bd 	.word	0x080092bd
 8009240:	080092c5 	.word	0x080092c5
 8009244:	080092bd 	.word	0x080092bd
 8009248:	080092bd 	.word	0x080092bd
 800924c:	080092bd 	.word	0x080092bd
 8009250:	080092bd 	.word	0x080092bd
 8009254:	080092bd 	.word	0x080092bd
 8009258:	080092bd 	.word	0x080092bd
 800925c:	080092bd 	.word	0x080092bd
 8009260:	080092c5 	.word	0x080092c5
 8009264:	080092bd 	.word	0x080092bd
 8009268:	080092bd 	.word	0x080092bd
 800926c:	080092bd 	.word	0x080092bd
 8009270:	080092bd 	.word	0x080092bd
 8009274:	080092bd 	.word	0x080092bd
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092bd 	.word	0x080092bd
 8009280:	080092c5 	.word	0x080092c5
 8009284:	58024400 	.word	0x58024400
 8009288:	58024800 	.word	0x58024800
 800928c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009294:	3308      	adds	r3, #8
 8009296:	2101      	movs	r1, #1
 8009298:	4618      	mov	r0, r3
 800929a:	f001 fdcb 	bl	800ae34 <RCCEx_PLL2_Config>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092a4:	e00f      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092aa:	3328      	adds	r3, #40	@ 0x28
 80092ac:	2101      	movs	r1, #1
 80092ae:	4618      	mov	r0, r3
 80092b0:	f001 fe72 	bl	800af98 <RCCEx_PLL3_Config>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80092ba:	e004      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80092c2:	e000      	b.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80092c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092c6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80092ce:	4bbf      	ldr	r3, [pc, #764]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80092d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092dc:	4abb      	ldr	r2, [pc, #748]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80092de:	430b      	orrs	r3, r1
 80092e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80092e2:	e003      	b.n	80092ec <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80092e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80092ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f4:	f002 0302 	and.w	r3, r2, #2
 80092f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80092fc:	2300      	movs	r3, #0
 80092fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009302:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009306:	460b      	mov	r3, r1
 8009308:	4313      	orrs	r3, r2
 800930a:	d041      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009312:	2b05      	cmp	r3, #5
 8009314:	d824      	bhi.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8009316:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8009318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931c:	08009369 	.word	0x08009369
 8009320:	08009335 	.word	0x08009335
 8009324:	0800934b 	.word	0x0800934b
 8009328:	08009369 	.word	0x08009369
 800932c:	08009369 	.word	0x08009369
 8009330:	08009369 	.word	0x08009369
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009338:	3308      	adds	r3, #8
 800933a:	2101      	movs	r1, #1
 800933c:	4618      	mov	r0, r3
 800933e:	f001 fd79 	bl	800ae34 <RCCEx_PLL2_Config>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009348:	e00f      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800934a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800934e:	3328      	adds	r3, #40	@ 0x28
 8009350:	2101      	movs	r1, #1
 8009352:	4618      	mov	r0, r3
 8009354:	f001 fe20 	bl	800af98 <RCCEx_PLL3_Config>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800935e:	e004      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009360:	2301      	movs	r3, #1
 8009362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009366:	e000      	b.n	800936a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800936a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10a      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009372:	4b96      	ldr	r3, [pc, #600]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009376:	f023 0107 	bic.w	r1, r3, #7
 800937a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800937e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009380:	4a92      	ldr	r2, [pc, #584]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009382:	430b      	orrs	r3, r1
 8009384:	6553      	str	r3, [r2, #84]	@ 0x54
 8009386:	e003      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800938c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f002 0304 	and.w	r3, r2, #4
 800939c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093a6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093aa:	460b      	mov	r3, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	d044      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80093b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b8:	2b05      	cmp	r3, #5
 80093ba:	d825      	bhi.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80093bc:	a201      	add	r2, pc, #4	@ (adr r2, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	08009411 	.word	0x08009411
 80093c8:	080093dd 	.word	0x080093dd
 80093cc:	080093f3 	.word	0x080093f3
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e0:	3308      	adds	r3, #8
 80093e2:	2101      	movs	r1, #1
 80093e4:	4618      	mov	r0, r3
 80093e6:	f001 fd25 	bl	800ae34 <RCCEx_PLL2_Config>
 80093ea:	4603      	mov	r3, r0
 80093ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80093f0:	e00f      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80093f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093f6:	3328      	adds	r3, #40	@ 0x28
 80093f8:	2101      	movs	r1, #1
 80093fa:	4618      	mov	r0, r3
 80093fc:	f001 fdcc 	bl	800af98 <RCCEx_PLL3_Config>
 8009400:	4603      	mov	r3, r0
 8009402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009406:	e004      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009408:	2301      	movs	r3, #1
 800940a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800940e:	e000      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8009410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10b      	bne.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800941a:	4b6c      	ldr	r3, [pc, #432]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800941c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941e:	f023 0107 	bic.w	r1, r3, #7
 8009422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800942a:	4a68      	ldr	r2, [pc, #416]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800942c:	430b      	orrs	r3, r1
 800942e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009430:	e003      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800943a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800943e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009442:	f002 0320 	and.w	r3, r2, #32
 8009446:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800944a:	2300      	movs	r3, #0
 800944c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009450:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009454:	460b      	mov	r3, r1
 8009456:	4313      	orrs	r3, r2
 8009458:	d055      	beq.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800945a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800945e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009466:	d033      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009468:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800946c:	d82c      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800946e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009472:	d02f      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009478:	d826      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800947a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800947e:	d02b      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009484:	d820      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009486:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800948a:	d012      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800948c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009490:	d81a      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009492:	2b00      	cmp	r3, #0
 8009494:	d022      	beq.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800949a:	d115      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800949c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094a0:	3308      	adds	r3, #8
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 fcc5 	bl	800ae34 <RCCEx_PLL2_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80094b0:	e015      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094b6:	3328      	adds	r3, #40	@ 0x28
 80094b8:	2102      	movs	r1, #2
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fd6c 	bl	800af98 <RCCEx_PLL3_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80094c6:	e00a      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80094ce:	e006      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094d0:	bf00      	nop
 80094d2:	e004      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094d4:	bf00      	nop
 80094d6:	e002      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094d8:	bf00      	nop
 80094da:	e000      	b.n	80094de <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80094dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10b      	bne.n	80094fe <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094e6:	4b39      	ldr	r3, [pc, #228]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80094e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094ea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80094ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094f6:	4a35      	ldr	r2, [pc, #212]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80094f8:	430b      	orrs	r3, r1
 80094fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80094fc:	e003      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009502:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800950e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009512:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009516:	2300      	movs	r3, #0
 8009518:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800951c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009520:	460b      	mov	r3, r1
 8009522:	4313      	orrs	r3, r2
 8009524:	d058      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800952e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009532:	d033      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8009534:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009538:	d82c      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800953e:	d02f      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8009540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009544:	d826      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009546:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800954a:	d02b      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800954c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009550:	d820      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009552:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009556:	d012      	beq.n	800957e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800955c:	d81a      	bhi.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d022      	beq.n	80095a8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009566:	d115      	bne.n	8009594 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800956c:	3308      	adds	r3, #8
 800956e:	2100      	movs	r1, #0
 8009570:	4618      	mov	r0, r3
 8009572:	f001 fc5f 	bl	800ae34 <RCCEx_PLL2_Config>
 8009576:	4603      	mov	r3, r0
 8009578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800957c:	e015      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800957e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009582:	3328      	adds	r3, #40	@ 0x28
 8009584:	2102      	movs	r1, #2
 8009586:	4618      	mov	r0, r3
 8009588:	f001 fd06 	bl	800af98 <RCCEx_PLL3_Config>
 800958c:	4603      	mov	r3, r0
 800958e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009592:	e00a      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800959a:	e006      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800959c:	bf00      	nop
 800959e:	e004      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095a0:	bf00      	nop
 80095a2:	e002      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095a4:	bf00      	nop
 80095a6:	e000      	b.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80095a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10e      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80095b2:	4b06      	ldr	r3, [pc, #24]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80095ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80095c2:	4a02      	ldr	r2, [pc, #8]	@ (80095cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80095c8:	e006      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80095ca:	bf00      	nop
 80095cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80095d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80095e4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095e8:	2300      	movs	r3, #0
 80095ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80095ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80095f2:	460b      	mov	r3, r1
 80095f4:	4313      	orrs	r3, r2
 80095f6:	d055      	beq.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80095f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009600:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009604:	d033      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8009606:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800960a:	d82c      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800960c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009610:	d02f      	beq.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8009612:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009616:	d826      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009618:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800961c:	d02b      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800961e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009622:	d820      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009624:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009628:	d012      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800962a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800962e:	d81a      	bhi.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8009630:	2b00      	cmp	r3, #0
 8009632:	d022      	beq.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8009634:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009638:	d115      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963e:	3308      	adds	r3, #8
 8009640:	2100      	movs	r1, #0
 8009642:	4618      	mov	r0, r3
 8009644:	f001 fbf6 	bl	800ae34 <RCCEx_PLL2_Config>
 8009648:	4603      	mov	r3, r0
 800964a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800964e:	e015      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009654:	3328      	adds	r3, #40	@ 0x28
 8009656:	2102      	movs	r1, #2
 8009658:	4618      	mov	r0, r3
 800965a:	f001 fc9d 	bl	800af98 <RCCEx_PLL3_Config>
 800965e:	4603      	mov	r3, r0
 8009660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009664:	e00a      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800966c:	e006      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800966e:	bf00      	nop
 8009670:	e004      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009672:	bf00      	nop
 8009674:	e002      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009676:	bf00      	nop
 8009678:	e000      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800967a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10b      	bne.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009684:	4ba0      	ldr	r3, [pc, #640]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009688:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009694:	4a9c      	ldr	r2, [pc, #624]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009696:	430b      	orrs	r3, r1
 8009698:	6593      	str	r3, [r2, #88]	@ 0x58
 800969a:	e003      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80096a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80096a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	f002 0308 	and.w	r3, r2, #8
 80096b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80096b4:	2300      	movs	r3, #0
 80096b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096ba:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80096be:	460b      	mov	r3, r1
 80096c0:	4313      	orrs	r3, r2
 80096c2:	d01e      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80096c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096d0:	d10c      	bne.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096d6:	3328      	adds	r3, #40	@ 0x28
 80096d8:	2102      	movs	r1, #2
 80096da:	4618      	mov	r0, r3
 80096dc:	f001 fc5c 	bl	800af98 <RCCEx_PLL3_Config>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80096ec:	4b86      	ldr	r3, [pc, #536]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80096fc:	4a82      	ldr	r2, [pc, #520]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80096fe:	430b      	orrs	r3, r1
 8009700:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f002 0310 	and.w	r3, r2, #16
 800970e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009712:	2300      	movs	r3, #0
 8009714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009718:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800971c:	460b      	mov	r3, r1
 800971e:	4313      	orrs	r3, r2
 8009720:	d01e      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800972a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800972e:	d10c      	bne.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009734:	3328      	adds	r3, #40	@ 0x28
 8009736:	2102      	movs	r1, #2
 8009738:	4618      	mov	r0, r3
 800973a:	f001 fc2d 	bl	800af98 <RCCEx_PLL3_Config>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8009744:	2301      	movs	r3, #1
 8009746:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800974a:	4b6f      	ldr	r3, [pc, #444]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800974c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800974e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800975a:	4a6b      	ldr	r2, [pc, #428]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800975c:	430b      	orrs	r3, r1
 800975e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009768:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800976c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800976e:	2300      	movs	r3, #0
 8009770:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009772:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009776:	460b      	mov	r3, r1
 8009778:	4313      	orrs	r3, r2
 800977a:	d03e      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800977c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009784:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009788:	d022      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800978a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800978e:	d81b      	bhi.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009794:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009798:	d00b      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800979a:	e015      	b.n	80097c8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	3308      	adds	r3, #8
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f001 fb45 	bl	800ae34 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80097b0:	e00f      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b6:	3328      	adds	r3, #40	@ 0x28
 80097b8:	2102      	movs	r1, #2
 80097ba:	4618      	mov	r0, r3
 80097bc:	f001 fbec 	bl	800af98 <RCCEx_PLL3_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80097c6:	e004      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80097ce:	e000      	b.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80097d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10b      	bne.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80097da:	4b4b      	ldr	r3, [pc, #300]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80097e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097ea:	4a47      	ldr	r2, [pc, #284]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80097ec:	430b      	orrs	r3, r1
 80097ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80097f0:	e003      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80097fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009806:	673b      	str	r3, [r7, #112]	@ 0x70
 8009808:	2300      	movs	r3, #0
 800980a:	677b      	str	r3, [r7, #116]	@ 0x74
 800980c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009810:	460b      	mov	r3, r1
 8009812:	4313      	orrs	r3, r2
 8009814:	d03b      	beq.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800981e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009822:	d01f      	beq.n	8009864 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8009824:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009828:	d818      	bhi.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800982a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800982e:	d003      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8009830:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009834:	d007      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8009836:	e011      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009838:	4b33      	ldr	r3, [pc, #204]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983c:	4a32      	ldr	r2, [pc, #200]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800983e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009842:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009844:	e00f      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800984a:	3328      	adds	r3, #40	@ 0x28
 800984c:	2101      	movs	r1, #1
 800984e:	4618      	mov	r0, r3
 8009850:	f001 fba2 	bl	800af98 <RCCEx_PLL3_Config>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800985a:	e004      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009862:	e000      	b.n	8009866 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800986a:	2b00      	cmp	r3, #0
 800986c:	d10b      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800986e:	4b26      	ldr	r3, [pc, #152]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009872:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800987e:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009880:	430b      	orrs	r3, r1
 8009882:	6553      	str	r3, [r2, #84]	@ 0x54
 8009884:	e003      	b.n	800988e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009886:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800988a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009896:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800989a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800989c:	2300      	movs	r3, #0
 800989e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80098a0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80098a4:	460b      	mov	r3, r1
 80098a6:	4313      	orrs	r3, r2
 80098a8:	d034      	beq.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80098aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80098b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098b8:	d007      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80098ba:	e011      	b.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098bc:	4b12      	ldr	r3, [pc, #72]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c0:	4a11      	ldr	r2, [pc, #68]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80098c8:	e00e      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80098ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098ce:	3308      	adds	r3, #8
 80098d0:	2102      	movs	r1, #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f001 faae 	bl	800ae34 <RCCEx_PLL2_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80098de:	e003      	b.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80098e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10d      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80098f0:	4b05      	ldr	r3, [pc, #20]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80098f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80098f4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80098fe:	4a02      	ldr	r2, [pc, #8]	@ (8009908 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009900:	430b      	orrs	r3, r1
 8009902:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009904:	e006      	b.n	8009914 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8009906:	bf00      	nop
 8009908:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009910:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009920:	663b      	str	r3, [r7, #96]	@ 0x60
 8009922:	2300      	movs	r3, #0
 8009924:	667b      	str	r3, [r7, #100]	@ 0x64
 8009926:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800992a:	460b      	mov	r3, r1
 800992c:	4313      	orrs	r3, r2
 800992e:	d00c      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009930:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009934:	3328      	adds	r3, #40	@ 0x28
 8009936:	2102      	movs	r1, #2
 8009938:	4618      	mov	r0, r3
 800993a:	f001 fb2d 	bl	800af98 <RCCEx_PLL3_Config>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009956:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009958:	2300      	movs	r3, #0
 800995a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800995c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009960:	460b      	mov	r3, r1
 8009962:	4313      	orrs	r3, r2
 8009964:	d036      	beq.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800996a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800996c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009970:	d018      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009972:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009976:	d811      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009978:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800997c:	d014      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800997e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009982:	d80b      	bhi.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d011      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009988:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800998c:	d106      	bne.n	800999c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800998e:	4bb7      	ldr	r3, [pc, #732]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009992:	4ab6      	ldr	r2, [pc, #728]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009994:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009998:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800999a:	e008      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800999c:	2301      	movs	r3, #1
 800999e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80099a2:	e004      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099a4:	bf00      	nop
 80099a6:	e002      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099a8:	bf00      	nop
 80099aa:	e000      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80099ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10a      	bne.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099b6:	4bad      	ldr	r3, [pc, #692]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80099c4:	4aa9      	ldr	r2, [pc, #676]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099c6:	430b      	orrs	r3, r1
 80099c8:	6553      	str	r3, [r2, #84]	@ 0x54
 80099ca:	e003      	b.n	80099d4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80099d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80099e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80099e2:	2300      	movs	r3, #0
 80099e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80099e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80099ea:	460b      	mov	r3, r1
 80099ec:	4313      	orrs	r3, r2
 80099ee:	d009      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80099f0:	4b9e      	ldr	r3, [pc, #632]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80099f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80099f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80099fe:	4a9b      	ldr	r2, [pc, #620]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a00:	430b      	orrs	r3, r1
 8009a02:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009a10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a12:	2300      	movs	r3, #0
 8009a14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a16:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d009      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009a20:	4b92      	ldr	r3, [pc, #584]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a24:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009a2e:	4a8f      	ldr	r2, [pc, #572]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a30:	430b      	orrs	r3, r1
 8009a32:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a42:	2300      	movs	r3, #0
 8009a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a46:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	d00e      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009a50:	4b86      	ldr	r3, [pc, #536]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	4a85      	ldr	r2, [pc, #532]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a5a:	6113      	str	r3, [r2, #16]
 8009a5c:	4b83      	ldr	r3, [pc, #524]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a5e:	6919      	ldr	r1, [r3, #16]
 8009a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009a68:	4a80      	ldr	r2, [pc, #512]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a6a:	430b      	orrs	r3, r1
 8009a6c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a80:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a84:	460b      	mov	r3, r1
 8009a86:	4313      	orrs	r3, r2
 8009a88:	d009      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a8a:	4b78      	ldr	r3, [pc, #480]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a8e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a98:	4a74      	ldr	r2, [pc, #464]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009a9a:	430b      	orrs	r3, r1
 8009a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009aaa:	633b      	str	r3, [r7, #48]	@ 0x30
 8009aac:	2300      	movs	r3, #0
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	d00a      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aba:	4b6c      	ldr	r3, [pc, #432]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009abe:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aca:	4a68      	ldr	r2, [pc, #416]	@ (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009acc:	430b      	orrs	r3, r1
 8009ace:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	2100      	movs	r1, #0
 8009ada:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009adc:	f003 0301 	and.w	r3, r3, #1
 8009ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ae2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	d011      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af0:	3308      	adds	r3, #8
 8009af2:	2100      	movs	r1, #0
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f99d 	bl	800ae34 <RCCEx_PLL2_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d003      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6239      	str	r1, [r7, #32]
 8009b1c:	f003 0302 	and.w	r3, r3, #2
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b22:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009b26:	460b      	mov	r3, r1
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	d011      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009b2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b30:	3308      	adds	r3, #8
 8009b32:	2101      	movs	r1, #1
 8009b34:	4618      	mov	r0, r3
 8009b36:	f001 f97d 	bl	800ae34 <RCCEx_PLL2_Config>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	2100      	movs	r1, #0
 8009b5a:	61b9      	str	r1, [r7, #24]
 8009b5c:	f003 0304 	and.w	r3, r3, #4
 8009b60:	61fb      	str	r3, [r7, #28]
 8009b62:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b66:	460b      	mov	r3, r1
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d011      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b70:	3308      	adds	r3, #8
 8009b72:	2102      	movs	r1, #2
 8009b74:	4618      	mov	r0, r3
 8009b76:	f001 f95d 	bl	800ae34 <RCCEx_PLL2_Config>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009b80:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d003      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009b8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b98:	2100      	movs	r1, #0
 8009b9a:	6139      	str	r1, [r7, #16]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	617b      	str	r3, [r7, #20]
 8009ba2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	d011      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb0:	3328      	adds	r3, #40	@ 0x28
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 f9ef 	bl	800af98 <RCCEx_PLL3_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009bcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	60b9      	str	r1, [r7, #8]
 8009bdc:	f003 0310 	and.w	r3, r3, #16
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009be6:	460b      	mov	r3, r1
 8009be8:	4313      	orrs	r3, r2
 8009bea:	d011      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009bec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bf0:	3328      	adds	r3, #40	@ 0x28
 8009bf2:	2101      	movs	r1, #1
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f001 f9cf 	bl	800af98 <RCCEx_PLL3_Config>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009c00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d003      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	2100      	movs	r1, #0
 8009c1a:	6039      	str	r1, [r7, #0]
 8009c1c:	f003 0320 	and.w	r3, r3, #32
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009c26:	460b      	mov	r3, r1
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	d011      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c30:	3328      	adds	r3, #40	@ 0x28
 8009c32:	2102      	movs	r1, #2
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 f9af 	bl	800af98 <RCCEx_PLL3_Config>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009c40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d003      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009c4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009c50:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d101      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	e000      	b.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009c64:	46bd      	mov	sp, r7
 8009c66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c6a:	bf00      	nop
 8009c6c:	58024400 	.word	0x58024400

08009c70 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b090      	sub	sp, #64	@ 0x40
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c7e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c82:	430b      	orrs	r3, r1
 8009c84:	f040 8094 	bne.w	8009db0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c88:	4b9b      	ldr	r3, [pc, #620]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c8c:	f003 0307 	and.w	r3, r3, #7
 8009c90:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	2b04      	cmp	r3, #4
 8009c96:	f200 8087 	bhi.w	8009da8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cb5 	.word	0x08009cb5
 8009ca4:	08009cdd 	.word	0x08009cdd
 8009ca8:	08009d05 	.word	0x08009d05
 8009cac:	08009da1 	.word	0x08009da1
 8009cb0:	08009d2d 	.word	0x08009d2d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009cb4:	4b90      	ldr	r3, [pc, #576]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009cc0:	d108      	bne.n	8009cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f000 ff62 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cd0:	f000 bc93 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd8:	f000 bc8f 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009cdc:	4b86      	ldr	r3, [pc, #536]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ce4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce8:	d108      	bne.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cea:	f107 0318 	add.w	r3, r7, #24
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f000 fca6 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009cf8:	f000 bc7f 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d00:	f000 bc7b 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009d04:	4b7c      	ldr	r3, [pc, #496]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d10:	d108      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d12:	f107 030c 	add.w	r3, r7, #12
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 fde6 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009d20:	f000 bc6b 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d28:	f000 bc67 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d2c:	4b72      	ldr	r3, [pc, #456]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d30:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009d34:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d36:	4b70      	ldr	r3, [pc, #448]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b04      	cmp	r3, #4
 8009d40:	d10c      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d109      	bne.n	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d48:	4b6b      	ldr	r3, [pc, #428]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	08db      	lsrs	r3, r3, #3
 8009d4e:	f003 0303 	and.w	r3, r3, #3
 8009d52:	4a6a      	ldr	r2, [pc, #424]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009d54:	fa22 f303 	lsr.w	r3, r2, r3
 8009d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d5a:	e01f      	b.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d5c:	4b66      	ldr	r3, [pc, #408]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d68:	d106      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d70:	d102      	bne.n	8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d72:	4b63      	ldr	r3, [pc, #396]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d76:	e011      	b.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d78:	4b5f      	ldr	r3, [pc, #380]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d84:	d106      	bne.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d8c:	d102      	bne.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d92:	e003      	b.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d98:	f000 bc2f 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009d9c:	f000 bc2d 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009da0:	4b59      	ldr	r3, [pc, #356]	@ (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da4:	f000 bc29 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dac:	f000 bc25 	b.w	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009db4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009db8:	430b      	orrs	r3, r1
 8009dba:	f040 80a7 	bne.w	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009dbe:	4b4e      	ldr	r3, [pc, #312]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dc2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009dc6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dce:	d054      	beq.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009dd6:	f200 808b 	bhi.w	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009de0:	f000 8083 	beq.w	8009eea <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8009de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009dea:	f200 8081 	bhi.w	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009df4:	d02f      	beq.n	8009e56 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009dfc:	d878      	bhi.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8009dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d004      	beq.n	8009e0e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8009e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e06:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e0a:	d012      	beq.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8009e0c:	e070      	b.n	8009ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e16:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e1a:	d107      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 feb5 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e2a:	e3e6      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e30:	e3e3      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e32:	4b31      	ldr	r3, [pc, #196]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e3a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e3e:	d107      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e40:	f107 0318 	add.w	r3, r7, #24
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 fbfb 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e4e:	e3d4      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e50:	2300      	movs	r3, #0
 8009e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e54:	e3d1      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e56:	4b28      	ldr	r3, [pc, #160]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e62:	d107      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fd3d 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e72:	e3c2      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e78:	e3bf      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e7e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e82:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e84:	4b1c      	ldr	r3, [pc, #112]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	2b04      	cmp	r3, #4
 8009e8e:	d10c      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8009e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d109      	bne.n	8009eaa <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e96:	4b18      	ldr	r3, [pc, #96]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	08db      	lsrs	r3, r3, #3
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	4a16      	ldr	r2, [pc, #88]	@ (8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8009ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ea8:	e01e      	b.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009eaa:	4b13      	ldr	r3, [pc, #76]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009eb6:	d106      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8009eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ebe:	d102      	bne.n	8009ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8009ec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ec4:	e010      	b.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ece:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009ed2:	d106      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ed6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eda:	d102      	bne.n	8009ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009edc:	4b09      	ldr	r3, [pc, #36]	@ (8009f04 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ee0:	e002      	b.n	8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ee6:	e388      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ee8:	e387      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009eea:	4b07      	ldr	r3, [pc, #28]	@ (8009f08 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eee:	e384      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ef4:	e381      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8009ef6:	bf00      	nop
 8009ef8:	58024400 	.word	0x58024400
 8009efc:	03d09000 	.word	0x03d09000
 8009f00:	003d0900 	.word	0x003d0900
 8009f04:	017d7840 	.word	0x017d7840
 8009f08:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009f0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f10:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8009f14:	430b      	orrs	r3, r1
 8009f16:	f040 809c 	bne.w	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009f1a:	4b9e      	ldr	r3, [pc, #632]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f1e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009f22:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f2a:	d054      	beq.n	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009f32:	f200 808b 	bhi.w	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f3c:	f000 8083 	beq.w	800a046 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8009f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009f46:	f200 8081 	bhi.w	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f50:	d02f      	beq.n	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f58:	d878      	bhi.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d004      	beq.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f66:	d012      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009f68:	e070      	b.n	800a04c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f6a:	4b8a      	ldr	r3, [pc, #552]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f72:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f76:	d107      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fe07 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f86:	e338      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8c:	e335      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f8e:	4b81      	ldr	r3, [pc, #516]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f9a:	d107      	bne.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f9c:	f107 0318 	add.w	r3, r7, #24
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fb4d 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fa6:	69bb      	ldr	r3, [r7, #24]
 8009fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009faa:	e326      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fac:	2300      	movs	r3, #0
 8009fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fb0:	e323      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009fb2:	4b78      	ldr	r3, [pc, #480]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fbe:	d107      	bne.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009fc0:	f107 030c 	add.w	r3, r7, #12
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fc8f 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fce:	e314      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fd4:	e311      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009fd6:	4b6f      	ldr	r3, [pc, #444]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009fde:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009fe0:	4b6c      	ldr	r3, [pc, #432]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0304 	and.w	r3, r3, #4
 8009fe8:	2b04      	cmp	r3, #4
 8009fea:	d10c      	bne.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8009fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ff2:	4b68      	ldr	r3, [pc, #416]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	08db      	lsrs	r3, r3, #3
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	4a66      	ldr	r2, [pc, #408]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8009ffe:	fa22 f303 	lsr.w	r3, r2, r3
 800a002:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a004:	e01e      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a006:	4b63      	ldr	r3, [pc, #396]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a00e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a012:	d106      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800a014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a016:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a01a:	d102      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a01c:	4b5f      	ldr	r3, [pc, #380]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a020:	e010      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a022:	4b5c      	ldr	r3, [pc, #368]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a02a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a02e:	d106      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800a030:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a036:	d102      	bne.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a038:	4b59      	ldr	r3, [pc, #356]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a03c:	e002      	b.n	800a044 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a03e:	2300      	movs	r3, #0
 800a040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a042:	e2da      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a044:	e2d9      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a046:	4b57      	ldr	r3, [pc, #348]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a048:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04a:	e2d6      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a050:	e2d3      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a052:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a056:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a05a:	430b      	orrs	r3, r1
 800a05c:	f040 80a7 	bne.w	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a060:	4b4c      	ldr	r3, [pc, #304]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a064:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a068:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a06c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a070:	d055      	beq.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800a072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a074:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a078:	f200 8096 	bhi.w	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a07e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a082:	f000 8084 	beq.w	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800a086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a088:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a08c:	f200 808c 	bhi.w	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a096:	d030      	beq.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800a098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a09a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a09e:	f200 8083 	bhi.w	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800a0a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d004      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800a0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0ae:	d012      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800a0b0:	e07a      	b.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a0b2:	4b38      	ldr	r3, [pc, #224]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a0be:	d107      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a0c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fd63 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a0ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ce:	e294      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	e291      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a0d6:	4b2f      	ldr	r3, [pc, #188]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a0e2:	d107      	bne.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0e4:	f107 0318 	add.w	r3, r7, #24
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f000 faa9 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0f2:	e282      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0f8:	e27f      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0fa:	4b26      	ldr	r3, [pc, #152]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a106:	d107      	bne.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a108:	f107 030c 	add.w	r3, r7, #12
 800a10c:	4618      	mov	r0, r3
 800a10e:	f000 fbeb 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a116:	e270      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a11c:	e26d      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a11e:	4b1d      	ldr	r3, [pc, #116]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a122:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a126:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a128:	4b1a      	ldr	r3, [pc, #104]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b04      	cmp	r3, #4
 800a132:	d10c      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800a134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a136:	2b00      	cmp	r3, #0
 800a138:	d109      	bne.n	800a14e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a13a:	4b16      	ldr	r3, [pc, #88]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	08db      	lsrs	r3, r3, #3
 800a140:	f003 0303 	and.w	r3, r3, #3
 800a144:	4a14      	ldr	r2, [pc, #80]	@ (800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800a146:	fa22 f303 	lsr.w	r3, r2, r3
 800a14a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a14c:	e01e      	b.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a14e:	4b11      	ldr	r3, [pc, #68]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a156:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a15a:	d106      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800a15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a162:	d102      	bne.n	800a16a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a164:	4b0d      	ldr	r3, [pc, #52]	@ (800a19c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800a166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a168:	e010      	b.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a16a:	4b0a      	ldr	r3, [pc, #40]	@ (800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a172:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a176:	d106      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800a178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a17a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a17e:	d102      	bne.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a180:	4b07      	ldr	r3, [pc, #28]	@ (800a1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a184:	e002      	b.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a18a:	e236      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a18c:	e235      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a18e:	4b05      	ldr	r3, [pc, #20]	@ (800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a190:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a192:	e232      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a194:	58024400 	.word	0x58024400
 800a198:	03d09000 	.word	0x03d09000
 800a19c:	003d0900 	.word	0x003d0900
 800a1a0:	017d7840 	.word	0x017d7840
 800a1a4:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1ac:	e225      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a1ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1b2:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a1b6:	430b      	orrs	r3, r1
 800a1b8:	f040 8085 	bne.w	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a1bc:	4b9c      	ldr	r3, [pc, #624]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a1be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1c0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a1c4:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1cc:	d06b      	beq.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800a1ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a1d4:	d874      	bhi.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1dc:	d056      	beq.n	800a28c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800a1de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a1e4:	d86c      	bhi.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1ec:	d03b      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800a1ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1f4:	d864      	bhi.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a1f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1fc:	d021      	beq.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800a1fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a200:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a204:	d85c      	bhi.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800a206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d004      	beq.n	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800a20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a20e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a212:	d004      	beq.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800a214:	e054      	b.n	800a2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a216:	f7fe fb1d 	bl	8008854 <HAL_RCC_GetPCLK1Freq>
 800a21a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a21c:	e1ed      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a21e:	4b84      	ldr	r3, [pc, #528]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a226:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a22a:	d107      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a22c:	f107 0318 	add.w	r3, r7, #24
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fa05 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23a:	e1de      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a240:	e1db      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a242:	4b7b      	ldr	r3, [pc, #492]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a24a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a24e:	d107      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a250:	f107 030c 	add.w	r3, r7, #12
 800a254:	4618      	mov	r0, r3
 800a256:	f000 fb47 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a25e:	e1cc      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a260:	2300      	movs	r3, #0
 800a262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a264:	e1c9      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a266:	4b72      	ldr	r3, [pc, #456]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0304 	and.w	r3, r3, #4
 800a26e:	2b04      	cmp	r3, #4
 800a270:	d109      	bne.n	800a286 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a272:	4b6f      	ldr	r3, [pc, #444]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	08db      	lsrs	r3, r3, #3
 800a278:	f003 0303 	and.w	r3, r3, #3
 800a27c:	4a6d      	ldr	r2, [pc, #436]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a27e:	fa22 f303 	lsr.w	r3, r2, r3
 800a282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a284:	e1b9      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a286:	2300      	movs	r3, #0
 800a288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a28a:	e1b6      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a28c:	4b68      	ldr	r3, [pc, #416]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a298:	d102      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800a29a:	4b67      	ldr	r3, [pc, #412]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29e:	e1ac      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e1a9      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a2a6:	4b62      	ldr	r3, [pc, #392]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2b2:	d102      	bne.n	800a2ba <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800a2b4:	4b61      	ldr	r3, [pc, #388]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2b8:	e19f      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2be:	e19c      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c4:	e199      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a2c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2ca:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a2ce:	430b      	orrs	r3, r1
 800a2d0:	d173      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a2d2:	4b57      	ldr	r3, [pc, #348]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a2da:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2e2:	d02f      	beq.n	800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2ea:	d863      	bhi.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d004      	beq.n	800a2fc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800a2f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2f8:	d012      	beq.n	800a320 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800a2fa:	e05b      	b.n	800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2fc:	4b4c      	ldr	r3, [pc, #304]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a304:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a308:	d107      	bne.n	800a31a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a30a:	f107 0318 	add.w	r3, r7, #24
 800a30e:	4618      	mov	r0, r3
 800a310:	f000 f996 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a314:	69bb      	ldr	r3, [r7, #24]
 800a316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a318:	e16f      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a31a:	2300      	movs	r3, #0
 800a31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a31e:	e16c      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a320:	4b43      	ldr	r3, [pc, #268]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a328:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a32c:	d107      	bne.n	800a33e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32e:	f107 030c 	add.w	r3, r7, #12
 800a332:	4618      	mov	r0, r3
 800a334:	f000 fad8 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a33c:	e15d      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a33e:	2300      	movs	r3, #0
 800a340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a342:	e15a      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a344:	4b3a      	ldr	r3, [pc, #232]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a348:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a34c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a34e:	4b38      	ldr	r3, [pc, #224]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0304 	and.w	r3, r3, #4
 800a356:	2b04      	cmp	r3, #4
 800a358:	d10c      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d109      	bne.n	800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a360:	4b33      	ldr	r3, [pc, #204]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	08db      	lsrs	r3, r3, #3
 800a366:	f003 0303 	and.w	r3, r3, #3
 800a36a:	4a32      	ldr	r2, [pc, #200]	@ (800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a372:	e01e      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a374:	4b2e      	ldr	r3, [pc, #184]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a37c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a380:	d106      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a388:	d102      	bne.n	800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a38a:	4b2b      	ldr	r3, [pc, #172]	@ (800a438 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800a38c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a38e:	e010      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a390:	4b27      	ldr	r3, [pc, #156]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a39c:	d106      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800a39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3a4:	d102      	bne.n	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3a6:	4b25      	ldr	r3, [pc, #148]	@ (800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800a3a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3aa:	e002      	b.n	800a3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3b0:	e123      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a3b2:	e122      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3b8:	e11f      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a3ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3be:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a3c2:	430b      	orrs	r3, r1
 800a3c4:	d13c      	bne.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a3c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3ce:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800a3d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3dc:	d012      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800a3de:	e023      	b.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3e0:	4b13      	ldr	r3, [pc, #76]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3ec:	d107      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fbcc 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3fc:	e0fd      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a3fe:	2300      	movs	r3, #0
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a402:	e0fa      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a404:	4b0a      	ldr	r3, [pc, #40]	@ (800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a40c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a410:	d107      	bne.n	800a422 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a412:	f107 0318 	add.w	r3, r7, #24
 800a416:	4618      	mov	r0, r3
 800a418:	f000 f912 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a420:	e0eb      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a422:	2300      	movs	r3, #0
 800a424:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a426:	e0e8      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800a428:	2300      	movs	r3, #0
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a42c:	e0e5      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800a42e:	bf00      	nop
 800a430:	58024400 	.word	0x58024400
 800a434:	03d09000 	.word	0x03d09000
 800a438:	003d0900 	.word	0x003d0900
 800a43c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a440:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a444:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a448:	430b      	orrs	r3, r1
 800a44a:	f040 8085 	bne.w	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a44e:	4b6d      	ldr	r3, [pc, #436]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a452:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a456:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a45e:	d06b      	beq.n	800a538 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800a460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a466:	d874      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a46a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a46e:	d056      	beq.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800a470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a476:	d86c      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a47e:	d03b      	beq.n	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a486:	d864      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a48a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a48e:	d021      	beq.n	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800a490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a492:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a496:	d85c      	bhi.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4a4:	d004      	beq.n	800a4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800a4a6:	e054      	b.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a4a8:	f000 f8b4 	bl	800a614 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4ae:	e0a4      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4b0:	4b54      	ldr	r3, [pc, #336]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4bc:	d107      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4be:	f107 0318 	add.w	r3, r7, #24
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 f8bc 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4c8:	69fb      	ldr	r3, [r7, #28]
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4cc:	e095      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d2:	e092      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4d4:	4b4b      	ldr	r3, [pc, #300]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4e0:	d107      	bne.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e2:	f107 030c 	add.w	r3, r7, #12
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f000 f9fe 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f0:	e083      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f6:	e080      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a4f8:	4b42      	ldr	r3, [pc, #264]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b04      	cmp	r3, #4
 800a502:	d109      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a504:	4b3f      	ldr	r3, [pc, #252]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	08db      	lsrs	r3, r3, #3
 800a50a:	f003 0303 	and.w	r3, r3, #3
 800a50e:	4a3e      	ldr	r2, [pc, #248]	@ (800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a516:	e070      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a518:	2300      	movs	r3, #0
 800a51a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a51c:	e06d      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a51e:	4b39      	ldr	r3, [pc, #228]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a526:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a52a:	d102      	bne.n	800a532 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800a52c:	4b37      	ldr	r3, [pc, #220]	@ (800a60c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800a52e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a530:	e063      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a532:	2300      	movs	r3, #0
 800a534:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a536:	e060      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a538:	4b32      	ldr	r3, [pc, #200]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a540:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a544:	d102      	bne.n	800a54c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800a546:	4b32      	ldr	r3, [pc, #200]	@ (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a548:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a54a:	e056      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a54c:	2300      	movs	r3, #0
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a550:	e053      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a556:	e050      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a55c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a560:	430b      	orrs	r3, r1
 800a562:	d148      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a564:	4b27      	ldr	r3, [pc, #156]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a566:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a568:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a56c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a56e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a574:	d02a      	beq.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a57c:	d838      	bhi.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	2b00      	cmp	r3, #0
 800a582:	d004      	beq.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800a584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a586:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a58a:	d00d      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800a58c:	e030      	b.n	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a58e:	4b1d      	ldr	r3, [pc, #116]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a596:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59a:	d102      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800a59c:	4b1c      	ldr	r3, [pc, #112]	@ (800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800a59e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a0:	e02b      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a6:	e028      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a5a8:	4b16      	ldr	r3, [pc, #88]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a5b4:	d107      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a5b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fae8 	bl	800ab90 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a5c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c4:	e019      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ca:	e016      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5cc:	4b0d      	ldr	r3, [pc, #52]	@ (800a604 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5d8:	d107      	bne.n	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5da:	f107 0318 	add.w	r3, r7, #24
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 f82e 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e8:	e007      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ee:	e004      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f4:	e001      	b.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a5fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3740      	adds	r7, #64	@ 0x40
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	58024400 	.word	0x58024400
 800a608:	03d09000 	.word	0x03d09000
 800a60c:	003d0900 	.word	0x003d0900
 800a610:	017d7840 	.word	0x017d7840

0800a614 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a618:	f7fe f8ec 	bl	80087f4 <HAL_RCC_GetHCLKFreq>
 800a61c:	4602      	mov	r2, r0
 800a61e:	4b06      	ldr	r3, [pc, #24]	@ (800a638 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	091b      	lsrs	r3, r3, #4
 800a624:	f003 0307 	and.w	r3, r3, #7
 800a628:	4904      	ldr	r1, [pc, #16]	@ (800a63c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a62a:	5ccb      	ldrb	r3, [r1, r3]
 800a62c:	f003 031f 	and.w	r3, r3, #31
 800a630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a634:	4618      	mov	r0, r3
 800a636:	bd80      	pop	{r7, pc}
 800a638:	58024400 	.word	0x58024400
 800a63c:	08013dd4 	.word	0x08013dd4

0800a640 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a640:	b480      	push	{r7}
 800a642:	b089      	sub	sp, #36	@ 0x24
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a648:	4ba1      	ldr	r3, [pc, #644]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a64a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a64c:	f003 0303 	and.w	r3, r3, #3
 800a650:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a652:	4b9f      	ldr	r3, [pc, #636]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a656:	0b1b      	lsrs	r3, r3, #12
 800a658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a65c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a65e:	4b9c      	ldr	r3, [pc, #624]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a662:	091b      	lsrs	r3, r3, #4
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a66a:	4b99      	ldr	r3, [pc, #612]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a66e:	08db      	lsrs	r3, r3, #3
 800a670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	fb02 f303 	mul.w	r3, r2, r3
 800a67a:	ee07 3a90 	vmov	s15, r3
 800a67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f000 8111 	beq.w	800a8b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	2b02      	cmp	r3, #2
 800a692:	f000 8083 	beq.w	800a79c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a696:	69bb      	ldr	r3, [r7, #24]
 800a698:	2b02      	cmp	r3, #2
 800a69a:	f200 80a1 	bhi.w	800a7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d003      	beq.n	800a6ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	2b01      	cmp	r3, #1
 800a6a8:	d056      	beq.n	800a758 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a6aa:	e099      	b.n	800a7e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6ac:	4b88      	ldr	r3, [pc, #544]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0320 	and.w	r3, r3, #32
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d02d      	beq.n	800a714 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b8:	4b85      	ldr	r3, [pc, #532]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	08db      	lsrs	r3, r3, #3
 800a6be:	f003 0303 	and.w	r3, r3, #3
 800a6c2:	4a84      	ldr	r2, [pc, #528]	@ (800a8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	ee07 3a90 	vmov	s15, r3
 800a6d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	ee07 3a90 	vmov	s15, r3
 800a6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6e2:	4b7b      	ldr	r3, [pc, #492]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6ea:	ee07 3a90 	vmov	s15, r3
 800a6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a6f6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a70e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a712:	e087      	b.n	800a824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	ee07 3a90 	vmov	s15, r3
 800a71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a71e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a8dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a726:	4b6a      	ldr	r3, [pc, #424]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a72e:	ee07 3a90 	vmov	s15, r3
 800a732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a736:	ed97 6a03 	vldr	s12, [r7, #12]
 800a73a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a746:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a756:	e065      	b.n	800a824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	ee07 3a90 	vmov	s15, r3
 800a75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a762:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a76a:	4b59      	ldr	r3, [pc, #356]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a76c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a772:	ee07 3a90 	vmov	s15, r3
 800a776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a77a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a77e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a78a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a79a:	e043      	b.n	800a824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	ee07 3a90 	vmov	s15, r3
 800a7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ae:	4b48      	ldr	r3, [pc, #288]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7b6:	ee07 3a90 	vmov	s15, r3
 800a7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7be:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a7de:	e021      	b.n	800a824 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	ee07 3a90 	vmov	s15, r3
 800a7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7f2:	4b37      	ldr	r3, [pc, #220]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7fa:	ee07 3a90 	vmov	s15, r3
 800a7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a802:	ed97 6a03 	vldr	s12, [r7, #12]
 800a806:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a812:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a81e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a822:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a824:	4b2a      	ldr	r3, [pc, #168]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a828:	0a5b      	lsrs	r3, r3, #9
 800a82a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a82e:	ee07 3a90 	vmov	s15, r3
 800a832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a836:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a84a:	ee17 2a90 	vmov	r2, s15
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a852:	4b1f      	ldr	r3, [pc, #124]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a856:	0c1b      	lsrs	r3, r3, #16
 800a858:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a85c:	ee07 3a90 	vmov	s15, r3
 800a860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a864:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a86c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a878:	ee17 2a90 	vmov	r2, s15
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a880:	4b13      	ldr	r3, [pc, #76]	@ (800a8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a884:	0e1b      	lsrs	r3, r3, #24
 800a886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a88a:	ee07 3a90 	vmov	s15, r3
 800a88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a892:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a89a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8a6:	ee17 2a90 	vmov	r2, s15
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a8ae:	e008      	b.n	800a8c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2200      	movs	r2, #0
 800a8c0:	609a      	str	r2, [r3, #8]
}
 800a8c2:	bf00      	nop
 800a8c4:	3724      	adds	r7, #36	@ 0x24
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop
 800a8d0:	58024400 	.word	0x58024400
 800a8d4:	03d09000 	.word	0x03d09000
 800a8d8:	46000000 	.word	0x46000000
 800a8dc:	4c742400 	.word	0x4c742400
 800a8e0:	4a742400 	.word	0x4a742400
 800a8e4:	4bbebc20 	.word	0x4bbebc20

0800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b089      	sub	sp, #36	@ 0x24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a8f0:	4ba1      	ldr	r3, [pc, #644]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8f4:	f003 0303 	and.w	r3, r3, #3
 800a8f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a8fa:	4b9f      	ldr	r3, [pc, #636]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fe:	0d1b      	lsrs	r3, r3, #20
 800a900:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a904:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a906:	4b9c      	ldr	r3, [pc, #624]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a90a:	0a1b      	lsrs	r3, r3, #8
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a912:	4b99      	ldr	r3, [pc, #612]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a916:	08db      	lsrs	r3, r3, #3
 800a918:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	fb02 f303 	mul.w	r3, r2, r3
 800a922:	ee07 3a90 	vmov	s15, r3
 800a926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a92a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	2b00      	cmp	r3, #0
 800a932:	f000 8111 	beq.w	800ab58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b02      	cmp	r3, #2
 800a93a:	f000 8083 	beq.w	800aa44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b02      	cmp	r3, #2
 800a942:	f200 80a1 	bhi.w	800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d003      	beq.n	800a954 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d056      	beq.n	800aa00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a952:	e099      	b.n	800aa88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a954:	4b88      	ldr	r3, [pc, #544]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 0320 	and.w	r3, r3, #32
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d02d      	beq.n	800a9bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a960:	4b85      	ldr	r3, [pc, #532]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	08db      	lsrs	r3, r3, #3
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	4a84      	ldr	r2, [pc, #528]	@ (800ab7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a96c:	fa22 f303 	lsr.w	r3, r2, r3
 800a970:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	ee07 3a90 	vmov	s15, r3
 800a978:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	ee07 3a90 	vmov	s15, r3
 800a982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a98a:	4b7b      	ldr	r3, [pc, #492]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a99a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a99e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a9ba:	e087      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ab84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a9ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ce:	4b6a      	ldr	r3, [pc, #424]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d6:	ee07 3a90 	vmov	s15, r3
 800a9da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a9e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a9f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a9fe:	e065      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ab88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa12:	4b59      	ldr	r3, [pc, #356]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa42:	e043      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ab8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa56:	4b48      	ldr	r3, [pc, #288]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa66:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa86:	e021      	b.n	800aacc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ab88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9a:	4b37      	ldr	r3, [pc, #220]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ab80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aacc:	4b2a      	ldr	r3, [pc, #168]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aad0:	0a5b      	lsrs	r3, r3, #9
 800aad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aad6:	ee07 3a90 	vmov	s15, r3
 800aada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aade:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aae2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aae6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aaea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aaee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aaf2:	ee17 2a90 	vmov	r2, s15
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800aafa:	4b1f      	ldr	r3, [pc, #124]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aafe:	0c1b      	lsrs	r3, r3, #16
 800ab00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab04:	ee07 3a90 	vmov	s15, r3
 800ab08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab10:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab14:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab20:	ee17 2a90 	vmov	r2, s15
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ab28:	4b13      	ldr	r3, [pc, #76]	@ (800ab78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab2c:	0e1b      	lsrs	r3, r3, #24
 800ab2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab32:	ee07 3a90 	vmov	s15, r3
 800ab36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab42:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab4e:	ee17 2a90 	vmov	r2, s15
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ab56:	e008      	b.n	800ab6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2200      	movs	r2, #0
 800ab68:	609a      	str	r2, [r3, #8]
}
 800ab6a:	bf00      	nop
 800ab6c:	3724      	adds	r7, #36	@ 0x24
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	58024400 	.word	0x58024400
 800ab7c:	03d09000 	.word	0x03d09000
 800ab80:	46000000 	.word	0x46000000
 800ab84:	4c742400 	.word	0x4c742400
 800ab88:	4a742400 	.word	0x4a742400
 800ab8c:	4bbebc20 	.word	0x4bbebc20

0800ab90 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b089      	sub	sp, #36	@ 0x24
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ab98:	4ba0      	ldr	r3, [pc, #640]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab9c:	f003 0303 	and.w	r3, r3, #3
 800aba0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aba2:	4b9e      	ldr	r3, [pc, #632]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba6:	091b      	lsrs	r3, r3, #4
 800aba8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800abac:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800abae:	4b9b      	ldr	r3, [pc, #620]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800abb8:	4b98      	ldr	r3, [pc, #608]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800abbc:	08db      	lsrs	r3, r3, #3
 800abbe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	fb02 f303 	mul.w	r3, r2, r3
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 8111 	beq.w	800adfe <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800abdc:	69bb      	ldr	r3, [r7, #24]
 800abde:	2b02      	cmp	r3, #2
 800abe0:	f000 8083 	beq.w	800acea <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	f200 80a1 	bhi.w	800ad2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800abec:	69bb      	ldr	r3, [r7, #24]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800abf2:	69bb      	ldr	r3, [r7, #24]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d056      	beq.n	800aca6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800abf8:	e099      	b.n	800ad2e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfa:	4b88      	ldr	r3, [pc, #544]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d02d      	beq.n	800ac62 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac06:	4b85      	ldr	r3, [pc, #532]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	08db      	lsrs	r3, r3, #3
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	4a83      	ldr	r2, [pc, #524]	@ (800ae20 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	ee07 3a90 	vmov	s15, r3
 800ac28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac30:	4b7a      	ldr	r3, [pc, #488]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac38:	ee07 3a90 	vmov	s15, r3
 800ac3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac40:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac44:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800ae24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ac60:	e087      	b.n	800ad72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800ae28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ac70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac74:	4b69      	ldr	r3, [pc, #420]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac84:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac88:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800ae24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ac8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ac98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aca4:	e065      	b.n	800ad72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	ee07 3a90 	vmov	s15, r3
 800acac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800ae2c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800acb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb8:	4b58      	ldr	r3, [pc, #352]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc8:	ed97 6a03 	vldr	s12, [r7, #12]
 800accc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800ae24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800acd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace8:	e043      	b.n	800ad72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	ee07 3a90 	vmov	s15, r3
 800acf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf4:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800ae30 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800acf8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfc:	4b47      	ldr	r3, [pc, #284]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad04:	ee07 3a90 	vmov	s15, r3
 800ad08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad10:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800ae24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad14:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad28:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2c:	e021      	b.n	800ad72 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad38:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ae28 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad40:	4b36      	ldr	r3, [pc, #216]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad48:	ee07 3a90 	vmov	s15, r3
 800ad4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad50:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad54:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800ae24 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad58:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad60:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad64:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad70:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ad72:	4b2a      	ldr	r3, [pc, #168]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad76:	0a5b      	lsrs	r3, r3, #9
 800ad78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad7c:	ee07 3a90 	vmov	s15, r3
 800ad80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad84:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ad88:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad8c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad98:	ee17 2a90 	vmov	r2, s15
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ada0:	4b1e      	ldr	r3, [pc, #120]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ada2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ada4:	0c1b      	lsrs	r3, r3, #16
 800ada6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adba:	edd7 6a07 	vldr	s13, [r7, #28]
 800adbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adc6:	ee17 2a90 	vmov	r2, s15
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800adce:	4b13      	ldr	r3, [pc, #76]	@ (800ae1c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800add0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800add2:	0e1b      	lsrs	r3, r3, #24
 800add4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ade4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade8:	edd7 6a07 	vldr	s13, [r7, #28]
 800adec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adf4:	ee17 2a90 	vmov	r2, s15
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800adfc:	e008      	b.n	800ae10 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	609a      	str	r2, [r3, #8]
}
 800ae10:	bf00      	nop
 800ae12:	3724      	adds	r7, #36	@ 0x24
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	03d09000 	.word	0x03d09000
 800ae24:	46000000 	.word	0x46000000
 800ae28:	4c742400 	.word	0x4c742400
 800ae2c:	4a742400 	.word	0x4a742400
 800ae30:	4bbebc20 	.word	0x4bbebc20

0800ae34 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b084      	sub	sp, #16
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
 800ae3c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae42:	4b53      	ldr	r3, [pc, #332]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae46:	f003 0303 	and.w	r3, r3, #3
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	d101      	bne.n	800ae52 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e099      	b.n	800af86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae52:	4b4f      	ldr	r3, [pc, #316]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a4e      	ldr	r2, [pc, #312]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae58:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ae5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae5e:	f7f8 faf3 	bl	8003448 <HAL_GetTick>
 800ae62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae64:	e008      	b.n	800ae78 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae66:	f7f8 faef 	bl	8003448 <HAL_GetTick>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	1ad3      	subs	r3, r2, r3
 800ae70:	2b02      	cmp	r3, #2
 800ae72:	d901      	bls.n	800ae78 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ae74:	2303      	movs	r3, #3
 800ae76:	e086      	b.n	800af86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ae78:	4b45      	ldr	r3, [pc, #276]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1f0      	bne.n	800ae66 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ae84:	4b42      	ldr	r3, [pc, #264]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae88:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	031b      	lsls	r3, r3, #12
 800ae92:	493f      	ldr	r1, [pc, #252]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800ae94:	4313      	orrs	r3, r2
 800ae96:	628b      	str	r3, [r1, #40]	@ 0x28
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	689b      	ldr	r3, [r3, #8]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	025b      	lsls	r3, r3, #9
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	431a      	orrs	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	68db      	ldr	r3, [r3, #12]
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	041b      	lsls	r3, r3, #16
 800aeb6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aeba:	431a      	orrs	r2, r3
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	691b      	ldr	r3, [r3, #16]
 800aec0:	3b01      	subs	r3, #1
 800aec2:	061b      	lsls	r3, r3, #24
 800aec4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800aec8:	4931      	ldr	r1, [pc, #196]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aece:	4b30      	ldr	r3, [pc, #192]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	492d      	ldr	r1, [pc, #180]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aedc:	4313      	orrs	r3, r2
 800aede:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800aee0:	4b2b      	ldr	r3, [pc, #172]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee4:	f023 0220 	bic.w	r2, r3, #32
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	4928      	ldr	r1, [pc, #160]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800aef2:	4b27      	ldr	r3, [pc, #156]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef6:	4a26      	ldr	r2, [pc, #152]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800aef8:	f023 0310 	bic.w	r3, r3, #16
 800aefc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800aefe:	4b24      	ldr	r3, [pc, #144]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af02:	4b24      	ldr	r3, [pc, #144]	@ (800af94 <RCCEx_PLL2_Config+0x160>)
 800af04:	4013      	ands	r3, r2
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	69d2      	ldr	r2, [r2, #28]
 800af0a:	00d2      	lsls	r2, r2, #3
 800af0c:	4920      	ldr	r1, [pc, #128]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af12:	4b1f      	ldr	r3, [pc, #124]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af16:	4a1e      	ldr	r2, [pc, #120]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af18:	f043 0310 	orr.w	r3, r3, #16
 800af1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d106      	bne.n	800af32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af24:	4b1a      	ldr	r3, [pc, #104]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af28:	4a19      	ldr	r2, [pc, #100]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af30:	e00f      	b.n	800af52 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d106      	bne.n	800af46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af38:	4b15      	ldr	r3, [pc, #84]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af3c:	4a14      	ldr	r2, [pc, #80]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800af44:	e005      	b.n	800af52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af46:	4b12      	ldr	r3, [pc, #72]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4a:	4a11      	ldr	r2, [pc, #68]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800af50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af52:	4b0f      	ldr	r3, [pc, #60]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	4a0e      	ldr	r2, [pc, #56]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800af5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af5e:	f7f8 fa73 	bl	8003448 <HAL_GetTick>
 800af62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af64:	e008      	b.n	800af78 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af66:	f7f8 fa6f 	bl	8003448 <HAL_GetTick>
 800af6a:	4602      	mov	r2, r0
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	1ad3      	subs	r3, r2, r3
 800af70:	2b02      	cmp	r3, #2
 800af72:	d901      	bls.n	800af78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800af74:	2303      	movs	r3, #3
 800af76:	e006      	b.n	800af86 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800af78:	4b05      	ldr	r3, [pc, #20]	@ (800af90 <RCCEx_PLL2_Config+0x15c>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0f0      	beq.n	800af66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800af84:	7bfb      	ldrb	r3, [r7, #15]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3710      	adds	r7, #16
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	58024400 	.word	0x58024400
 800af94:	ffff0007 	.word	0xffff0007

0800af98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afa2:	2300      	movs	r3, #0
 800afa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afa6:	4b53      	ldr	r3, [pc, #332]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800afa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afaa:	f003 0303 	and.w	r3, r3, #3
 800afae:	2b03      	cmp	r3, #3
 800afb0:	d101      	bne.n	800afb6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	e099      	b.n	800b0ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800afb6:	4b4f      	ldr	r3, [pc, #316]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a4e      	ldr	r2, [pc, #312]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800afbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800afc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc2:	f7f8 fa41 	bl	8003448 <HAL_GetTick>
 800afc6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afc8:	e008      	b.n	800afdc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800afca:	f7f8 fa3d 	bl	8003448 <HAL_GetTick>
 800afce:	4602      	mov	r2, r0
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d901      	bls.n	800afdc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e086      	b.n	800b0ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800afdc:	4b45      	ldr	r3, [pc, #276]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1f0      	bne.n	800afca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800afe8:	4b42      	ldr	r3, [pc, #264]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800afea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afec:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	051b      	lsls	r3, r3, #20
 800aff6:	493f      	ldr	r1, [pc, #252]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800aff8:	4313      	orrs	r3, r2
 800affa:	628b      	str	r3, [r1, #40]	@ 0x28
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	3b01      	subs	r3, #1
 800b002:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	025b      	lsls	r3, r3, #9
 800b00e:	b29b      	uxth	r3, r3
 800b010:	431a      	orrs	r2, r3
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	68db      	ldr	r3, [r3, #12]
 800b016:	3b01      	subs	r3, #1
 800b018:	041b      	lsls	r3, r3, #16
 800b01a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b01e:	431a      	orrs	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	3b01      	subs	r3, #1
 800b026:	061b      	lsls	r3, r3, #24
 800b028:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b02c:	4931      	ldr	r1, [pc, #196]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b032:	4b30      	ldr	r3, [pc, #192]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	492d      	ldr	r1, [pc, #180]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b040:	4313      	orrs	r3, r2
 800b042:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b044:	4b2b      	ldr	r3, [pc, #172]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b048:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	4928      	ldr	r1, [pc, #160]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b052:	4313      	orrs	r3, r2
 800b054:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b056:	4b27      	ldr	r3, [pc, #156]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b05a:	4a26      	ldr	r2, [pc, #152]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b05c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b060:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b062:	4b24      	ldr	r3, [pc, #144]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b066:	4b24      	ldr	r3, [pc, #144]	@ (800b0f8 <RCCEx_PLL3_Config+0x160>)
 800b068:	4013      	ands	r3, r2
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	69d2      	ldr	r2, [r2, #28]
 800b06e:	00d2      	lsls	r2, r2, #3
 800b070:	4920      	ldr	r1, [pc, #128]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b072:	4313      	orrs	r3, r2
 800b074:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b076:	4b1f      	ldr	r3, [pc, #124]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b07c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b080:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d106      	bne.n	800b096 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b088:	4b1a      	ldr	r3, [pc, #104]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b08a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08c:	4a19      	ldr	r2, [pc, #100]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b08e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b092:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b094:	e00f      	b.n	800b0b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d106      	bne.n	800b0aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b09c:	4b15      	ldr	r3, [pc, #84]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b09e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a0:	4a14      	ldr	r2, [pc, #80]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0a2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b0a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b0a8:	e005      	b.n	800b0b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0aa:	4b12      	ldr	r3, [pc, #72]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ae:	4a11      	ldr	r2, [pc, #68]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b0b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a0e      	ldr	r2, [pc, #56]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0c2:	f7f8 f9c1 	bl	8003448 <HAL_GetTick>
 800b0c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0c8:	e008      	b.n	800b0dc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0ca:	f7f8 f9bd 	bl	8003448 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	2b02      	cmp	r3, #2
 800b0d6:	d901      	bls.n	800b0dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	e006      	b.n	800b0ea <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b0dc:	4b05      	ldr	r3, [pc, #20]	@ (800b0f4 <RCCEx_PLL3_Config+0x15c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d0f0      	beq.n	800b0ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b0e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}
 800b0f2:	bf00      	nop
 800b0f4:	58024400 	.word	0x58024400
 800b0f8:	ffff0007 	.word	0xffff0007

0800b0fc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b08a      	sub	sp, #40	@ 0x28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d101      	bne.n	800b10e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800b10a:	2301      	movs	r3, #1
 800b10c:	e201      	b.n	800b512 <HAL_SAI_Init+0x416>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b114:	2b01      	cmp	r3, #1
 800b116:	d113      	bne.n	800b140 <HAL_SAI_Init+0x44>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a99      	ldr	r2, [pc, #612]	@ (800b384 <HAL_SAI_Init+0x288>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d004      	beq.n	800b12c <HAL_SAI_Init+0x30>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	4a98      	ldr	r2, [pc, #608]	@ (800b388 <HAL_SAI_Init+0x28c>)
 800b128:	4293      	cmp	r3, r2
 800b12a:	d107      	bne.n	800b13c <HAL_SAI_Init+0x40>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800b130:	2b01      	cmp	r3, #1
 800b132:	d103      	bne.n	800b13c <HAL_SAI_Init+0x40>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d001      	beq.n	800b140 <HAL_SAI_Init+0x44>
    {
      return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e1e8      	b.n	800b512 <HAL_SAI_Init+0x416>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	4a8f      	ldr	r2, [pc, #572]	@ (800b384 <HAL_SAI_Init+0x288>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d004      	beq.n	800b154 <HAL_SAI_Init+0x58>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a8f      	ldr	r2, [pc, #572]	@ (800b38c <HAL_SAI_Init+0x290>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d102      	bne.n	800b15a <HAL_SAI_Init+0x5e>
  {
    SaiBaseAddress = SAI1;
 800b154:	4b8e      	ldr	r3, [pc, #568]	@ (800b390 <HAL_SAI_Init+0x294>)
 800b156:	61bb      	str	r3, [r7, #24]
 800b158:	e00e      	b.n	800b178 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a8a      	ldr	r2, [pc, #552]	@ (800b388 <HAL_SAI_Init+0x28c>)
 800b160:	4293      	cmp	r3, r2
 800b162:	d004      	beq.n	800b16e <HAL_SAI_Init+0x72>
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a8a      	ldr	r2, [pc, #552]	@ (800b394 <HAL_SAI_Init+0x298>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d102      	bne.n	800b174 <HAL_SAI_Init+0x78>
  {
    SaiBaseAddress = SAI4;
 800b16e:	4b8a      	ldr	r3, [pc, #552]	@ (800b398 <HAL_SAI_Init+0x29c>)
 800b170:	61bb      	str	r3, [r7, #24]
 800b172:	e001      	b.n	800b178 <HAL_SAI_Init+0x7c>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	e1cc      	b.n	800b512 <HAL_SAI_Init+0x416>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800b17e:	b2db      	uxtb	r3, r3
 800b180:	2b00      	cmp	r3, #0
 800b182:	d106      	bne.n	800b192 <HAL_SAI_Init+0x96>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7f7 f9cb 	bl	8002528 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f9cc 	bl	800b530 <SAI_Disable>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <HAL_SAI_Init+0xa6>
  {
    return HAL_ERROR;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e1b7      	b.n	800b512 <HAL_SAI_Init+0x416>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2202      	movs	r2, #2
 800b1a6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	2b02      	cmp	r3, #2
 800b1b0:	d00c      	beq.n	800b1cc <HAL_SAI_Init+0xd0>
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d80d      	bhi.n	800b1d2 <HAL_SAI_Init+0xd6>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <HAL_SAI_Init+0xc4>
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d003      	beq.n	800b1c6 <HAL_SAI_Init+0xca>
 800b1be:	e008      	b.n	800b1d2 <HAL_SAI_Init+0xd6>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1c4:	e008      	b.n	800b1d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800b1c6:	2310      	movs	r3, #16
 800b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1ca:	e005      	b.n	800b1d8 <HAL_SAI_Init+0xdc>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800b1cc:	2320      	movs	r3, #32
 800b1ce:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1d0:	e002      	b.n	800b1d8 <HAL_SAI_Init+0xdc>
    default:
      tmpregisterGCR = 0;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b1d6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	689b      	ldr	r3, [r3, #8]
 800b1dc:	2b05      	cmp	r3, #5
 800b1de:	d822      	bhi.n	800b226 <HAL_SAI_Init+0x12a>
 800b1e0:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e8 <HAL_SAI_Init+0xec>)
 800b1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1e6:	bf00      	nop
 800b1e8:	0800b201 	.word	0x0800b201
 800b1ec:	0800b207 	.word	0x0800b207
 800b1f0:	0800b20f 	.word	0x0800b20f
 800b1f4:	0800b227 	.word	0x0800b227
 800b1f8:	0800b227 	.word	0x0800b227
 800b1fc:	0800b217 	.word	0x0800b217
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800b200:	2300      	movs	r3, #0
 800b202:	61fb      	str	r3, [r7, #28]
      break;
 800b204:	e012      	b.n	800b22c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800b206:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b20a:	61fb      	str	r3, [r7, #28]
      break;
 800b20c:	e00e      	b.n	800b22c <HAL_SAI_Init+0x130>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b20e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b212:	61fb      	str	r3, [r7, #28]
      break;
 800b214:	e00a      	b.n	800b22c <HAL_SAI_Init+0x130>
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
      break;
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800b216:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b21a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	f043 0303 	orr.w	r3, r3, #3
 800b222:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800b224:	e002      	b.n	800b22c <HAL_SAI_Init+0x130>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	61fb      	str	r3, [r7, #28]
      break;
 800b22a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b230:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f000 808a 	beq.w	800b350 <HAL_SAI_Init+0x254>
  {
    uint32_t freq = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a4f      	ldr	r2, [pc, #316]	@ (800b384 <HAL_SAI_Init+0x288>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d004      	beq.n	800b254 <HAL_SAI_Init+0x158>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	4a4f      	ldr	r2, [pc, #316]	@ (800b38c <HAL_SAI_Init+0x290>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d106      	bne.n	800b262 <HAL_SAI_Init+0x166>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800b254:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800b258:	f04f 0100 	mov.w	r1, #0
 800b25c:	f7fe fd08 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800b260:	6178      	str	r0, [r7, #20]
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a48      	ldr	r2, [pc, #288]	@ (800b388 <HAL_SAI_Init+0x28c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d106      	bne.n	800b27a <HAL_SAI_Init+0x17e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800b26c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800b270:	f04f 0100 	mov.w	r1, #0
 800b274:	f7fe fcfc 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800b278:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a45      	ldr	r2, [pc, #276]	@ (800b394 <HAL_SAI_Init+0x298>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d106      	bne.n	800b292 <HAL_SAI_Init+0x196>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800b284:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b288:	f04f 0100 	mov.w	r1, #0
 800b28c:	f7fe fcf0 	bl	8009c70 <HAL_RCCEx_GetPeriphCLKFreq>
 800b290:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	699b      	ldr	r3, [r3, #24]
 800b296:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b29a:	d120      	bne.n	800b2de <HAL_SAI_Init+0x1e2>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2a0:	2b04      	cmp	r3, #4
 800b2a2:	d102      	bne.n	800b2aa <HAL_SAI_Init+0x1ae>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800b2a4:	2340      	movs	r3, #64	@ 0x40
 800b2a6:	60fb      	str	r3, [r7, #12]
 800b2a8:	e00a      	b.n	800b2c0 <HAL_SAI_Init+0x1c4>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2ae:	2b08      	cmp	r3, #8
 800b2b0:	d103      	bne.n	800b2ba <HAL_SAI_Init+0x1be>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800b2b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2b6:	60fb      	str	r3, [r7, #12]
 800b2b8:	e002      	b.n	800b2c0 <HAL_SAI_Init+0x1c4>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2be:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800b2c0:	697a      	ldr	r2, [r7, #20]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	fb02 f303 	mul.w	r3, r2, r3
 800b2d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b2da:	613b      	str	r3, [r7, #16]
 800b2dc:	e017      	b.n	800b30e <HAL_SAI_Init+0x212>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b2e6:	d101      	bne.n	800b2ec <HAL_SAI_Init+0x1f0>
 800b2e8:	2302      	movs	r3, #2
 800b2ea:	e000      	b.n	800b2ee <HAL_SAI_Init+0x1f2>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	4613      	mov	r3, r2
 800b2f4:	009b      	lsls	r3, r3, #2
 800b2f6:	4413      	add	r3, r2
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6a1b      	ldr	r3, [r3, #32]
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	fb02 f303 	mul.w	r3, r2, r3
 800b306:	021b      	lsls	r3, r3, #8
 800b308:	fbb1 f3f3 	udiv	r3, r1, r3
 800b30c:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	4a22      	ldr	r2, [pc, #136]	@ (800b39c <HAL_SAI_Init+0x2a0>)
 800b312:	fba2 2303 	umull	r2, r3, r2, r3
 800b316:	08da      	lsrs	r2, r3, #3
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800b31c:	6939      	ldr	r1, [r7, #16]
 800b31e:	4b1f      	ldr	r3, [pc, #124]	@ (800b39c <HAL_SAI_Init+0x2a0>)
 800b320:	fba3 2301 	umull	r2, r3, r3, r1
 800b324:	08da      	lsrs	r2, r3, #3
 800b326:	4613      	mov	r3, r2
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	4413      	add	r3, r2
 800b32c:	005b      	lsls	r3, r3, #1
 800b32e:	1aca      	subs	r2, r1, r3
 800b330:	2a08      	cmp	r2, #8
 800b332:	d904      	bls.n	800b33e <HAL_SAI_Init+0x242>
    {
      hsai->Init.Mckdiv += 1U;
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b338:	1c5a      	adds	r2, r3, #1
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b342:	2b04      	cmp	r3, #4
 800b344:	d104      	bne.n	800b350 <HAL_SAI_Init+0x254>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34a:	085a      	lsrs	r2, r3, #1
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d003      	beq.n	800b360 <HAL_SAI_Init+0x264>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	2b02      	cmp	r3, #2
 800b35e:	d109      	bne.n	800b374 <HAL_SAI_Init+0x278>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b364:	2b01      	cmp	r3, #1
 800b366:	d101      	bne.n	800b36c <HAL_SAI_Init+0x270>
 800b368:	2300      	movs	r3, #0
 800b36a:	e001      	b.n	800b370 <HAL_SAI_Init+0x274>
 800b36c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b370:	623b      	str	r3, [r7, #32]
 800b372:	e017      	b.n	800b3a4 <HAL_SAI_Init+0x2a8>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d111      	bne.n	800b3a0 <HAL_SAI_Init+0x2a4>
 800b37c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b380:	e00f      	b.n	800b3a2 <HAL_SAI_Init+0x2a6>
 800b382:	bf00      	nop
 800b384:	40015804 	.word	0x40015804
 800b388:	58005404 	.word	0x58005404
 800b38c:	40015824 	.word	0x40015824
 800b390:	40015800 	.word	0x40015800
 800b394:	58005424 	.word	0x58005424
 800b398:	58005400 	.word	0x58005400
 800b39c:	cccccccd 	.word	0xcccccccd
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                            hsai->Init.MckOverSampling);
  }
#else /* SAI_VER_V2_1*/
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6819      	ldr	r1, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681a      	ldr	r2, [r3, #0]
 800b3ae:	4b5b      	ldr	r3, [pc, #364]	@ (800b51c <HAL_SAI_Init+0x420>)
 800b3b0:	400b      	ands	r3, r1
 800b3b2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6819      	ldr	r1, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3c2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3c8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                          ckstr_bits | syncen_bits |                             \
 800b3dc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800b3e8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ee:	051b      	lsls	r3, r3, #20
 800b3f0:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800b3f6:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	430a      	orrs	r2, r1
 800b404:	601a      	str	r2, [r3, #0]
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6859      	ldr	r1, [r3, #4]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	4b43      	ldr	r3, [pc, #268]	@ (800b520 <HAL_SAI_Init+0x424>)
 800b412:	400b      	ands	r3, r1
 800b414:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6859      	ldr	r1, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	69da      	ldr	r2, [r3, #28]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b424:	431a      	orrs	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b42a:	431a      	orrs	r2, r3
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	430a      	orrs	r2, r1
 800b432:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6899      	ldr	r1, [r3, #8]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	4b39      	ldr	r3, [pc, #228]	@ (800b524 <HAL_SAI_Init+0x428>)
 800b440:	400b      	ands	r3, r1
 800b442:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6899      	ldr	r1, [r3, #8]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b44e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b454:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800b45a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800b460:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b466:	3b01      	subs	r3, #1
 800b468:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800b46a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68d9      	ldr	r1, [r3, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681a      	ldr	r2, [r3, #0]
 800b47e:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800b482:	400b      	ands	r3, r1
 800b484:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68d9      	ldr	r1, [r3, #12]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b494:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b49a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b49c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	021b      	lsls	r3, r3, #8
 800b4a6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	430a      	orrs	r2, r1
 800b4ae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b528 <HAL_SAI_Init+0x42c>)
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d004      	beq.n	800b4c4 <HAL_SAI_Init+0x3c8>
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	4a1b      	ldr	r2, [pc, #108]	@ (800b52c <HAL_SAI_Init+0x430>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d119      	bne.n	800b4f8 <HAL_SAI_Init+0x3fc>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800b4c4:	69bb      	ldr	r3, [r7, #24]
 800b4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4c8:	f023 0201 	bic.w	r2, r3, #1
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d10e      	bne.n	800b4f8 <HAL_SAI_Init+0x3fc>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4f0:	f043 0201 	orr.w	r2, r3, #1
 800b4f4:	69bb      	ldr	r3, [r7, #24]
 800b4f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800b510:	2300      	movs	r3, #0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3728      	adds	r7, #40	@ 0x28
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	f005c010 	.word	0xf005c010
 800b520:	ffff1ff0 	.word	0xffff1ff0
 800b524:	fff88000 	.word	0xfff88000
 800b528:	40015804 	.word	0x40015804
 800b52c:	58005404 	.word	0x58005404

0800b530 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800b530:	b480      	push	{r7}
 800b532:	b085      	sub	sp, #20
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800b538:	4b18      	ldr	r3, [pc, #96]	@ (800b59c <SAI_Disable+0x6c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a18      	ldr	r2, [pc, #96]	@ (800b5a0 <SAI_Disable+0x70>)
 800b53e:	fba2 2303 	umull	r2, r3, r2, r3
 800b542:	0b1b      	lsrs	r3, r3, #12
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800b548:	2300      	movs	r3, #0
 800b54a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b55a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b568:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	72fb      	strb	r3, [r7, #11]
      break;
 800b576:	e009      	b.n	800b58c <SAI_Disable+0x5c>
    }
    count--;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d1e7      	bne.n	800b55c <SAI_Disable+0x2c>

  return status;
 800b58c:	7afb      	ldrb	r3, [r7, #11]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr
 800b59a:	bf00      	nop
 800b59c:	24000000 	.word	0x24000000
 800b5a0:	95cbec1b 	.word	0x95cbec1b

0800b5a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d101      	bne.n	800b5b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e049      	b.n	800b64a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 f841 	bl	800b652 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	3304      	adds	r3, #4
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	f000 fb60 	bl	800bca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2201      	movs	r2, #1
 800b604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2201      	movs	r2, #1
 800b60c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3708      	adds	r7, #8
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}

0800b652 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b652:	b480      	push	{r7}
 800b654:	b083      	sub	sp, #12
 800b656:	af00      	add	r7, sp, #0
 800b658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr
	...

0800b668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d001      	beq.n	800b680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b67c:	2301      	movs	r3, #1
 800b67e:	e05e      	b.n	800b73e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2202      	movs	r2, #2
 800b684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	68da      	ldr	r2, [r3, #12]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f042 0201 	orr.w	r2, r2, #1
 800b696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a2b      	ldr	r2, [pc, #172]	@ (800b74c <HAL_TIM_Base_Start_IT+0xe4>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d02c      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6aa:	d027      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a27      	ldr	r2, [pc, #156]	@ (800b750 <HAL_TIM_Base_Start_IT+0xe8>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d022      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	4a26      	ldr	r2, [pc, #152]	@ (800b754 <HAL_TIM_Base_Start_IT+0xec>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d01d      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a24      	ldr	r2, [pc, #144]	@ (800b758 <HAL_TIM_Base_Start_IT+0xf0>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d018      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4a23      	ldr	r2, [pc, #140]	@ (800b75c <HAL_TIM_Base_Start_IT+0xf4>)
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	d013      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a21      	ldr	r2, [pc, #132]	@ (800b760 <HAL_TIM_Base_Start_IT+0xf8>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d00e      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a20      	ldr	r2, [pc, #128]	@ (800b764 <HAL_TIM_Base_Start_IT+0xfc>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d009      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a1e      	ldr	r2, [pc, #120]	@ (800b768 <HAL_TIM_Base_Start_IT+0x100>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d004      	beq.n	800b6fc <HAL_TIM_Base_Start_IT+0x94>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a1d      	ldr	r2, [pc, #116]	@ (800b76c <HAL_TIM_Base_Start_IT+0x104>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d115      	bne.n	800b728 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	689a      	ldr	r2, [r3, #8]
 800b702:	4b1b      	ldr	r3, [pc, #108]	@ (800b770 <HAL_TIM_Base_Start_IT+0x108>)
 800b704:	4013      	ands	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b06      	cmp	r3, #6
 800b70c:	d015      	beq.n	800b73a <HAL_TIM_Base_Start_IT+0xd2>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b714:	d011      	beq.n	800b73a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f042 0201 	orr.w	r2, r2, #1
 800b724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b726:	e008      	b.n	800b73a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f042 0201 	orr.w	r2, r2, #1
 800b736:	601a      	str	r2, [r3, #0]
 800b738:	e000      	b.n	800b73c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b73a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40010000 	.word	0x40010000
 800b750:	40000400 	.word	0x40000400
 800b754:	40000800 	.word	0x40000800
 800b758:	40000c00 	.word	0x40000c00
 800b75c:	40010400 	.word	0x40010400
 800b760:	40001800 	.word	0x40001800
 800b764:	40014000 	.word	0x40014000
 800b768:	4000e000 	.word	0x4000e000
 800b76c:	4000e400 	.word	0x4000e400
 800b770:	00010007 	.word	0x00010007

0800b774 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b082      	sub	sp, #8
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d101      	bne.n	800b786 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e049      	b.n	800b81a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7f7 fab8 	bl	8002d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2202      	movs	r2, #2
 800b7a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4610      	mov	r0, r2
 800b7b4:	f000 fa78 	bl	800bca8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2201      	movs	r2, #1
 800b7bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	2201      	movs	r2, #1
 800b7cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b818:	2300      	movs	r3, #0
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	3708      	adds	r7, #8
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}

0800b822 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b822:	b580      	push	{r7, lr}
 800b824:	b084      	sub	sp, #16
 800b826:	af00      	add	r7, sp, #0
 800b828:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b83a:	68bb      	ldr	r3, [r7, #8]
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b00      	cmp	r3, #0
 800b842:	d020      	beq.n	800b886 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f003 0302 	and.w	r3, r3, #2
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d01b      	beq.n	800b886 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f06f 0202 	mvn.w	r2, #2
 800b856:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	699b      	ldr	r3, [r3, #24]
 800b864:	f003 0303 	and.w	r3, r3, #3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f9fd 	bl	800bc6c <HAL_TIM_IC_CaptureCallback>
 800b872:	e005      	b.n	800b880 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f9ef 	bl	800bc58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f000 fa00 	bl	800bc80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2200      	movs	r2, #0
 800b884:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	f003 0304 	and.w	r3, r3, #4
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	f003 0304 	and.w	r3, r3, #4
 800b896:	2b00      	cmp	r3, #0
 800b898:	d01b      	beq.n	800b8d2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f06f 0204 	mvn.w	r2, #4
 800b8a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d003      	beq.n	800b8c0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 f9d7 	bl	800bc6c <HAL_TIM_IC_CaptureCallback>
 800b8be:	e005      	b.n	800b8cc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f9c9 	bl	800bc58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f9da 	bl	800bc80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	f003 0308 	and.w	r3, r3, #8
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d020      	beq.n	800b91e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f003 0308 	and.w	r3, r3, #8
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d01b      	beq.n	800b91e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f06f 0208 	mvn.w	r2, #8
 800b8ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2204      	movs	r2, #4
 800b8f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	69db      	ldr	r3, [r3, #28]
 800b8fc:	f003 0303 	and.w	r3, r3, #3
 800b900:	2b00      	cmp	r3, #0
 800b902:	d003      	beq.n	800b90c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f9b1 	bl	800bc6c <HAL_TIM_IC_CaptureCallback>
 800b90a:	e005      	b.n	800b918 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f9a3 	bl	800bc58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f9b4 	bl	800bc80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	f003 0310 	and.w	r3, r3, #16
 800b924:	2b00      	cmp	r3, #0
 800b926:	d020      	beq.n	800b96a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f003 0310 	and.w	r3, r3, #16
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01b      	beq.n	800b96a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f06f 0210 	mvn.w	r2, #16
 800b93a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2208      	movs	r2, #8
 800b940:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f98b 	bl	800bc6c <HAL_TIM_IC_CaptureCallback>
 800b956:	e005      	b.n	800b964 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	f000 f97d 	bl	800bc58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	f000 f98e 	bl	800bc80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2200      	movs	r2, #0
 800b968:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d00c      	beq.n	800b98e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f06f 0201 	mvn.w	r2, #1
 800b986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7f6 fa0f 	bl	8001dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b994:	2b00      	cmp	r3, #0
 800b996:	d104      	bne.n	800b9a2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d00c      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d007      	beq.n	800b9bc <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b9b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fe30 	bl	800c61c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d007      	beq.n	800b9e0 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fe28 	bl	800c630 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d007      	beq.n	800ba04 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f948 	bl	800bc94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	f003 0320 	and.w	r3, r3, #32
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d00c      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f003 0320 	and.w	r3, r3, #32
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d007      	beq.n	800ba28 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f06f 0220 	mvn.w	r2, #32
 800ba20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fdf0 	bl	800c608 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba28:	bf00      	nop
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	60f8      	str	r0, [r7, #12]
 800ba38:	60b9      	str	r1, [r7, #8]
 800ba3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d101      	bne.n	800ba4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba4a:	2302      	movs	r3, #2
 800ba4c:	e0ff      	b.n	800bc4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	2201      	movs	r2, #1
 800ba52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2b14      	cmp	r3, #20
 800ba5a:	f200 80f0 	bhi.w	800bc3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba64:	0800bab9 	.word	0x0800bab9
 800ba68:	0800bc3f 	.word	0x0800bc3f
 800ba6c:	0800bc3f 	.word	0x0800bc3f
 800ba70:	0800bc3f 	.word	0x0800bc3f
 800ba74:	0800baf9 	.word	0x0800baf9
 800ba78:	0800bc3f 	.word	0x0800bc3f
 800ba7c:	0800bc3f 	.word	0x0800bc3f
 800ba80:	0800bc3f 	.word	0x0800bc3f
 800ba84:	0800bb3b 	.word	0x0800bb3b
 800ba88:	0800bc3f 	.word	0x0800bc3f
 800ba8c:	0800bc3f 	.word	0x0800bc3f
 800ba90:	0800bc3f 	.word	0x0800bc3f
 800ba94:	0800bb7b 	.word	0x0800bb7b
 800ba98:	0800bc3f 	.word	0x0800bc3f
 800ba9c:	0800bc3f 	.word	0x0800bc3f
 800baa0:	0800bc3f 	.word	0x0800bc3f
 800baa4:	0800bbbd 	.word	0x0800bbbd
 800baa8:	0800bc3f 	.word	0x0800bc3f
 800baac:	0800bc3f 	.word	0x0800bc3f
 800bab0:	0800bc3f 	.word	0x0800bc3f
 800bab4:	0800bbfd 	.word	0x0800bbfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	68b9      	ldr	r1, [r7, #8]
 800babe:	4618      	mov	r0, r3
 800bac0:	f000 f9a4 	bl	800be0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	699a      	ldr	r2, [r3, #24]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f042 0208 	orr.w	r2, r2, #8
 800bad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699a      	ldr	r2, [r3, #24]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f022 0204 	bic.w	r2, r2, #4
 800bae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	6999      	ldr	r1, [r3, #24]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	691a      	ldr	r2, [r3, #16]
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	619a      	str	r2, [r3, #24]
      break;
 800baf6:	e0a5      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	68b9      	ldr	r1, [r7, #8]
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 fa14 	bl	800bf2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699a      	ldr	r2, [r3, #24]
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	699a      	ldr	r2, [r3, #24]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	6999      	ldr	r1, [r3, #24]
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	021a      	lsls	r2, r3, #8
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	430a      	orrs	r2, r1
 800bb36:	619a      	str	r2, [r3, #24]
      break;
 800bb38:	e084      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68b9      	ldr	r1, [r7, #8]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f000 fa7d 	bl	800c040 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69da      	ldr	r2, [r3, #28]
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f042 0208 	orr.w	r2, r2, #8
 800bb54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	69da      	ldr	r2, [r3, #28]
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0204 	bic.w	r2, r2, #4
 800bb64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69d9      	ldr	r1, [r3, #28]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	430a      	orrs	r2, r1
 800bb76:	61da      	str	r2, [r3, #28]
      break;
 800bb78:	e064      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	4618      	mov	r0, r3
 800bb82:	f000 fae5 	bl	800c150 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	69da      	ldr	r2, [r3, #28]
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69d9      	ldr	r1, [r3, #28]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	691b      	ldr	r3, [r3, #16]
 800bbb0:	021a      	lsls	r2, r3, #8
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	430a      	orrs	r2, r1
 800bbb8:	61da      	str	r2, [r3, #28]
      break;
 800bbba:	e043      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68b9      	ldr	r1, [r7, #8]
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f000 fb2e 	bl	800c224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f042 0208 	orr.w	r2, r2, #8
 800bbd6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f022 0204 	bic.w	r2, r2, #4
 800bbe6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bbee:	68bb      	ldr	r3, [r7, #8]
 800bbf0:	691a      	ldr	r2, [r3, #16]
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	430a      	orrs	r2, r1
 800bbf8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bbfa:	e023      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68b9      	ldr	r1, [r7, #8]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 fb72 	bl	800c2ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	021a      	lsls	r2, r3, #8
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	430a      	orrs	r2, r1
 800bc3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bc3c:	e002      	b.n	800bc44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	75fb      	strb	r3, [r7, #23]
      break;
 800bc42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop

0800bc58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc74:	bf00      	nop
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc88:	bf00      	nop
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc92:	4770      	bx	lr

0800bc94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc9c:	bf00      	nop
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr

0800bca8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
 800bcb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	4a4a      	ldr	r2, [pc, #296]	@ (800bde4 <TIM_Base_SetConfig+0x13c>)
 800bcbc:	4293      	cmp	r3, r2
 800bcbe:	d013      	beq.n	800bce8 <TIM_Base_SetConfig+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcc6:	d00f      	beq.n	800bce8 <TIM_Base_SetConfig+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a47      	ldr	r2, [pc, #284]	@ (800bde8 <TIM_Base_SetConfig+0x140>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d00b      	beq.n	800bce8 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a46      	ldr	r2, [pc, #280]	@ (800bdec <TIM_Base_SetConfig+0x144>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d007      	beq.n	800bce8 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a45      	ldr	r2, [pc, #276]	@ (800bdf0 <TIM_Base_SetConfig+0x148>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d003      	beq.n	800bce8 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	4a44      	ldr	r2, [pc, #272]	@ (800bdf4 <TIM_Base_SetConfig+0x14c>)
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d108      	bne.n	800bcfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	4a39      	ldr	r2, [pc, #228]	@ (800bde4 <TIM_Base_SetConfig+0x13c>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	d027      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd08:	d023      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a36      	ldr	r2, [pc, #216]	@ (800bde8 <TIM_Base_SetConfig+0x140>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01f      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a35      	ldr	r2, [pc, #212]	@ (800bdec <TIM_Base_SetConfig+0x144>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d01b      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a34      	ldr	r2, [pc, #208]	@ (800bdf0 <TIM_Base_SetConfig+0x148>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d017      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a33      	ldr	r2, [pc, #204]	@ (800bdf4 <TIM_Base_SetConfig+0x14c>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d013      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a32      	ldr	r2, [pc, #200]	@ (800bdf8 <TIM_Base_SetConfig+0x150>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00f      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a31      	ldr	r2, [pc, #196]	@ (800bdfc <TIM_Base_SetConfig+0x154>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00b      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a30      	ldr	r2, [pc, #192]	@ (800be00 <TIM_Base_SetConfig+0x158>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d007      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a2f      	ldr	r2, [pc, #188]	@ (800be04 <TIM_Base_SetConfig+0x15c>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d003      	beq.n	800bd52 <TIM_Base_SetConfig+0xaa>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a2e      	ldr	r2, [pc, #184]	@ (800be08 <TIM_Base_SetConfig+0x160>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d108      	bne.n	800bd64 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a16      	ldr	r2, [pc, #88]	@ (800bde4 <TIM_Base_SetConfig+0x13c>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d00f      	beq.n	800bdb0 <TIM_Base_SetConfig+0x108>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a18      	ldr	r2, [pc, #96]	@ (800bdf4 <TIM_Base_SetConfig+0x14c>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d00b      	beq.n	800bdb0 <TIM_Base_SetConfig+0x108>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a17      	ldr	r2, [pc, #92]	@ (800bdf8 <TIM_Base_SetConfig+0x150>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d007      	beq.n	800bdb0 <TIM_Base_SetConfig+0x108>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a16      	ldr	r2, [pc, #88]	@ (800bdfc <TIM_Base_SetConfig+0x154>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d003      	beq.n	800bdb0 <TIM_Base_SetConfig+0x108>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a15      	ldr	r2, [pc, #84]	@ (800be00 <TIM_Base_SetConfig+0x158>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d103      	bne.n	800bdb8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	691a      	ldr	r2, [r3, #16]
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2201      	movs	r2, #1
 800bdbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	691b      	ldr	r3, [r3, #16]
 800bdc2:	f003 0301 	and.w	r3, r3, #1
 800bdc6:	2b01      	cmp	r3, #1
 800bdc8:	d105      	bne.n	800bdd6 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	691b      	ldr	r3, [r3, #16]
 800bdce:	f023 0201 	bic.w	r2, r3, #1
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	611a      	str	r2, [r3, #16]
  }
}
 800bdd6:	bf00      	nop
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	40010000 	.word	0x40010000
 800bde8:	40000400 	.word	0x40000400
 800bdec:	40000800 	.word	0x40000800
 800bdf0:	40000c00 	.word	0x40000c00
 800bdf4:	40010400 	.word	0x40010400
 800bdf8:	40014000 	.word	0x40014000
 800bdfc:	40014400 	.word	0x40014400
 800be00:	40014800 	.word	0x40014800
 800be04:	4000e000 	.word	0x4000e000
 800be08:	4000e400 	.word	0x4000e400

0800be0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b087      	sub	sp, #28
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6a1b      	ldr	r3, [r3, #32]
 800be1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6a1b      	ldr	r3, [r3, #32]
 800be20:	f023 0201 	bic.w	r2, r3, #1
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	699b      	ldr	r3, [r3, #24]
 800be32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	4b37      	ldr	r3, [pc, #220]	@ (800bf14 <TIM_OC1_SetConfig+0x108>)
 800be38:	4013      	ands	r3, r2
 800be3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0303 	bic.w	r3, r3, #3
 800be42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68fa      	ldr	r2, [r7, #12]
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f023 0302 	bic.w	r3, r3, #2
 800be54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	4313      	orrs	r3, r2
 800be5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a2d      	ldr	r2, [pc, #180]	@ (800bf18 <TIM_OC1_SetConfig+0x10c>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d00f      	beq.n	800be88 <TIM_OC1_SetConfig+0x7c>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4a2c      	ldr	r2, [pc, #176]	@ (800bf1c <TIM_OC1_SetConfig+0x110>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d00b      	beq.n	800be88 <TIM_OC1_SetConfig+0x7c>
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	4a2b      	ldr	r2, [pc, #172]	@ (800bf20 <TIM_OC1_SetConfig+0x114>)
 800be74:	4293      	cmp	r3, r2
 800be76:	d007      	beq.n	800be88 <TIM_OC1_SetConfig+0x7c>
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	4a2a      	ldr	r2, [pc, #168]	@ (800bf24 <TIM_OC1_SetConfig+0x118>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d003      	beq.n	800be88 <TIM_OC1_SetConfig+0x7c>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	4a29      	ldr	r2, [pc, #164]	@ (800bf28 <TIM_OC1_SetConfig+0x11c>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d10c      	bne.n	800bea2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f023 0308 	bic.w	r3, r3, #8
 800be8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	697a      	ldr	r2, [r7, #20]
 800be96:	4313      	orrs	r3, r2
 800be98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	f023 0304 	bic.w	r3, r3, #4
 800bea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a1c      	ldr	r2, [pc, #112]	@ (800bf18 <TIM_OC1_SetConfig+0x10c>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d00f      	beq.n	800beca <TIM_OC1_SetConfig+0xbe>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	4a1b      	ldr	r2, [pc, #108]	@ (800bf1c <TIM_OC1_SetConfig+0x110>)
 800beae:	4293      	cmp	r3, r2
 800beb0:	d00b      	beq.n	800beca <TIM_OC1_SetConfig+0xbe>
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bf20 <TIM_OC1_SetConfig+0x114>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d007      	beq.n	800beca <TIM_OC1_SetConfig+0xbe>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a19      	ldr	r2, [pc, #100]	@ (800bf24 <TIM_OC1_SetConfig+0x118>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d003      	beq.n	800beca <TIM_OC1_SetConfig+0xbe>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a18      	ldr	r2, [pc, #96]	@ (800bf28 <TIM_OC1_SetConfig+0x11c>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d111      	bne.n	800beee <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	695b      	ldr	r3, [r3, #20]
 800bede:	693a      	ldr	r2, [r7, #16]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	699b      	ldr	r3, [r3, #24]
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	4313      	orrs	r3, r2
 800beec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	693a      	ldr	r2, [r7, #16]
 800bef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	68fa      	ldr	r2, [r7, #12]
 800bef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	697a      	ldr	r2, [r7, #20]
 800bf06:	621a      	str	r2, [r3, #32]
}
 800bf08:	bf00      	nop
 800bf0a:	371c      	adds	r7, #28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr
 800bf14:	fffeff8f 	.word	0xfffeff8f
 800bf18:	40010000 	.word	0x40010000
 800bf1c:	40010400 	.word	0x40010400
 800bf20:	40014000 	.word	0x40014000
 800bf24:	40014400 	.word	0x40014400
 800bf28:	40014800 	.word	0x40014800

0800bf2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b087      	sub	sp, #28
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	6a1b      	ldr	r3, [r3, #32]
 800bf40:	f023 0210 	bic.w	r2, r3, #16
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	699b      	ldr	r3, [r3, #24]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	4b34      	ldr	r3, [pc, #208]	@ (800c028 <TIM_OC2_SetConfig+0xfc>)
 800bf58:	4013      	ands	r3, r2
 800bf5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	021b      	lsls	r3, r3, #8
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	4313      	orrs	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	f023 0320 	bic.w	r3, r3, #32
 800bf76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	011b      	lsls	r3, r3, #4
 800bf7e:	697a      	ldr	r2, [r7, #20]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4a29      	ldr	r2, [pc, #164]	@ (800c02c <TIM_OC2_SetConfig+0x100>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d003      	beq.n	800bf94 <TIM_OC2_SetConfig+0x68>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4a28      	ldr	r2, [pc, #160]	@ (800c030 <TIM_OC2_SetConfig+0x104>)
 800bf90:	4293      	cmp	r3, r2
 800bf92:	d10d      	bne.n	800bfb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bf9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	011b      	lsls	r3, r3, #4
 800bfa2:	697a      	ldr	r2, [r7, #20]
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	4a1e      	ldr	r2, [pc, #120]	@ (800c02c <TIM_OC2_SetConfig+0x100>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d00f      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xac>
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a1d      	ldr	r2, [pc, #116]	@ (800c030 <TIM_OC2_SetConfig+0x104>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d00b      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xac>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	4a1c      	ldr	r2, [pc, #112]	@ (800c034 <TIM_OC2_SetConfig+0x108>)
 800bfc4:	4293      	cmp	r3, r2
 800bfc6:	d007      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xac>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a1b      	ldr	r2, [pc, #108]	@ (800c038 <TIM_OC2_SetConfig+0x10c>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d003      	beq.n	800bfd8 <TIM_OC2_SetConfig+0xac>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a1a      	ldr	r2, [pc, #104]	@ (800c03c <TIM_OC2_SetConfig+0x110>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d113      	bne.n	800c000 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bfde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bfe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	4313      	orrs	r3, r2
 800bff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	699b      	ldr	r3, [r3, #24]
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	693a      	ldr	r2, [r7, #16]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	693a      	ldr	r2, [r7, #16]
 800c004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68fa      	ldr	r2, [r7, #12]
 800c00a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	685a      	ldr	r2, [r3, #4]
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	697a      	ldr	r2, [r7, #20]
 800c018:	621a      	str	r2, [r3, #32]
}
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	feff8fff 	.word	0xfeff8fff
 800c02c:	40010000 	.word	0x40010000
 800c030:	40010400 	.word	0x40010400
 800c034:	40014000 	.word	0x40014000
 800c038:	40014400 	.word	0x40014400
 800c03c:	40014800 	.word	0x40014800

0800c040 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c040:	b480      	push	{r7}
 800c042:	b087      	sub	sp, #28
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6a1b      	ldr	r3, [r3, #32]
 800c04e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6a1b      	ldr	r3, [r3, #32]
 800c054:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c068:	68fa      	ldr	r2, [r7, #12]
 800c06a:	4b33      	ldr	r3, [pc, #204]	@ (800c138 <TIM_OC3_SetConfig+0xf8>)
 800c06c:	4013      	ands	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	68fa      	ldr	r2, [r7, #12]
 800c07e:	4313      	orrs	r3, r2
 800c080:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c088:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	689b      	ldr	r3, [r3, #8]
 800c08e:	021b      	lsls	r3, r3, #8
 800c090:	697a      	ldr	r2, [r7, #20]
 800c092:	4313      	orrs	r3, r2
 800c094:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a28      	ldr	r2, [pc, #160]	@ (800c13c <TIM_OC3_SetConfig+0xfc>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d003      	beq.n	800c0a6 <TIM_OC3_SetConfig+0x66>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a27      	ldr	r2, [pc, #156]	@ (800c140 <TIM_OC3_SetConfig+0x100>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d10d      	bne.n	800c0c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c0ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	021b      	lsls	r3, r3, #8
 800c0b4:	697a      	ldr	r2, [r7, #20]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c0c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a1d      	ldr	r2, [pc, #116]	@ (800c13c <TIM_OC3_SetConfig+0xfc>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d00f      	beq.n	800c0ea <TIM_OC3_SetConfig+0xaa>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	4a1c      	ldr	r2, [pc, #112]	@ (800c140 <TIM_OC3_SetConfig+0x100>)
 800c0ce:	4293      	cmp	r3, r2
 800c0d0:	d00b      	beq.n	800c0ea <TIM_OC3_SetConfig+0xaa>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a1b      	ldr	r2, [pc, #108]	@ (800c144 <TIM_OC3_SetConfig+0x104>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d007      	beq.n	800c0ea <TIM_OC3_SetConfig+0xaa>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800c148 <TIM_OC3_SetConfig+0x108>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d003      	beq.n	800c0ea <TIM_OC3_SetConfig+0xaa>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a19      	ldr	r2, [pc, #100]	@ (800c14c <TIM_OC3_SetConfig+0x10c>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d113      	bne.n	800c112 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c0f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	011b      	lsls	r3, r3, #4
 800c100:	693a      	ldr	r2, [r7, #16]
 800c102:	4313      	orrs	r3, r2
 800c104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	699b      	ldr	r3, [r3, #24]
 800c10a:	011b      	lsls	r3, r3, #4
 800c10c:	693a      	ldr	r2, [r7, #16]
 800c10e:	4313      	orrs	r3, r2
 800c110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	693a      	ldr	r2, [r7, #16]
 800c116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	685a      	ldr	r2, [r3, #4]
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	697a      	ldr	r2, [r7, #20]
 800c12a:	621a      	str	r2, [r3, #32]
}
 800c12c:	bf00      	nop
 800c12e:	371c      	adds	r7, #28
 800c130:	46bd      	mov	sp, r7
 800c132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c136:	4770      	bx	lr
 800c138:	fffeff8f 	.word	0xfffeff8f
 800c13c:	40010000 	.word	0x40010000
 800c140:	40010400 	.word	0x40010400
 800c144:	40014000 	.word	0x40014000
 800c148:	40014400 	.word	0x40014400
 800c14c:	40014800 	.word	0x40014800

0800c150 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c150:	b480      	push	{r7}
 800c152:	b087      	sub	sp, #28
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6a1b      	ldr	r3, [r3, #32]
 800c15e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	69db      	ldr	r3, [r3, #28]
 800c176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	4b24      	ldr	r3, [pc, #144]	@ (800c20c <TIM_OC4_SetConfig+0xbc>)
 800c17c:	4013      	ands	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c186:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	021b      	lsls	r3, r3, #8
 800c18e:	68fa      	ldr	r2, [r7, #12]
 800c190:	4313      	orrs	r3, r2
 800c192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c19a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	031b      	lsls	r3, r3, #12
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a19      	ldr	r2, [pc, #100]	@ (800c210 <TIM_OC4_SetConfig+0xc0>)
 800c1ac:	4293      	cmp	r3, r2
 800c1ae:	d00f      	beq.n	800c1d0 <TIM_OC4_SetConfig+0x80>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a18      	ldr	r2, [pc, #96]	@ (800c214 <TIM_OC4_SetConfig+0xc4>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d00b      	beq.n	800c1d0 <TIM_OC4_SetConfig+0x80>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a17      	ldr	r2, [pc, #92]	@ (800c218 <TIM_OC4_SetConfig+0xc8>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d007      	beq.n	800c1d0 <TIM_OC4_SetConfig+0x80>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a16      	ldr	r2, [pc, #88]	@ (800c21c <TIM_OC4_SetConfig+0xcc>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_OC4_SetConfig+0x80>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a15      	ldr	r2, [pc, #84]	@ (800c220 <TIM_OC4_SetConfig+0xd0>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d109      	bne.n	800c1e4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	695b      	ldr	r3, [r3, #20]
 800c1dc:	019b      	lsls	r3, r3, #6
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	697a      	ldr	r2, [r7, #20]
 800c1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	685a      	ldr	r2, [r3, #4]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	693a      	ldr	r2, [r7, #16]
 800c1fc:	621a      	str	r2, [r3, #32]
}
 800c1fe:	bf00      	nop
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr
 800c20a:	bf00      	nop
 800c20c:	feff8fff 	.word	0xfeff8fff
 800c210:	40010000 	.word	0x40010000
 800c214:	40010400 	.word	0x40010400
 800c218:	40014000 	.word	0x40014000
 800c21c:	40014400 	.word	0x40014400
 800c220:	40014800 	.word	0x40014800

0800c224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c224:	b480      	push	{r7}
 800c226:	b087      	sub	sp, #28
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	4b21      	ldr	r3, [pc, #132]	@ (800c2d4 <TIM_OC5_SetConfig+0xb0>)
 800c250:	4013      	ands	r3, r2
 800c252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68fa      	ldr	r2, [r7, #12]
 800c25a:	4313      	orrs	r3, r2
 800c25c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c264:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	041b      	lsls	r3, r3, #16
 800c26c:	693a      	ldr	r2, [r7, #16]
 800c26e:	4313      	orrs	r3, r2
 800c270:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a18      	ldr	r2, [pc, #96]	@ (800c2d8 <TIM_OC5_SetConfig+0xb4>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00f      	beq.n	800c29a <TIM_OC5_SetConfig+0x76>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a17      	ldr	r2, [pc, #92]	@ (800c2dc <TIM_OC5_SetConfig+0xb8>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00b      	beq.n	800c29a <TIM_OC5_SetConfig+0x76>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a16      	ldr	r2, [pc, #88]	@ (800c2e0 <TIM_OC5_SetConfig+0xbc>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d007      	beq.n	800c29a <TIM_OC5_SetConfig+0x76>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a15      	ldr	r2, [pc, #84]	@ (800c2e4 <TIM_OC5_SetConfig+0xc0>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d003      	beq.n	800c29a <TIM_OC5_SetConfig+0x76>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a14      	ldr	r2, [pc, #80]	@ (800c2e8 <TIM_OC5_SetConfig+0xc4>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d109      	bne.n	800c2ae <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c2a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	695b      	ldr	r3, [r3, #20]
 800c2a6:	021b      	lsls	r3, r3, #8
 800c2a8:	697a      	ldr	r2, [r7, #20]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	693a      	ldr	r2, [r7, #16]
 800c2c6:	621a      	str	r2, [r3, #32]
}
 800c2c8:	bf00      	nop
 800c2ca:	371c      	adds	r7, #28
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d2:	4770      	bx	lr
 800c2d4:	fffeff8f 	.word	0xfffeff8f
 800c2d8:	40010000 	.word	0x40010000
 800c2dc:	40010400 	.word	0x40010400
 800c2e0:	40014000 	.word	0x40014000
 800c2e4:	40014400 	.word	0x40014400
 800c2e8:	40014800 	.word	0x40014800

0800c2ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c2ec:	b480      	push	{r7}
 800c2ee:	b087      	sub	sp, #28
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a1b      	ldr	r3, [r3, #32]
 800c300:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	4b22      	ldr	r3, [pc, #136]	@ (800c3a0 <TIM_OC6_SetConfig+0xb4>)
 800c318:	4013      	ands	r3, r2
 800c31a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	021b      	lsls	r3, r3, #8
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	4313      	orrs	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c32e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	051b      	lsls	r3, r3, #20
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	4313      	orrs	r3, r2
 800c33a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4a19      	ldr	r2, [pc, #100]	@ (800c3a4 <TIM_OC6_SetConfig+0xb8>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d00f      	beq.n	800c364 <TIM_OC6_SetConfig+0x78>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	4a18      	ldr	r2, [pc, #96]	@ (800c3a8 <TIM_OC6_SetConfig+0xbc>)
 800c348:	4293      	cmp	r3, r2
 800c34a:	d00b      	beq.n	800c364 <TIM_OC6_SetConfig+0x78>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	4a17      	ldr	r2, [pc, #92]	@ (800c3ac <TIM_OC6_SetConfig+0xc0>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d007      	beq.n	800c364 <TIM_OC6_SetConfig+0x78>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	4a16      	ldr	r2, [pc, #88]	@ (800c3b0 <TIM_OC6_SetConfig+0xc4>)
 800c358:	4293      	cmp	r3, r2
 800c35a:	d003      	beq.n	800c364 <TIM_OC6_SetConfig+0x78>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a15      	ldr	r2, [pc, #84]	@ (800c3b4 <TIM_OC6_SetConfig+0xc8>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d109      	bne.n	800c378 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c36a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	695b      	ldr	r3, [r3, #20]
 800c370:	029b      	lsls	r3, r3, #10
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	4313      	orrs	r3, r2
 800c376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68fa      	ldr	r2, [r7, #12]
 800c382:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685a      	ldr	r2, [r3, #4]
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	621a      	str	r2, [r3, #32]
}
 800c392:	bf00      	nop
 800c394:	371c      	adds	r7, #28
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	feff8fff 	.word	0xfeff8fff
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40010400 	.word	0x40010400
 800c3ac:	40014000 	.word	0x40014000
 800c3b0:	40014400 	.word	0x40014400
 800c3b4:	40014800 	.word	0x40014800

0800c3b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3c8:	2b01      	cmp	r3, #1
 800c3ca:	d101      	bne.n	800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3cc:	2302      	movs	r3, #2
 800c3ce:	e077      	b.n	800c4c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2202      	movs	r2, #2
 800c3dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a35      	ldr	r2, [pc, #212]	@ (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d004      	beq.n	800c404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a34      	ldr	r2, [pc, #208]	@ (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d108      	bne.n	800c416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c40a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c41c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	68fa      	ldr	r2, [r7, #12]
 800c42e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a25      	ldr	r2, [pc, #148]	@ (800c4cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c436:	4293      	cmp	r3, r2
 800c438:	d02c      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c442:	d027      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	4a22      	ldr	r2, [pc, #136]	@ (800c4d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c44a:	4293      	cmp	r3, r2
 800c44c:	d022      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a21      	ldr	r2, [pc, #132]	@ (800c4d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c454:	4293      	cmp	r3, r2
 800c456:	d01d      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a1f      	ldr	r2, [pc, #124]	@ (800c4dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d018      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a1a      	ldr	r2, [pc, #104]	@ (800c4d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d013      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a1b      	ldr	r2, [pc, #108]	@ (800c4e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d00e      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a1a      	ldr	r2, [pc, #104]	@ (800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d009      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a18      	ldr	r2, [pc, #96]	@ (800c4e8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c486:	4293      	cmp	r3, r2
 800c488:	d004      	beq.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4a17      	ldr	r2, [pc, #92]	@ (800c4ec <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d10c      	bne.n	800c4ae <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c49a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68ba      	ldr	r2, [r7, #8]
 800c4ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4be:	2300      	movs	r3, #0
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3714      	adds	r7, #20
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr
 800c4cc:	40010000 	.word	0x40010000
 800c4d0:	40010400 	.word	0x40010400
 800c4d4:	40000400 	.word	0x40000400
 800c4d8:	40000800 	.word	0x40000800
 800c4dc:	40000c00 	.word	0x40000c00
 800c4e0:	40001800 	.word	0x40001800
 800c4e4:	40014000 	.word	0x40014000
 800c4e8:	4000e000 	.word	0x4000e000
 800c4ec:	4000e400 	.word	0x4000e400

0800c4f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c504:	2b01      	cmp	r3, #1
 800c506:	d101      	bne.n	800c50c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c508:	2302      	movs	r3, #2
 800c50a:	e073      	b.n	800c5f4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2201      	movs	r2, #1
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	68db      	ldr	r3, [r3, #12]
 800c51e:	4313      	orrs	r3, r2
 800c520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	689b      	ldr	r3, [r3, #8]
 800c52c:	4313      	orrs	r3, r2
 800c52e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685b      	ldr	r3, [r3, #4]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4313      	orrs	r3, r2
 800c54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	4313      	orrs	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c572:	4313      	orrs	r3, r2
 800c574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	699b      	ldr	r3, [r3, #24]
 800c580:	041b      	lsls	r3, r3, #16
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	4313      	orrs	r3, r2
 800c592:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4a19      	ldr	r2, [pc, #100]	@ (800c600 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d004      	beq.n	800c5a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a18      	ldr	r2, [pc, #96]	@ (800c604 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d11c      	bne.n	800c5e2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5b2:	051b      	lsls	r3, r3, #20
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68fa      	ldr	r2, [r7, #12]
 800c5e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	40010000 	.word	0x40010000
 800c604:	40010400 	.word	0x40010400

0800c608 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c610:	bf00      	nop
 800c612:	370c      	adds	r7, #12
 800c614:	46bd      	mov	sp, r7
 800c616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c61a:	4770      	bx	lr

0800c61c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c624:	bf00      	nop
 800c626:	370c      	adds	r7, #12
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b082      	sub	sp, #8
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e042      	b.n	800c6dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d106      	bne.n	800c66e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f7f6 fce9 	bl	8003040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2224      	movs	r2, #36	@ 0x24
 800c672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f022 0201 	bic.w	r2, r2, #1
 800c684:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d002      	beq.n	800c694 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 ff22 	bl	800d4d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f000 f8b3 	bl	800c800 <UART_SetConfig>
 800c69a:	4603      	mov	r3, r0
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d101      	bne.n	800c6a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e01b      	b.n	800c6dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c6b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	689a      	ldr	r2, [r3, #8]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c6c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f042 0201 	orr.w	r2, r2, #1
 800c6d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 ffa1 	bl	800d61c <UART_CheckIdleState>
 800c6da:	4603      	mov	r3, r0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08a      	sub	sp, #40	@ 0x28
 800c6e8:	af02      	add	r7, sp, #8
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	603b      	str	r3, [r7, #0]
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6fa:	2b20      	cmp	r3, #32
 800c6fc:	d17b      	bne.n	800c7f6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <HAL_UART_Transmit+0x26>
 800c704:	88fb      	ldrh	r3, [r7, #6]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d101      	bne.n	800c70e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e074      	b.n	800c7f8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	2200      	movs	r2, #0
 800c712:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2221      	movs	r2, #33	@ 0x21
 800c71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c71e:	f7f6 fe93 	bl	8003448 <HAL_GetTick>
 800c722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	88fa      	ldrh	r2, [r7, #6]
 800c728:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	88fa      	ldrh	r2, [r7, #6]
 800c730:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c73c:	d108      	bne.n	800c750 <HAL_UART_Transmit+0x6c>
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d104      	bne.n	800c750 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c746:	2300      	movs	r3, #0
 800c748:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	61bb      	str	r3, [r7, #24]
 800c74e:	e003      	b.n	800c758 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c754:	2300      	movs	r3, #0
 800c756:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c758:	e030      	b.n	800c7bc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	9300      	str	r3, [sp, #0]
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2200      	movs	r2, #0
 800c762:	2180      	movs	r1, #128	@ 0x80
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f001 f803 	bl	800d770 <UART_WaitOnFlagUntilTimeout>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d005      	beq.n	800c77c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2220      	movs	r2, #32
 800c774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e03d      	b.n	800c7f8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c77c:	69fb      	ldr	r3, [r7, #28]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d10b      	bne.n	800c79a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c782:	69bb      	ldr	r3, [r7, #24]
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	461a      	mov	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c790:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	3302      	adds	r3, #2
 800c796:	61bb      	str	r3, [r7, #24]
 800c798:	e007      	b.n	800c7aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	781a      	ldrb	r2, [r3, #0]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	3b01      	subs	r3, #1
 800c7b4:	b29a      	uxth	r2, r3
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1c8      	bne.n	800c75a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	2140      	movs	r1, #64	@ 0x40
 800c7d2:	68f8      	ldr	r0, [r7, #12]
 800c7d4:	f000 ffcc 	bl	800d770 <UART_WaitOnFlagUntilTimeout>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d005      	beq.n	800c7ea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	2220      	movs	r2, #32
 800c7e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e006      	b.n	800c7f8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2220      	movs	r2, #32
 800c7ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e000      	b.n	800c7f8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c7f6:	2302      	movs	r3, #2
  }
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3720      	adds	r7, #32
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c804:	b092      	sub	sp, #72	@ 0x48
 800c806:	af00      	add	r7, sp, #0
 800c808:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c80a:	2300      	movs	r3, #0
 800c80c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	689a      	ldr	r2, [r3, #8]
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	431a      	orrs	r2, r3
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	695b      	ldr	r3, [r3, #20]
 800c81e:	431a      	orrs	r2, r3
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	69db      	ldr	r3, [r3, #28]
 800c824:	4313      	orrs	r3, r2
 800c826:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	4bbe      	ldr	r3, [pc, #760]	@ (800cb28 <UART_SetConfig+0x328>)
 800c830:	4013      	ands	r3, r2
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	6812      	ldr	r2, [r2, #0]
 800c836:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c838:	430b      	orrs	r3, r1
 800c83a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	430a      	orrs	r2, r1
 800c850:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	699b      	ldr	r3, [r3, #24]
 800c856:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4ab3      	ldr	r2, [pc, #716]	@ (800cb2c <UART_SetConfig+0x32c>)
 800c85e:	4293      	cmp	r3, r2
 800c860:	d004      	beq.n	800c86c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c868:	4313      	orrs	r3, r2
 800c86a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	689a      	ldr	r2, [r3, #8]
 800c872:	4baf      	ldr	r3, [pc, #700]	@ (800cb30 <UART_SetConfig+0x330>)
 800c874:	4013      	ands	r3, r2
 800c876:	697a      	ldr	r2, [r7, #20]
 800c878:	6812      	ldr	r2, [r2, #0]
 800c87a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c87c:	430b      	orrs	r3, r1
 800c87e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c886:	f023 010f 	bic.w	r1, r3, #15
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	430a      	orrs	r2, r1
 800c894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4aa6      	ldr	r2, [pc, #664]	@ (800cb34 <UART_SetConfig+0x334>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d177      	bne.n	800c990 <UART_SetConfig+0x190>
 800c8a0:	4ba5      	ldr	r3, [pc, #660]	@ (800cb38 <UART_SetConfig+0x338>)
 800c8a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c8a8:	2b28      	cmp	r3, #40	@ 0x28
 800c8aa:	d86d      	bhi.n	800c988 <UART_SetConfig+0x188>
 800c8ac:	a201      	add	r2, pc, #4	@ (adr r2, 800c8b4 <UART_SetConfig+0xb4>)
 800c8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8b2:	bf00      	nop
 800c8b4:	0800c959 	.word	0x0800c959
 800c8b8:	0800c989 	.word	0x0800c989
 800c8bc:	0800c989 	.word	0x0800c989
 800c8c0:	0800c989 	.word	0x0800c989
 800c8c4:	0800c989 	.word	0x0800c989
 800c8c8:	0800c989 	.word	0x0800c989
 800c8cc:	0800c989 	.word	0x0800c989
 800c8d0:	0800c989 	.word	0x0800c989
 800c8d4:	0800c961 	.word	0x0800c961
 800c8d8:	0800c989 	.word	0x0800c989
 800c8dc:	0800c989 	.word	0x0800c989
 800c8e0:	0800c989 	.word	0x0800c989
 800c8e4:	0800c989 	.word	0x0800c989
 800c8e8:	0800c989 	.word	0x0800c989
 800c8ec:	0800c989 	.word	0x0800c989
 800c8f0:	0800c989 	.word	0x0800c989
 800c8f4:	0800c969 	.word	0x0800c969
 800c8f8:	0800c989 	.word	0x0800c989
 800c8fc:	0800c989 	.word	0x0800c989
 800c900:	0800c989 	.word	0x0800c989
 800c904:	0800c989 	.word	0x0800c989
 800c908:	0800c989 	.word	0x0800c989
 800c90c:	0800c989 	.word	0x0800c989
 800c910:	0800c989 	.word	0x0800c989
 800c914:	0800c971 	.word	0x0800c971
 800c918:	0800c989 	.word	0x0800c989
 800c91c:	0800c989 	.word	0x0800c989
 800c920:	0800c989 	.word	0x0800c989
 800c924:	0800c989 	.word	0x0800c989
 800c928:	0800c989 	.word	0x0800c989
 800c92c:	0800c989 	.word	0x0800c989
 800c930:	0800c989 	.word	0x0800c989
 800c934:	0800c979 	.word	0x0800c979
 800c938:	0800c989 	.word	0x0800c989
 800c93c:	0800c989 	.word	0x0800c989
 800c940:	0800c989 	.word	0x0800c989
 800c944:	0800c989 	.word	0x0800c989
 800c948:	0800c989 	.word	0x0800c989
 800c94c:	0800c989 	.word	0x0800c989
 800c950:	0800c989 	.word	0x0800c989
 800c954:	0800c981 	.word	0x0800c981
 800c958:	2301      	movs	r3, #1
 800c95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c95e:	e326      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c960:	2304      	movs	r3, #4
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c966:	e322      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c968:	2308      	movs	r3, #8
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c96e:	e31e      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c970:	2310      	movs	r3, #16
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c976:	e31a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c978:	2320      	movs	r3, #32
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c97e:	e316      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c980:	2340      	movs	r3, #64	@ 0x40
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c986:	e312      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c988:	2380      	movs	r3, #128	@ 0x80
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c98e:	e30e      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a69      	ldr	r2, [pc, #420]	@ (800cb3c <UART_SetConfig+0x33c>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d130      	bne.n	800c9fc <UART_SetConfig+0x1fc>
 800c99a:	4b67      	ldr	r3, [pc, #412]	@ (800cb38 <UART_SetConfig+0x338>)
 800c99c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c99e:	f003 0307 	and.w	r3, r3, #7
 800c9a2:	2b05      	cmp	r3, #5
 800c9a4:	d826      	bhi.n	800c9f4 <UART_SetConfig+0x1f4>
 800c9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c9ac <UART_SetConfig+0x1ac>)
 800c9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ac:	0800c9c5 	.word	0x0800c9c5
 800c9b0:	0800c9cd 	.word	0x0800c9cd
 800c9b4:	0800c9d5 	.word	0x0800c9d5
 800c9b8:	0800c9dd 	.word	0x0800c9dd
 800c9bc:	0800c9e5 	.word	0x0800c9e5
 800c9c0:	0800c9ed 	.word	0x0800c9ed
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ca:	e2f0      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9cc:	2304      	movs	r3, #4
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9d2:	e2ec      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9d4:	2308      	movs	r3, #8
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9da:	e2e8      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9dc:	2310      	movs	r3, #16
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9e2:	e2e4      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9e4:	2320      	movs	r3, #32
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9ea:	e2e0      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9ec:	2340      	movs	r3, #64	@ 0x40
 800c9ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9f2:	e2dc      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9f4:	2380      	movs	r3, #128	@ 0x80
 800c9f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c9fa:	e2d8      	b.n	800cfae <UART_SetConfig+0x7ae>
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a4f      	ldr	r2, [pc, #316]	@ (800cb40 <UART_SetConfig+0x340>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d130      	bne.n	800ca68 <UART_SetConfig+0x268>
 800ca06:	4b4c      	ldr	r3, [pc, #304]	@ (800cb38 <UART_SetConfig+0x338>)
 800ca08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	2b05      	cmp	r3, #5
 800ca10:	d826      	bhi.n	800ca60 <UART_SetConfig+0x260>
 800ca12:	a201      	add	r2, pc, #4	@ (adr r2, 800ca18 <UART_SetConfig+0x218>)
 800ca14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca18:	0800ca31 	.word	0x0800ca31
 800ca1c:	0800ca39 	.word	0x0800ca39
 800ca20:	0800ca41 	.word	0x0800ca41
 800ca24:	0800ca49 	.word	0x0800ca49
 800ca28:	0800ca51 	.word	0x0800ca51
 800ca2c:	0800ca59 	.word	0x0800ca59
 800ca30:	2300      	movs	r3, #0
 800ca32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca36:	e2ba      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca38:	2304      	movs	r3, #4
 800ca3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca3e:	e2b6      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca40:	2308      	movs	r3, #8
 800ca42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca46:	e2b2      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca48:	2310      	movs	r3, #16
 800ca4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca4e:	e2ae      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca50:	2320      	movs	r3, #32
 800ca52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca56:	e2aa      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca58:	2340      	movs	r3, #64	@ 0x40
 800ca5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca5e:	e2a6      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca60:	2380      	movs	r3, #128	@ 0x80
 800ca62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ca66:	e2a2      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	4a35      	ldr	r2, [pc, #212]	@ (800cb44 <UART_SetConfig+0x344>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d130      	bne.n	800cad4 <UART_SetConfig+0x2d4>
 800ca72:	4b31      	ldr	r3, [pc, #196]	@ (800cb38 <UART_SetConfig+0x338>)
 800ca74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca76:	f003 0307 	and.w	r3, r3, #7
 800ca7a:	2b05      	cmp	r3, #5
 800ca7c:	d826      	bhi.n	800cacc <UART_SetConfig+0x2cc>
 800ca7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ca84 <UART_SetConfig+0x284>)
 800ca80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca84:	0800ca9d 	.word	0x0800ca9d
 800ca88:	0800caa5 	.word	0x0800caa5
 800ca8c:	0800caad 	.word	0x0800caad
 800ca90:	0800cab5 	.word	0x0800cab5
 800ca94:	0800cabd 	.word	0x0800cabd
 800ca98:	0800cac5 	.word	0x0800cac5
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caa2:	e284      	b.n	800cfae <UART_SetConfig+0x7ae>
 800caa4:	2304      	movs	r3, #4
 800caa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caaa:	e280      	b.n	800cfae <UART_SetConfig+0x7ae>
 800caac:	2308      	movs	r3, #8
 800caae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cab2:	e27c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cab4:	2310      	movs	r3, #16
 800cab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caba:	e278      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cabc:	2320      	movs	r3, #32
 800cabe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cac2:	e274      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cac4:	2340      	movs	r3, #64	@ 0x40
 800cac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800caca:	e270      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cacc:	2380      	movs	r3, #128	@ 0x80
 800cace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cad2:	e26c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a1b      	ldr	r2, [pc, #108]	@ (800cb48 <UART_SetConfig+0x348>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d142      	bne.n	800cb64 <UART_SetConfig+0x364>
 800cade:	4b16      	ldr	r3, [pc, #88]	@ (800cb38 <UART_SetConfig+0x338>)
 800cae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cae2:	f003 0307 	and.w	r3, r3, #7
 800cae6:	2b05      	cmp	r3, #5
 800cae8:	d838      	bhi.n	800cb5c <UART_SetConfig+0x35c>
 800caea:	a201      	add	r2, pc, #4	@ (adr r2, 800caf0 <UART_SetConfig+0x2f0>)
 800caec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caf0:	0800cb09 	.word	0x0800cb09
 800caf4:	0800cb11 	.word	0x0800cb11
 800caf8:	0800cb19 	.word	0x0800cb19
 800cafc:	0800cb21 	.word	0x0800cb21
 800cb00:	0800cb4d 	.word	0x0800cb4d
 800cb04:	0800cb55 	.word	0x0800cb55
 800cb08:	2300      	movs	r3, #0
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb0e:	e24e      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb10:	2304      	movs	r3, #4
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb16:	e24a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb18:	2308      	movs	r3, #8
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb1e:	e246      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb20:	2310      	movs	r3, #16
 800cb22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb26:	e242      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb28:	cfff69f3 	.word	0xcfff69f3
 800cb2c:	58000c00 	.word	0x58000c00
 800cb30:	11fff4ff 	.word	0x11fff4ff
 800cb34:	40011000 	.word	0x40011000
 800cb38:	58024400 	.word	0x58024400
 800cb3c:	40004400 	.word	0x40004400
 800cb40:	40004800 	.word	0x40004800
 800cb44:	40004c00 	.word	0x40004c00
 800cb48:	40005000 	.word	0x40005000
 800cb4c:	2320      	movs	r3, #32
 800cb4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb52:	e22c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb54:	2340      	movs	r3, #64	@ 0x40
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb5a:	e228      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb5c:	2380      	movs	r3, #128	@ 0x80
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cb62:	e224      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4ab1      	ldr	r2, [pc, #708]	@ (800ce30 <UART_SetConfig+0x630>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d176      	bne.n	800cc5c <UART_SetConfig+0x45c>
 800cb6e:	4bb1      	ldr	r3, [pc, #708]	@ (800ce34 <UART_SetConfig+0x634>)
 800cb70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb76:	2b28      	cmp	r3, #40	@ 0x28
 800cb78:	d86c      	bhi.n	800cc54 <UART_SetConfig+0x454>
 800cb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb80 <UART_SetConfig+0x380>)
 800cb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb80:	0800cc25 	.word	0x0800cc25
 800cb84:	0800cc55 	.word	0x0800cc55
 800cb88:	0800cc55 	.word	0x0800cc55
 800cb8c:	0800cc55 	.word	0x0800cc55
 800cb90:	0800cc55 	.word	0x0800cc55
 800cb94:	0800cc55 	.word	0x0800cc55
 800cb98:	0800cc55 	.word	0x0800cc55
 800cb9c:	0800cc55 	.word	0x0800cc55
 800cba0:	0800cc2d 	.word	0x0800cc2d
 800cba4:	0800cc55 	.word	0x0800cc55
 800cba8:	0800cc55 	.word	0x0800cc55
 800cbac:	0800cc55 	.word	0x0800cc55
 800cbb0:	0800cc55 	.word	0x0800cc55
 800cbb4:	0800cc55 	.word	0x0800cc55
 800cbb8:	0800cc55 	.word	0x0800cc55
 800cbbc:	0800cc55 	.word	0x0800cc55
 800cbc0:	0800cc35 	.word	0x0800cc35
 800cbc4:	0800cc55 	.word	0x0800cc55
 800cbc8:	0800cc55 	.word	0x0800cc55
 800cbcc:	0800cc55 	.word	0x0800cc55
 800cbd0:	0800cc55 	.word	0x0800cc55
 800cbd4:	0800cc55 	.word	0x0800cc55
 800cbd8:	0800cc55 	.word	0x0800cc55
 800cbdc:	0800cc55 	.word	0x0800cc55
 800cbe0:	0800cc3d 	.word	0x0800cc3d
 800cbe4:	0800cc55 	.word	0x0800cc55
 800cbe8:	0800cc55 	.word	0x0800cc55
 800cbec:	0800cc55 	.word	0x0800cc55
 800cbf0:	0800cc55 	.word	0x0800cc55
 800cbf4:	0800cc55 	.word	0x0800cc55
 800cbf8:	0800cc55 	.word	0x0800cc55
 800cbfc:	0800cc55 	.word	0x0800cc55
 800cc00:	0800cc45 	.word	0x0800cc45
 800cc04:	0800cc55 	.word	0x0800cc55
 800cc08:	0800cc55 	.word	0x0800cc55
 800cc0c:	0800cc55 	.word	0x0800cc55
 800cc10:	0800cc55 	.word	0x0800cc55
 800cc14:	0800cc55 	.word	0x0800cc55
 800cc18:	0800cc55 	.word	0x0800cc55
 800cc1c:	0800cc55 	.word	0x0800cc55
 800cc20:	0800cc4d 	.word	0x0800cc4d
 800cc24:	2301      	movs	r3, #1
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e1c0      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc2c:	2304      	movs	r3, #4
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc32:	e1bc      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc34:	2308      	movs	r3, #8
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc3a:	e1b8      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc3c:	2310      	movs	r3, #16
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc42:	e1b4      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc44:	2320      	movs	r3, #32
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc4a:	e1b0      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc4c:	2340      	movs	r3, #64	@ 0x40
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc52:	e1ac      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc54:	2380      	movs	r3, #128	@ 0x80
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc5a:	e1a8      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a75      	ldr	r2, [pc, #468]	@ (800ce38 <UART_SetConfig+0x638>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d130      	bne.n	800ccc8 <UART_SetConfig+0x4c8>
 800cc66:	4b73      	ldr	r3, [pc, #460]	@ (800ce34 <UART_SetConfig+0x634>)
 800cc68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc6a:	f003 0307 	and.w	r3, r3, #7
 800cc6e:	2b05      	cmp	r3, #5
 800cc70:	d826      	bhi.n	800ccc0 <UART_SetConfig+0x4c0>
 800cc72:	a201      	add	r2, pc, #4	@ (adr r2, 800cc78 <UART_SetConfig+0x478>)
 800cc74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc78:	0800cc91 	.word	0x0800cc91
 800cc7c:	0800cc99 	.word	0x0800cc99
 800cc80:	0800cca1 	.word	0x0800cca1
 800cc84:	0800cca9 	.word	0x0800cca9
 800cc88:	0800ccb1 	.word	0x0800ccb1
 800cc8c:	0800ccb9 	.word	0x0800ccb9
 800cc90:	2300      	movs	r3, #0
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc96:	e18a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cc98:	2304      	movs	r3, #4
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc9e:	e186      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cca0:	2308      	movs	r3, #8
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cca6:	e182      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cca8:	2310      	movs	r3, #16
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccae:	e17e      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ccb0:	2320      	movs	r3, #32
 800ccb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccb6:	e17a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ccb8:	2340      	movs	r3, #64	@ 0x40
 800ccba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccbe:	e176      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ccc0:	2380      	movs	r3, #128	@ 0x80
 800ccc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccc6:	e172      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	4a5b      	ldr	r2, [pc, #364]	@ (800ce3c <UART_SetConfig+0x63c>)
 800ccce:	4293      	cmp	r3, r2
 800ccd0:	d130      	bne.n	800cd34 <UART_SetConfig+0x534>
 800ccd2:	4b58      	ldr	r3, [pc, #352]	@ (800ce34 <UART_SetConfig+0x634>)
 800ccd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b05      	cmp	r3, #5
 800ccdc:	d826      	bhi.n	800cd2c <UART_SetConfig+0x52c>
 800ccde:	a201      	add	r2, pc, #4	@ (adr r2, 800cce4 <UART_SetConfig+0x4e4>)
 800cce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cce4:	0800ccfd 	.word	0x0800ccfd
 800cce8:	0800cd05 	.word	0x0800cd05
 800ccec:	0800cd0d 	.word	0x0800cd0d
 800ccf0:	0800cd15 	.word	0x0800cd15
 800ccf4:	0800cd1d 	.word	0x0800cd1d
 800ccf8:	0800cd25 	.word	0x0800cd25
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd02:	e154      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd04:	2304      	movs	r3, #4
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd0a:	e150      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd0c:	2308      	movs	r3, #8
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd12:	e14c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd14:	2310      	movs	r3, #16
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd1a:	e148      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd1c:	2320      	movs	r3, #32
 800cd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd22:	e144      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd24:	2340      	movs	r3, #64	@ 0x40
 800cd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd2a:	e140      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd2c:	2380      	movs	r3, #128	@ 0x80
 800cd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd32:	e13c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a41      	ldr	r2, [pc, #260]	@ (800ce40 <UART_SetConfig+0x640>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	f040 8082 	bne.w	800ce44 <UART_SetConfig+0x644>
 800cd40:	4b3c      	ldr	r3, [pc, #240]	@ (800ce34 <UART_SetConfig+0x634>)
 800cd42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd44:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cd48:	2b28      	cmp	r3, #40	@ 0x28
 800cd4a:	d86d      	bhi.n	800ce28 <UART_SetConfig+0x628>
 800cd4c:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <UART_SetConfig+0x554>)
 800cd4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd52:	bf00      	nop
 800cd54:	0800cdf9 	.word	0x0800cdf9
 800cd58:	0800ce29 	.word	0x0800ce29
 800cd5c:	0800ce29 	.word	0x0800ce29
 800cd60:	0800ce29 	.word	0x0800ce29
 800cd64:	0800ce29 	.word	0x0800ce29
 800cd68:	0800ce29 	.word	0x0800ce29
 800cd6c:	0800ce29 	.word	0x0800ce29
 800cd70:	0800ce29 	.word	0x0800ce29
 800cd74:	0800ce01 	.word	0x0800ce01
 800cd78:	0800ce29 	.word	0x0800ce29
 800cd7c:	0800ce29 	.word	0x0800ce29
 800cd80:	0800ce29 	.word	0x0800ce29
 800cd84:	0800ce29 	.word	0x0800ce29
 800cd88:	0800ce29 	.word	0x0800ce29
 800cd8c:	0800ce29 	.word	0x0800ce29
 800cd90:	0800ce29 	.word	0x0800ce29
 800cd94:	0800ce09 	.word	0x0800ce09
 800cd98:	0800ce29 	.word	0x0800ce29
 800cd9c:	0800ce29 	.word	0x0800ce29
 800cda0:	0800ce29 	.word	0x0800ce29
 800cda4:	0800ce29 	.word	0x0800ce29
 800cda8:	0800ce29 	.word	0x0800ce29
 800cdac:	0800ce29 	.word	0x0800ce29
 800cdb0:	0800ce29 	.word	0x0800ce29
 800cdb4:	0800ce11 	.word	0x0800ce11
 800cdb8:	0800ce29 	.word	0x0800ce29
 800cdbc:	0800ce29 	.word	0x0800ce29
 800cdc0:	0800ce29 	.word	0x0800ce29
 800cdc4:	0800ce29 	.word	0x0800ce29
 800cdc8:	0800ce29 	.word	0x0800ce29
 800cdcc:	0800ce29 	.word	0x0800ce29
 800cdd0:	0800ce29 	.word	0x0800ce29
 800cdd4:	0800ce19 	.word	0x0800ce19
 800cdd8:	0800ce29 	.word	0x0800ce29
 800cddc:	0800ce29 	.word	0x0800ce29
 800cde0:	0800ce29 	.word	0x0800ce29
 800cde4:	0800ce29 	.word	0x0800ce29
 800cde8:	0800ce29 	.word	0x0800ce29
 800cdec:	0800ce29 	.word	0x0800ce29
 800cdf0:	0800ce29 	.word	0x0800ce29
 800cdf4:	0800ce21 	.word	0x0800ce21
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e0d6      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce00:	2304      	movs	r3, #4
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e0d2      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce08:	2308      	movs	r3, #8
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce0e:	e0ce      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce10:	2310      	movs	r3, #16
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce16:	e0ca      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce18:	2320      	movs	r3, #32
 800ce1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce1e:	e0c6      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce20:	2340      	movs	r3, #64	@ 0x40
 800ce22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce26:	e0c2      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce28:	2380      	movs	r3, #128	@ 0x80
 800ce2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce2e:	e0be      	b.n	800cfae <UART_SetConfig+0x7ae>
 800ce30:	40011400 	.word	0x40011400
 800ce34:	58024400 	.word	0x58024400
 800ce38:	40007800 	.word	0x40007800
 800ce3c:	40007c00 	.word	0x40007c00
 800ce40:	40011800 	.word	0x40011800
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4aad      	ldr	r2, [pc, #692]	@ (800d100 <UART_SetConfig+0x900>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d176      	bne.n	800cf3c <UART_SetConfig+0x73c>
 800ce4e:	4bad      	ldr	r3, [pc, #692]	@ (800d104 <UART_SetConfig+0x904>)
 800ce50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce52:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce56:	2b28      	cmp	r3, #40	@ 0x28
 800ce58:	d86c      	bhi.n	800cf34 <UART_SetConfig+0x734>
 800ce5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce60 <UART_SetConfig+0x660>)
 800ce5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce60:	0800cf05 	.word	0x0800cf05
 800ce64:	0800cf35 	.word	0x0800cf35
 800ce68:	0800cf35 	.word	0x0800cf35
 800ce6c:	0800cf35 	.word	0x0800cf35
 800ce70:	0800cf35 	.word	0x0800cf35
 800ce74:	0800cf35 	.word	0x0800cf35
 800ce78:	0800cf35 	.word	0x0800cf35
 800ce7c:	0800cf35 	.word	0x0800cf35
 800ce80:	0800cf0d 	.word	0x0800cf0d
 800ce84:	0800cf35 	.word	0x0800cf35
 800ce88:	0800cf35 	.word	0x0800cf35
 800ce8c:	0800cf35 	.word	0x0800cf35
 800ce90:	0800cf35 	.word	0x0800cf35
 800ce94:	0800cf35 	.word	0x0800cf35
 800ce98:	0800cf35 	.word	0x0800cf35
 800ce9c:	0800cf35 	.word	0x0800cf35
 800cea0:	0800cf15 	.word	0x0800cf15
 800cea4:	0800cf35 	.word	0x0800cf35
 800cea8:	0800cf35 	.word	0x0800cf35
 800ceac:	0800cf35 	.word	0x0800cf35
 800ceb0:	0800cf35 	.word	0x0800cf35
 800ceb4:	0800cf35 	.word	0x0800cf35
 800ceb8:	0800cf35 	.word	0x0800cf35
 800cebc:	0800cf35 	.word	0x0800cf35
 800cec0:	0800cf1d 	.word	0x0800cf1d
 800cec4:	0800cf35 	.word	0x0800cf35
 800cec8:	0800cf35 	.word	0x0800cf35
 800cecc:	0800cf35 	.word	0x0800cf35
 800ced0:	0800cf35 	.word	0x0800cf35
 800ced4:	0800cf35 	.word	0x0800cf35
 800ced8:	0800cf35 	.word	0x0800cf35
 800cedc:	0800cf35 	.word	0x0800cf35
 800cee0:	0800cf25 	.word	0x0800cf25
 800cee4:	0800cf35 	.word	0x0800cf35
 800cee8:	0800cf35 	.word	0x0800cf35
 800ceec:	0800cf35 	.word	0x0800cf35
 800cef0:	0800cf35 	.word	0x0800cf35
 800cef4:	0800cf35 	.word	0x0800cf35
 800cef8:	0800cf35 	.word	0x0800cf35
 800cefc:	0800cf35 	.word	0x0800cf35
 800cf00:	0800cf2d 	.word	0x0800cf2d
 800cf04:	2301      	movs	r3, #1
 800cf06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0a:	e050      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf0c:	2304      	movs	r3, #4
 800cf0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf12:	e04c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf14:	2308      	movs	r3, #8
 800cf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1a:	e048      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf1c:	2310      	movs	r3, #16
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf22:	e044      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf24:	2320      	movs	r3, #32
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e040      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf2c:	2340      	movs	r3, #64	@ 0x40
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e03c      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf34:	2380      	movs	r3, #128	@ 0x80
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e038      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	4a71      	ldr	r2, [pc, #452]	@ (800d108 <UART_SetConfig+0x908>)
 800cf42:	4293      	cmp	r3, r2
 800cf44:	d130      	bne.n	800cfa8 <UART_SetConfig+0x7a8>
 800cf46:	4b6f      	ldr	r3, [pc, #444]	@ (800d104 <UART_SetConfig+0x904>)
 800cf48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf4a:	f003 0307 	and.w	r3, r3, #7
 800cf4e:	2b05      	cmp	r3, #5
 800cf50:	d826      	bhi.n	800cfa0 <UART_SetConfig+0x7a0>
 800cf52:	a201      	add	r2, pc, #4	@ (adr r2, 800cf58 <UART_SetConfig+0x758>)
 800cf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf58:	0800cf71 	.word	0x0800cf71
 800cf5c:	0800cf79 	.word	0x0800cf79
 800cf60:	0800cf81 	.word	0x0800cf81
 800cf64:	0800cf89 	.word	0x0800cf89
 800cf68:	0800cf91 	.word	0x0800cf91
 800cf6c:	0800cf99 	.word	0x0800cf99
 800cf70:	2302      	movs	r3, #2
 800cf72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf76:	e01a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf78:	2304      	movs	r3, #4
 800cf7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7e:	e016      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf80:	2308      	movs	r3, #8
 800cf82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf86:	e012      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf88:	2310      	movs	r3, #16
 800cf8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8e:	e00e      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf90:	2320      	movs	r3, #32
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf96:	e00a      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cf98:	2340      	movs	r3, #64	@ 0x40
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e006      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cfa0:	2380      	movs	r3, #128	@ 0x80
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e002      	b.n	800cfae <UART_SetConfig+0x7ae>
 800cfa8:	2380      	movs	r3, #128	@ 0x80
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfae:	697b      	ldr	r3, [r7, #20]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a55      	ldr	r2, [pc, #340]	@ (800d108 <UART_SetConfig+0x908>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	f040 80f8 	bne.w	800d1aa <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cfba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	2b20      	cmp	r3, #32
 800cfc0:	dc46      	bgt.n	800d050 <UART_SetConfig+0x850>
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	db75      	blt.n	800d0b2 <UART_SetConfig+0x8b2>
 800cfc6:	3b02      	subs	r3, #2
 800cfc8:	2b1e      	cmp	r3, #30
 800cfca:	d872      	bhi.n	800d0b2 <UART_SetConfig+0x8b2>
 800cfcc:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd4 <UART_SetConfig+0x7d4>)
 800cfce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd2:	bf00      	nop
 800cfd4:	0800d057 	.word	0x0800d057
 800cfd8:	0800d0b3 	.word	0x0800d0b3
 800cfdc:	0800d05f 	.word	0x0800d05f
 800cfe0:	0800d0b3 	.word	0x0800d0b3
 800cfe4:	0800d0b3 	.word	0x0800d0b3
 800cfe8:	0800d0b3 	.word	0x0800d0b3
 800cfec:	0800d06f 	.word	0x0800d06f
 800cff0:	0800d0b3 	.word	0x0800d0b3
 800cff4:	0800d0b3 	.word	0x0800d0b3
 800cff8:	0800d0b3 	.word	0x0800d0b3
 800cffc:	0800d0b3 	.word	0x0800d0b3
 800d000:	0800d0b3 	.word	0x0800d0b3
 800d004:	0800d0b3 	.word	0x0800d0b3
 800d008:	0800d0b3 	.word	0x0800d0b3
 800d00c:	0800d07f 	.word	0x0800d07f
 800d010:	0800d0b3 	.word	0x0800d0b3
 800d014:	0800d0b3 	.word	0x0800d0b3
 800d018:	0800d0b3 	.word	0x0800d0b3
 800d01c:	0800d0b3 	.word	0x0800d0b3
 800d020:	0800d0b3 	.word	0x0800d0b3
 800d024:	0800d0b3 	.word	0x0800d0b3
 800d028:	0800d0b3 	.word	0x0800d0b3
 800d02c:	0800d0b3 	.word	0x0800d0b3
 800d030:	0800d0b3 	.word	0x0800d0b3
 800d034:	0800d0b3 	.word	0x0800d0b3
 800d038:	0800d0b3 	.word	0x0800d0b3
 800d03c:	0800d0b3 	.word	0x0800d0b3
 800d040:	0800d0b3 	.word	0x0800d0b3
 800d044:	0800d0b3 	.word	0x0800d0b3
 800d048:	0800d0b3 	.word	0x0800d0b3
 800d04c:	0800d0a5 	.word	0x0800d0a5
 800d050:	2b40      	cmp	r3, #64	@ 0x40
 800d052:	d02a      	beq.n	800d0aa <UART_SetConfig+0x8aa>
 800d054:	e02d      	b.n	800d0b2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d056:	f7fd fadd 	bl	800a614 <HAL_RCCEx_GetD3PCLK1Freq>
 800d05a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d05c:	e02f      	b.n	800d0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d05e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d062:	4618      	mov	r0, r3
 800d064:	f7fd faec 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d06a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d06c:	e027      	b.n	800d0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d06e:	f107 0318 	add.w	r3, r7, #24
 800d072:	4618      	mov	r0, r3
 800d074:	f7fd fc38 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d07c:	e01f      	b.n	800d0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d07e:	4b21      	ldr	r3, [pc, #132]	@ (800d104 <UART_SetConfig+0x904>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f003 0320 	and.w	r3, r3, #32
 800d086:	2b00      	cmp	r3, #0
 800d088:	d009      	beq.n	800d09e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d08a:	4b1e      	ldr	r3, [pc, #120]	@ (800d104 <UART_SetConfig+0x904>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	08db      	lsrs	r3, r3, #3
 800d090:	f003 0303 	and.w	r3, r3, #3
 800d094:	4a1d      	ldr	r2, [pc, #116]	@ (800d10c <UART_SetConfig+0x90c>)
 800d096:	fa22 f303 	lsr.w	r3, r2, r3
 800d09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d09c:	e00f      	b.n	800d0be <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d09e:	4b1b      	ldr	r3, [pc, #108]	@ (800d10c <UART_SetConfig+0x90c>)
 800d0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a2:	e00c      	b.n	800d0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0a4:	4b1a      	ldr	r3, [pc, #104]	@ (800d110 <UART_SetConfig+0x910>)
 800d0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0a8:	e009      	b.n	800d0be <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0b0:	e005      	b.n	800d0be <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d0bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d0be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	f000 81ee 	beq.w	800d4a2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0ca:	4a12      	ldr	r2, [pc, #72]	@ (800d114 <UART_SetConfig+0x914>)
 800d0cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0d0:	461a      	mov	r2, r3
 800d0d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0d8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	4613      	mov	r3, r2
 800d0e0:	005b      	lsls	r3, r3, #1
 800d0e2:	4413      	add	r3, r2
 800d0e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d305      	bcc.n	800d0f6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0ea:	697b      	ldr	r3, [r7, #20]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d910      	bls.n	800d118 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d0fc:	e1d1      	b.n	800d4a2 <UART_SetConfig+0xca2>
 800d0fe:	bf00      	nop
 800d100:	40011c00 	.word	0x40011c00
 800d104:	58024400 	.word	0x58024400
 800d108:	58000c00 	.word	0x58000c00
 800d10c:	03d09000 	.word	0x03d09000
 800d110:	003d0900 	.word	0x003d0900
 800d114:	08013de4 	.word	0x08013de4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d11a:	2200      	movs	r2, #0
 800d11c:	60bb      	str	r3, [r7, #8]
 800d11e:	60fa      	str	r2, [r7, #12]
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d124:	4ac0      	ldr	r2, [pc, #768]	@ (800d428 <UART_SetConfig+0xc28>)
 800d126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	2200      	movs	r2, #0
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	607a      	str	r2, [r7, #4]
 800d132:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d136:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d13a:	f7f3 f941 	bl	80003c0 <__aeabi_uldivmod>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4610      	mov	r0, r2
 800d144:	4619      	mov	r1, r3
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	f04f 0300 	mov.w	r3, #0
 800d14e:	020b      	lsls	r3, r1, #8
 800d150:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d154:	0202      	lsls	r2, r0, #8
 800d156:	6979      	ldr	r1, [r7, #20]
 800d158:	6849      	ldr	r1, [r1, #4]
 800d15a:	0849      	lsrs	r1, r1, #1
 800d15c:	2000      	movs	r0, #0
 800d15e:	460c      	mov	r4, r1
 800d160:	4605      	mov	r5, r0
 800d162:	eb12 0804 	adds.w	r8, r2, r4
 800d166:	eb43 0905 	adc.w	r9, r3, r5
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	685b      	ldr	r3, [r3, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	469a      	mov	sl, r3
 800d172:	4693      	mov	fp, r2
 800d174:	4652      	mov	r2, sl
 800d176:	465b      	mov	r3, fp
 800d178:	4640      	mov	r0, r8
 800d17a:	4649      	mov	r1, r9
 800d17c:	f7f3 f920 	bl	80003c0 <__aeabi_uldivmod>
 800d180:	4602      	mov	r2, r0
 800d182:	460b      	mov	r3, r1
 800d184:	4613      	mov	r3, r2
 800d186:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d18a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d18e:	d308      	bcc.n	800d1a2 <UART_SetConfig+0x9a2>
 800d190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d192:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d196:	d204      	bcs.n	800d1a2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d19e:	60da      	str	r2, [r3, #12]
 800d1a0:	e17f      	b.n	800d4a2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d1a8:	e17b      	b.n	800d4a2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	69db      	ldr	r3, [r3, #28]
 800d1ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d1b2:	f040 80bd 	bne.w	800d330 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800d1b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	2b20      	cmp	r3, #32
 800d1bc:	dc48      	bgt.n	800d250 <UART_SetConfig+0xa50>
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	db7b      	blt.n	800d2ba <UART_SetConfig+0xaba>
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	d879      	bhi.n	800d2ba <UART_SetConfig+0xaba>
 800d1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1cc <UART_SetConfig+0x9cc>)
 800d1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1cc:	0800d257 	.word	0x0800d257
 800d1d0:	0800d25f 	.word	0x0800d25f
 800d1d4:	0800d2bb 	.word	0x0800d2bb
 800d1d8:	0800d2bb 	.word	0x0800d2bb
 800d1dc:	0800d267 	.word	0x0800d267
 800d1e0:	0800d2bb 	.word	0x0800d2bb
 800d1e4:	0800d2bb 	.word	0x0800d2bb
 800d1e8:	0800d2bb 	.word	0x0800d2bb
 800d1ec:	0800d277 	.word	0x0800d277
 800d1f0:	0800d2bb 	.word	0x0800d2bb
 800d1f4:	0800d2bb 	.word	0x0800d2bb
 800d1f8:	0800d2bb 	.word	0x0800d2bb
 800d1fc:	0800d2bb 	.word	0x0800d2bb
 800d200:	0800d2bb 	.word	0x0800d2bb
 800d204:	0800d2bb 	.word	0x0800d2bb
 800d208:	0800d2bb 	.word	0x0800d2bb
 800d20c:	0800d287 	.word	0x0800d287
 800d210:	0800d2bb 	.word	0x0800d2bb
 800d214:	0800d2bb 	.word	0x0800d2bb
 800d218:	0800d2bb 	.word	0x0800d2bb
 800d21c:	0800d2bb 	.word	0x0800d2bb
 800d220:	0800d2bb 	.word	0x0800d2bb
 800d224:	0800d2bb 	.word	0x0800d2bb
 800d228:	0800d2bb 	.word	0x0800d2bb
 800d22c:	0800d2bb 	.word	0x0800d2bb
 800d230:	0800d2bb 	.word	0x0800d2bb
 800d234:	0800d2bb 	.word	0x0800d2bb
 800d238:	0800d2bb 	.word	0x0800d2bb
 800d23c:	0800d2bb 	.word	0x0800d2bb
 800d240:	0800d2bb 	.word	0x0800d2bb
 800d244:	0800d2bb 	.word	0x0800d2bb
 800d248:	0800d2bb 	.word	0x0800d2bb
 800d24c:	0800d2ad 	.word	0x0800d2ad
 800d250:	2b40      	cmp	r3, #64	@ 0x40
 800d252:	d02e      	beq.n	800d2b2 <UART_SetConfig+0xab2>
 800d254:	e031      	b.n	800d2ba <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d256:	f7fb fafd 	bl	8008854 <HAL_RCC_GetPCLK1Freq>
 800d25a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d25c:	e033      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d25e:	f7fb fb0f 	bl	8008880 <HAL_RCC_GetPCLK2Freq>
 800d262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d264:	e02f      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d26a:	4618      	mov	r0, r3
 800d26c:	f7fd f9e8 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d274:	e027      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d276:	f107 0318 	add.w	r3, r7, #24
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fd fb34 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d280:	69fb      	ldr	r3, [r7, #28]
 800d282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d284:	e01f      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d286:	4b69      	ldr	r3, [pc, #420]	@ (800d42c <UART_SetConfig+0xc2c>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	f003 0320 	and.w	r3, r3, #32
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d292:	4b66      	ldr	r3, [pc, #408]	@ (800d42c <UART_SetConfig+0xc2c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	08db      	lsrs	r3, r3, #3
 800d298:	f003 0303 	and.w	r3, r3, #3
 800d29c:	4a64      	ldr	r2, [pc, #400]	@ (800d430 <UART_SetConfig+0xc30>)
 800d29e:	fa22 f303 	lsr.w	r3, r2, r3
 800d2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a4:	e00f      	b.n	800d2c6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800d2a6:	4b62      	ldr	r3, [pc, #392]	@ (800d430 <UART_SetConfig+0xc30>)
 800d2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2aa:	e00c      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2ac:	4b61      	ldr	r3, [pc, #388]	@ (800d434 <UART_SetConfig+0xc34>)
 800d2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b0:	e009      	b.n	800d2c6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b8:	e005      	b.n	800d2c6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d2be:	2301      	movs	r3, #1
 800d2c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d2c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f000 80ea 	beq.w	800d4a2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2d2:	4a55      	ldr	r2, [pc, #340]	@ (800d428 <UART_SetConfig+0xc28>)
 800d2d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2d8:	461a      	mov	r2, r3
 800d2da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2e0:	005a      	lsls	r2, r3, #1
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	085b      	lsrs	r3, r3, #1
 800d2e8:	441a      	add	r2, r3
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2f6:	2b0f      	cmp	r3, #15
 800d2f8:	d916      	bls.n	800d328 <UART_SetConfig+0xb28>
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d300:	d212      	bcs.n	800d328 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d304:	b29b      	uxth	r3, r3
 800d306:	f023 030f 	bic.w	r3, r3, #15
 800d30a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d30c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d30e:	085b      	lsrs	r3, r3, #1
 800d310:	b29b      	uxth	r3, r3
 800d312:	f003 0307 	and.w	r3, r3, #7
 800d316:	b29a      	uxth	r2, r3
 800d318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d31a:	4313      	orrs	r3, r2
 800d31c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d324:	60da      	str	r2, [r3, #12]
 800d326:	e0bc      	b.n	800d4a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d328:	2301      	movs	r3, #1
 800d32a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d32e:	e0b8      	b.n	800d4a2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d330:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d334:	2b20      	cmp	r3, #32
 800d336:	dc4b      	bgt.n	800d3d0 <UART_SetConfig+0xbd0>
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f2c0 8087 	blt.w	800d44c <UART_SetConfig+0xc4c>
 800d33e:	2b20      	cmp	r3, #32
 800d340:	f200 8084 	bhi.w	800d44c <UART_SetConfig+0xc4c>
 800d344:	a201      	add	r2, pc, #4	@ (adr r2, 800d34c <UART_SetConfig+0xb4c>)
 800d346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d34a:	bf00      	nop
 800d34c:	0800d3d7 	.word	0x0800d3d7
 800d350:	0800d3df 	.word	0x0800d3df
 800d354:	0800d44d 	.word	0x0800d44d
 800d358:	0800d44d 	.word	0x0800d44d
 800d35c:	0800d3e7 	.word	0x0800d3e7
 800d360:	0800d44d 	.word	0x0800d44d
 800d364:	0800d44d 	.word	0x0800d44d
 800d368:	0800d44d 	.word	0x0800d44d
 800d36c:	0800d3f7 	.word	0x0800d3f7
 800d370:	0800d44d 	.word	0x0800d44d
 800d374:	0800d44d 	.word	0x0800d44d
 800d378:	0800d44d 	.word	0x0800d44d
 800d37c:	0800d44d 	.word	0x0800d44d
 800d380:	0800d44d 	.word	0x0800d44d
 800d384:	0800d44d 	.word	0x0800d44d
 800d388:	0800d44d 	.word	0x0800d44d
 800d38c:	0800d407 	.word	0x0800d407
 800d390:	0800d44d 	.word	0x0800d44d
 800d394:	0800d44d 	.word	0x0800d44d
 800d398:	0800d44d 	.word	0x0800d44d
 800d39c:	0800d44d 	.word	0x0800d44d
 800d3a0:	0800d44d 	.word	0x0800d44d
 800d3a4:	0800d44d 	.word	0x0800d44d
 800d3a8:	0800d44d 	.word	0x0800d44d
 800d3ac:	0800d44d 	.word	0x0800d44d
 800d3b0:	0800d44d 	.word	0x0800d44d
 800d3b4:	0800d44d 	.word	0x0800d44d
 800d3b8:	0800d44d 	.word	0x0800d44d
 800d3bc:	0800d44d 	.word	0x0800d44d
 800d3c0:	0800d44d 	.word	0x0800d44d
 800d3c4:	0800d44d 	.word	0x0800d44d
 800d3c8:	0800d44d 	.word	0x0800d44d
 800d3cc:	0800d43f 	.word	0x0800d43f
 800d3d0:	2b40      	cmp	r3, #64	@ 0x40
 800d3d2:	d037      	beq.n	800d444 <UART_SetConfig+0xc44>
 800d3d4:	e03a      	b.n	800d44c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d3d6:	f7fb fa3d 	bl	8008854 <HAL_RCC_GetPCLK1Freq>
 800d3da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3dc:	e03c      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d3de:	f7fb fa4f 	bl	8008880 <HAL_RCC_GetPCLK2Freq>
 800d3e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3e4:	e038      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fd f928 	bl	800a640 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f4:	e030      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3f6:	f107 0318 	add.w	r3, r7, #24
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	f7fd fa74 	bl	800a8e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d404:	e028      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d406:	4b09      	ldr	r3, [pc, #36]	@ (800d42c <UART_SetConfig+0xc2c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	f003 0320 	and.w	r3, r3, #32
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d012      	beq.n	800d438 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d412:	4b06      	ldr	r3, [pc, #24]	@ (800d42c <UART_SetConfig+0xc2c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	08db      	lsrs	r3, r3, #3
 800d418:	f003 0303 	and.w	r3, r3, #3
 800d41c:	4a04      	ldr	r2, [pc, #16]	@ (800d430 <UART_SetConfig+0xc30>)
 800d41e:	fa22 f303 	lsr.w	r3, r2, r3
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d424:	e018      	b.n	800d458 <UART_SetConfig+0xc58>
 800d426:	bf00      	nop
 800d428:	08013de4 	.word	0x08013de4
 800d42c:	58024400 	.word	0x58024400
 800d430:	03d09000 	.word	0x03d09000
 800d434:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800d438:	4b24      	ldr	r3, [pc, #144]	@ (800d4cc <UART_SetConfig+0xccc>)
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d43c:	e00c      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d43e:	4b24      	ldr	r3, [pc, #144]	@ (800d4d0 <UART_SetConfig+0xcd0>)
 800d440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d442:	e009      	b.n	800d458 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d448:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d44a:	e005      	b.n	800d458 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d456:	bf00      	nop
    }

    if (pclk != 0U)
 800d458:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d021      	beq.n	800d4a2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d462:	4a1c      	ldr	r2, [pc, #112]	@ (800d4d4 <UART_SetConfig+0xcd4>)
 800d464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d468:	461a      	mov	r2, r3
 800d46a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d46c:	fbb3 f2f2 	udiv	r2, r3, r2
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	685b      	ldr	r3, [r3, #4]
 800d474:	085b      	lsrs	r3, r3, #1
 800d476:	441a      	add	r2, r3
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	685b      	ldr	r3, [r3, #4]
 800d47c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d480:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d484:	2b0f      	cmp	r3, #15
 800d486:	d909      	bls.n	800d49c <UART_SetConfig+0xc9c>
 800d488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d48a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d48e:	d205      	bcs.n	800d49c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d490:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d492:	b29a      	uxth	r2, r3
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	60da      	str	r2, [r3, #12]
 800d49a:	e002      	b.n	800d4a2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2201      	movs	r2, #1
 800d4a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d4aa:	697b      	ldr	r3, [r7, #20]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d4be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3748      	adds	r7, #72	@ 0x48
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d4cc:	03d09000 	.word	0x03d09000
 800d4d0:	003d0900 	.word	0x003d0900
 800d4d4:	08013de4 	.word	0x08013de4

0800d4d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4e4:	f003 0308 	and.w	r3, r3, #8
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d00a      	beq.n	800d502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	430a      	orrs	r2, r1
 800d500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d506:	f003 0301 	and.w	r3, r3, #1
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d00a      	beq.n	800d524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	430a      	orrs	r2, r1
 800d522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d528:	f003 0302 	and.w	r3, r3, #2
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d00a      	beq.n	800d546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d54a:	f003 0304 	and.w	r3, r3, #4
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00a      	beq.n	800d568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	430a      	orrs	r2, r1
 800d566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d56c:	f003 0310 	and.w	r3, r3, #16
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00a      	beq.n	800d58a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	430a      	orrs	r2, r1
 800d588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d58e:	f003 0320 	and.w	r3, r3, #32
 800d592:	2b00      	cmp	r3, #0
 800d594:	d00a      	beq.n	800d5ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	689b      	ldr	r3, [r3, #8]
 800d59c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	430a      	orrs	r2, r1
 800d5aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d01a      	beq.n	800d5ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	430a      	orrs	r2, r1
 800d5cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d5d6:	d10a      	bne.n	800d5ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	430a      	orrs	r2, r1
 800d5ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d00a      	beq.n	800d610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	685b      	ldr	r3, [r3, #4]
 800d600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	430a      	orrs	r2, r1
 800d60e:	605a      	str	r2, [r3, #4]
  }
}
 800d610:	bf00      	nop
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b098      	sub	sp, #96	@ 0x60
 800d620:	af02      	add	r7, sp, #8
 800d622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d62c:	f7f5 ff0c 	bl	8003448 <HAL_GetTick>
 800d630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f003 0308 	and.w	r3, r3, #8
 800d63c:	2b08      	cmp	r3, #8
 800d63e:	d12f      	bne.n	800d6a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d644:	9300      	str	r3, [sp, #0]
 800d646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d648:	2200      	movs	r2, #0
 800d64a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 f88e 	bl	800d770 <UART_WaitOnFlagUntilTimeout>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d022      	beq.n	800d6a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d662:	e853 3f00 	ldrex	r3, [r3]
 800d666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d66e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	461a      	mov	r2, r3
 800d676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d678:	647b      	str	r3, [r7, #68]	@ 0x44
 800d67a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d67e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d680:	e841 2300 	strex	r3, r2, [r1]
 800d684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d1e6      	bne.n	800d65a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2220      	movs	r2, #32
 800d690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d69c:	2303      	movs	r3, #3
 800d69e:	e063      	b.n	800d768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 0304 	and.w	r3, r3, #4
 800d6aa:	2b04      	cmp	r3, #4
 800d6ac:	d149      	bne.n	800d742 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6b2:	9300      	str	r3, [sp, #0]
 800d6b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 f857 	bl	800d770 <UART_WaitOnFlagUntilTimeout>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d03c      	beq.n	800d742 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d0:	e853 3f00 	ldrex	r3, [r3]
 800d6d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d6d6:	6a3b      	ldr	r3, [r7, #32]
 800d6d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	461a      	mov	r2, r3
 800d6e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ee:	e841 2300 	strex	r3, r2, [r1]
 800d6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d1e6      	bne.n	800d6c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	3308      	adds	r3, #8
 800d700:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d702:	693b      	ldr	r3, [r7, #16]
 800d704:	e853 3f00 	ldrex	r3, [r3]
 800d708:	60fb      	str	r3, [r7, #12]
   return(result);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	f023 0301 	bic.w	r3, r3, #1
 800d710:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	3308      	adds	r3, #8
 800d718:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d71a:	61fa      	str	r2, [r7, #28]
 800d71c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d71e:	69b9      	ldr	r1, [r7, #24]
 800d720:	69fa      	ldr	r2, [r7, #28]
 800d722:	e841 2300 	strex	r3, r2, [r1]
 800d726:	617b      	str	r3, [r7, #20]
   return(result);
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d1e5      	bne.n	800d6fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	2220      	movs	r2, #32
 800d732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2200      	movs	r2, #0
 800d73a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d73e:	2303      	movs	r3, #3
 800d740:	e012      	b.n	800d768 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2220      	movs	r2, #32
 800d746:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2220      	movs	r2, #32
 800d74e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	2200      	movs	r2, #0
 800d756:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2200      	movs	r2, #0
 800d75c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d766:	2300      	movs	r3, #0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3758      	adds	r7, #88	@ 0x58
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	60f8      	str	r0, [r7, #12]
 800d778:	60b9      	str	r1, [r7, #8]
 800d77a:	603b      	str	r3, [r7, #0]
 800d77c:	4613      	mov	r3, r2
 800d77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d780:	e04f      	b.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d782:	69bb      	ldr	r3, [r7, #24]
 800d784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d788:	d04b      	beq.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d78a:	f7f5 fe5d 	bl	8003448 <HAL_GetTick>
 800d78e:	4602      	mov	r2, r0
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	1ad3      	subs	r3, r2, r3
 800d794:	69ba      	ldr	r2, [r7, #24]
 800d796:	429a      	cmp	r2, r3
 800d798:	d302      	bcc.n	800d7a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d101      	bne.n	800d7a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d7a0:	2303      	movs	r3, #3
 800d7a2:	e04e      	b.n	800d842 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	f003 0304 	and.w	r3, r3, #4
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d037      	beq.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	2b80      	cmp	r3, #128	@ 0x80
 800d7b6:	d034      	beq.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	2b40      	cmp	r3, #64	@ 0x40
 800d7bc:	d031      	beq.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	f003 0308 	and.w	r3, r3, #8
 800d7c8:	2b08      	cmp	r3, #8
 800d7ca:	d110      	bne.n	800d7ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2208      	movs	r2, #8
 800d7d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	f000 f839 	bl	800d84c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2208      	movs	r2, #8
 800d7de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	e029      	b.n	800d842 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	69db      	ldr	r3, [r3, #28]
 800d7f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d7f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7fc:	d111      	bne.n	800d822 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f000 f81f 	bl	800d84c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2220      	movs	r2, #32
 800d812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d81e:	2303      	movs	r3, #3
 800d820:	e00f      	b.n	800d842 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	69da      	ldr	r2, [r3, #28]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	4013      	ands	r3, r2
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	429a      	cmp	r2, r3
 800d830:	bf0c      	ite	eq
 800d832:	2301      	moveq	r3, #1
 800d834:	2300      	movne	r3, #0
 800d836:	b2db      	uxtb	r3, r3
 800d838:	461a      	mov	r2, r3
 800d83a:	79fb      	ldrb	r3, [r7, #7]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d0a0      	beq.n	800d782 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d840:	2300      	movs	r3, #0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3710      	adds	r7, #16
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}
	...

0800d84c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d84c:	b480      	push	{r7}
 800d84e:	b095      	sub	sp, #84	@ 0x54
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85c:	e853 3f00 	ldrex	r3, [r3]
 800d860:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d864:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d868:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	461a      	mov	r2, r3
 800d870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d872:	643b      	str	r3, [r7, #64]	@ 0x40
 800d874:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d876:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d878:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d87a:	e841 2300 	strex	r3, r2, [r1]
 800d87e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d882:	2b00      	cmp	r3, #0
 800d884:	d1e6      	bne.n	800d854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	3308      	adds	r3, #8
 800d88c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d88e:	6a3b      	ldr	r3, [r7, #32]
 800d890:	e853 3f00 	ldrex	r3, [r3]
 800d894:	61fb      	str	r3, [r7, #28]
   return(result);
 800d896:	69fa      	ldr	r2, [r7, #28]
 800d898:	4b1e      	ldr	r3, [pc, #120]	@ (800d914 <UART_EndRxTransfer+0xc8>)
 800d89a:	4013      	ands	r3, r2
 800d89c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	3308      	adds	r3, #8
 800d8a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d8a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d8ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d8ae:	e841 2300 	strex	r3, r2, [r1]
 800d8b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d1e5      	bne.n	800d886 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d118      	bne.n	800d8f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	e853 3f00 	ldrex	r3, [r3]
 800d8ce:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	f023 0310 	bic.w	r3, r3, #16
 800d8d6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	461a      	mov	r2, r3
 800d8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d8e0:	61bb      	str	r3, [r7, #24]
 800d8e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e4:	6979      	ldr	r1, [r7, #20]
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	e841 2300 	strex	r3, r2, [r1]
 800d8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1e6      	bne.n	800d8c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2220      	movs	r2, #32
 800d8f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	2200      	movs	r2, #0
 800d906:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d908:	bf00      	nop
 800d90a:	3754      	adds	r7, #84	@ 0x54
 800d90c:	46bd      	mov	sp, r7
 800d90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d912:	4770      	bx	lr
 800d914:	effffffe 	.word	0xeffffffe

0800d918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d918:	b480      	push	{r7}
 800d91a:	b085      	sub	sp, #20
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d926:	2b01      	cmp	r3, #1
 800d928:	d101      	bne.n	800d92e <HAL_UARTEx_DisableFifoMode+0x16>
 800d92a:	2302      	movs	r3, #2
 800d92c:	e027      	b.n	800d97e <HAL_UARTEx_DisableFifoMode+0x66>
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2224      	movs	r2, #36	@ 0x24
 800d93a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f022 0201 	bic.w	r2, r2, #1
 800d954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d95c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68fa      	ldr	r2, [r7, #12]
 800d96a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2220      	movs	r2, #32
 800d970:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d97c:	2300      	movs	r3, #0
}
 800d97e:	4618      	mov	r0, r3
 800d980:	3714      	adds	r7, #20
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr

0800d98a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b084      	sub	sp, #16
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d101      	bne.n	800d9a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d99e:	2302      	movs	r3, #2
 800d9a0:	e02d      	b.n	800d9fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2224      	movs	r2, #36	@ 0x24
 800d9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	681a      	ldr	r2, [r3, #0]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	f022 0201 	bic.w	r2, r2, #1
 800d9c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	683a      	ldr	r2, [r7, #0]
 800d9da:	430a      	orrs	r2, r1
 800d9dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f850 	bl	800da84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2220      	movs	r2, #32
 800d9f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3710      	adds	r7, #16
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b084      	sub	sp, #16
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
 800da0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da16:	2b01      	cmp	r3, #1
 800da18:	d101      	bne.n	800da1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800da1a:	2302      	movs	r3, #2
 800da1c:	e02d      	b.n	800da7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2201      	movs	r2, #1
 800da22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2224      	movs	r2, #36	@ 0x24
 800da2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f022 0201 	bic.w	r2, r2, #1
 800da44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	683a      	ldr	r2, [r7, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f812 	bl	800da84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68fa      	ldr	r2, [r7, #12]
 800da66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2220      	movs	r2, #32
 800da6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2200      	movs	r2, #0
 800da74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da78:	2300      	movs	r3, #0
}
 800da7a:	4618      	mov	r0, r3
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}
	...

0800da84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b085      	sub	sp, #20
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800da90:	2b00      	cmp	r3, #0
 800da92:	d108      	bne.n	800daa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800daa4:	e031      	b.n	800db0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800daa6:	2310      	movs	r3, #16
 800daa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800daaa:	2310      	movs	r3, #16
 800daac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	689b      	ldr	r3, [r3, #8]
 800dab4:	0e5b      	lsrs	r3, r3, #25
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	f003 0307 	and.w	r3, r3, #7
 800dabc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	689b      	ldr	r3, [r3, #8]
 800dac4:	0f5b      	lsrs	r3, r3, #29
 800dac6:	b2db      	uxtb	r3, r3
 800dac8:	f003 0307 	and.w	r3, r3, #7
 800dacc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dace:	7bbb      	ldrb	r3, [r7, #14]
 800dad0:	7b3a      	ldrb	r2, [r7, #12]
 800dad2:	4911      	ldr	r1, [pc, #68]	@ (800db18 <UARTEx_SetNbDataToProcess+0x94>)
 800dad4:	5c8a      	ldrb	r2, [r1, r2]
 800dad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dada:	7b3a      	ldrb	r2, [r7, #12]
 800dadc:	490f      	ldr	r1, [pc, #60]	@ (800db1c <UARTEx_SetNbDataToProcess+0x98>)
 800dade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dae0:	fb93 f3f2 	sdiv	r3, r3, r2
 800dae4:	b29a      	uxth	r2, r3
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	7b7a      	ldrb	r2, [r7, #13]
 800daf0:	4909      	ldr	r1, [pc, #36]	@ (800db18 <UARTEx_SetNbDataToProcess+0x94>)
 800daf2:	5c8a      	ldrb	r2, [r1, r2]
 800daf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800daf8:	7b7a      	ldrb	r2, [r7, #13]
 800dafa:	4908      	ldr	r1, [pc, #32]	@ (800db1c <UARTEx_SetNbDataToProcess+0x98>)
 800dafc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dafe:	fb93 f3f2 	sdiv	r3, r3, r2
 800db02:	b29a      	uxth	r2, r3
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db0a:	bf00      	nop
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	08013dfc 	.word	0x08013dfc
 800db1c:	08013e04 	.word	0x08013e04

0800db20 <__NVIC_SetPriority>:
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	6039      	str	r1, [r7, #0]
 800db2a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800db2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db30:	2b00      	cmp	r3, #0
 800db32:	db0a      	blt.n	800db4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	b2da      	uxtb	r2, r3
 800db38:	490c      	ldr	r1, [pc, #48]	@ (800db6c <__NVIC_SetPriority+0x4c>)
 800db3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800db3e:	0112      	lsls	r2, r2, #4
 800db40:	b2d2      	uxtb	r2, r2
 800db42:	440b      	add	r3, r1
 800db44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800db48:	e00a      	b.n	800db60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4908      	ldr	r1, [pc, #32]	@ (800db70 <__NVIC_SetPriority+0x50>)
 800db50:	88fb      	ldrh	r3, [r7, #6]
 800db52:	f003 030f 	and.w	r3, r3, #15
 800db56:	3b04      	subs	r3, #4
 800db58:	0112      	lsls	r2, r2, #4
 800db5a:	b2d2      	uxtb	r2, r2
 800db5c:	440b      	add	r3, r1
 800db5e:	761a      	strb	r2, [r3, #24]
}
 800db60:	bf00      	nop
 800db62:	370c      	adds	r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6a:	4770      	bx	lr
 800db6c:	e000e100 	.word	0xe000e100
 800db70:	e000ed00 	.word	0xe000ed00

0800db74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800db78:	4b05      	ldr	r3, [pc, #20]	@ (800db90 <SysTick_Handler+0x1c>)
 800db7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800db7c:	f002 f916 	bl	800fdac <xTaskGetSchedulerState>
 800db80:	4603      	mov	r3, r0
 800db82:	2b01      	cmp	r3, #1
 800db84:	d001      	beq.n	800db8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800db86:	f003 f80f 	bl	8010ba8 <xPortSysTickHandler>
  }
}
 800db8a:	bf00      	nop
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	e000e010 	.word	0xe000e010

0800db94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800db94:	b580      	push	{r7, lr}
 800db96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800db98:	2100      	movs	r1, #0
 800db9a:	f06f 0004 	mvn.w	r0, #4
 800db9e:	f7ff ffbf 	bl	800db20 <__NVIC_SetPriority>
#endif
}
 800dba2:	bf00      	nop
 800dba4:	bd80      	pop	{r7, pc}
	...

0800dba8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800dba8:	b480      	push	{r7}
 800dbaa:	b083      	sub	sp, #12
 800dbac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbae:	f3ef 8305 	mrs	r3, IPSR
 800dbb2:	603b      	str	r3, [r7, #0]
  return(result);
 800dbb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d003      	beq.n	800dbc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800dbba:	f06f 0305 	mvn.w	r3, #5
 800dbbe:	607b      	str	r3, [r7, #4]
 800dbc0:	e00c      	b.n	800dbdc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800dbc2:	4b0a      	ldr	r3, [pc, #40]	@ (800dbec <osKernelInitialize+0x44>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d105      	bne.n	800dbd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800dbca:	4b08      	ldr	r3, [pc, #32]	@ (800dbec <osKernelInitialize+0x44>)
 800dbcc:	2201      	movs	r2, #1
 800dbce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	607b      	str	r3, [r7, #4]
 800dbd4:	e002      	b.n	800dbdc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800dbd6:	f04f 33ff 	mov.w	r3, #4294967295
 800dbda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dbdc:	687b      	ldr	r3, [r7, #4]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	370c      	adds	r7, #12
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe8:	4770      	bx	lr
 800dbea:	bf00      	nop
 800dbec:	24000bc0 	.word	0x24000bc0

0800dbf0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b082      	sub	sp, #8
 800dbf4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dbf6:	f3ef 8305 	mrs	r3, IPSR
 800dbfa:	603b      	str	r3, [r7, #0]
  return(result);
 800dbfc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <osKernelStart+0x1a>
    stat = osErrorISR;
 800dc02:	f06f 0305 	mvn.w	r3, #5
 800dc06:	607b      	str	r3, [r7, #4]
 800dc08:	e010      	b.n	800dc2c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800dc0a:	4b0b      	ldr	r3, [pc, #44]	@ (800dc38 <osKernelStart+0x48>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d109      	bne.n	800dc26 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800dc12:	f7ff ffbf 	bl	800db94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800dc16:	4b08      	ldr	r3, [pc, #32]	@ (800dc38 <osKernelStart+0x48>)
 800dc18:	2202      	movs	r2, #2
 800dc1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800dc1c:	f001 fc52 	bl	800f4c4 <vTaskStartScheduler>
      stat = osOK;
 800dc20:	2300      	movs	r3, #0
 800dc22:	607b      	str	r3, [r7, #4]
 800dc24:	e002      	b.n	800dc2c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800dc26:	f04f 33ff 	mov.w	r3, #4294967295
 800dc2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800dc2c:	687b      	ldr	r3, [r7, #4]
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	3708      	adds	r7, #8
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bd80      	pop	{r7, pc}
 800dc36:	bf00      	nop
 800dc38:	24000bc0 	.word	0x24000bc0

0800dc3c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b08e      	sub	sp, #56	@ 0x38
 800dc40:	af04      	add	r7, sp, #16
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc4c:	f3ef 8305 	mrs	r3, IPSR
 800dc50:	617b      	str	r3, [r7, #20]
  return(result);
 800dc52:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d17e      	bne.n	800dd56 <osThreadNew+0x11a>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d07b      	beq.n	800dd56 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800dc5e:	2380      	movs	r3, #128	@ 0x80
 800dc60:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800dc62:	2318      	movs	r3, #24
 800dc64:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800dc66:	2300      	movs	r3, #0
 800dc68:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800dc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800dc6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d045      	beq.n	800dd02 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <osThreadNew+0x48>
        name = attr->name;
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	699b      	ldr	r3, [r3, #24]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	699b      	ldr	r3, [r3, #24]
 800dc90:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d008      	beq.n	800dcaa <osThreadNew+0x6e>
 800dc98:	69fb      	ldr	r3, [r7, #28]
 800dc9a:	2b38      	cmp	r3, #56	@ 0x38
 800dc9c:	d805      	bhi.n	800dcaa <osThreadNew+0x6e>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d001      	beq.n	800dcae <osThreadNew+0x72>
        return (NULL);
 800dcaa:	2300      	movs	r3, #0
 800dcac:	e054      	b.n	800dd58 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	695b      	ldr	r3, [r3, #20]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d003      	beq.n	800dcbe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	089b      	lsrs	r3, r3, #2
 800dcbc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <osThreadNew+0xa8>
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	2ba7      	cmp	r3, #167	@ 0xa7
 800dccc:	d90a      	bls.n	800dce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d006      	beq.n	800dce4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	695b      	ldr	r3, [r3, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d002      	beq.n	800dce4 <osThreadNew+0xa8>
        mem = 1;
 800dcde:	2301      	movs	r3, #1
 800dce0:	61bb      	str	r3, [r7, #24]
 800dce2:	e010      	b.n	800dd06 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	689b      	ldr	r3, [r3, #8]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d10c      	bne.n	800dd06 <osThreadNew+0xca>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	68db      	ldr	r3, [r3, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d108      	bne.n	800dd06 <osThreadNew+0xca>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <osThreadNew+0xca>
          mem = 0;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	61bb      	str	r3, [r7, #24]
 800dd00:	e001      	b.n	800dd06 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800dd06:	69bb      	ldr	r3, [r7, #24]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d110      	bne.n	800dd2e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800dd10:	687a      	ldr	r2, [r7, #4]
 800dd12:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800dd14:	9202      	str	r2, [sp, #8]
 800dd16:	9301      	str	r3, [sp, #4]
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	9300      	str	r3, [sp, #0]
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	6a3a      	ldr	r2, [r7, #32]
 800dd20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f001 f964 	bl	800eff0 <xTaskCreateStatic>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	613b      	str	r3, [r7, #16]
 800dd2c:	e013      	b.n	800dd56 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d110      	bne.n	800dd56 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800dd34:	6a3b      	ldr	r3, [r7, #32]
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	f107 0310 	add.w	r3, r7, #16
 800dd3c:	9301      	str	r3, [sp, #4]
 800dd3e:	69fb      	ldr	r3, [r7, #28]
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f001 f9b2 	bl	800f0b0 <xTaskCreate>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d001      	beq.n	800dd56 <osThreadNew+0x11a>
            hTask = NULL;
 800dd52:	2300      	movs	r3, #0
 800dd54:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800dd56:	693b      	ldr	r3, [r7, #16]
}
 800dd58:	4618      	mov	r0, r3
 800dd5a:	3728      	adds	r7, #40	@ 0x28
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bd80      	pop	{r7, pc}

0800dd60 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd6c:	f3ef 8305 	mrs	r3, IPSR
 800dd70:	60fb      	str	r3, [r7, #12]
  return(result);
 800dd72:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d003      	beq.n	800dd80 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800dd78:	f06f 0305 	mvn.w	r3, #5
 800dd7c:	617b      	str	r3, [r7, #20]
 800dd7e:	e00b      	b.n	800dd98 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d103      	bne.n	800dd8e <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800dd86:	f06f 0303 	mvn.w	r3, #3
 800dd8a:	617b      	str	r3, [r7, #20]
 800dd8c:	e004      	b.n	800dd98 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800dd92:	6938      	ldr	r0, [r7, #16]
 800dd94:	f001 fb20 	bl	800f3d8 <vTaskSuspend>
  }

  return (stat);
 800dd98:	697b      	ldr	r3, [r7, #20]
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3718      	adds	r7, #24
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b084      	sub	sp, #16
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ddaa:	f3ef 8305 	mrs	r3, IPSR
 800ddae:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <osDelay+0x1c>
    stat = osErrorISR;
 800ddb6:	f06f 0305 	mvn.w	r3, #5
 800ddba:	60fb      	str	r3, [r7, #12]
 800ddbc:	e007      	b.n	800ddce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d002      	beq.n	800ddce <osDelay+0x2c>
      vTaskDelay(ticks);
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	f001 facf 	bl	800f36c <vTaskDelay>
    }
  }

  return (stat);
 800ddce:	68fb      	ldr	r3, [r7, #12]
}
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	3710      	adds	r7, #16
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}

0800ddd8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b088      	sub	sp, #32
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800dde0:	2300      	movs	r3, #0
 800dde2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dde4:	f3ef 8305 	mrs	r3, IPSR
 800dde8:	60bb      	str	r3, [r7, #8]
  return(result);
 800ddea:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d174      	bne.n	800deda <osMutexNew+0x102>
    if (attr != NULL) {
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d003      	beq.n	800ddfe <osMutexNew+0x26>
      type = attr->attr_bits;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	61bb      	str	r3, [r7, #24]
 800ddfc:	e001      	b.n	800de02 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ddfe:	2300      	movs	r3, #0
 800de00:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800de02:	69bb      	ldr	r3, [r7, #24]
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d002      	beq.n	800de12 <osMutexNew+0x3a>
      rmtx = 1U;
 800de0c:	2301      	movs	r3, #1
 800de0e:	617b      	str	r3, [r7, #20]
 800de10:	e001      	b.n	800de16 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800de12:	2300      	movs	r3, #0
 800de14:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d15c      	bne.n	800deda <osMutexNew+0x102>
      mem = -1;
 800de20:	f04f 33ff 	mov.w	r3, #4294967295
 800de24:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d015      	beq.n	800de58 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	689b      	ldr	r3, [r3, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d006      	beq.n	800de42 <osMutexNew+0x6a>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	2b4f      	cmp	r3, #79	@ 0x4f
 800de3a:	d902      	bls.n	800de42 <osMutexNew+0x6a>
          mem = 1;
 800de3c:	2301      	movs	r3, #1
 800de3e:	613b      	str	r3, [r7, #16]
 800de40:	e00c      	b.n	800de5c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d108      	bne.n	800de5c <osMutexNew+0x84>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	68db      	ldr	r3, [r3, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d104      	bne.n	800de5c <osMutexNew+0x84>
            mem = 0;
 800de52:	2300      	movs	r3, #0
 800de54:	613b      	str	r3, [r7, #16]
 800de56:	e001      	b.n	800de5c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800de58:	2300      	movs	r3, #0
 800de5a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800de5c:	693b      	ldr	r3, [r7, #16]
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d112      	bne.n	800de88 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800de62:	697b      	ldr	r3, [r7, #20]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d007      	beq.n	800de78 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	4619      	mov	r1, r3
 800de6e:	2004      	movs	r0, #4
 800de70:	f000 fb1f 	bl	800e4b2 <xQueueCreateMutexStatic>
 800de74:	61f8      	str	r0, [r7, #28]
 800de76:	e016      	b.n	800dea6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	4619      	mov	r1, r3
 800de7e:	2001      	movs	r0, #1
 800de80:	f000 fb17 	bl	800e4b2 <xQueueCreateMutexStatic>
 800de84:	61f8      	str	r0, [r7, #28]
 800de86:	e00e      	b.n	800dea6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d10b      	bne.n	800dea6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d004      	beq.n	800de9e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800de94:	2004      	movs	r0, #4
 800de96:	f000 faf4 	bl	800e482 <xQueueCreateMutex>
 800de9a:	61f8      	str	r0, [r7, #28]
 800de9c:	e003      	b.n	800dea6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800de9e:	2001      	movs	r0, #1
 800dea0:	f000 faef 	bl	800e482 <xQueueCreateMutex>
 800dea4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00c      	beq.n	800dec6 <osMutexNew+0xee>
        if (attr != NULL) {
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d003      	beq.n	800deba <osMutexNew+0xe2>
          name = attr->name;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	60fb      	str	r3, [r7, #12]
 800deb8:	e001      	b.n	800debe <osMutexNew+0xe6>
        } else {
          name = NULL;
 800deba:	2300      	movs	r3, #0
 800debc:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800debe:	68f9      	ldr	r1, [r7, #12]
 800dec0:	69f8      	ldr	r0, [r7, #28]
 800dec2:	f001 f837 	bl	800ef34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800dec6:	69fb      	ldr	r3, [r7, #28]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d006      	beq.n	800deda <osMutexNew+0x102>
 800decc:	697b      	ldr	r3, [r7, #20]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d003      	beq.n	800deda <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ded2:	69fb      	ldr	r3, [r7, #28]
 800ded4:	f043 0301 	orr.w	r3, r3, #1
 800ded8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800deda:	69fb      	ldr	r3, [r7, #28]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3720      	adds	r7, #32
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f023 0301 	bic.w	r3, r3, #1
 800def4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f003 0301 	and.w	r3, r3, #1
 800defc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800defe:	2300      	movs	r3, #0
 800df00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df02:	f3ef 8305 	mrs	r3, IPSR
 800df06:	60bb      	str	r3, [r7, #8]
  return(result);
 800df08:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d003      	beq.n	800df16 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800df0e:	f06f 0305 	mvn.w	r3, #5
 800df12:	617b      	str	r3, [r7, #20]
 800df14:	e02c      	b.n	800df70 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800df16:	693b      	ldr	r3, [r7, #16]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d103      	bne.n	800df24 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800df1c:	f06f 0303 	mvn.w	r3, #3
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	e025      	b.n	800df70 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d011      	beq.n	800df4e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800df2a:	6839      	ldr	r1, [r7, #0]
 800df2c:	6938      	ldr	r0, [r7, #16]
 800df2e:	f000 fb10 	bl	800e552 <xQueueTakeMutexRecursive>
 800df32:	4603      	mov	r3, r0
 800df34:	2b01      	cmp	r3, #1
 800df36:	d01b      	beq.n	800df70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d003      	beq.n	800df46 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800df3e:	f06f 0301 	mvn.w	r3, #1
 800df42:	617b      	str	r3, [r7, #20]
 800df44:	e014      	b.n	800df70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800df46:	f06f 0302 	mvn.w	r3, #2
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	e010      	b.n	800df70 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800df4e:	6839      	ldr	r1, [r7, #0]
 800df50:	6938      	ldr	r0, [r7, #16]
 800df52:	f000 fdb7 	bl	800eac4 <xQueueSemaphoreTake>
 800df56:	4603      	mov	r3, r0
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d009      	beq.n	800df70 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d003      	beq.n	800df6a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800df62:	f06f 0301 	mvn.w	r3, #1
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	e002      	b.n	800df70 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800df6a:	f06f 0302 	mvn.w	r3, #2
 800df6e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800df70:	697b      	ldr	r3, [r7, #20]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800df7a:	b580      	push	{r7, lr}
 800df7c:	b086      	sub	sp, #24
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f023 0301 	bic.w	r3, r3, #1
 800df88:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f003 0301 	and.w	r3, r3, #1
 800df90:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800df92:	2300      	movs	r3, #0
 800df94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800df96:	f3ef 8305 	mrs	r3, IPSR
 800df9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800df9c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d003      	beq.n	800dfaa <osMutexRelease+0x30>
    stat = osErrorISR;
 800dfa2:	f06f 0305 	mvn.w	r3, #5
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e01f      	b.n	800dfea <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800dfaa:	693b      	ldr	r3, [r7, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d103      	bne.n	800dfb8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800dfb0:	f06f 0303 	mvn.w	r3, #3
 800dfb4:	617b      	str	r3, [r7, #20]
 800dfb6:	e018      	b.n	800dfea <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d009      	beq.n	800dfd2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800dfbe:	6938      	ldr	r0, [r7, #16]
 800dfc0:	f000 fa92 	bl	800e4e8 <xQueueGiveMutexRecursive>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	d00f      	beq.n	800dfea <osMutexRelease+0x70>
        stat = osErrorResource;
 800dfca:	f06f 0302 	mvn.w	r3, #2
 800dfce:	617b      	str	r3, [r7, #20]
 800dfd0:	e00b      	b.n	800dfea <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2100      	movs	r1, #0
 800dfd8:	6938      	ldr	r0, [r7, #16]
 800dfda:	f000 faf1 	bl	800e5c0 <xQueueGenericSend>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d002      	beq.n	800dfea <osMutexRelease+0x70>
        stat = osErrorResource;
 800dfe4:	f06f 0302 	mvn.w	r3, #2
 800dfe8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800dfea:	697b      	ldr	r3, [r7, #20]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3718      	adds	r7, #24
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dff4:	b480      	push	{r7}
 800dff6:	b085      	sub	sp, #20
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	4a07      	ldr	r2, [pc, #28]	@ (800e020 <vApplicationGetIdleTaskMemory+0x2c>)
 800e004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	4a06      	ldr	r2, [pc, #24]	@ (800e024 <vApplicationGetIdleTaskMemory+0x30>)
 800e00a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2280      	movs	r2, #128	@ 0x80
 800e010:	601a      	str	r2, [r3, #0]
}
 800e012:	bf00      	nop
 800e014:	3714      	adds	r7, #20
 800e016:	46bd      	mov	sp, r7
 800e018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01c:	4770      	bx	lr
 800e01e:	bf00      	nop
 800e020:	24000bc4 	.word	0x24000bc4
 800e024:	24000c6c 	.word	0x24000c6c

0800e028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e028:	b480      	push	{r7}
 800e02a:	b085      	sub	sp, #20
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	60b9      	str	r1, [r7, #8]
 800e032:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4a07      	ldr	r2, [pc, #28]	@ (800e054 <vApplicationGetTimerTaskMemory+0x2c>)
 800e038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	4a06      	ldr	r2, [pc, #24]	@ (800e058 <vApplicationGetTimerTaskMemory+0x30>)
 800e03e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e046:	601a      	str	r2, [r3, #0]
}
 800e048:	bf00      	nop
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	24000e6c 	.word	0x24000e6c
 800e058:	24000f14 	.word	0x24000f14

0800e05c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f103 0208 	add.w	r2, r3, #8
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f04f 32ff 	mov.w	r2, #4294967295
 800e074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f103 0208 	add.w	r2, r3, #8
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f103 0208 	add.w	r2, r3, #8
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e0aa:	bf00      	nop
 800e0ac:	370c      	adds	r7, #12
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b085      	sub	sp, #20
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
 800e0be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68fa      	ldr	r2, [r7, #12]
 800e0ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	689a      	ldr	r2, [r3, #8]
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	683a      	ldr	r2, [r7, #0]
 800e0da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	683a      	ldr	r2, [r7, #0]
 800e0e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	687a      	ldr	r2, [r7, #4]
 800e0e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	1c5a      	adds	r2, r3, #1
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	601a      	str	r2, [r3, #0]
}
 800e0f2:	bf00      	nop
 800e0f4:	3714      	adds	r7, #20
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e0fe:	b480      	push	{r7}
 800e100:	b085      	sub	sp, #20
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e114:	d103      	bne.n	800e11e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	691b      	ldr	r3, [r3, #16]
 800e11a:	60fb      	str	r3, [r7, #12]
 800e11c:	e00c      	b.n	800e138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3308      	adds	r3, #8
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	e002      	b.n	800e12c <vListInsert+0x2e>
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	60fb      	str	r3, [r7, #12]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	68ba      	ldr	r2, [r7, #8]
 800e134:	429a      	cmp	r2, r3
 800e136:	d2f6      	bcs.n	800e126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	685b      	ldr	r3, [r3, #4]
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	1c5a      	adds	r2, r3, #1
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	601a      	str	r2, [r3, #0]
}
 800e164:	bf00      	nop
 800e166:	3714      	adds	r7, #20
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr

0800e170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e170:	b480      	push	{r7}
 800e172:	b085      	sub	sp, #20
 800e174:	af00      	add	r7, sp, #0
 800e176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	691b      	ldr	r3, [r3, #16]
 800e17c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685b      	ldr	r3, [r3, #4]
 800e182:	687a      	ldr	r2, [r7, #4]
 800e184:	6892      	ldr	r2, [r2, #8]
 800e186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	689b      	ldr	r3, [r3, #8]
 800e18c:	687a      	ldr	r2, [r7, #4]
 800e18e:	6852      	ldr	r2, [r2, #4]
 800e190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	685b      	ldr	r3, [r3, #4]
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	429a      	cmp	r2, r3
 800e19a:	d103      	bne.n	800e1a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	689a      	ldr	r2, [r3, #8]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	1e5a      	subs	r2, r3, #1
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
}
 800e1b8:	4618      	mov	r0, r3
 800e1ba:	3714      	adds	r7, #20
 800e1bc:	46bd      	mov	sp, r7
 800e1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c2:	4770      	bx	lr

0800e1c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10b      	bne.n	800e1f0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e1d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e1ea:	bf00      	nop
 800e1ec:	bf00      	nop
 800e1ee:	e7fd      	b.n	800e1ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e1f0:	f002 fc4a 	bl	8010a88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1fc:	68f9      	ldr	r1, [r7, #12]
 800e1fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e200:	fb01 f303 	mul.w	r3, r1, r3
 800e204:	441a      	add	r2, r3
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	2200      	movs	r2, #0
 800e20e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	681a      	ldr	r2, [r3, #0]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681a      	ldr	r2, [r3, #0]
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e220:	3b01      	subs	r3, #1
 800e222:	68f9      	ldr	r1, [r7, #12]
 800e224:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800e226:	fb01 f303 	mul.w	r3, r1, r3
 800e22a:	441a      	add	r2, r3
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	22ff      	movs	r2, #255	@ 0xff
 800e234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	22ff      	movs	r2, #255	@ 0xff
 800e23c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d114      	bne.n	800e270 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	691b      	ldr	r3, [r3, #16]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d01a      	beq.n	800e284 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	3310      	adds	r3, #16
 800e252:	4618      	mov	r0, r3
 800e254:	f001 fbd4 	bl	800fa00 <xTaskRemoveFromEventList>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d012      	beq.n	800e284 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e25e:	4b0d      	ldr	r3, [pc, #52]	@ (800e294 <xQueueGenericReset+0xd0>)
 800e260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	f3bf 8f6f 	isb	sy
 800e26e:	e009      	b.n	800e284 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	3310      	adds	r3, #16
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff fef1 	bl	800e05c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	3324      	adds	r3, #36	@ 0x24
 800e27e:	4618      	mov	r0, r3
 800e280:	f7ff feec 	bl	800e05c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e284:	f002 fc32 	bl	8010aec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e288:	2301      	movs	r3, #1
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	e000ed04 	.word	0xe000ed04

0800e298 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b08e      	sub	sp, #56	@ 0x38
 800e29c:	af02      	add	r7, sp, #8
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
 800e2a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d10b      	bne.n	800e2c4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800e2ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b0:	f383 8811 	msr	BASEPRI, r3
 800e2b4:	f3bf 8f6f 	isb	sy
 800e2b8:	f3bf 8f4f 	dsb	sy
 800e2bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e2be:	bf00      	nop
 800e2c0:	bf00      	nop
 800e2c2:	e7fd      	b.n	800e2c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d10b      	bne.n	800e2e2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800e2ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ce:	f383 8811 	msr	BASEPRI, r3
 800e2d2:	f3bf 8f6f 	isb	sy
 800e2d6:	f3bf 8f4f 	dsb	sy
 800e2da:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e2dc:	bf00      	nop
 800e2de:	bf00      	nop
 800e2e0:	e7fd      	b.n	800e2de <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d002      	beq.n	800e2ee <xQueueGenericCreateStatic+0x56>
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d001      	beq.n	800e2f2 <xQueueGenericCreateStatic+0x5a>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	e000      	b.n	800e2f4 <xQueueGenericCreateStatic+0x5c>
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10b      	bne.n	800e310 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800e2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fc:	f383 8811 	msr	BASEPRI, r3
 800e300:	f3bf 8f6f 	isb	sy
 800e304:	f3bf 8f4f 	dsb	sy
 800e308:	623b      	str	r3, [r7, #32]
}
 800e30a:	bf00      	nop
 800e30c:	bf00      	nop
 800e30e:	e7fd      	b.n	800e30c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d102      	bne.n	800e31c <xQueueGenericCreateStatic+0x84>
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d101      	bne.n	800e320 <xQueueGenericCreateStatic+0x88>
 800e31c:	2301      	movs	r3, #1
 800e31e:	e000      	b.n	800e322 <xQueueGenericCreateStatic+0x8a>
 800e320:	2300      	movs	r3, #0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d10b      	bne.n	800e33e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800e326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32a:	f383 8811 	msr	BASEPRI, r3
 800e32e:	f3bf 8f6f 	isb	sy
 800e332:	f3bf 8f4f 	dsb	sy
 800e336:	61fb      	str	r3, [r7, #28]
}
 800e338:	bf00      	nop
 800e33a:	bf00      	nop
 800e33c:	e7fd      	b.n	800e33a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e33e:	2350      	movs	r3, #80	@ 0x50
 800e340:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e342:	697b      	ldr	r3, [r7, #20]
 800e344:	2b50      	cmp	r3, #80	@ 0x50
 800e346:	d00b      	beq.n	800e360 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800e348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34c:	f383 8811 	msr	BASEPRI, r3
 800e350:	f3bf 8f6f 	isb	sy
 800e354:	f3bf 8f4f 	dsb	sy
 800e358:	61bb      	str	r3, [r7, #24]
}
 800e35a:	bf00      	nop
 800e35c:	bf00      	nop
 800e35e:	e7fd      	b.n	800e35c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e360:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d00d      	beq.n	800e388 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36e:	2201      	movs	r2, #1
 800e370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e374:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	4613      	mov	r3, r2
 800e37e:	687a      	ldr	r2, [r7, #4]
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f000 f840 	bl	800e408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3730      	adds	r7, #48	@ 0x30
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e392:	b580      	push	{r7, lr}
 800e394:	b08a      	sub	sp, #40	@ 0x28
 800e396:	af02      	add	r7, sp, #8
 800e398:	60f8      	str	r0, [r7, #12]
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	4613      	mov	r3, r2
 800e39e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d10b      	bne.n	800e3be <xQueueGenericCreate+0x2c>
	__asm volatile
 800e3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3aa:	f383 8811 	msr	BASEPRI, r3
 800e3ae:	f3bf 8f6f 	isb	sy
 800e3b2:	f3bf 8f4f 	dsb	sy
 800e3b6:	613b      	str	r3, [r7, #16]
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	e7fd      	b.n	800e3ba <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	68ba      	ldr	r2, [r7, #8]
 800e3c2:	fb02 f303 	mul.w	r3, r2, r3
 800e3c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e3c8:	69fb      	ldr	r3, [r7, #28]
 800e3ca:	3350      	adds	r3, #80	@ 0x50
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f002 fc7d 	bl	8010ccc <pvPortMalloc>
 800e3d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e3d4:	69bb      	ldr	r3, [r7, #24]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d011      	beq.n	800e3fe <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e3da:	69bb      	ldr	r3, [r7, #24]
 800e3dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e3de:	697b      	ldr	r3, [r7, #20]
 800e3e0:	3350      	adds	r3, #80	@ 0x50
 800e3e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e3ec:	79fa      	ldrb	r2, [r7, #7]
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	68b9      	ldr	r1, [r7, #8]
 800e3f8:	68f8      	ldr	r0, [r7, #12]
 800e3fa:	f000 f805 	bl	800e408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e3fe:	69bb      	ldr	r3, [r7, #24]
	}
 800e400:	4618      	mov	r0, r3
 800e402:	3720      	adds	r7, #32
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}

0800e408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	60f8      	str	r0, [r7, #12]
 800e410:	60b9      	str	r1, [r7, #8]
 800e412:	607a      	str	r2, [r7, #4]
 800e414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d103      	bne.n	800e424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	601a      	str	r2, [r3, #0]
 800e422:	e002      	b.n	800e42a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e424:	69bb      	ldr	r3, [r7, #24]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e436:	2101      	movs	r1, #1
 800e438:	69b8      	ldr	r0, [r7, #24]
 800e43a:	f7ff fec3 	bl	800e1c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e43e:	69bb      	ldr	r3, [r7, #24]
 800e440:	78fa      	ldrb	r2, [r7, #3]
 800e442:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e446:	bf00      	nop
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00e      	beq.n	800e47a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e46e:	2300      	movs	r3, #0
 800e470:	2200      	movs	r2, #0
 800e472:	2100      	movs	r1, #0
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f8a3 	bl	800e5c0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e47a:	bf00      	nop
 800e47c:	3708      	adds	r7, #8
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e482:	b580      	push	{r7, lr}
 800e484:	b086      	sub	sp, #24
 800e486:	af00      	add	r7, sp, #0
 800e488:	4603      	mov	r3, r0
 800e48a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e48c:	2301      	movs	r3, #1
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	2300      	movs	r3, #0
 800e492:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e494:	79fb      	ldrb	r3, [r7, #7]
 800e496:	461a      	mov	r2, r3
 800e498:	6939      	ldr	r1, [r7, #16]
 800e49a:	6978      	ldr	r0, [r7, #20]
 800e49c:	f7ff ff79 	bl	800e392 <xQueueGenericCreate>
 800e4a0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e4a2:	68f8      	ldr	r0, [r7, #12]
 800e4a4:	f7ff ffd3 	bl	800e44e <prvInitialiseMutex>

		return xNewQueue;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
	}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	3718      	adds	r7, #24
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}

0800e4b2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e4b2:	b580      	push	{r7, lr}
 800e4b4:	b088      	sub	sp, #32
 800e4b6:	af02      	add	r7, sp, #8
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	6039      	str	r1, [r7, #0]
 800e4bc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e4be:	2301      	movs	r3, #1
 800e4c0:	617b      	str	r3, [r7, #20]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e4c6:	79fb      	ldrb	r3, [r7, #7]
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	6939      	ldr	r1, [r7, #16]
 800e4d0:	6978      	ldr	r0, [r7, #20]
 800e4d2:	f7ff fee1 	bl	800e298 <xQueueGenericCreateStatic>
 800e4d6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e4d8:	68f8      	ldr	r0, [r7, #12]
 800e4da:	f7ff ffb8 	bl	800e44e <prvInitialiseMutex>

		return xNewQueue;
 800e4de:	68fb      	ldr	r3, [r7, #12]
	}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e4e8:	b590      	push	{r4, r7, lr}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800e4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fe:	f383 8811 	msr	BASEPRI, r3
 800e502:	f3bf 8f6f 	isb	sy
 800e506:	f3bf 8f4f 	dsb	sy
 800e50a:	60fb      	str	r3, [r7, #12]
}
 800e50c:	bf00      	nop
 800e50e:	bf00      	nop
 800e510:	e7fd      	b.n	800e50e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	689c      	ldr	r4, [r3, #8]
 800e516:	f001 fc39 	bl	800fd8c <xTaskGetCurrentTaskHandle>
 800e51a:	4603      	mov	r3, r0
 800e51c:	429c      	cmp	r4, r3
 800e51e:	d111      	bne.n	800e544 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e520:	693b      	ldr	r3, [r7, #16]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	1e5a      	subs	r2, r3, #1
 800e526:	693b      	ldr	r3, [r7, #16]
 800e528:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d105      	bne.n	800e53e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e532:	2300      	movs	r3, #0
 800e534:	2200      	movs	r2, #0
 800e536:	2100      	movs	r1, #0
 800e538:	6938      	ldr	r0, [r7, #16]
 800e53a:	f000 f841 	bl	800e5c0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e53e:	2301      	movs	r3, #1
 800e540:	617b      	str	r3, [r7, #20]
 800e542:	e001      	b.n	800e548 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e544:	2300      	movs	r3, #0
 800e546:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e548:	697b      	ldr	r3, [r7, #20]
	}
 800e54a:	4618      	mov	r0, r3
 800e54c:	371c      	adds	r7, #28
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd90      	pop	{r4, r7, pc}

0800e552 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e552:	b590      	push	{r4, r7, lr}
 800e554:	b087      	sub	sp, #28
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d10b      	bne.n	800e57e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800e566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e56a:	f383 8811 	msr	BASEPRI, r3
 800e56e:	f3bf 8f6f 	isb	sy
 800e572:	f3bf 8f4f 	dsb	sy
 800e576:	60fb      	str	r3, [r7, #12]
}
 800e578:	bf00      	nop
 800e57a:	bf00      	nop
 800e57c:	e7fd      	b.n	800e57a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	689c      	ldr	r4, [r3, #8]
 800e582:	f001 fc03 	bl	800fd8c <xTaskGetCurrentTaskHandle>
 800e586:	4603      	mov	r3, r0
 800e588:	429c      	cmp	r4, r3
 800e58a:	d107      	bne.n	800e59c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	1c5a      	adds	r2, r3, #1
 800e592:	693b      	ldr	r3, [r7, #16]
 800e594:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e596:	2301      	movs	r3, #1
 800e598:	617b      	str	r3, [r7, #20]
 800e59a:	e00c      	b.n	800e5b6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6938      	ldr	r0, [r7, #16]
 800e5a0:	f000 fa90 	bl	800eac4 <xQueueSemaphoreTake>
 800e5a4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d004      	beq.n	800e5b6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	68db      	ldr	r3, [r3, #12]
 800e5b0:	1c5a      	adds	r2, r3, #1
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e5b6:	697b      	ldr	r3, [r7, #20]
	}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	371c      	adds	r7, #28
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd90      	pop	{r4, r7, pc}

0800e5c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b08e      	sub	sp, #56	@ 0x38
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	60f8      	str	r0, [r7, #12]
 800e5c8:	60b9      	str	r1, [r7, #8]
 800e5ca:	607a      	str	r2, [r7, #4]
 800e5cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d10b      	bne.n	800e5f4 <xQueueGenericSend+0x34>
	__asm volatile
 800e5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5e0:	f383 8811 	msr	BASEPRI, r3
 800e5e4:	f3bf 8f6f 	isb	sy
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e5ee:	bf00      	nop
 800e5f0:	bf00      	nop
 800e5f2:	e7fd      	b.n	800e5f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d103      	bne.n	800e602 <xQueueGenericSend+0x42>
 800e5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d101      	bne.n	800e606 <xQueueGenericSend+0x46>
 800e602:	2301      	movs	r3, #1
 800e604:	e000      	b.n	800e608 <xQueueGenericSend+0x48>
 800e606:	2300      	movs	r3, #0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10b      	bne.n	800e624 <xQueueGenericSend+0x64>
	__asm volatile
 800e60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e610:	f383 8811 	msr	BASEPRI, r3
 800e614:	f3bf 8f6f 	isb	sy
 800e618:	f3bf 8f4f 	dsb	sy
 800e61c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e61e:	bf00      	nop
 800e620:	bf00      	nop
 800e622:	e7fd      	b.n	800e620 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	2b02      	cmp	r3, #2
 800e628:	d103      	bne.n	800e632 <xQueueGenericSend+0x72>
 800e62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e62c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d101      	bne.n	800e636 <xQueueGenericSend+0x76>
 800e632:	2301      	movs	r3, #1
 800e634:	e000      	b.n	800e638 <xQueueGenericSend+0x78>
 800e636:	2300      	movs	r3, #0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d10b      	bne.n	800e654 <xQueueGenericSend+0x94>
	__asm volatile
 800e63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e640:	f383 8811 	msr	BASEPRI, r3
 800e644:	f3bf 8f6f 	isb	sy
 800e648:	f3bf 8f4f 	dsb	sy
 800e64c:	623b      	str	r3, [r7, #32]
}
 800e64e:	bf00      	nop
 800e650:	bf00      	nop
 800e652:	e7fd      	b.n	800e650 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e654:	f001 fbaa 	bl	800fdac <xTaskGetSchedulerState>
 800e658:	4603      	mov	r3, r0
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d102      	bne.n	800e664 <xQueueGenericSend+0xa4>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d101      	bne.n	800e668 <xQueueGenericSend+0xa8>
 800e664:	2301      	movs	r3, #1
 800e666:	e000      	b.n	800e66a <xQueueGenericSend+0xaa>
 800e668:	2300      	movs	r3, #0
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d10b      	bne.n	800e686 <xQueueGenericSend+0xc6>
	__asm volatile
 800e66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e672:	f383 8811 	msr	BASEPRI, r3
 800e676:	f3bf 8f6f 	isb	sy
 800e67a:	f3bf 8f4f 	dsb	sy
 800e67e:	61fb      	str	r3, [r7, #28]
}
 800e680:	bf00      	nop
 800e682:	bf00      	nop
 800e684:	e7fd      	b.n	800e682 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e686:	f002 f9ff 	bl	8010a88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e68c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e692:	429a      	cmp	r2, r3
 800e694:	d302      	bcc.n	800e69c <xQueueGenericSend+0xdc>
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	2b02      	cmp	r3, #2
 800e69a:	d129      	bne.n	800e6f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e69c:	683a      	ldr	r2, [r7, #0]
 800e69e:	68b9      	ldr	r1, [r7, #8]
 800e6a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6a2:	f000 fb37 	bl	800ed14 <prvCopyDataToQueue>
 800e6a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d010      	beq.n	800e6d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6b2:	3324      	adds	r3, #36	@ 0x24
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f001 f9a3 	bl	800fa00 <xTaskRemoveFromEventList>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d013      	beq.n	800e6e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e6c0:	4b3f      	ldr	r3, [pc, #252]	@ (800e7c0 <xQueueGenericSend+0x200>)
 800e6c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6c6:	601a      	str	r2, [r3, #0]
 800e6c8:	f3bf 8f4f 	dsb	sy
 800e6cc:	f3bf 8f6f 	isb	sy
 800e6d0:	e00a      	b.n	800e6e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e6d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d007      	beq.n	800e6e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e6d8:	4b39      	ldr	r3, [pc, #228]	@ (800e7c0 <xQueueGenericSend+0x200>)
 800e6da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	f3bf 8f4f 	dsb	sy
 800e6e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e6e8:	f002 fa00 	bl	8010aec <vPortExitCritical>
				return pdPASS;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e063      	b.n	800e7b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d103      	bne.n	800e6fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e6f6:	f002 f9f9 	bl	8010aec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	e05c      	b.n	800e7b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e6fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e700:	2b00      	cmp	r3, #0
 800e702:	d106      	bne.n	800e712 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e704:	f107 0314 	add.w	r3, r7, #20
 800e708:	4618      	mov	r0, r3
 800e70a:	f001 f9dd 	bl	800fac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e70e:	2301      	movs	r3, #1
 800e710:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e712:	f002 f9eb 	bl	8010aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e716:	f000 ff45 	bl	800f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e71a:	f002 f9b5 	bl	8010a88 <vPortEnterCritical>
 800e71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e724:	b25b      	sxtb	r3, r3
 800e726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e72a:	d103      	bne.n	800e734 <xQueueGenericSend+0x174>
 800e72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e72e:	2200      	movs	r2, #0
 800e730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e73a:	b25b      	sxtb	r3, r3
 800e73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e740:	d103      	bne.n	800e74a <xQueueGenericSend+0x18a>
 800e742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e74a:	f002 f9cf 	bl	8010aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e74e:	1d3a      	adds	r2, r7, #4
 800e750:	f107 0314 	add.w	r3, r7, #20
 800e754:	4611      	mov	r1, r2
 800e756:	4618      	mov	r0, r3
 800e758:	f001 f9cc 	bl	800faf4 <xTaskCheckForTimeOut>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d124      	bne.n	800e7ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e764:	f000 fbce 	bl	800ef04 <prvIsQueueFull>
 800e768:	4603      	mov	r3, r0
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d018      	beq.n	800e7a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e76e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e770:	3310      	adds	r3, #16
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	4611      	mov	r1, r2
 800e776:	4618      	mov	r0, r3
 800e778:	f001 f8f0 	bl	800f95c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e77c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e77e:	f000 fb59 	bl	800ee34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e782:	f000 ff1d 	bl	800f5c0 <xTaskResumeAll>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	f47f af7c 	bne.w	800e686 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800e78e:	4b0c      	ldr	r3, [pc, #48]	@ (800e7c0 <xQueueGenericSend+0x200>)
 800e790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e794:	601a      	str	r2, [r3, #0]
 800e796:	f3bf 8f4f 	dsb	sy
 800e79a:	f3bf 8f6f 	isb	sy
 800e79e:	e772      	b.n	800e686 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e7a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7a2:	f000 fb47 	bl	800ee34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e7a6:	f000 ff0b 	bl	800f5c0 <xTaskResumeAll>
 800e7aa:	e76c      	b.n	800e686 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e7ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e7ae:	f000 fb41 	bl	800ee34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e7b2:	f000 ff05 	bl	800f5c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e7b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3738      	adds	r7, #56	@ 0x38
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	e000ed04 	.word	0xe000ed04

0800e7c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b090      	sub	sp, #64	@ 0x40
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800e7d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10b      	bne.n	800e7f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800e7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7e0:	f383 8811 	msr	BASEPRI, r3
 800e7e4:	f3bf 8f6f 	isb	sy
 800e7e8:	f3bf 8f4f 	dsb	sy
 800e7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e7ee:	bf00      	nop
 800e7f0:	bf00      	nop
 800e7f2:	e7fd      	b.n	800e7f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d103      	bne.n	800e802 <xQueueGenericSendFromISR+0x3e>
 800e7fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d101      	bne.n	800e806 <xQueueGenericSendFromISR+0x42>
 800e802:	2301      	movs	r3, #1
 800e804:	e000      	b.n	800e808 <xQueueGenericSendFromISR+0x44>
 800e806:	2300      	movs	r3, #0
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d10b      	bne.n	800e824 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800e80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e810:	f383 8811 	msr	BASEPRI, r3
 800e814:	f3bf 8f6f 	isb	sy
 800e818:	f3bf 8f4f 	dsb	sy
 800e81c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e81e:	bf00      	nop
 800e820:	bf00      	nop
 800e822:	e7fd      	b.n	800e820 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e824:	683b      	ldr	r3, [r7, #0]
 800e826:	2b02      	cmp	r3, #2
 800e828:	d103      	bne.n	800e832 <xQueueGenericSendFromISR+0x6e>
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e82e:	2b01      	cmp	r3, #1
 800e830:	d101      	bne.n	800e836 <xQueueGenericSendFromISR+0x72>
 800e832:	2301      	movs	r3, #1
 800e834:	e000      	b.n	800e838 <xQueueGenericSendFromISR+0x74>
 800e836:	2300      	movs	r3, #0
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10b      	bne.n	800e854 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800e83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e840:	f383 8811 	msr	BASEPRI, r3
 800e844:	f3bf 8f6f 	isb	sy
 800e848:	f3bf 8f4f 	dsb	sy
 800e84c:	623b      	str	r3, [r7, #32]
}
 800e84e:	bf00      	nop
 800e850:	bf00      	nop
 800e852:	e7fd      	b.n	800e850 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e854:	f002 f9f8 	bl	8010c48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e858:	f3ef 8211 	mrs	r2, BASEPRI
 800e85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e860:	f383 8811 	msr	BASEPRI, r3
 800e864:	f3bf 8f6f 	isb	sy
 800e868:	f3bf 8f4f 	dsb	sy
 800e86c:	61fa      	str	r2, [r7, #28]
 800e86e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e870:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e872:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e87a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d302      	bcc.n	800e886 <xQueueGenericSendFromISR+0xc2>
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	2b02      	cmp	r3, #2
 800e884:	d12f      	bne.n	800e8e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e88c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e894:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e896:	683a      	ldr	r2, [r7, #0]
 800e898:	68b9      	ldr	r1, [r7, #8]
 800e89a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e89c:	f000 fa3a 	bl	800ed14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e8a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800e8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8a8:	d112      	bne.n	800e8d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d016      	beq.n	800e8e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8b4:	3324      	adds	r3, #36	@ 0x24
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	f001 f8a2 	bl	800fa00 <xTaskRemoveFromEventList>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00e      	beq.n	800e8e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d00b      	beq.n	800e8e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	601a      	str	r2, [r3, #0]
 800e8ce:	e007      	b.n	800e8e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800e8d4:	3301      	adds	r3, #1
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	b25a      	sxtb	r2, r3
 800e8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800e8e4:	e001      	b.n	800e8ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e8ee:	697b      	ldr	r3, [r7, #20]
 800e8f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e8f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3740      	adds	r7, #64	@ 0x40
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}

0800e900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e900:	b580      	push	{r7, lr}
 800e902:	b08c      	sub	sp, #48	@ 0x30
 800e904:	af00      	add	r7, sp, #0
 800e906:	60f8      	str	r0, [r7, #12]
 800e908:	60b9      	str	r1, [r7, #8]
 800e90a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e90c:	2300      	movs	r3, #0
 800e90e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e916:	2b00      	cmp	r3, #0
 800e918:	d10b      	bne.n	800e932 <xQueueReceive+0x32>
	__asm volatile
 800e91a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e91e:	f383 8811 	msr	BASEPRI, r3
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	623b      	str	r3, [r7, #32]
}
 800e92c:	bf00      	nop
 800e92e:	bf00      	nop
 800e930:	e7fd      	b.n	800e92e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d103      	bne.n	800e940 <xQueueReceive+0x40>
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d101      	bne.n	800e944 <xQueueReceive+0x44>
 800e940:	2301      	movs	r3, #1
 800e942:	e000      	b.n	800e946 <xQueueReceive+0x46>
 800e944:	2300      	movs	r3, #0
 800e946:	2b00      	cmp	r3, #0
 800e948:	d10b      	bne.n	800e962 <xQueueReceive+0x62>
	__asm volatile
 800e94a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e94e:	f383 8811 	msr	BASEPRI, r3
 800e952:	f3bf 8f6f 	isb	sy
 800e956:	f3bf 8f4f 	dsb	sy
 800e95a:	61fb      	str	r3, [r7, #28]
}
 800e95c:	bf00      	nop
 800e95e:	bf00      	nop
 800e960:	e7fd      	b.n	800e95e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e962:	f001 fa23 	bl	800fdac <xTaskGetSchedulerState>
 800e966:	4603      	mov	r3, r0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d102      	bne.n	800e972 <xQueueReceive+0x72>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d101      	bne.n	800e976 <xQueueReceive+0x76>
 800e972:	2301      	movs	r3, #1
 800e974:	e000      	b.n	800e978 <xQueueReceive+0x78>
 800e976:	2300      	movs	r3, #0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d10b      	bne.n	800e994 <xQueueReceive+0x94>
	__asm volatile
 800e97c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	61bb      	str	r3, [r7, #24]
}
 800e98e:	bf00      	nop
 800e990:	bf00      	nop
 800e992:	e7fd      	b.n	800e990 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e994:	f002 f878 	bl	8010a88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e99c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d01f      	beq.n	800e9e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e9a4:	68b9      	ldr	r1, [r7, #8]
 800e9a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9a8:	f000 fa1e 	bl	800ede8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9ae:	1e5a      	subs	r2, r3, #1
 800e9b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00f      	beq.n	800e9dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9be:	3310      	adds	r3, #16
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f001 f81d 	bl	800fa00 <xTaskRemoveFromEventList>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d007      	beq.n	800e9dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e9cc:	4b3c      	ldr	r3, [pc, #240]	@ (800eac0 <xQueueReceive+0x1c0>)
 800e9ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9d2:	601a      	str	r2, [r3, #0]
 800e9d4:	f3bf 8f4f 	dsb	sy
 800e9d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9dc:	f002 f886 	bl	8010aec <vPortExitCritical>
				return pdPASS;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	e069      	b.n	800eab8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d103      	bne.n	800e9f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9ea:	f002 f87f 	bl	8010aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e062      	b.n	800eab8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d106      	bne.n	800ea06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9f8:	f107 0310 	add.w	r3, r7, #16
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f001 f863 	bl	800fac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea02:	2301      	movs	r3, #1
 800ea04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea06:	f002 f871 	bl	8010aec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea0a:	f000 fdcb 	bl	800f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea0e:	f002 f83b 	bl	8010a88 <vPortEnterCritical>
 800ea12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea18:	b25b      	sxtb	r3, r3
 800ea1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea1e:	d103      	bne.n	800ea28 <xQueueReceive+0x128>
 800ea20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea2e:	b25b      	sxtb	r3, r3
 800ea30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea34:	d103      	bne.n	800ea3e <xQueueReceive+0x13e>
 800ea36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea38:	2200      	movs	r2, #0
 800ea3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea3e:	f002 f855 	bl	8010aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea42:	1d3a      	adds	r2, r7, #4
 800ea44:	f107 0310 	add.w	r3, r7, #16
 800ea48:	4611      	mov	r1, r2
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f001 f852 	bl	800faf4 <xTaskCheckForTimeOut>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d123      	bne.n	800ea9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea58:	f000 fa3e 	bl	800eed8 <prvIsQueueEmpty>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d017      	beq.n	800ea92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea64:	3324      	adds	r3, #36	@ 0x24
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	4611      	mov	r1, r2
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	f000 ff76 	bl	800f95c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea72:	f000 f9df 	bl	800ee34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea76:	f000 fda3 	bl	800f5c0 <xTaskResumeAll>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d189      	bne.n	800e994 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ea80:	4b0f      	ldr	r3, [pc, #60]	@ (800eac0 <xQueueReceive+0x1c0>)
 800ea82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea86:	601a      	str	r2, [r3, #0]
 800ea88:	f3bf 8f4f 	dsb	sy
 800ea8c:	f3bf 8f6f 	isb	sy
 800ea90:	e780      	b.n	800e994 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea94:	f000 f9ce 	bl	800ee34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea98:	f000 fd92 	bl	800f5c0 <xTaskResumeAll>
 800ea9c:	e77a      	b.n	800e994 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaa0:	f000 f9c8 	bl	800ee34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eaa4:	f000 fd8c 	bl	800f5c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eaa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800eaaa:	f000 fa15 	bl	800eed8 <prvIsQueueEmpty>
 800eaae:	4603      	mov	r3, r0
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	f43f af6f 	beq.w	800e994 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3730      	adds	r7, #48	@ 0x30
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	e000ed04 	.word	0xe000ed04

0800eac4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b08e      	sub	sp, #56	@ 0x38
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800eace:	2300      	movs	r3, #0
 800ead0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ead6:	2300      	movs	r3, #0
 800ead8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d10b      	bne.n	800eaf8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800eae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae4:	f383 8811 	msr	BASEPRI, r3
 800eae8:	f3bf 8f6f 	isb	sy
 800eaec:	f3bf 8f4f 	dsb	sy
 800eaf0:	623b      	str	r3, [r7, #32]
}
 800eaf2:	bf00      	nop
 800eaf4:	bf00      	nop
 800eaf6:	e7fd      	b.n	800eaf4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eafa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00b      	beq.n	800eb18 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	61fb      	str	r3, [r7, #28]
}
 800eb12:	bf00      	nop
 800eb14:	bf00      	nop
 800eb16:	e7fd      	b.n	800eb14 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eb18:	f001 f948 	bl	800fdac <xTaskGetSchedulerState>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d102      	bne.n	800eb28 <xQueueSemaphoreTake+0x64>
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d101      	bne.n	800eb2c <xQueueSemaphoreTake+0x68>
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e000      	b.n	800eb2e <xQueueSemaphoreTake+0x6a>
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d10b      	bne.n	800eb4a <xQueueSemaphoreTake+0x86>
	__asm volatile
 800eb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb36:	f383 8811 	msr	BASEPRI, r3
 800eb3a:	f3bf 8f6f 	isb	sy
 800eb3e:	f3bf 8f4f 	dsb	sy
 800eb42:	61bb      	str	r3, [r7, #24]
}
 800eb44:	bf00      	nop
 800eb46:	bf00      	nop
 800eb48:	e7fd      	b.n	800eb46 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb4a:	f001 ff9d 	bl	8010a88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eb52:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d024      	beq.n	800eba4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb60:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d104      	bne.n	800eb74 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb6a:	f001 fa99 	bl	80100a0 <pvTaskIncrementMutexHeldCount>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb72:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb76:	691b      	ldr	r3, [r3, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00f      	beq.n	800eb9c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7e:	3310      	adds	r3, #16
 800eb80:	4618      	mov	r0, r3
 800eb82:	f000 ff3d 	bl	800fa00 <xTaskRemoveFromEventList>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb8c:	4b54      	ldr	r3, [pc, #336]	@ (800ece0 <xQueueSemaphoreTake+0x21c>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb9c:	f001 ffa6 	bl	8010aec <vPortExitCritical>
				return pdPASS;
 800eba0:	2301      	movs	r3, #1
 800eba2:	e098      	b.n	800ecd6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d112      	bne.n	800ebd0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00b      	beq.n	800ebc8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ebb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebb4:	f383 8811 	msr	BASEPRI, r3
 800ebb8:	f3bf 8f6f 	isb	sy
 800ebbc:	f3bf 8f4f 	dsb	sy
 800ebc0:	617b      	str	r3, [r7, #20]
}
 800ebc2:	bf00      	nop
 800ebc4:	bf00      	nop
 800ebc6:	e7fd      	b.n	800ebc4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ebc8:	f001 ff90 	bl	8010aec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e082      	b.n	800ecd6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ebd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d106      	bne.n	800ebe4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebd6:	f107 030c 	add.w	r3, r7, #12
 800ebda:	4618      	mov	r0, r3
 800ebdc:	f000 ff74 	bl	800fac8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebe4:	f001 ff82 	bl	8010aec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebe8:	f000 fcdc 	bl	800f5a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebec:	f001 ff4c 	bl	8010a88 <vPortEnterCritical>
 800ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebf6:	b25b      	sxtb	r3, r3
 800ebf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebfc:	d103      	bne.n	800ec06 <xQueueSemaphoreTake+0x142>
 800ebfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec00:	2200      	movs	r2, #0
 800ec02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ec06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ec0c:	b25b      	sxtb	r3, r3
 800ec0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec12:	d103      	bne.n	800ec1c <xQueueSemaphoreTake+0x158>
 800ec14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ec1c:	f001 ff66 	bl	8010aec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ec20:	463a      	mov	r2, r7
 800ec22:	f107 030c 	add.w	r3, r7, #12
 800ec26:	4611      	mov	r1, r2
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f000 ff63 	bl	800faf4 <xTaskCheckForTimeOut>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d132      	bne.n	800ec9a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec36:	f000 f94f 	bl	800eed8 <prvIsQueueEmpty>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d026      	beq.n	800ec8e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d109      	bne.n	800ec5c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ec48:	f001 ff1e 	bl	8010a88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	4618      	mov	r0, r3
 800ec52:	f001 f8c9 	bl	800fde8 <xTaskPriorityInherit>
 800ec56:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ec58:	f001 ff48 	bl	8010aec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5e:	3324      	adds	r3, #36	@ 0x24
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	4611      	mov	r1, r2
 800ec64:	4618      	mov	r0, r3
 800ec66:	f000 fe79 	bl	800f95c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec6c:	f000 f8e2 	bl	800ee34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec70:	f000 fca6 	bl	800f5c0 <xTaskResumeAll>
 800ec74:	4603      	mov	r3, r0
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	f47f af67 	bne.w	800eb4a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ec7c:	4b18      	ldr	r3, [pc, #96]	@ (800ece0 <xQueueSemaphoreTake+0x21c>)
 800ec7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	e75d      	b.n	800eb4a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec90:	f000 f8d0 	bl	800ee34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec94:	f000 fc94 	bl	800f5c0 <xTaskResumeAll>
 800ec98:	e757      	b.n	800eb4a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec9c:	f000 f8ca 	bl	800ee34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eca0:	f000 fc8e 	bl	800f5c0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eca4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800eca6:	f000 f917 	bl	800eed8 <prvIsQueueEmpty>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	f43f af4c 	beq.w	800eb4a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ecb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d00d      	beq.n	800ecd4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ecb8:	f001 fee6 	bl	8010a88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ecbc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ecbe:	f000 f811 	bl	800ece4 <prvGetDisinheritPriorityAfterTimeout>
 800ecc2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	689b      	ldr	r3, [r3, #8]
 800ecc8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ecca:	4618      	mov	r0, r3
 800eccc:	f001 f964 	bl	800ff98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ecd0:	f001 ff0c 	bl	8010aec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ecd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3738      	adds	r7, #56	@ 0x38
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	e000ed04 	.word	0xe000ed04

0800ece4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d006      	beq.n	800ed02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ecfe:	60fb      	str	r3, [r7, #12]
 800ed00:	e001      	b.n	800ed06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ed02:	2300      	movs	r3, #0
 800ed04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ed06:	68fb      	ldr	r3, [r7, #12]
	}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3714      	adds	r7, #20
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed12:	4770      	bx	lr

0800ed14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b086      	sub	sp, #24
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ed20:	2300      	movs	r3, #0
 800ed22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d10d      	bne.n	800ed4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d14d      	bne.n	800edd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f001 f8ba 	bl	800feb8 <xTaskPriorityDisinherit>
 800ed44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	609a      	str	r2, [r3, #8]
 800ed4c:	e043      	b.n	800edd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d119      	bne.n	800ed88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	6858      	ldr	r0, [r3, #4]
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed5c:	461a      	mov	r2, r3
 800ed5e:	68b9      	ldr	r1, [r7, #8]
 800ed60:	f002 ffe9 	bl	8011d36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed6c:	441a      	add	r2, r3
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	685a      	ldr	r2, [r3, #4]
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	689b      	ldr	r3, [r3, #8]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d32b      	bcc.n	800edd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	681a      	ldr	r2, [r3, #0]
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	605a      	str	r2, [r3, #4]
 800ed86:	e026      	b.n	800edd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	68d8      	ldr	r0, [r3, #12]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ed90:	461a      	mov	r2, r3
 800ed92:	68b9      	ldr	r1, [r7, #8]
 800ed94:	f002 ffcf 	bl	8011d36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	68da      	ldr	r2, [r3, #12]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eda0:	425b      	negs	r3, r3
 800eda2:	441a      	add	r2, r3
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	68da      	ldr	r2, [r3, #12]
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	429a      	cmp	r2, r3
 800edb2:	d207      	bcs.n	800edc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	689a      	ldr	r2, [r3, #8]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edbc:	425b      	negs	r3, r3
 800edbe:	441a      	add	r2, r3
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b02      	cmp	r3, #2
 800edc8:	d105      	bne.n	800edd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edca:	693b      	ldr	r3, [r7, #16]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	3b01      	subs	r3, #1
 800edd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800edde:	697b      	ldr	r3, [r7, #20]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}

0800ede8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
 800edf0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d018      	beq.n	800ee2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	68da      	ldr	r2, [r3, #12]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee02:	441a      	add	r2, r3
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	68da      	ldr	r2, [r3, #12]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	689b      	ldr	r3, [r3, #8]
 800ee10:	429a      	cmp	r2, r3
 800ee12:	d303      	bcc.n	800ee1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	68d9      	ldr	r1, [r3, #12]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ee24:	461a      	mov	r2, r3
 800ee26:	6838      	ldr	r0, [r7, #0]
 800ee28:	f002 ff85 	bl	8011d36 <memcpy>
	}
}
 800ee2c:	bf00      	nop
 800ee2e:	3708      	adds	r7, #8
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ee3c:	f001 fe24 	bl	8010a88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ee46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee48:	e011      	b.n	800ee6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d012      	beq.n	800ee78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	3324      	adds	r3, #36	@ 0x24
 800ee56:	4618      	mov	r0, r3
 800ee58:	f000 fdd2 	bl	800fa00 <xTaskRemoveFromEventList>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d001      	beq.n	800ee66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ee62:	f000 feab 	bl	800fbbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ee66:	7bfb      	ldrb	r3, [r7, #15]
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ee6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	dce9      	bgt.n	800ee4a <prvUnlockQueue+0x16>
 800ee76:	e000      	b.n	800ee7a <prvUnlockQueue+0x46>
					break;
 800ee78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	22ff      	movs	r2, #255	@ 0xff
 800ee7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ee82:	f001 fe33 	bl	8010aec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ee86:	f001 fdff 	bl	8010a88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ee90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ee92:	e011      	b.n	800eeb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	691b      	ldr	r3, [r3, #16]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d012      	beq.n	800eec2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	3310      	adds	r3, #16
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fdad 	bl	800fa00 <xTaskRemoveFromEventList>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d001      	beq.n	800eeb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800eeac:	f000 fe86 	bl	800fbbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800eeb0:	7bbb      	ldrb	r3, [r7, #14]
 800eeb2:	3b01      	subs	r3, #1
 800eeb4:	b2db      	uxtb	r3, r3
 800eeb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800eeb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	dce9      	bgt.n	800ee94 <prvUnlockQueue+0x60>
 800eec0:	e000      	b.n	800eec4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800eec2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	22ff      	movs	r2, #255	@ 0xff
 800eec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800eecc:	f001 fe0e 	bl	8010aec <vPortExitCritical>
}
 800eed0:	bf00      	nop
 800eed2:	3710      	adds	r7, #16
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eee0:	f001 fdd2 	bl	8010a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d102      	bne.n	800eef2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eeec:	2301      	movs	r3, #1
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	e001      	b.n	800eef6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eef2:	2300      	movs	r3, #0
 800eef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eef6:	f001 fdf9 	bl	8010aec <vPortExitCritical>

	return xReturn;
 800eefa:	68fb      	ldr	r3, [r7, #12]
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ef0c:	f001 fdbc 	bl	8010a88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d102      	bne.n	800ef22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	60fb      	str	r3, [r7, #12]
 800ef20:	e001      	b.n	800ef26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ef22:	2300      	movs	r3, #0
 800ef24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ef26:	f001 fde1 	bl	8010aec <vPortExitCritical>

	return xReturn;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}

0800ef34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ef34:	b480      	push	{r7}
 800ef36:	b085      	sub	sp, #20
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef3e:	2300      	movs	r3, #0
 800ef40:	60fb      	str	r3, [r7, #12]
 800ef42:	e014      	b.n	800ef6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ef44:	4a0f      	ldr	r2, [pc, #60]	@ (800ef84 <vQueueAddToRegistry+0x50>)
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d10b      	bne.n	800ef68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ef50:	490c      	ldr	r1, [pc, #48]	@ (800ef84 <vQueueAddToRegistry+0x50>)
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	683a      	ldr	r2, [r7, #0]
 800ef56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ef5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ef84 <vQueueAddToRegistry+0x50>)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	00db      	lsls	r3, r3, #3
 800ef60:	4413      	add	r3, r2
 800ef62:	687a      	ldr	r2, [r7, #4]
 800ef64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ef66:	e006      	b.n	800ef76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	60fb      	str	r3, [r7, #12]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b07      	cmp	r3, #7
 800ef72:	d9e7      	bls.n	800ef44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ef74:	bf00      	nop
 800ef76:	bf00      	nop
 800ef78:	3714      	adds	r7, #20
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef80:	4770      	bx	lr
 800ef82:	bf00      	nop
 800ef84:	24001314 	.word	0x24001314

0800ef88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	60f8      	str	r0, [r7, #12]
 800ef90:	60b9      	str	r1, [r7, #8]
 800ef92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ef98:	f001 fd76 	bl	8010a88 <vPortEnterCritical>
 800ef9c:	697b      	ldr	r3, [r7, #20]
 800ef9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800efa2:	b25b      	sxtb	r3, r3
 800efa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa8:	d103      	bne.n	800efb2 <vQueueWaitForMessageRestricted+0x2a>
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efb8:	b25b      	sxtb	r3, r3
 800efba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efbe:	d103      	bne.n	800efc8 <vQueueWaitForMessageRestricted+0x40>
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	2200      	movs	r2, #0
 800efc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800efc8:	f001 fd90 	bl	8010aec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d106      	bne.n	800efe2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	3324      	adds	r3, #36	@ 0x24
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	68b9      	ldr	r1, [r7, #8]
 800efdc:	4618      	mov	r0, r3
 800efde:	f000 fce3 	bl	800f9a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800efe2:	6978      	ldr	r0, [r7, #20]
 800efe4:	f7ff ff26 	bl	800ee34 <prvUnlockQueue>
	}
 800efe8:	bf00      	nop
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b08e      	sub	sp, #56	@ 0x38
 800eff4:	af04      	add	r7, sp, #16
 800eff6:	60f8      	str	r0, [r7, #12]
 800eff8:	60b9      	str	r1, [r7, #8]
 800effa:	607a      	str	r2, [r7, #4]
 800effc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800effe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f000:	2b00      	cmp	r3, #0
 800f002:	d10b      	bne.n	800f01c <xTaskCreateStatic+0x2c>
	__asm volatile
 800f004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f008:	f383 8811 	msr	BASEPRI, r3
 800f00c:	f3bf 8f6f 	isb	sy
 800f010:	f3bf 8f4f 	dsb	sy
 800f014:	623b      	str	r3, [r7, #32]
}
 800f016:	bf00      	nop
 800f018:	bf00      	nop
 800f01a:	e7fd      	b.n	800f018 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f01c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d10b      	bne.n	800f03a <xTaskCreateStatic+0x4a>
	__asm volatile
 800f022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f026:	f383 8811 	msr	BASEPRI, r3
 800f02a:	f3bf 8f6f 	isb	sy
 800f02e:	f3bf 8f4f 	dsb	sy
 800f032:	61fb      	str	r3, [r7, #28]
}
 800f034:	bf00      	nop
 800f036:	bf00      	nop
 800f038:	e7fd      	b.n	800f036 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f03a:	23a8      	movs	r3, #168	@ 0xa8
 800f03c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f03e:	693b      	ldr	r3, [r7, #16]
 800f040:	2ba8      	cmp	r3, #168	@ 0xa8
 800f042:	d00b      	beq.n	800f05c <xTaskCreateStatic+0x6c>
	__asm volatile
 800f044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f048:	f383 8811 	msr	BASEPRI, r3
 800f04c:	f3bf 8f6f 	isb	sy
 800f050:	f3bf 8f4f 	dsb	sy
 800f054:	61bb      	str	r3, [r7, #24]
}
 800f056:	bf00      	nop
 800f058:	bf00      	nop
 800f05a:	e7fd      	b.n	800f058 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f05c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f060:	2b00      	cmp	r3, #0
 800f062:	d01e      	beq.n	800f0a2 <xTaskCreateStatic+0xb2>
 800f064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f066:	2b00      	cmp	r3, #0
 800f068:	d01b      	beq.n	800f0a2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f06a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f06c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f070:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f072:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f076:	2202      	movs	r2, #2
 800f078:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f07c:	2300      	movs	r3, #0
 800f07e:	9303      	str	r3, [sp, #12]
 800f080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f082:	9302      	str	r3, [sp, #8]
 800f084:	f107 0314 	add.w	r3, r7, #20
 800f088:	9301      	str	r3, [sp, #4]
 800f08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f08c:	9300      	str	r3, [sp, #0]
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	68b9      	ldr	r1, [r7, #8]
 800f094:	68f8      	ldr	r0, [r7, #12]
 800f096:	f000 f851 	bl	800f13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f09a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f09c:	f000 f8f6 	bl	800f28c <prvAddNewTaskToReadyList>
 800f0a0:	e001      	b.n	800f0a6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f0a6:	697b      	ldr	r3, [r7, #20]
	}
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	3728      	adds	r7, #40	@ 0x28
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b08c      	sub	sp, #48	@ 0x30
 800f0b4:	af04      	add	r7, sp, #16
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	603b      	str	r3, [r7, #0]
 800f0bc:	4613      	mov	r3, r2
 800f0be:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f0c0:	88fb      	ldrh	r3, [r7, #6]
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f001 fe01 	bl	8010ccc <pvPortMalloc>
 800f0ca:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d00e      	beq.n	800f0f0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f0d2:	20a8      	movs	r0, #168	@ 0xa8
 800f0d4:	f001 fdfa 	bl	8010ccc <pvPortMalloc>
 800f0d8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f0da:	69fb      	ldr	r3, [r7, #28]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d003      	beq.n	800f0e8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f0e0:	69fb      	ldr	r3, [r7, #28]
 800f0e2:	697a      	ldr	r2, [r7, #20]
 800f0e4:	631a      	str	r2, [r3, #48]	@ 0x30
 800f0e6:	e005      	b.n	800f0f4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f0e8:	6978      	ldr	r0, [r7, #20]
 800f0ea:	f001 febd 	bl	8010e68 <vPortFree>
 800f0ee:	e001      	b.n	800f0f4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f0f4:	69fb      	ldr	r3, [r7, #28]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d017      	beq.n	800f12a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f102:	88fa      	ldrh	r2, [r7, #6]
 800f104:	2300      	movs	r3, #0
 800f106:	9303      	str	r3, [sp, #12]
 800f108:	69fb      	ldr	r3, [r7, #28]
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f10e:	9301      	str	r3, [sp, #4]
 800f110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	683b      	ldr	r3, [r7, #0]
 800f116:	68b9      	ldr	r1, [r7, #8]
 800f118:	68f8      	ldr	r0, [r7, #12]
 800f11a:	f000 f80f 	bl	800f13c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f11e:	69f8      	ldr	r0, [r7, #28]
 800f120:	f000 f8b4 	bl	800f28c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f124:	2301      	movs	r3, #1
 800f126:	61bb      	str	r3, [r7, #24]
 800f128:	e002      	b.n	800f130 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f12a:	f04f 33ff 	mov.w	r3, #4294967295
 800f12e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f130:	69bb      	ldr	r3, [r7, #24]
	}
 800f132:	4618      	mov	r0, r3
 800f134:	3720      	adds	r7, #32
 800f136:	46bd      	mov	sp, r7
 800f138:	bd80      	pop	{r7, pc}
	...

0800f13c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b088      	sub	sp, #32
 800f140:	af00      	add	r7, sp, #0
 800f142:	60f8      	str	r0, [r7, #12]
 800f144:	60b9      	str	r1, [r7, #8]
 800f146:	607a      	str	r2, [r7, #4]
 800f148:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	461a      	mov	r2, r3
 800f154:	21a5      	movs	r1, #165	@ 0xa5
 800f156:	f002 fd18 	bl	8011b8a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f15c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f15e:	6879      	ldr	r1, [r7, #4]
 800f160:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f164:	440b      	add	r3, r1
 800f166:	009b      	lsls	r3, r3, #2
 800f168:	4413      	add	r3, r2
 800f16a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f16c:	69bb      	ldr	r3, [r7, #24]
 800f16e:	f023 0307 	bic.w	r3, r3, #7
 800f172:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	f003 0307 	and.w	r3, r3, #7
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d00b      	beq.n	800f196 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800f17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f182:	f383 8811 	msr	BASEPRI, r3
 800f186:	f3bf 8f6f 	isb	sy
 800f18a:	f3bf 8f4f 	dsb	sy
 800f18e:	617b      	str	r3, [r7, #20]
}
 800f190:	bf00      	nop
 800f192:	bf00      	nop
 800f194:	e7fd      	b.n	800f192 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d01f      	beq.n	800f1dc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f19c:	2300      	movs	r3, #0
 800f19e:	61fb      	str	r3, [r7, #28]
 800f1a0:	e012      	b.n	800f1c8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	69fb      	ldr	r3, [r7, #28]
 800f1a6:	4413      	add	r3, r2
 800f1a8:	7819      	ldrb	r1, [r3, #0]
 800f1aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1ac:	69fb      	ldr	r3, [r7, #28]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	3334      	adds	r3, #52	@ 0x34
 800f1b2:	460a      	mov	r2, r1
 800f1b4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d006      	beq.n	800f1d0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	3301      	adds	r3, #1
 800f1c6:	61fb      	str	r3, [r7, #28]
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	2b0f      	cmp	r3, #15
 800f1cc:	d9e9      	bls.n	800f1a2 <prvInitialiseNewTask+0x66>
 800f1ce:	e000      	b.n	800f1d2 <prvInitialiseNewTask+0x96>
			{
				break;
 800f1d0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f1da:	e003      	b.n	800f1e4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1de:	2200      	movs	r2, #0
 800f1e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1e6:	2b37      	cmp	r3, #55	@ 0x37
 800f1e8:	d901      	bls.n	800f1ee <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f1ea:	2337      	movs	r3, #55	@ 0x37
 800f1ec:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1f8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f202:	3304      	adds	r3, #4
 800f204:	4618      	mov	r0, r3
 800f206:	f7fe ff49 	bl	800e09c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f20a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f20c:	3318      	adds	r3, #24
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe ff44 	bl	800e09c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f218:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f21c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f222:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f226:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f228:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22c:	2200      	movs	r2, #0
 800f22e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f234:	2200      	movs	r2, #0
 800f236:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f23a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f23c:	3354      	adds	r3, #84	@ 0x54
 800f23e:	224c      	movs	r2, #76	@ 0x4c
 800f240:	2100      	movs	r1, #0
 800f242:	4618      	mov	r0, r3
 800f244:	f002 fca1 	bl	8011b8a <memset>
 800f248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24a:	4a0d      	ldr	r2, [pc, #52]	@ (800f280 <prvInitialiseNewTask+0x144>)
 800f24c:	659a      	str	r2, [r3, #88]	@ 0x58
 800f24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f250:	4a0c      	ldr	r2, [pc, #48]	@ (800f284 <prvInitialiseNewTask+0x148>)
 800f252:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f256:	4a0c      	ldr	r2, [pc, #48]	@ (800f288 <prvInitialiseNewTask+0x14c>)
 800f258:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f25a:	683a      	ldr	r2, [r7, #0]
 800f25c:	68f9      	ldr	r1, [r7, #12]
 800f25e:	69b8      	ldr	r0, [r7, #24]
 800f260:	f001 fae0 	bl	8010824 <pxPortInitialiseStack>
 800f264:	4602      	mov	r2, r0
 800f266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f268:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d002      	beq.n	800f276 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f272:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f276:	bf00      	nop
 800f278:	3720      	adds	r7, #32
 800f27a:	46bd      	mov	sp, r7
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	bf00      	nop
 800f280:	240055a8 	.word	0x240055a8
 800f284:	24005610 	.word	0x24005610
 800f288:	24005678 	.word	0x24005678

0800f28c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f28c:	b580      	push	{r7, lr}
 800f28e:	b082      	sub	sp, #8
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f294:	f001 fbf8 	bl	8010a88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f298:	4b2d      	ldr	r3, [pc, #180]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	3301      	adds	r3, #1
 800f29e:	4a2c      	ldr	r2, [pc, #176]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f2a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f2a2:	4b2c      	ldr	r3, [pc, #176]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d109      	bne.n	800f2be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f2aa:	4a2a      	ldr	r2, [pc, #168]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f2b0:	4b27      	ldr	r3, [pc, #156]	@ (800f350 <prvAddNewTaskToReadyList+0xc4>)
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2b01      	cmp	r3, #1
 800f2b6:	d110      	bne.n	800f2da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f2b8:	f000 fca4 	bl	800fc04 <prvInitialiseTaskLists>
 800f2bc:	e00d      	b.n	800f2da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f2be:	4b26      	ldr	r3, [pc, #152]	@ (800f358 <prvAddNewTaskToReadyList+0xcc>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d109      	bne.n	800f2da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f2c6:	4b23      	ldr	r3, [pc, #140]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d802      	bhi.n	800f2da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f2d4:	4a1f      	ldr	r2, [pc, #124]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f2da:	4b20      	ldr	r3, [pc, #128]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	4a1e      	ldr	r2, [pc, #120]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	@ (800f35c <prvAddNewTaskToReadyList+0xd0>)
 800f2e6:	681a      	ldr	r2, [r3, #0]
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f0:	4b1b      	ldr	r3, [pc, #108]	@ (800f360 <prvAddNewTaskToReadyList+0xd4>)
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d903      	bls.n	800f300 <prvAddNewTaskToReadyList+0x74>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fc:	4a18      	ldr	r2, [pc, #96]	@ (800f360 <prvAddNewTaskToReadyList+0xd4>)
 800f2fe:	6013      	str	r3, [r2, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f304:	4613      	mov	r3, r2
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	4a15      	ldr	r2, [pc, #84]	@ (800f364 <prvAddNewTaskToReadyList+0xd8>)
 800f30e:	441a      	add	r2, r3
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	3304      	adds	r3, #4
 800f314:	4619      	mov	r1, r3
 800f316:	4610      	mov	r0, r2
 800f318:	f7fe fecd 	bl	800e0b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f31c:	f001 fbe6 	bl	8010aec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f320:	4b0d      	ldr	r3, [pc, #52]	@ (800f358 <prvAddNewTaskToReadyList+0xcc>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00e      	beq.n	800f346 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f328:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <prvAddNewTaskToReadyList+0xc8>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f332:	429a      	cmp	r2, r3
 800f334:	d207      	bcs.n	800f346 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f336:	4b0c      	ldr	r3, [pc, #48]	@ (800f368 <prvAddNewTaskToReadyList+0xdc>)
 800f338:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	f3bf 8f4f 	dsb	sy
 800f342:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f346:	bf00      	nop
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}
 800f34e:	bf00      	nop
 800f350:	24001828 	.word	0x24001828
 800f354:	24001354 	.word	0x24001354
 800f358:	24001834 	.word	0x24001834
 800f35c:	24001844 	.word	0x24001844
 800f360:	24001830 	.word	0x24001830
 800f364:	24001358 	.word	0x24001358
 800f368:	e000ed04 	.word	0xe000ed04

0800f36c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f374:	2300      	movs	r3, #0
 800f376:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d018      	beq.n	800f3b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f37e:	4b14      	ldr	r3, [pc, #80]	@ (800f3d0 <vTaskDelay+0x64>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <vTaskDelay+0x32>
	__asm volatile
 800f386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f38a:	f383 8811 	msr	BASEPRI, r3
 800f38e:	f3bf 8f6f 	isb	sy
 800f392:	f3bf 8f4f 	dsb	sy
 800f396:	60bb      	str	r3, [r7, #8]
}
 800f398:	bf00      	nop
 800f39a:	bf00      	nop
 800f39c:	e7fd      	b.n	800f39a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f39e:	f000 f901 	bl	800f5a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f3a2:	2100      	movs	r1, #0
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fe8f 	bl	80100c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f3aa:	f000 f909 	bl	800f5c0 <xTaskResumeAll>
 800f3ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d107      	bne.n	800f3c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800f3b6:	4b07      	ldr	r3, [pc, #28]	@ (800f3d4 <vTaskDelay+0x68>)
 800f3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	f3bf 8f4f 	dsb	sy
 800f3c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f3c6:	bf00      	nop
 800f3c8:	3710      	adds	r7, #16
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	24001850 	.word	0x24001850
 800f3d4:	e000ed04 	.word	0xe000ed04

0800f3d8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f3e0:	f001 fb52 	bl	8010a88 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d102      	bne.n	800f3f0 <vTaskSuspend+0x18>
 800f3ea:	4b30      	ldr	r3, [pc, #192]	@ (800f4ac <vTaskSuspend+0xd4>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	e000      	b.n	800f3f2 <vTaskSuspend+0x1a>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7fe feb9 	bl	800e170 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f402:	2b00      	cmp	r3, #0
 800f404:	d004      	beq.n	800f410 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	3318      	adds	r3, #24
 800f40a:	4618      	mov	r0, r3
 800f40c:	f7fe feb0 	bl	800e170 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	3304      	adds	r3, #4
 800f414:	4619      	mov	r1, r3
 800f416:	4826      	ldr	r0, [pc, #152]	@ (800f4b0 <vTaskSuspend+0xd8>)
 800f418:	f7fe fe4d 	bl	800e0b6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b01      	cmp	r3, #1
 800f426:	d103      	bne.n	800f430 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	2200      	movs	r2, #0
 800f42c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800f430:	f001 fb5c 	bl	8010aec <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800f434:	4b1f      	ldr	r3, [pc, #124]	@ (800f4b4 <vTaskSuspend+0xdc>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d005      	beq.n	800f448 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800f43c:	f001 fb24 	bl	8010a88 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800f440:	f000 fc84 	bl	800fd4c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800f444:	f001 fb52 	bl	8010aec <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800f448:	4b18      	ldr	r3, [pc, #96]	@ (800f4ac <vTaskSuspend+0xd4>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	429a      	cmp	r2, r3
 800f450:	d128      	bne.n	800f4a4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800f452:	4b18      	ldr	r3, [pc, #96]	@ (800f4b4 <vTaskSuspend+0xdc>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d018      	beq.n	800f48c <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800f45a:	4b17      	ldr	r3, [pc, #92]	@ (800f4b8 <vTaskSuspend+0xe0>)
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d00b      	beq.n	800f47a <vTaskSuspend+0xa2>
	__asm volatile
 800f462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	60bb      	str	r3, [r7, #8]
}
 800f474:	bf00      	nop
 800f476:	bf00      	nop
 800f478:	e7fd      	b.n	800f476 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800f47a:	4b10      	ldr	r3, [pc, #64]	@ (800f4bc <vTaskSuspend+0xe4>)
 800f47c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f480:	601a      	str	r2, [r3, #0]
 800f482:	f3bf 8f4f 	dsb	sy
 800f486:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f48a:	e00b      	b.n	800f4a4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800f48c:	4b08      	ldr	r3, [pc, #32]	@ (800f4b0 <vTaskSuspend+0xd8>)
 800f48e:	681a      	ldr	r2, [r3, #0]
 800f490:	4b0b      	ldr	r3, [pc, #44]	@ (800f4c0 <vTaskSuspend+0xe8>)
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	429a      	cmp	r2, r3
 800f496:	d103      	bne.n	800f4a0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800f498:	4b04      	ldr	r3, [pc, #16]	@ (800f4ac <vTaskSuspend+0xd4>)
 800f49a:	2200      	movs	r2, #0
 800f49c:	601a      	str	r2, [r3, #0]
	}
 800f49e:	e001      	b.n	800f4a4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800f4a0:	f000 f9f6 	bl	800f890 <vTaskSwitchContext>
	}
 800f4a4:	bf00      	nop
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	24001354 	.word	0x24001354
 800f4b0:	24001814 	.word	0x24001814
 800f4b4:	24001834 	.word	0x24001834
 800f4b8:	24001850 	.word	0x24001850
 800f4bc:	e000ed04 	.word	0xe000ed04
 800f4c0:	24001828 	.word	0x24001828

0800f4c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08a      	sub	sp, #40	@ 0x28
 800f4c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f4d2:	463a      	mov	r2, r7
 800f4d4:	1d39      	adds	r1, r7, #4
 800f4d6:	f107 0308 	add.w	r3, r7, #8
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fd8a 	bl	800dff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f4e0:	6839      	ldr	r1, [r7, #0]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	68ba      	ldr	r2, [r7, #8]
 800f4e6:	9202      	str	r2, [sp, #8]
 800f4e8:	9301      	str	r3, [sp, #4]
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	9300      	str	r3, [sp, #0]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	460a      	mov	r2, r1
 800f4f2:	4924      	ldr	r1, [pc, #144]	@ (800f584 <vTaskStartScheduler+0xc0>)
 800f4f4:	4824      	ldr	r0, [pc, #144]	@ (800f588 <vTaskStartScheduler+0xc4>)
 800f4f6:	f7ff fd7b 	bl	800eff0 <xTaskCreateStatic>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	4a23      	ldr	r2, [pc, #140]	@ (800f58c <vTaskStartScheduler+0xc8>)
 800f4fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f500:	4b22      	ldr	r3, [pc, #136]	@ (800f58c <vTaskStartScheduler+0xc8>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f508:	2301      	movs	r3, #1
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e001      	b.n	800f512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f50e:	2300      	movs	r3, #0
 800f510:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	2b01      	cmp	r3, #1
 800f516:	d102      	bne.n	800f51e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f518:	f000 fe2a 	bl	8010170 <xTimerCreateTimerTask>
 800f51c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f51e:	697b      	ldr	r3, [r7, #20]
 800f520:	2b01      	cmp	r3, #1
 800f522:	d11b      	bne.n	800f55c <vTaskStartScheduler+0x98>
	__asm volatile
 800f524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	613b      	str	r3, [r7, #16]
}
 800f536:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f538:	4b15      	ldr	r3, [pc, #84]	@ (800f590 <vTaskStartScheduler+0xcc>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	3354      	adds	r3, #84	@ 0x54
 800f53e:	4a15      	ldr	r2, [pc, #84]	@ (800f594 <vTaskStartScheduler+0xd0>)
 800f540:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f542:	4b15      	ldr	r3, [pc, #84]	@ (800f598 <vTaskStartScheduler+0xd4>)
 800f544:	f04f 32ff 	mov.w	r2, #4294967295
 800f548:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f54a:	4b14      	ldr	r3, [pc, #80]	@ (800f59c <vTaskStartScheduler+0xd8>)
 800f54c:	2201      	movs	r2, #1
 800f54e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f550:	4b13      	ldr	r3, [pc, #76]	@ (800f5a0 <vTaskStartScheduler+0xdc>)
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f556:	f001 f9f3 	bl	8010940 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f55a:	e00f      	b.n	800f57c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f55c:	697b      	ldr	r3, [r7, #20]
 800f55e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f562:	d10b      	bne.n	800f57c <vTaskStartScheduler+0xb8>
	__asm volatile
 800f564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f568:	f383 8811 	msr	BASEPRI, r3
 800f56c:	f3bf 8f6f 	isb	sy
 800f570:	f3bf 8f4f 	dsb	sy
 800f574:	60fb      	str	r3, [r7, #12]
}
 800f576:	bf00      	nop
 800f578:	bf00      	nop
 800f57a:	e7fd      	b.n	800f578 <vTaskStartScheduler+0xb4>
}
 800f57c:	bf00      	nop
 800f57e:	3718      	adds	r7, #24
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	08013d74 	.word	0x08013d74
 800f588:	0800fbd5 	.word	0x0800fbd5
 800f58c:	2400184c 	.word	0x2400184c
 800f590:	24001354 	.word	0x24001354
 800f594:	24000024 	.word	0x24000024
 800f598:	24001848 	.word	0x24001848
 800f59c:	24001834 	.word	0x24001834
 800f5a0:	2400182c 	.word	0x2400182c

0800f5a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f5a8:	4b04      	ldr	r3, [pc, #16]	@ (800f5bc <vTaskSuspendAll+0x18>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3301      	adds	r3, #1
 800f5ae:	4a03      	ldr	r2, [pc, #12]	@ (800f5bc <vTaskSuspendAll+0x18>)
 800f5b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f5b2:	bf00      	nop
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr
 800f5bc:	24001850 	.word	0x24001850

0800f5c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b084      	sub	sp, #16
 800f5c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f5ce:	4b42      	ldr	r3, [pc, #264]	@ (800f6d8 <xTaskResumeAll+0x118>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d10b      	bne.n	800f5ee <xTaskResumeAll+0x2e>
	__asm volatile
 800f5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5da:	f383 8811 	msr	BASEPRI, r3
 800f5de:	f3bf 8f6f 	isb	sy
 800f5e2:	f3bf 8f4f 	dsb	sy
 800f5e6:	603b      	str	r3, [r7, #0]
}
 800f5e8:	bf00      	nop
 800f5ea:	bf00      	nop
 800f5ec:	e7fd      	b.n	800f5ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f5ee:	f001 fa4b 	bl	8010a88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f5f2:	4b39      	ldr	r3, [pc, #228]	@ (800f6d8 <xTaskResumeAll+0x118>)
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	3b01      	subs	r3, #1
 800f5f8:	4a37      	ldr	r2, [pc, #220]	@ (800f6d8 <xTaskResumeAll+0x118>)
 800f5fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f5fc:	4b36      	ldr	r3, [pc, #216]	@ (800f6d8 <xTaskResumeAll+0x118>)
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d162      	bne.n	800f6ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f604:	4b35      	ldr	r3, [pc, #212]	@ (800f6dc <xTaskResumeAll+0x11c>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d05e      	beq.n	800f6ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f60c:	e02f      	b.n	800f66e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f60e:	4b34      	ldr	r3, [pc, #208]	@ (800f6e0 <xTaskResumeAll+0x120>)
 800f610:	68db      	ldr	r3, [r3, #12]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3318      	adds	r3, #24
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fe fda8 	bl	800e170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	3304      	adds	r3, #4
 800f624:	4618      	mov	r0, r3
 800f626:	f7fe fda3 	bl	800e170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f62e:	4b2d      	ldr	r3, [pc, #180]	@ (800f6e4 <xTaskResumeAll+0x124>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	429a      	cmp	r2, r3
 800f634:	d903      	bls.n	800f63e <xTaskResumeAll+0x7e>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f63a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6e4 <xTaskResumeAll+0x124>)
 800f63c:	6013      	str	r3, [r2, #0]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f642:	4613      	mov	r3, r2
 800f644:	009b      	lsls	r3, r3, #2
 800f646:	4413      	add	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4a27      	ldr	r2, [pc, #156]	@ (800f6e8 <xTaskResumeAll+0x128>)
 800f64c:	441a      	add	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	3304      	adds	r3, #4
 800f652:	4619      	mov	r1, r3
 800f654:	4610      	mov	r0, r2
 800f656:	f7fe fd2e 	bl	800e0b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f65e:	4b23      	ldr	r3, [pc, #140]	@ (800f6ec <xTaskResumeAll+0x12c>)
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f664:	429a      	cmp	r2, r3
 800f666:	d302      	bcc.n	800f66e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800f668:	4b21      	ldr	r3, [pc, #132]	@ (800f6f0 <xTaskResumeAll+0x130>)
 800f66a:	2201      	movs	r2, #1
 800f66c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f66e:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e0 <xTaskResumeAll+0x120>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d1cb      	bne.n	800f60e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f67c:	f000 fb66 	bl	800fd4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f680:	4b1c      	ldr	r3, [pc, #112]	@ (800f6f4 <xTaskResumeAll+0x134>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d010      	beq.n	800f6ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f68c:	f000 f846 	bl	800f71c <xTaskIncrementTick>
 800f690:	4603      	mov	r3, r0
 800f692:	2b00      	cmp	r3, #0
 800f694:	d002      	beq.n	800f69c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800f696:	4b16      	ldr	r3, [pc, #88]	@ (800f6f0 <xTaskResumeAll+0x130>)
 800f698:	2201      	movs	r2, #1
 800f69a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1f1      	bne.n	800f68c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800f6a8:	4b12      	ldr	r3, [pc, #72]	@ (800f6f4 <xTaskResumeAll+0x134>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f6ae:	4b10      	ldr	r3, [pc, #64]	@ (800f6f0 <xTaskResumeAll+0x130>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f6ba:	4b0f      	ldr	r3, [pc, #60]	@ (800f6f8 <xTaskResumeAll+0x138>)
 800f6bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	f3bf 8f4f 	dsb	sy
 800f6c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f6ca:	f001 fa0f 	bl	8010aec <vPortExitCritical>

	return xAlreadyYielded;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	3710      	adds	r7, #16
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bd80      	pop	{r7, pc}
 800f6d8:	24001850 	.word	0x24001850
 800f6dc:	24001828 	.word	0x24001828
 800f6e0:	240017e8 	.word	0x240017e8
 800f6e4:	24001830 	.word	0x24001830
 800f6e8:	24001358 	.word	0x24001358
 800f6ec:	24001354 	.word	0x24001354
 800f6f0:	2400183c 	.word	0x2400183c
 800f6f4:	24001838 	.word	0x24001838
 800f6f8:	e000ed04 	.word	0xe000ed04

0800f6fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b083      	sub	sp, #12
 800f700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f702:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <xTaskGetTickCount+0x1c>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f708:	687b      	ldr	r3, [r7, #4]
}
 800f70a:	4618      	mov	r0, r3
 800f70c:	370c      	adds	r7, #12
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	2400182c 	.word	0x2400182c

0800f71c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b086      	sub	sp, #24
 800f720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f722:	2300      	movs	r3, #0
 800f724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f726:	4b4f      	ldr	r3, [pc, #316]	@ (800f864 <xTaskIncrementTick+0x148>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	f040 8090 	bne.w	800f850 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f730:	4b4d      	ldr	r3, [pc, #308]	@ (800f868 <xTaskIncrementTick+0x14c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	3301      	adds	r3, #1
 800f736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f738:	4a4b      	ldr	r2, [pc, #300]	@ (800f868 <xTaskIncrementTick+0x14c>)
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d121      	bne.n	800f788 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800f744:	4b49      	ldr	r3, [pc, #292]	@ (800f86c <xTaskIncrementTick+0x150>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d00b      	beq.n	800f766 <xTaskIncrementTick+0x4a>
	__asm volatile
 800f74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f752:	f383 8811 	msr	BASEPRI, r3
 800f756:	f3bf 8f6f 	isb	sy
 800f75a:	f3bf 8f4f 	dsb	sy
 800f75e:	603b      	str	r3, [r7, #0]
}
 800f760:	bf00      	nop
 800f762:	bf00      	nop
 800f764:	e7fd      	b.n	800f762 <xTaskIncrementTick+0x46>
 800f766:	4b41      	ldr	r3, [pc, #260]	@ (800f86c <xTaskIncrementTick+0x150>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	4b40      	ldr	r3, [pc, #256]	@ (800f870 <xTaskIncrementTick+0x154>)
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a3e      	ldr	r2, [pc, #248]	@ (800f86c <xTaskIncrementTick+0x150>)
 800f772:	6013      	str	r3, [r2, #0]
 800f774:	4a3e      	ldr	r2, [pc, #248]	@ (800f870 <xTaskIncrementTick+0x154>)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	6013      	str	r3, [r2, #0]
 800f77a:	4b3e      	ldr	r3, [pc, #248]	@ (800f874 <xTaskIncrementTick+0x158>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	3301      	adds	r3, #1
 800f780:	4a3c      	ldr	r2, [pc, #240]	@ (800f874 <xTaskIncrementTick+0x158>)
 800f782:	6013      	str	r3, [r2, #0]
 800f784:	f000 fae2 	bl	800fd4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f788:	4b3b      	ldr	r3, [pc, #236]	@ (800f878 <xTaskIncrementTick+0x15c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	693a      	ldr	r2, [r7, #16]
 800f78e:	429a      	cmp	r2, r3
 800f790:	d349      	bcc.n	800f826 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f792:	4b36      	ldr	r3, [pc, #216]	@ (800f86c <xTaskIncrementTick+0x150>)
 800f794:	681b      	ldr	r3, [r3, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d104      	bne.n	800f7a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f79c:	4b36      	ldr	r3, [pc, #216]	@ (800f878 <xTaskIncrementTick+0x15c>)
 800f79e:	f04f 32ff 	mov.w	r2, #4294967295
 800f7a2:	601a      	str	r2, [r3, #0]
					break;
 800f7a4:	e03f      	b.n	800f826 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7a6:	4b31      	ldr	r3, [pc, #196]	@ (800f86c <xTaskIncrementTick+0x150>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d203      	bcs.n	800f7c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f7be:	4a2e      	ldr	r2, [pc, #184]	@ (800f878 <xTaskIncrementTick+0x15c>)
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f7c4:	e02f      	b.n	800f826 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	3304      	adds	r3, #4
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7fe fcd0 	bl	800e170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d004      	beq.n	800f7e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7d8:	68bb      	ldr	r3, [r7, #8]
 800f7da:	3318      	adds	r3, #24
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fe fcc7 	bl	800e170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7e6:	4b25      	ldr	r3, [pc, #148]	@ (800f87c <xTaskIncrementTick+0x160>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	429a      	cmp	r2, r3
 800f7ec:	d903      	bls.n	800f7f6 <xTaskIncrementTick+0xda>
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7f2:	4a22      	ldr	r2, [pc, #136]	@ (800f87c <xTaskIncrementTick+0x160>)
 800f7f4:	6013      	str	r3, [r2, #0]
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	009b      	lsls	r3, r3, #2
 800f7fe:	4413      	add	r3, r2
 800f800:	009b      	lsls	r3, r3, #2
 800f802:	4a1f      	ldr	r2, [pc, #124]	@ (800f880 <xTaskIncrementTick+0x164>)
 800f804:	441a      	add	r2, r3
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	3304      	adds	r3, #4
 800f80a:	4619      	mov	r1, r3
 800f80c:	4610      	mov	r0, r2
 800f80e:	f7fe fc52 	bl	800e0b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f816:	4b1b      	ldr	r3, [pc, #108]	@ (800f884 <xTaskIncrementTick+0x168>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d3b8      	bcc.n	800f792 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800f820:	2301      	movs	r3, #1
 800f822:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f824:	e7b5      	b.n	800f792 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f826:	4b17      	ldr	r3, [pc, #92]	@ (800f884 <xTaskIncrementTick+0x168>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82c:	4914      	ldr	r1, [pc, #80]	@ (800f880 <xTaskIncrementTick+0x164>)
 800f82e:	4613      	mov	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4413      	add	r3, r2
 800f834:	009b      	lsls	r3, r3, #2
 800f836:	440b      	add	r3, r1
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	2b01      	cmp	r3, #1
 800f83c:	d901      	bls.n	800f842 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800f83e:	2301      	movs	r3, #1
 800f840:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f842:	4b11      	ldr	r3, [pc, #68]	@ (800f888 <xTaskIncrementTick+0x16c>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d007      	beq.n	800f85a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800f84a:	2301      	movs	r3, #1
 800f84c:	617b      	str	r3, [r7, #20]
 800f84e:	e004      	b.n	800f85a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f850:	4b0e      	ldr	r3, [pc, #56]	@ (800f88c <xTaskIncrementTick+0x170>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	3301      	adds	r3, #1
 800f856:	4a0d      	ldr	r2, [pc, #52]	@ (800f88c <xTaskIncrementTick+0x170>)
 800f858:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f85a:	697b      	ldr	r3, [r7, #20]
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3718      	adds	r7, #24
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}
 800f864:	24001850 	.word	0x24001850
 800f868:	2400182c 	.word	0x2400182c
 800f86c:	240017e0 	.word	0x240017e0
 800f870:	240017e4 	.word	0x240017e4
 800f874:	24001840 	.word	0x24001840
 800f878:	24001848 	.word	0x24001848
 800f87c:	24001830 	.word	0x24001830
 800f880:	24001358 	.word	0x24001358
 800f884:	24001354 	.word	0x24001354
 800f888:	2400183c 	.word	0x2400183c
 800f88c:	24001838 	.word	0x24001838

0800f890 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f896:	4b2b      	ldr	r3, [pc, #172]	@ (800f944 <vTaskSwitchContext+0xb4>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d003      	beq.n	800f8a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f89e:	4b2a      	ldr	r3, [pc, #168]	@ (800f948 <vTaskSwitchContext+0xb8>)
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f8a4:	e047      	b.n	800f936 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800f8a6:	4b28      	ldr	r3, [pc, #160]	@ (800f948 <vTaskSwitchContext+0xb8>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f8ac:	4b27      	ldr	r3, [pc, #156]	@ (800f94c <vTaskSwitchContext+0xbc>)
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	60fb      	str	r3, [r7, #12]
 800f8b2:	e011      	b.n	800f8d8 <vTaskSwitchContext+0x48>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d10b      	bne.n	800f8d2 <vTaskSwitchContext+0x42>
	__asm volatile
 800f8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8be:	f383 8811 	msr	BASEPRI, r3
 800f8c2:	f3bf 8f6f 	isb	sy
 800f8c6:	f3bf 8f4f 	dsb	sy
 800f8ca:	607b      	str	r3, [r7, #4]
}
 800f8cc:	bf00      	nop
 800f8ce:	bf00      	nop
 800f8d0:	e7fd      	b.n	800f8ce <vTaskSwitchContext+0x3e>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	60fb      	str	r3, [r7, #12]
 800f8d8:	491d      	ldr	r1, [pc, #116]	@ (800f950 <vTaskSwitchContext+0xc0>)
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	4413      	add	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	440b      	add	r3, r1
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d0e3      	beq.n	800f8b4 <vTaskSwitchContext+0x24>
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	4613      	mov	r3, r2
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	4413      	add	r3, r2
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4a16      	ldr	r2, [pc, #88]	@ (800f950 <vTaskSwitchContext+0xc0>)
 800f8f8:	4413      	add	r3, r2
 800f8fa:	60bb      	str	r3, [r7, #8]
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	685b      	ldr	r3, [r3, #4]
 800f900:	685a      	ldr	r2, [r3, #4]
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	605a      	str	r2, [r3, #4]
 800f906:	68bb      	ldr	r3, [r7, #8]
 800f908:	685a      	ldr	r2, [r3, #4]
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	3308      	adds	r3, #8
 800f90e:	429a      	cmp	r2, r3
 800f910:	d104      	bne.n	800f91c <vTaskSwitchContext+0x8c>
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	685a      	ldr	r2, [r3, #4]
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	605a      	str	r2, [r3, #4]
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	4a0c      	ldr	r2, [pc, #48]	@ (800f954 <vTaskSwitchContext+0xc4>)
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	4a09      	ldr	r2, [pc, #36]	@ (800f94c <vTaskSwitchContext+0xbc>)
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f92c:	4b09      	ldr	r3, [pc, #36]	@ (800f954 <vTaskSwitchContext+0xc4>)
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	3354      	adds	r3, #84	@ 0x54
 800f932:	4a09      	ldr	r2, [pc, #36]	@ (800f958 <vTaskSwitchContext+0xc8>)
 800f934:	6013      	str	r3, [r2, #0]
}
 800f936:	bf00      	nop
 800f938:	3714      	adds	r7, #20
 800f93a:	46bd      	mov	sp, r7
 800f93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f940:	4770      	bx	lr
 800f942:	bf00      	nop
 800f944:	24001850 	.word	0x24001850
 800f948:	2400183c 	.word	0x2400183c
 800f94c:	24001830 	.word	0x24001830
 800f950:	24001358 	.word	0x24001358
 800f954:	24001354 	.word	0x24001354
 800f958:	24000024 	.word	0x24000024

0800f95c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b084      	sub	sp, #16
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d10b      	bne.n	800f984 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800f96c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f970:	f383 8811 	msr	BASEPRI, r3
 800f974:	f3bf 8f6f 	isb	sy
 800f978:	f3bf 8f4f 	dsb	sy
 800f97c:	60fb      	str	r3, [r7, #12]
}
 800f97e:	bf00      	nop
 800f980:	bf00      	nop
 800f982:	e7fd      	b.n	800f980 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f984:	4b07      	ldr	r3, [pc, #28]	@ (800f9a4 <vTaskPlaceOnEventList+0x48>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3318      	adds	r3, #24
 800f98a:	4619      	mov	r1, r3
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7fe fbb6 	bl	800e0fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f992:	2101      	movs	r1, #1
 800f994:	6838      	ldr	r0, [r7, #0]
 800f996:	f000 fb97 	bl	80100c8 <prvAddCurrentTaskToDelayedList>
}
 800f99a:	bf00      	nop
 800f99c:	3710      	adds	r7, #16
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
 800f9a2:	bf00      	nop
 800f9a4:	24001354 	.word	0x24001354

0800f9a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d10b      	bne.n	800f9d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800f9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9be:	f383 8811 	msr	BASEPRI, r3
 800f9c2:	f3bf 8f6f 	isb	sy
 800f9c6:	f3bf 8f4f 	dsb	sy
 800f9ca:	617b      	str	r3, [r7, #20]
}
 800f9cc:	bf00      	nop
 800f9ce:	bf00      	nop
 800f9d0:	e7fd      	b.n	800f9ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f9d2:	4b0a      	ldr	r3, [pc, #40]	@ (800f9fc <vTaskPlaceOnEventListRestricted+0x54>)
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	3318      	adds	r3, #24
 800f9d8:	4619      	mov	r1, r3
 800f9da:	68f8      	ldr	r0, [r7, #12]
 800f9dc:	f7fe fb6b 	bl	800e0b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d002      	beq.n	800f9ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800f9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f9ec:	6879      	ldr	r1, [r7, #4]
 800f9ee:	68b8      	ldr	r0, [r7, #8]
 800f9f0:	f000 fb6a 	bl	80100c8 <prvAddCurrentTaskToDelayedList>
	}
 800f9f4:	bf00      	nop
 800f9f6:	3718      	adds	r7, #24
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}
 800f9fc:	24001354 	.word	0x24001354

0800fa00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	68db      	ldr	r3, [r3, #12]
 800fa0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fa10:	693b      	ldr	r3, [r7, #16]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d10b      	bne.n	800fa2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800fa16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	60fb      	str	r3, [r7, #12]
}
 800fa28:	bf00      	nop
 800fa2a:	bf00      	nop
 800fa2c:	e7fd      	b.n	800fa2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	3318      	adds	r3, #24
 800fa32:	4618      	mov	r0, r3
 800fa34:	f7fe fb9c 	bl	800e170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa38:	4b1d      	ldr	r3, [pc, #116]	@ (800fab0 <xTaskRemoveFromEventList+0xb0>)
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d11d      	bne.n	800fa7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	3304      	adds	r3, #4
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fe fb93 	bl	800e170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa4e:	4b19      	ldr	r3, [pc, #100]	@ (800fab4 <xTaskRemoveFromEventList+0xb4>)
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	d903      	bls.n	800fa5e <xTaskRemoveFromEventList+0x5e>
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa5a:	4a16      	ldr	r2, [pc, #88]	@ (800fab4 <xTaskRemoveFromEventList+0xb4>)
 800fa5c:	6013      	str	r3, [r2, #0]
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa62:	4613      	mov	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4a13      	ldr	r2, [pc, #76]	@ (800fab8 <xTaskRemoveFromEventList+0xb8>)
 800fa6c:	441a      	add	r2, r3
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	3304      	adds	r3, #4
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7fe fb1e 	bl	800e0b6 <vListInsertEnd>
 800fa7a:	e005      	b.n	800fa88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fa7c:	693b      	ldr	r3, [r7, #16]
 800fa7e:	3318      	adds	r3, #24
 800fa80:	4619      	mov	r1, r3
 800fa82:	480e      	ldr	r0, [pc, #56]	@ (800fabc <xTaskRemoveFromEventList+0xbc>)
 800fa84:	f7fe fb17 	bl	800e0b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa8c:	4b0c      	ldr	r3, [pc, #48]	@ (800fac0 <xTaskRemoveFromEventList+0xc0>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa92:	429a      	cmp	r2, r3
 800fa94:	d905      	bls.n	800faa2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fa96:	2301      	movs	r3, #1
 800fa98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fa9a:	4b0a      	ldr	r3, [pc, #40]	@ (800fac4 <xTaskRemoveFromEventList+0xc4>)
 800fa9c:	2201      	movs	r2, #1
 800fa9e:	601a      	str	r2, [r3, #0]
 800faa0:	e001      	b.n	800faa6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800faa2:	2300      	movs	r3, #0
 800faa4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800faa6:	697b      	ldr	r3, [r7, #20]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}
 800fab0:	24001850 	.word	0x24001850
 800fab4:	24001830 	.word	0x24001830
 800fab8:	24001358 	.word	0x24001358
 800fabc:	240017e8 	.word	0x240017e8
 800fac0:	24001354 	.word	0x24001354
 800fac4:	2400183c 	.word	0x2400183c

0800fac8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fac8:	b480      	push	{r7}
 800faca:	b083      	sub	sp, #12
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fad0:	4b06      	ldr	r3, [pc, #24]	@ (800faec <vTaskInternalSetTimeOutState+0x24>)
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fad8:	4b05      	ldr	r3, [pc, #20]	@ (800faf0 <vTaskInternalSetTimeOutState+0x28>)
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	605a      	str	r2, [r3, #4]
}
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr
 800faec:	24001840 	.word	0x24001840
 800faf0:	2400182c 	.word	0x2400182c

0800faf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b088      	sub	sp, #32
 800faf8:	af00      	add	r7, sp, #0
 800fafa:	6078      	str	r0, [r7, #4]
 800fafc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d10b      	bne.n	800fb1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800fb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb08:	f383 8811 	msr	BASEPRI, r3
 800fb0c:	f3bf 8f6f 	isb	sy
 800fb10:	f3bf 8f4f 	dsb	sy
 800fb14:	613b      	str	r3, [r7, #16]
}
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	e7fd      	b.n	800fb18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d10b      	bne.n	800fb3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800fb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb26:	f383 8811 	msr	BASEPRI, r3
 800fb2a:	f3bf 8f6f 	isb	sy
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	60fb      	str	r3, [r7, #12]
}
 800fb34:	bf00      	nop
 800fb36:	bf00      	nop
 800fb38:	e7fd      	b.n	800fb36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800fb3a:	f000 ffa5 	bl	8010a88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fb3e:	4b1d      	ldr	r3, [pc, #116]	@ (800fbb4 <xTaskCheckForTimeOut+0xc0>)
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	685b      	ldr	r3, [r3, #4]
 800fb48:	69ba      	ldr	r2, [r7, #24]
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb56:	d102      	bne.n	800fb5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	61fb      	str	r3, [r7, #28]
 800fb5c:	e023      	b.n	800fba6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	4b15      	ldr	r3, [pc, #84]	@ (800fbb8 <xTaskCheckForTimeOut+0xc4>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d007      	beq.n	800fb7a <xTaskCheckForTimeOut+0x86>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	69ba      	ldr	r2, [r7, #24]
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d302      	bcc.n	800fb7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fb74:	2301      	movs	r3, #1
 800fb76:	61fb      	str	r3, [r7, #28]
 800fb78:	e015      	b.n	800fba6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	697a      	ldr	r2, [r7, #20]
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d20b      	bcs.n	800fb9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fb84:	683b      	ldr	r3, [r7, #0]
 800fb86:	681a      	ldr	r2, [r3, #0]
 800fb88:	697b      	ldr	r3, [r7, #20]
 800fb8a:	1ad2      	subs	r2, r2, r3
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f7ff ff99 	bl	800fac8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fb96:	2300      	movs	r3, #0
 800fb98:	61fb      	str	r3, [r7, #28]
 800fb9a:	e004      	b.n	800fba6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	2200      	movs	r2, #0
 800fba0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fba2:	2301      	movs	r3, #1
 800fba4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fba6:	f000 ffa1 	bl	8010aec <vPortExitCritical>

	return xReturn;
 800fbaa:	69fb      	ldr	r3, [r7, #28]
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3720      	adds	r7, #32
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	2400182c 	.word	0x2400182c
 800fbb8:	24001840 	.word	0x24001840

0800fbbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fbc0:	4b03      	ldr	r3, [pc, #12]	@ (800fbd0 <vTaskMissedYield+0x14>)
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	601a      	str	r2, [r3, #0]
}
 800fbc6:	bf00      	nop
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr
 800fbd0:	2400183c 	.word	0x2400183c

0800fbd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fbdc:	f000 f852 	bl	800fc84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fbe0:	4b06      	ldr	r3, [pc, #24]	@ (800fbfc <prvIdleTask+0x28>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	2b01      	cmp	r3, #1
 800fbe6:	d9f9      	bls.n	800fbdc <prvIdleTask+0x8>
			{
				taskYIELD();
 800fbe8:	4b05      	ldr	r3, [pc, #20]	@ (800fc00 <prvIdleTask+0x2c>)
 800fbea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbee:	601a      	str	r2, [r3, #0]
 800fbf0:	f3bf 8f4f 	dsb	sy
 800fbf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fbf8:	e7f0      	b.n	800fbdc <prvIdleTask+0x8>
 800fbfa:	bf00      	nop
 800fbfc:	24001358 	.word	0x24001358
 800fc00:	e000ed04 	.word	0xe000ed04

0800fc04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b082      	sub	sp, #8
 800fc08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	607b      	str	r3, [r7, #4]
 800fc0e:	e00c      	b.n	800fc2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	4613      	mov	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	4413      	add	r3, r2
 800fc18:	009b      	lsls	r3, r3, #2
 800fc1a:	4a12      	ldr	r2, [pc, #72]	@ (800fc64 <prvInitialiseTaskLists+0x60>)
 800fc1c:	4413      	add	r3, r2
 800fc1e:	4618      	mov	r0, r3
 800fc20:	f7fe fa1c 	bl	800e05c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	3301      	adds	r3, #1
 800fc28:	607b      	str	r3, [r7, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2b37      	cmp	r3, #55	@ 0x37
 800fc2e:	d9ef      	bls.n	800fc10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fc30:	480d      	ldr	r0, [pc, #52]	@ (800fc68 <prvInitialiseTaskLists+0x64>)
 800fc32:	f7fe fa13 	bl	800e05c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fc36:	480d      	ldr	r0, [pc, #52]	@ (800fc6c <prvInitialiseTaskLists+0x68>)
 800fc38:	f7fe fa10 	bl	800e05c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fc3c:	480c      	ldr	r0, [pc, #48]	@ (800fc70 <prvInitialiseTaskLists+0x6c>)
 800fc3e:	f7fe fa0d 	bl	800e05c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fc42:	480c      	ldr	r0, [pc, #48]	@ (800fc74 <prvInitialiseTaskLists+0x70>)
 800fc44:	f7fe fa0a 	bl	800e05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fc48:	480b      	ldr	r0, [pc, #44]	@ (800fc78 <prvInitialiseTaskLists+0x74>)
 800fc4a:	f7fe fa07 	bl	800e05c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fc4e:	4b0b      	ldr	r3, [pc, #44]	@ (800fc7c <prvInitialiseTaskLists+0x78>)
 800fc50:	4a05      	ldr	r2, [pc, #20]	@ (800fc68 <prvInitialiseTaskLists+0x64>)
 800fc52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fc54:	4b0a      	ldr	r3, [pc, #40]	@ (800fc80 <prvInitialiseTaskLists+0x7c>)
 800fc56:	4a05      	ldr	r2, [pc, #20]	@ (800fc6c <prvInitialiseTaskLists+0x68>)
 800fc58:	601a      	str	r2, [r3, #0]
}
 800fc5a:	bf00      	nop
 800fc5c:	3708      	adds	r7, #8
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}
 800fc62:	bf00      	nop
 800fc64:	24001358 	.word	0x24001358
 800fc68:	240017b8 	.word	0x240017b8
 800fc6c:	240017cc 	.word	0x240017cc
 800fc70:	240017e8 	.word	0x240017e8
 800fc74:	240017fc 	.word	0x240017fc
 800fc78:	24001814 	.word	0x24001814
 800fc7c:	240017e0 	.word	0x240017e0
 800fc80:	240017e4 	.word	0x240017e4

0800fc84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b082      	sub	sp, #8
 800fc88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fc8a:	e019      	b.n	800fcc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fc8c:	f000 fefc 	bl	8010a88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc90:	4b10      	ldr	r3, [pc, #64]	@ (800fcd4 <prvCheckTasksWaitingTermination+0x50>)
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	3304      	adds	r3, #4
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe fa67 	bl	800e170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fca2:	4b0d      	ldr	r3, [pc, #52]	@ (800fcd8 <prvCheckTasksWaitingTermination+0x54>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	3b01      	subs	r3, #1
 800fca8:	4a0b      	ldr	r2, [pc, #44]	@ (800fcd8 <prvCheckTasksWaitingTermination+0x54>)
 800fcaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fcac:	4b0b      	ldr	r3, [pc, #44]	@ (800fcdc <prvCheckTasksWaitingTermination+0x58>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	3b01      	subs	r3, #1
 800fcb2:	4a0a      	ldr	r2, [pc, #40]	@ (800fcdc <prvCheckTasksWaitingTermination+0x58>)
 800fcb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fcb6:	f000 ff19 	bl	8010aec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fcba:	6878      	ldr	r0, [r7, #4]
 800fcbc:	f000 f810 	bl	800fce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fcc0:	4b06      	ldr	r3, [pc, #24]	@ (800fcdc <prvCheckTasksWaitingTermination+0x58>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d1e1      	bne.n	800fc8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fcc8:	bf00      	nop
 800fcca:	bf00      	nop
 800fccc:	3708      	adds	r7, #8
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	bd80      	pop	{r7, pc}
 800fcd2:	bf00      	nop
 800fcd4:	240017fc 	.word	0x240017fc
 800fcd8:	24001828 	.word	0x24001828
 800fcdc:	24001810 	.word	0x24001810

0800fce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	3354      	adds	r3, #84	@ 0x54
 800fcec:	4618      	mov	r0, r3
 800fcee:	f001 ff69 	bl	8011bc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d108      	bne.n	800fd0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd00:	4618      	mov	r0, r3
 800fd02:	f001 f8b1 	bl	8010e68 <vPortFree>
				vPortFree( pxTCB );
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f001 f8ae 	bl	8010e68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fd0c:	e019      	b.n	800fd42 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fd14:	2b01      	cmp	r3, #1
 800fd16:	d103      	bne.n	800fd20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f001 f8a5 	bl	8010e68 <vPortFree>
	}
 800fd1e:	e010      	b.n	800fd42 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800fd26:	2b02      	cmp	r3, #2
 800fd28:	d00b      	beq.n	800fd42 <prvDeleteTCB+0x62>
	__asm volatile
 800fd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd2e:	f383 8811 	msr	BASEPRI, r3
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	f3bf 8f4f 	dsb	sy
 800fd3a:	60fb      	str	r3, [r7, #12]
}
 800fd3c:	bf00      	nop
 800fd3e:	bf00      	nop
 800fd40:	e7fd      	b.n	800fd3e <prvDeleteTCB+0x5e>
	}
 800fd42:	bf00      	nop
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
	...

0800fd4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b083      	sub	sp, #12
 800fd50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd52:	4b0c      	ldr	r3, [pc, #48]	@ (800fd84 <prvResetNextTaskUnblockTime+0x38>)
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d104      	bne.n	800fd66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fd5c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd88 <prvResetNextTaskUnblockTime+0x3c>)
 800fd5e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fd64:	e008      	b.n	800fd78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd66:	4b07      	ldr	r3, [pc, #28]	@ (800fd84 <prvResetNextTaskUnblockTime+0x38>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	4a04      	ldr	r2, [pc, #16]	@ (800fd88 <prvResetNextTaskUnblockTime+0x3c>)
 800fd76:	6013      	str	r3, [r2, #0]
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr
 800fd84:	240017e0 	.word	0x240017e0
 800fd88:	24001848 	.word	0x24001848

0800fd8c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fd92:	4b05      	ldr	r3, [pc, #20]	@ (800fda8 <xTaskGetCurrentTaskHandle+0x1c>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fd98:	687b      	ldr	r3, [r7, #4]
	}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr
 800fda6:	bf00      	nop
 800fda8:	24001354 	.word	0x24001354

0800fdac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fdb2:	4b0b      	ldr	r3, [pc, #44]	@ (800fde0 <xTaskGetSchedulerState+0x34>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d102      	bne.n	800fdc0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	607b      	str	r3, [r7, #4]
 800fdbe:	e008      	b.n	800fdd2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fdc0:	4b08      	ldr	r3, [pc, #32]	@ (800fde4 <xTaskGetSchedulerState+0x38>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d102      	bne.n	800fdce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fdc8:	2302      	movs	r3, #2
 800fdca:	607b      	str	r3, [r7, #4]
 800fdcc:	e001      	b.n	800fdd2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fdd2:	687b      	ldr	r3, [r7, #4]
	}
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	370c      	adds	r7, #12
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdde:	4770      	bx	lr
 800fde0:	24001834 	.word	0x24001834
 800fde4:	24001850 	.word	0x24001850

0800fde8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b084      	sub	sp, #16
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d051      	beq.n	800fea2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe02:	4b2a      	ldr	r3, [pc, #168]	@ (800feac <xTaskPriorityInherit+0xc4>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d241      	bcs.n	800fe90 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fe0c:	68bb      	ldr	r3, [r7, #8]
 800fe0e:	699b      	ldr	r3, [r3, #24]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	db06      	blt.n	800fe22 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe14:	4b25      	ldr	r3, [pc, #148]	@ (800feac <xTaskPriorityInherit+0xc4>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	6959      	ldr	r1, [r3, #20]
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4a1f      	ldr	r2, [pc, #124]	@ (800feb0 <xTaskPriorityInherit+0xc8>)
 800fe34:	4413      	add	r3, r2
 800fe36:	4299      	cmp	r1, r3
 800fe38:	d122      	bne.n	800fe80 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fe3a:	68bb      	ldr	r3, [r7, #8]
 800fe3c:	3304      	adds	r3, #4
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fe f996 	bl	800e170 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe44:	4b19      	ldr	r3, [pc, #100]	@ (800feac <xTaskPriorityInherit+0xc4>)
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe52:	4b18      	ldr	r3, [pc, #96]	@ (800feb4 <xTaskPriorityInherit+0xcc>)
 800fe54:	681b      	ldr	r3, [r3, #0]
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d903      	bls.n	800fe62 <xTaskPriorityInherit+0x7a>
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe5e:	4a15      	ldr	r2, [pc, #84]	@ (800feb4 <xTaskPriorityInherit+0xcc>)
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe66:	4613      	mov	r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	4413      	add	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4a10      	ldr	r2, [pc, #64]	@ (800feb0 <xTaskPriorityInherit+0xc8>)
 800fe70:	441a      	add	r2, r3
 800fe72:	68bb      	ldr	r3, [r7, #8]
 800fe74:	3304      	adds	r3, #4
 800fe76:	4619      	mov	r1, r3
 800fe78:	4610      	mov	r0, r2
 800fe7a:	f7fe f91c 	bl	800e0b6 <vListInsertEnd>
 800fe7e:	e004      	b.n	800fe8a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fe80:	4b0a      	ldr	r3, [pc, #40]	@ (800feac <xTaskPriorityInherit+0xc4>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	60fb      	str	r3, [r7, #12]
 800fe8e:	e008      	b.n	800fea2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fe94:	4b05      	ldr	r3, [pc, #20]	@ (800feac <xTaskPriorityInherit+0xc4>)
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d201      	bcs.n	800fea2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fe9e:	2301      	movs	r3, #1
 800fea0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fea2:	68fb      	ldr	r3, [r7, #12]
	}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3710      	adds	r7, #16
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	24001354 	.word	0x24001354
 800feb0:	24001358 	.word	0x24001358
 800feb4:	24001830 	.word	0x24001830

0800feb8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b086      	sub	sp, #24
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fec4:	2300      	movs	r3, #0
 800fec6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d058      	beq.n	800ff80 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fece:	4b2f      	ldr	r3, [pc, #188]	@ (800ff8c <xTaskPriorityDisinherit+0xd4>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	693a      	ldr	r2, [r7, #16]
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d00b      	beq.n	800fef0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800fed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fedc:	f383 8811 	msr	BASEPRI, r3
 800fee0:	f3bf 8f6f 	isb	sy
 800fee4:	f3bf 8f4f 	dsb	sy
 800fee8:	60fb      	str	r3, [r7, #12]
}
 800feea:	bf00      	nop
 800feec:	bf00      	nop
 800feee:	e7fd      	b.n	800feec <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d10b      	bne.n	800ff10 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800fef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fefc:	f383 8811 	msr	BASEPRI, r3
 800ff00:	f3bf 8f6f 	isb	sy
 800ff04:	f3bf 8f4f 	dsb	sy
 800ff08:	60bb      	str	r3, [r7, #8]
}
 800ff0a:	bf00      	nop
 800ff0c:	bf00      	nop
 800ff0e:	e7fd      	b.n	800ff0c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff14:	1e5a      	subs	r2, r3, #1
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d02c      	beq.n	800ff80 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ff26:	693b      	ldr	r3, [r7, #16]
 800ff28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d128      	bne.n	800ff80 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ff2e:	693b      	ldr	r3, [r7, #16]
 800ff30:	3304      	adds	r3, #4
 800ff32:	4618      	mov	r0, r3
 800ff34:	f7fe f91c 	bl	800e170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff50:	4b0f      	ldr	r3, [pc, #60]	@ (800ff90 <xTaskPriorityDisinherit+0xd8>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d903      	bls.n	800ff60 <xTaskPriorityDisinherit+0xa8>
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ff5c:	4a0c      	ldr	r2, [pc, #48]	@ (800ff90 <xTaskPriorityDisinherit+0xd8>)
 800ff5e:	6013      	str	r3, [r2, #0]
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ff64:	4613      	mov	r3, r2
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	4413      	add	r3, r2
 800ff6a:	009b      	lsls	r3, r3, #2
 800ff6c:	4a09      	ldr	r2, [pc, #36]	@ (800ff94 <xTaskPriorityDisinherit+0xdc>)
 800ff6e:	441a      	add	r2, r3
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	3304      	adds	r3, #4
 800ff74:	4619      	mov	r1, r3
 800ff76:	4610      	mov	r0, r2
 800ff78:	f7fe f89d 	bl	800e0b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ff7c:	2301      	movs	r3, #1
 800ff7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff80:	697b      	ldr	r3, [r7, #20]
	}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3718      	adds	r7, #24
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	24001354 	.word	0x24001354
 800ff90:	24001830 	.word	0x24001830
 800ff94:	24001358 	.word	0x24001358

0800ff98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b088      	sub	sp, #32
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ffa6:	2301      	movs	r3, #1
 800ffa8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d06c      	beq.n	801008a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ffb0:	69bb      	ldr	r3, [r7, #24]
 800ffb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d10b      	bne.n	800ffd0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ffb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffbc:	f383 8811 	msr	BASEPRI, r3
 800ffc0:	f3bf 8f6f 	isb	sy
 800ffc4:	f3bf 8f4f 	dsb	sy
 800ffc8:	60fb      	str	r3, [r7, #12]
}
 800ffca:	bf00      	nop
 800ffcc:	bf00      	nop
 800ffce:	e7fd      	b.n	800ffcc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ffd0:	69bb      	ldr	r3, [r7, #24]
 800ffd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d902      	bls.n	800ffe0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	61fb      	str	r3, [r7, #28]
 800ffde:	e002      	b.n	800ffe6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ffe0:	69bb      	ldr	r3, [r7, #24]
 800ffe2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffe4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ffea:	69fa      	ldr	r2, [r7, #28]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d04c      	beq.n	801008a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fff4:	697a      	ldr	r2, [r7, #20]
 800fff6:	429a      	cmp	r2, r3
 800fff8:	d147      	bne.n	801008a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fffa:	4b26      	ldr	r3, [pc, #152]	@ (8010094 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	429a      	cmp	r2, r3
 8010002:	d10b      	bne.n	801001c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8010004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010008:	f383 8811 	msr	BASEPRI, r3
 801000c:	f3bf 8f6f 	isb	sy
 8010010:	f3bf 8f4f 	dsb	sy
 8010014:	60bb      	str	r3, [r7, #8]
}
 8010016:	bf00      	nop
 8010018:	bf00      	nop
 801001a:	e7fd      	b.n	8010018 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010020:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010022:	69bb      	ldr	r3, [r7, #24]
 8010024:	69fa      	ldr	r2, [r7, #28]
 8010026:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	699b      	ldr	r3, [r3, #24]
 801002c:	2b00      	cmp	r3, #0
 801002e:	db04      	blt.n	801003a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010030:	69fb      	ldr	r3, [r7, #28]
 8010032:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010036:	69bb      	ldr	r3, [r7, #24]
 8010038:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801003a:	69bb      	ldr	r3, [r7, #24]
 801003c:	6959      	ldr	r1, [r3, #20]
 801003e:	693a      	ldr	r2, [r7, #16]
 8010040:	4613      	mov	r3, r2
 8010042:	009b      	lsls	r3, r3, #2
 8010044:	4413      	add	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4a13      	ldr	r2, [pc, #76]	@ (8010098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801004a:	4413      	add	r3, r2
 801004c:	4299      	cmp	r1, r3
 801004e:	d11c      	bne.n	801008a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010050:	69bb      	ldr	r3, [r7, #24]
 8010052:	3304      	adds	r3, #4
 8010054:	4618      	mov	r0, r3
 8010056:	f7fe f88b 	bl	800e170 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801005a:	69bb      	ldr	r3, [r7, #24]
 801005c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801005e:	4b0f      	ldr	r3, [pc, #60]	@ (801009c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	429a      	cmp	r2, r3
 8010064:	d903      	bls.n	801006e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8010066:	69bb      	ldr	r3, [r7, #24]
 8010068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801006a:	4a0c      	ldr	r2, [pc, #48]	@ (801009c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801006c:	6013      	str	r3, [r2, #0]
 801006e:	69bb      	ldr	r3, [r7, #24]
 8010070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010072:	4613      	mov	r3, r2
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4413      	add	r3, r2
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	4a07      	ldr	r2, [pc, #28]	@ (8010098 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801007c:	441a      	add	r2, r3
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	3304      	adds	r3, #4
 8010082:	4619      	mov	r1, r3
 8010084:	4610      	mov	r0, r2
 8010086:	f7fe f816 	bl	800e0b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801008a:	bf00      	nop
 801008c:	3720      	adds	r7, #32
 801008e:	46bd      	mov	sp, r7
 8010090:	bd80      	pop	{r7, pc}
 8010092:	bf00      	nop
 8010094:	24001354 	.word	0x24001354
 8010098:	24001358 	.word	0x24001358
 801009c:	24001830 	.word	0x24001830

080100a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80100a0:	b480      	push	{r7}
 80100a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80100a4:	4b07      	ldr	r3, [pc, #28]	@ (80100c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d004      	beq.n	80100b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80100ac:	4b05      	ldr	r3, [pc, #20]	@ (80100c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100b2:	3201      	adds	r2, #1
 80100b4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80100b6:	4b03      	ldr	r3, [pc, #12]	@ (80100c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80100b8:	681b      	ldr	r3, [r3, #0]
	}
 80100ba:	4618      	mov	r0, r3
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	24001354 	.word	0x24001354

080100c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b084      	sub	sp, #16
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80100d2:	4b21      	ldr	r3, [pc, #132]	@ (8010158 <prvAddCurrentTaskToDelayedList+0x90>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100d8:	4b20      	ldr	r3, [pc, #128]	@ (801015c <prvAddCurrentTaskToDelayedList+0x94>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	3304      	adds	r3, #4
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe f846 	bl	800e170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100ea:	d10a      	bne.n	8010102 <prvAddCurrentTaskToDelayedList+0x3a>
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d007      	beq.n	8010102 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80100f2:	4b1a      	ldr	r3, [pc, #104]	@ (801015c <prvAddCurrentTaskToDelayedList+0x94>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	3304      	adds	r3, #4
 80100f8:	4619      	mov	r1, r3
 80100fa:	4819      	ldr	r0, [pc, #100]	@ (8010160 <prvAddCurrentTaskToDelayedList+0x98>)
 80100fc:	f7fd ffdb 	bl	800e0b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010100:	e026      	b.n	8010150 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010102:	68fa      	ldr	r2, [r7, #12]
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4413      	add	r3, r2
 8010108:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801010a:	4b14      	ldr	r3, [pc, #80]	@ (801015c <prvAddCurrentTaskToDelayedList+0x94>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68ba      	ldr	r2, [r7, #8]
 8010110:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010112:	68ba      	ldr	r2, [r7, #8]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	429a      	cmp	r2, r3
 8010118:	d209      	bcs.n	801012e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801011a:	4b12      	ldr	r3, [pc, #72]	@ (8010164 <prvAddCurrentTaskToDelayedList+0x9c>)
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	4b0f      	ldr	r3, [pc, #60]	@ (801015c <prvAddCurrentTaskToDelayedList+0x94>)
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	3304      	adds	r3, #4
 8010124:	4619      	mov	r1, r3
 8010126:	4610      	mov	r0, r2
 8010128:	f7fd ffe9 	bl	800e0fe <vListInsert>
}
 801012c:	e010      	b.n	8010150 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801012e:	4b0e      	ldr	r3, [pc, #56]	@ (8010168 <prvAddCurrentTaskToDelayedList+0xa0>)
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	4b0a      	ldr	r3, [pc, #40]	@ (801015c <prvAddCurrentTaskToDelayedList+0x94>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	3304      	adds	r3, #4
 8010138:	4619      	mov	r1, r3
 801013a:	4610      	mov	r0, r2
 801013c:	f7fd ffdf 	bl	800e0fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010140:	4b0a      	ldr	r3, [pc, #40]	@ (801016c <prvAddCurrentTaskToDelayedList+0xa4>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	429a      	cmp	r2, r3
 8010148:	d202      	bcs.n	8010150 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801014a:	4a08      	ldr	r2, [pc, #32]	@ (801016c <prvAddCurrentTaskToDelayedList+0xa4>)
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	6013      	str	r3, [r2, #0]
}
 8010150:	bf00      	nop
 8010152:	3710      	adds	r7, #16
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}
 8010158:	2400182c 	.word	0x2400182c
 801015c:	24001354 	.word	0x24001354
 8010160:	24001814 	.word	0x24001814
 8010164:	240017e4 	.word	0x240017e4
 8010168:	240017e0 	.word	0x240017e0
 801016c:	24001848 	.word	0x24001848

08010170 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b08a      	sub	sp, #40	@ 0x28
 8010174:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010176:	2300      	movs	r3, #0
 8010178:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801017a:	f000 fb13 	bl	80107a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801017e:	4b1d      	ldr	r3, [pc, #116]	@ (80101f4 <xTimerCreateTimerTask+0x84>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d021      	beq.n	80101ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010186:	2300      	movs	r3, #0
 8010188:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801018a:	2300      	movs	r3, #0
 801018c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801018e:	1d3a      	adds	r2, r7, #4
 8010190:	f107 0108 	add.w	r1, r7, #8
 8010194:	f107 030c 	add.w	r3, r7, #12
 8010198:	4618      	mov	r0, r3
 801019a:	f7fd ff45 	bl	800e028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801019e:	6879      	ldr	r1, [r7, #4]
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	9202      	str	r2, [sp, #8]
 80101a6:	9301      	str	r3, [sp, #4]
 80101a8:	2302      	movs	r3, #2
 80101aa:	9300      	str	r3, [sp, #0]
 80101ac:	2300      	movs	r3, #0
 80101ae:	460a      	mov	r2, r1
 80101b0:	4911      	ldr	r1, [pc, #68]	@ (80101f8 <xTimerCreateTimerTask+0x88>)
 80101b2:	4812      	ldr	r0, [pc, #72]	@ (80101fc <xTimerCreateTimerTask+0x8c>)
 80101b4:	f7fe ff1c 	bl	800eff0 <xTaskCreateStatic>
 80101b8:	4603      	mov	r3, r0
 80101ba:	4a11      	ldr	r2, [pc, #68]	@ (8010200 <xTimerCreateTimerTask+0x90>)
 80101bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80101be:	4b10      	ldr	r3, [pc, #64]	@ (8010200 <xTimerCreateTimerTask+0x90>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d001      	beq.n	80101ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80101c6:	2301      	movs	r3, #1
 80101c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10b      	bne.n	80101e8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80101d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d4:	f383 8811 	msr	BASEPRI, r3
 80101d8:	f3bf 8f6f 	isb	sy
 80101dc:	f3bf 8f4f 	dsb	sy
 80101e0:	613b      	str	r3, [r7, #16]
}
 80101e2:	bf00      	nop
 80101e4:	bf00      	nop
 80101e6:	e7fd      	b.n	80101e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80101e8:	697b      	ldr	r3, [r7, #20]
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3718      	adds	r7, #24
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	24001884 	.word	0x24001884
 80101f8:	08013d7c 	.word	0x08013d7c
 80101fc:	0801033d 	.word	0x0801033d
 8010200:	24001888 	.word	0x24001888

08010204 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b08a      	sub	sp, #40	@ 0x28
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8010212:	2300      	movs	r3, #0
 8010214:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d10b      	bne.n	8010234 <xTimerGenericCommand+0x30>
	__asm volatile
 801021c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010220:	f383 8811 	msr	BASEPRI, r3
 8010224:	f3bf 8f6f 	isb	sy
 8010228:	f3bf 8f4f 	dsb	sy
 801022c:	623b      	str	r3, [r7, #32]
}
 801022e:	bf00      	nop
 8010230:	bf00      	nop
 8010232:	e7fd      	b.n	8010230 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8010234:	4b19      	ldr	r3, [pc, #100]	@ (801029c <xTimerGenericCommand+0x98>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d02a      	beq.n	8010292 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8010248:	68bb      	ldr	r3, [r7, #8]
 801024a:	2b05      	cmp	r3, #5
 801024c:	dc18      	bgt.n	8010280 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801024e:	f7ff fdad 	bl	800fdac <xTaskGetSchedulerState>
 8010252:	4603      	mov	r3, r0
 8010254:	2b02      	cmp	r3, #2
 8010256:	d109      	bne.n	801026c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8010258:	4b10      	ldr	r3, [pc, #64]	@ (801029c <xTimerGenericCommand+0x98>)
 801025a:	6818      	ldr	r0, [r3, #0]
 801025c:	f107 0110 	add.w	r1, r7, #16
 8010260:	2300      	movs	r3, #0
 8010262:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010264:	f7fe f9ac 	bl	800e5c0 <xQueueGenericSend>
 8010268:	6278      	str	r0, [r7, #36]	@ 0x24
 801026a:	e012      	b.n	8010292 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801026c:	4b0b      	ldr	r3, [pc, #44]	@ (801029c <xTimerGenericCommand+0x98>)
 801026e:	6818      	ldr	r0, [r3, #0]
 8010270:	f107 0110 	add.w	r1, r7, #16
 8010274:	2300      	movs	r3, #0
 8010276:	2200      	movs	r2, #0
 8010278:	f7fe f9a2 	bl	800e5c0 <xQueueGenericSend>
 801027c:	6278      	str	r0, [r7, #36]	@ 0x24
 801027e:	e008      	b.n	8010292 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010280:	4b06      	ldr	r3, [pc, #24]	@ (801029c <xTimerGenericCommand+0x98>)
 8010282:	6818      	ldr	r0, [r3, #0]
 8010284:	f107 0110 	add.w	r1, r7, #16
 8010288:	2300      	movs	r3, #0
 801028a:	683a      	ldr	r2, [r7, #0]
 801028c:	f7fe fa9a 	bl	800e7c4 <xQueueGenericSendFromISR>
 8010290:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010294:	4618      	mov	r0, r3
 8010296:	3728      	adds	r7, #40	@ 0x28
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	24001884 	.word	0x24001884

080102a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b088      	sub	sp, #32
 80102a4:	af02      	add	r7, sp, #8
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102aa:	4b23      	ldr	r3, [pc, #140]	@ (8010338 <prvProcessExpiredTimer+0x98>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	3304      	adds	r3, #4
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7fd ff59 	bl	800e170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102be:	697b      	ldr	r3, [r7, #20]
 80102c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102c4:	f003 0304 	and.w	r3, r3, #4
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d023      	beq.n	8010314 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	699a      	ldr	r2, [r3, #24]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	18d1      	adds	r1, r2, r3
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	6978      	ldr	r0, [r7, #20]
 80102da:	f000 f8d5 	bl	8010488 <prvInsertTimerInActiveList>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d020      	beq.n	8010326 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80102e4:	2300      	movs	r3, #0
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	2300      	movs	r3, #0
 80102ea:	687a      	ldr	r2, [r7, #4]
 80102ec:	2100      	movs	r1, #0
 80102ee:	6978      	ldr	r0, [r7, #20]
 80102f0:	f7ff ff88 	bl	8010204 <xTimerGenericCommand>
 80102f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d114      	bne.n	8010326 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80102fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010300:	f383 8811 	msr	BASEPRI, r3
 8010304:	f3bf 8f6f 	isb	sy
 8010308:	f3bf 8f4f 	dsb	sy
 801030c:	60fb      	str	r3, [r7, #12]
}
 801030e:	bf00      	nop
 8010310:	bf00      	nop
 8010312:	e7fd      	b.n	8010310 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801031a:	f023 0301 	bic.w	r3, r3, #1
 801031e:	b2da      	uxtb	r2, r3
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	6a1b      	ldr	r3, [r3, #32]
 801032a:	6978      	ldr	r0, [r7, #20]
 801032c:	4798      	blx	r3
}
 801032e:	bf00      	nop
 8010330:	3718      	adds	r7, #24
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	2400187c 	.word	0x2400187c

0801033c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b084      	sub	sp, #16
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010344:	f107 0308 	add.w	r3, r7, #8
 8010348:	4618      	mov	r0, r3
 801034a:	f000 f859 	bl	8010400 <prvGetNextExpireTime>
 801034e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	4619      	mov	r1, r3
 8010354:	68f8      	ldr	r0, [r7, #12]
 8010356:	f000 f805 	bl	8010364 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801035a:	f000 f8d7 	bl	801050c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801035e:	bf00      	nop
 8010360:	e7f0      	b.n	8010344 <prvTimerTask+0x8>
	...

08010364 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b084      	sub	sp, #16
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801036e:	f7ff f919 	bl	800f5a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010372:	f107 0308 	add.w	r3, r7, #8
 8010376:	4618      	mov	r0, r3
 8010378:	f000 f866 	bl	8010448 <prvSampleTimeNow>
 801037c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d130      	bne.n	80103e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10a      	bne.n	80103a0 <prvProcessTimerOrBlockTask+0x3c>
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	429a      	cmp	r2, r3
 8010390:	d806      	bhi.n	80103a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010392:	f7ff f915 	bl	800f5c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010396:	68f9      	ldr	r1, [r7, #12]
 8010398:	6878      	ldr	r0, [r7, #4]
 801039a:	f7ff ff81 	bl	80102a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801039e:	e024      	b.n	80103ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d008      	beq.n	80103b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80103a6:	4b13      	ldr	r3, [pc, #76]	@ (80103f4 <prvProcessTimerOrBlockTask+0x90>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d101      	bne.n	80103b4 <prvProcessTimerOrBlockTask+0x50>
 80103b0:	2301      	movs	r3, #1
 80103b2:	e000      	b.n	80103b6 <prvProcessTimerOrBlockTask+0x52>
 80103b4:	2300      	movs	r3, #0
 80103b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80103b8:	4b0f      	ldr	r3, [pc, #60]	@ (80103f8 <prvProcessTimerOrBlockTask+0x94>)
 80103ba:	6818      	ldr	r0, [r3, #0]
 80103bc:	687a      	ldr	r2, [r7, #4]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	4619      	mov	r1, r3
 80103c6:	f7fe fddf 	bl	800ef88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80103ca:	f7ff f8f9 	bl	800f5c0 <xTaskResumeAll>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d10a      	bne.n	80103ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80103d4:	4b09      	ldr	r3, [pc, #36]	@ (80103fc <prvProcessTimerOrBlockTask+0x98>)
 80103d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103da:	601a      	str	r2, [r3, #0]
 80103dc:	f3bf 8f4f 	dsb	sy
 80103e0:	f3bf 8f6f 	isb	sy
}
 80103e4:	e001      	b.n	80103ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80103e6:	f7ff f8eb 	bl	800f5c0 <xTaskResumeAll>
}
 80103ea:	bf00      	nop
 80103ec:	3710      	adds	r7, #16
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	24001880 	.word	0x24001880
 80103f8:	24001884 	.word	0x24001884
 80103fc:	e000ed04 	.word	0xe000ed04

08010400 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010400:	b480      	push	{r7}
 8010402:	b085      	sub	sp, #20
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010408:	4b0e      	ldr	r3, [pc, #56]	@ (8010444 <prvGetNextExpireTime+0x44>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <prvGetNextExpireTime+0x16>
 8010412:	2201      	movs	r2, #1
 8010414:	e000      	b.n	8010418 <prvGetNextExpireTime+0x18>
 8010416:	2200      	movs	r2, #0
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d105      	bne.n	8010430 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010424:	4b07      	ldr	r3, [pc, #28]	@ (8010444 <prvGetNextExpireTime+0x44>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	68db      	ldr	r3, [r3, #12]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	60fb      	str	r3, [r7, #12]
 801042e:	e001      	b.n	8010434 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010430:	2300      	movs	r3, #0
 8010432:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010434:	68fb      	ldr	r3, [r7, #12]
}
 8010436:	4618      	mov	r0, r3
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010440:	4770      	bx	lr
 8010442:	bf00      	nop
 8010444:	2400187c 	.word	0x2400187c

08010448 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b084      	sub	sp, #16
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010450:	f7ff f954 	bl	800f6fc <xTaskGetTickCount>
 8010454:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010456:	4b0b      	ldr	r3, [pc, #44]	@ (8010484 <prvSampleTimeNow+0x3c>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	68fa      	ldr	r2, [r7, #12]
 801045c:	429a      	cmp	r2, r3
 801045e:	d205      	bcs.n	801046c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010460:	f000 f93a 	bl	80106d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	601a      	str	r2, [r3, #0]
 801046a:	e002      	b.n	8010472 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010472:	4a04      	ldr	r2, [pc, #16]	@ (8010484 <prvSampleTimeNow+0x3c>)
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010478:	68fb      	ldr	r3, [r7, #12]
}
 801047a:	4618      	mov	r0, r3
 801047c:	3710      	adds	r7, #16
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
 8010482:	bf00      	nop
 8010484:	2400188c 	.word	0x2400188c

08010488 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b086      	sub	sp, #24
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	607a      	str	r2, [r7, #4]
 8010494:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010496:	2300      	movs	r3, #0
 8010498:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	68fa      	ldr	r2, [r7, #12]
 80104a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80104a6:	68ba      	ldr	r2, [r7, #8]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d812      	bhi.n	80104d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80104ae:	687a      	ldr	r2, [r7, #4]
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	1ad2      	subs	r2, r2, r3
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	699b      	ldr	r3, [r3, #24]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d302      	bcc.n	80104c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80104bc:	2301      	movs	r3, #1
 80104be:	617b      	str	r3, [r7, #20]
 80104c0:	e01b      	b.n	80104fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104c2:	4b10      	ldr	r3, [pc, #64]	@ (8010504 <prvInsertTimerInActiveList+0x7c>)
 80104c4:	681a      	ldr	r2, [r3, #0]
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	3304      	adds	r3, #4
 80104ca:	4619      	mov	r1, r3
 80104cc:	4610      	mov	r0, r2
 80104ce:	f7fd fe16 	bl	800e0fe <vListInsert>
 80104d2:	e012      	b.n	80104fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	683b      	ldr	r3, [r7, #0]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d206      	bcs.n	80104ea <prvInsertTimerInActiveList+0x62>
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d302      	bcc.n	80104ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80104e4:	2301      	movs	r3, #1
 80104e6:	617b      	str	r3, [r7, #20]
 80104e8:	e007      	b.n	80104fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104ea:	4b07      	ldr	r3, [pc, #28]	@ (8010508 <prvInsertTimerInActiveList+0x80>)
 80104ec:	681a      	ldr	r2, [r3, #0]
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	3304      	adds	r3, #4
 80104f2:	4619      	mov	r1, r3
 80104f4:	4610      	mov	r0, r2
 80104f6:	f7fd fe02 	bl	800e0fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 80104fa:	697b      	ldr	r3, [r7, #20]
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3718      	adds	r7, #24
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}
 8010504:	24001880 	.word	0x24001880
 8010508:	2400187c 	.word	0x2400187c

0801050c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b08e      	sub	sp, #56	@ 0x38
 8010510:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010512:	e0ce      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	da19      	bge.n	801054e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801051a:	1d3b      	adds	r3, r7, #4
 801051c:	3304      	adds	r3, #4
 801051e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010522:	2b00      	cmp	r3, #0
 8010524:	d10b      	bne.n	801053e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8010526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801052a:	f383 8811 	msr	BASEPRI, r3
 801052e:	f3bf 8f6f 	isb	sy
 8010532:	f3bf 8f4f 	dsb	sy
 8010536:	61fb      	str	r3, [r7, #28]
}
 8010538:	bf00      	nop
 801053a:	bf00      	nop
 801053c:	e7fd      	b.n	801053a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801053e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010544:	6850      	ldr	r0, [r2, #4]
 8010546:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010548:	6892      	ldr	r2, [r2, #8]
 801054a:	4611      	mov	r1, r2
 801054c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2b00      	cmp	r3, #0
 8010552:	f2c0 80ae 	blt.w	80106b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801055c:	695b      	ldr	r3, [r3, #20]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d004      	beq.n	801056c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010564:	3304      	adds	r3, #4
 8010566:	4618      	mov	r0, r3
 8010568:	f7fd fe02 	bl	800e170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801056c:	463b      	mov	r3, r7
 801056e:	4618      	mov	r0, r3
 8010570:	f7ff ff6a 	bl	8010448 <prvSampleTimeNow>
 8010574:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2b09      	cmp	r3, #9
 801057a:	f200 8097 	bhi.w	80106ac <prvProcessReceivedCommands+0x1a0>
 801057e:	a201      	add	r2, pc, #4	@ (adr r2, 8010584 <prvProcessReceivedCommands+0x78>)
 8010580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010584:	080105ad 	.word	0x080105ad
 8010588:	080105ad 	.word	0x080105ad
 801058c:	080105ad 	.word	0x080105ad
 8010590:	08010623 	.word	0x08010623
 8010594:	08010637 	.word	0x08010637
 8010598:	08010683 	.word	0x08010683
 801059c:	080105ad 	.word	0x080105ad
 80105a0:	080105ad 	.word	0x080105ad
 80105a4:	08010623 	.word	0x08010623
 80105a8:	08010637 	.word	0x08010637
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80105ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105b2:	f043 0301 	orr.w	r3, r3, #1
 80105b6:	b2da      	uxtb	r2, r3
 80105b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80105be:	68ba      	ldr	r2, [r7, #8]
 80105c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105c2:	699b      	ldr	r3, [r3, #24]
 80105c4:	18d1      	adds	r1, r2, r3
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105cc:	f7ff ff5c 	bl	8010488 <prvInsertTimerInActiveList>
 80105d0:	4603      	mov	r3, r0
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d06c      	beq.n	80106b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105d8:	6a1b      	ldr	r3, [r3, #32]
 80105da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80105de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105e4:	f003 0304 	and.w	r3, r3, #4
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d061      	beq.n	80106b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105f0:	699b      	ldr	r3, [r3, #24]
 80105f2:	441a      	add	r2, r3
 80105f4:	2300      	movs	r3, #0
 80105f6:	9300      	str	r3, [sp, #0]
 80105f8:	2300      	movs	r3, #0
 80105fa:	2100      	movs	r1, #0
 80105fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105fe:	f7ff fe01 	bl	8010204 <xTimerGenericCommand>
 8010602:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010604:	6a3b      	ldr	r3, [r7, #32]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d152      	bne.n	80106b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801060a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801060e:	f383 8811 	msr	BASEPRI, r3
 8010612:	f3bf 8f6f 	isb	sy
 8010616:	f3bf 8f4f 	dsb	sy
 801061a:	61bb      	str	r3, [r7, #24]
}
 801061c:	bf00      	nop
 801061e:	bf00      	nop
 8010620:	e7fd      	b.n	801061e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010628:	f023 0301 	bic.w	r3, r3, #1
 801062c:	b2da      	uxtb	r2, r3
 801062e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010634:	e03d      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010638:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801063c:	f043 0301 	orr.w	r3, r3, #1
 8010640:	b2da      	uxtb	r2, r3
 8010642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010644:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010648:	68ba      	ldr	r2, [r7, #8]
 801064a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801064c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801064e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d10b      	bne.n	801066e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8010656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801065a:	f383 8811 	msr	BASEPRI, r3
 801065e:	f3bf 8f6f 	isb	sy
 8010662:	f3bf 8f4f 	dsb	sy
 8010666:	617b      	str	r3, [r7, #20]
}
 8010668:	bf00      	nop
 801066a:	bf00      	nop
 801066c:	e7fd      	b.n	801066a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801066e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010670:	699a      	ldr	r2, [r3, #24]
 8010672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010674:	18d1      	adds	r1, r2, r3
 8010676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801067a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801067c:	f7ff ff04 	bl	8010488 <prvInsertTimerInActiveList>
					break;
 8010680:	e017      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010684:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010688:	f003 0302 	and.w	r3, r3, #2
 801068c:	2b00      	cmp	r3, #0
 801068e:	d103      	bne.n	8010698 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8010690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010692:	f000 fbe9 	bl	8010e68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010696:	e00c      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801069e:	f023 0301 	bic.w	r3, r3, #1
 80106a2:	b2da      	uxtb	r2, r3
 80106a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80106aa:	e002      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80106ac:	bf00      	nop
 80106ae:	e000      	b.n	80106b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80106b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106b2:	4b08      	ldr	r3, [pc, #32]	@ (80106d4 <prvProcessReceivedCommands+0x1c8>)
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	1d39      	adds	r1, r7, #4
 80106b8:	2200      	movs	r2, #0
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fe f920 	bl	800e900 <xQueueReceive>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f47f af26 	bne.w	8010514 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80106c8:	bf00      	nop
 80106ca:	bf00      	nop
 80106cc:	3730      	adds	r7, #48	@ 0x30
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	24001884 	.word	0x24001884

080106d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b088      	sub	sp, #32
 80106dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80106de:	e049      	b.n	8010774 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106e0:	4b2e      	ldr	r3, [pc, #184]	@ (801079c <prvSwitchTimerLists+0xc4>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	68db      	ldr	r3, [r3, #12]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80106ea:	4b2c      	ldr	r3, [pc, #176]	@ (801079c <prvSwitchTimerLists+0xc4>)
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	68db      	ldr	r3, [r3, #12]
 80106f0:	68db      	ldr	r3, [r3, #12]
 80106f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fd fd39 	bl	800e170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	6a1b      	ldr	r3, [r3, #32]
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801070c:	f003 0304 	and.w	r3, r3, #4
 8010710:	2b00      	cmp	r3, #0
 8010712:	d02f      	beq.n	8010774 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	699b      	ldr	r3, [r3, #24]
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	4413      	add	r3, r2
 801071c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	429a      	cmp	r2, r3
 8010724:	d90e      	bls.n	8010744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	68ba      	ldr	r2, [r7, #8]
 801072a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	68fa      	ldr	r2, [r7, #12]
 8010730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010732:	4b1a      	ldr	r3, [pc, #104]	@ (801079c <prvSwitchTimerLists+0xc4>)
 8010734:	681a      	ldr	r2, [r3, #0]
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	3304      	adds	r3, #4
 801073a:	4619      	mov	r1, r3
 801073c:	4610      	mov	r0, r2
 801073e:	f7fd fcde 	bl	800e0fe <vListInsert>
 8010742:	e017      	b.n	8010774 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010744:	2300      	movs	r3, #0
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	2300      	movs	r3, #0
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	2100      	movs	r1, #0
 801074e:	68f8      	ldr	r0, [r7, #12]
 8010750:	f7ff fd58 	bl	8010204 <xTimerGenericCommand>
 8010754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	2b00      	cmp	r3, #0
 801075a:	d10b      	bne.n	8010774 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801075c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010760:	f383 8811 	msr	BASEPRI, r3
 8010764:	f3bf 8f6f 	isb	sy
 8010768:	f3bf 8f4f 	dsb	sy
 801076c:	603b      	str	r3, [r7, #0]
}
 801076e:	bf00      	nop
 8010770:	bf00      	nop
 8010772:	e7fd      	b.n	8010770 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010774:	4b09      	ldr	r3, [pc, #36]	@ (801079c <prvSwitchTimerLists+0xc4>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1b0      	bne.n	80106e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801077e:	4b07      	ldr	r3, [pc, #28]	@ (801079c <prvSwitchTimerLists+0xc4>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010784:	4b06      	ldr	r3, [pc, #24]	@ (80107a0 <prvSwitchTimerLists+0xc8>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4a04      	ldr	r2, [pc, #16]	@ (801079c <prvSwitchTimerLists+0xc4>)
 801078a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801078c:	4a04      	ldr	r2, [pc, #16]	@ (80107a0 <prvSwitchTimerLists+0xc8>)
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	6013      	str	r3, [r2, #0]
}
 8010792:	bf00      	nop
 8010794:	3718      	adds	r7, #24
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	2400187c 	.word	0x2400187c
 80107a0:	24001880 	.word	0x24001880

080107a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80107aa:	f000 f96d 	bl	8010a88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80107ae:	4b15      	ldr	r3, [pc, #84]	@ (8010804 <prvCheckForValidListAndQueue+0x60>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d120      	bne.n	80107f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80107b6:	4814      	ldr	r0, [pc, #80]	@ (8010808 <prvCheckForValidListAndQueue+0x64>)
 80107b8:	f7fd fc50 	bl	800e05c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80107bc:	4813      	ldr	r0, [pc, #76]	@ (801080c <prvCheckForValidListAndQueue+0x68>)
 80107be:	f7fd fc4d 	bl	800e05c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80107c2:	4b13      	ldr	r3, [pc, #76]	@ (8010810 <prvCheckForValidListAndQueue+0x6c>)
 80107c4:	4a10      	ldr	r2, [pc, #64]	@ (8010808 <prvCheckForValidListAndQueue+0x64>)
 80107c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80107c8:	4b12      	ldr	r3, [pc, #72]	@ (8010814 <prvCheckForValidListAndQueue+0x70>)
 80107ca:	4a10      	ldr	r2, [pc, #64]	@ (801080c <prvCheckForValidListAndQueue+0x68>)
 80107cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80107ce:	2300      	movs	r3, #0
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	4b11      	ldr	r3, [pc, #68]	@ (8010818 <prvCheckForValidListAndQueue+0x74>)
 80107d4:	4a11      	ldr	r2, [pc, #68]	@ (801081c <prvCheckForValidListAndQueue+0x78>)
 80107d6:	2110      	movs	r1, #16
 80107d8:	200a      	movs	r0, #10
 80107da:	f7fd fd5d 	bl	800e298 <xQueueGenericCreateStatic>
 80107de:	4603      	mov	r3, r0
 80107e0:	4a08      	ldr	r2, [pc, #32]	@ (8010804 <prvCheckForValidListAndQueue+0x60>)
 80107e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80107e4:	4b07      	ldr	r3, [pc, #28]	@ (8010804 <prvCheckForValidListAndQueue+0x60>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d005      	beq.n	80107f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80107ec:	4b05      	ldr	r3, [pc, #20]	@ (8010804 <prvCheckForValidListAndQueue+0x60>)
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	490b      	ldr	r1, [pc, #44]	@ (8010820 <prvCheckForValidListAndQueue+0x7c>)
 80107f2:	4618      	mov	r0, r3
 80107f4:	f7fe fb9e 	bl	800ef34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80107f8:	f000 f978 	bl	8010aec <vPortExitCritical>
}
 80107fc:	bf00      	nop
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}
 8010802:	bf00      	nop
 8010804:	24001884 	.word	0x24001884
 8010808:	24001854 	.word	0x24001854
 801080c:	24001868 	.word	0x24001868
 8010810:	2400187c 	.word	0x2400187c
 8010814:	24001880 	.word	0x24001880
 8010818:	24001930 	.word	0x24001930
 801081c:	24001890 	.word	0x24001890
 8010820:	08013d84 	.word	0x08013d84

08010824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010824:	b480      	push	{r7}
 8010826:	b085      	sub	sp, #20
 8010828:	af00      	add	r7, sp, #0
 801082a:	60f8      	str	r0, [r7, #12]
 801082c:	60b9      	str	r1, [r7, #8]
 801082e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	3b04      	subs	r3, #4
 8010834:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801083c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	3b04      	subs	r3, #4
 8010842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	f023 0201 	bic.w	r2, r3, #1
 801084a:	68fb      	ldr	r3, [r7, #12]
 801084c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3b04      	subs	r3, #4
 8010852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010854:	4a0c      	ldr	r2, [pc, #48]	@ (8010888 <pxPortInitialiseStack+0x64>)
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3b14      	subs	r3, #20
 801085e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010860:	687a      	ldr	r2, [r7, #4]
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	3b04      	subs	r3, #4
 801086a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f06f 0202 	mvn.w	r2, #2
 8010872:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	3b20      	subs	r3, #32
 8010878:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801087a:	68fb      	ldr	r3, [r7, #12]
}
 801087c:	4618      	mov	r0, r3
 801087e:	3714      	adds	r7, #20
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	0801088d 	.word	0x0801088d

0801088c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801088c:	b480      	push	{r7}
 801088e:	b085      	sub	sp, #20
 8010890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010892:	2300      	movs	r3, #0
 8010894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010896:	4b13      	ldr	r3, [pc, #76]	@ (80108e4 <prvTaskExitError+0x58>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801089e:	d00b      	beq.n	80108b8 <prvTaskExitError+0x2c>
	__asm volatile
 80108a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	60fb      	str	r3, [r7, #12]
}
 80108b2:	bf00      	nop
 80108b4:	bf00      	nop
 80108b6:	e7fd      	b.n	80108b4 <prvTaskExitError+0x28>
	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	60bb      	str	r3, [r7, #8]
}
 80108ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80108cc:	bf00      	nop
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0fc      	beq.n	80108ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80108d4:	bf00      	nop
 80108d6:	bf00      	nop
 80108d8:	3714      	adds	r7, #20
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	24000014 	.word	0x24000014
	...

080108f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80108f0:	4b07      	ldr	r3, [pc, #28]	@ (8010910 <pxCurrentTCBConst2>)
 80108f2:	6819      	ldr	r1, [r3, #0]
 80108f4:	6808      	ldr	r0, [r1, #0]
 80108f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108fa:	f380 8809 	msr	PSP, r0
 80108fe:	f3bf 8f6f 	isb	sy
 8010902:	f04f 0000 	mov.w	r0, #0
 8010906:	f380 8811 	msr	BASEPRI, r0
 801090a:	4770      	bx	lr
 801090c:	f3af 8000 	nop.w

08010910 <pxCurrentTCBConst2>:
 8010910:	24001354 	.word	0x24001354
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010914:	bf00      	nop
 8010916:	bf00      	nop

08010918 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010918:	4808      	ldr	r0, [pc, #32]	@ (801093c <prvPortStartFirstTask+0x24>)
 801091a:	6800      	ldr	r0, [r0, #0]
 801091c:	6800      	ldr	r0, [r0, #0]
 801091e:	f380 8808 	msr	MSP, r0
 8010922:	f04f 0000 	mov.w	r0, #0
 8010926:	f380 8814 	msr	CONTROL, r0
 801092a:	b662      	cpsie	i
 801092c:	b661      	cpsie	f
 801092e:	f3bf 8f4f 	dsb	sy
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	df00      	svc	0
 8010938:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801093a:	bf00      	nop
 801093c:	e000ed08 	.word	0xe000ed08

08010940 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b086      	sub	sp, #24
 8010944:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010946:	4b47      	ldr	r3, [pc, #284]	@ (8010a64 <xPortStartScheduler+0x124>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	4a47      	ldr	r2, [pc, #284]	@ (8010a68 <xPortStartScheduler+0x128>)
 801094c:	4293      	cmp	r3, r2
 801094e:	d10b      	bne.n	8010968 <xPortStartScheduler+0x28>
	__asm volatile
 8010950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010954:	f383 8811 	msr	BASEPRI, r3
 8010958:	f3bf 8f6f 	isb	sy
 801095c:	f3bf 8f4f 	dsb	sy
 8010960:	613b      	str	r3, [r7, #16]
}
 8010962:	bf00      	nop
 8010964:	bf00      	nop
 8010966:	e7fd      	b.n	8010964 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010968:	4b3e      	ldr	r3, [pc, #248]	@ (8010a64 <xPortStartScheduler+0x124>)
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	4a3f      	ldr	r2, [pc, #252]	@ (8010a6c <xPortStartScheduler+0x12c>)
 801096e:	4293      	cmp	r3, r2
 8010970:	d10b      	bne.n	801098a <xPortStartScheduler+0x4a>
	__asm volatile
 8010972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010976:	f383 8811 	msr	BASEPRI, r3
 801097a:	f3bf 8f6f 	isb	sy
 801097e:	f3bf 8f4f 	dsb	sy
 8010982:	60fb      	str	r3, [r7, #12]
}
 8010984:	bf00      	nop
 8010986:	bf00      	nop
 8010988:	e7fd      	b.n	8010986 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801098a:	4b39      	ldr	r3, [pc, #228]	@ (8010a70 <xPortStartScheduler+0x130>)
 801098c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801098e:	697b      	ldr	r3, [r7, #20]
 8010990:	781b      	ldrb	r3, [r3, #0]
 8010992:	b2db      	uxtb	r3, r3
 8010994:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	22ff      	movs	r2, #255	@ 0xff
 801099a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	781b      	ldrb	r3, [r3, #0]
 80109a0:	b2db      	uxtb	r3, r3
 80109a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80109a4:	78fb      	ldrb	r3, [r7, #3]
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80109ac:	b2da      	uxtb	r2, r3
 80109ae:	4b31      	ldr	r3, [pc, #196]	@ (8010a74 <xPortStartScheduler+0x134>)
 80109b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80109b2:	4b31      	ldr	r3, [pc, #196]	@ (8010a78 <xPortStartScheduler+0x138>)
 80109b4:	2207      	movs	r2, #7
 80109b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109b8:	e009      	b.n	80109ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80109ba:	4b2f      	ldr	r3, [pc, #188]	@ (8010a78 <xPortStartScheduler+0x138>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	3b01      	subs	r3, #1
 80109c0:	4a2d      	ldr	r2, [pc, #180]	@ (8010a78 <xPortStartScheduler+0x138>)
 80109c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80109c4:	78fb      	ldrb	r3, [r7, #3]
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80109ce:	78fb      	ldrb	r3, [r7, #3]
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80109d6:	2b80      	cmp	r3, #128	@ 0x80
 80109d8:	d0ef      	beq.n	80109ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80109da:	4b27      	ldr	r3, [pc, #156]	@ (8010a78 <xPortStartScheduler+0x138>)
 80109dc:	681b      	ldr	r3, [r3, #0]
 80109de:	f1c3 0307 	rsb	r3, r3, #7
 80109e2:	2b04      	cmp	r3, #4
 80109e4:	d00b      	beq.n	80109fe <xPortStartScheduler+0xbe>
	__asm volatile
 80109e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109ea:	f383 8811 	msr	BASEPRI, r3
 80109ee:	f3bf 8f6f 	isb	sy
 80109f2:	f3bf 8f4f 	dsb	sy
 80109f6:	60bb      	str	r3, [r7, #8]
}
 80109f8:	bf00      	nop
 80109fa:	bf00      	nop
 80109fc:	e7fd      	b.n	80109fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80109fe:	4b1e      	ldr	r3, [pc, #120]	@ (8010a78 <xPortStartScheduler+0x138>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	021b      	lsls	r3, r3, #8
 8010a04:	4a1c      	ldr	r2, [pc, #112]	@ (8010a78 <xPortStartScheduler+0x138>)
 8010a06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a08:	4b1b      	ldr	r3, [pc, #108]	@ (8010a78 <xPortStartScheduler+0x138>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010a10:	4a19      	ldr	r2, [pc, #100]	@ (8010a78 <xPortStartScheduler+0x138>)
 8010a12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	b2da      	uxtb	r2, r3
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a1c:	4b17      	ldr	r3, [pc, #92]	@ (8010a7c <xPortStartScheduler+0x13c>)
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	4a16      	ldr	r2, [pc, #88]	@ (8010a7c <xPortStartScheduler+0x13c>)
 8010a22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010a26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a28:	4b14      	ldr	r3, [pc, #80]	@ (8010a7c <xPortStartScheduler+0x13c>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	4a13      	ldr	r2, [pc, #76]	@ (8010a7c <xPortStartScheduler+0x13c>)
 8010a2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010a32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a34:	f000 f8da 	bl	8010bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a38:	4b11      	ldr	r3, [pc, #68]	@ (8010a80 <xPortStartScheduler+0x140>)
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a3e:	f000 f8f9 	bl	8010c34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010a42:	4b10      	ldr	r3, [pc, #64]	@ (8010a84 <xPortStartScheduler+0x144>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	4a0f      	ldr	r2, [pc, #60]	@ (8010a84 <xPortStartScheduler+0x144>)
 8010a48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010a4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010a4e:	f7ff ff63 	bl	8010918 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010a52:	f7fe ff1d 	bl	800f890 <vTaskSwitchContext>
	prvTaskExitError();
 8010a56:	f7ff ff19 	bl	801088c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3718      	adds	r7, #24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}
 8010a64:	e000ed00 	.word	0xe000ed00
 8010a68:	410fc271 	.word	0x410fc271
 8010a6c:	410fc270 	.word	0x410fc270
 8010a70:	e000e400 	.word	0xe000e400
 8010a74:	24001980 	.word	0x24001980
 8010a78:	24001984 	.word	0x24001984
 8010a7c:	e000ed20 	.word	0xe000ed20
 8010a80:	24000014 	.word	0x24000014
 8010a84:	e000ef34 	.word	0xe000ef34

08010a88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a92:	f383 8811 	msr	BASEPRI, r3
 8010a96:	f3bf 8f6f 	isb	sy
 8010a9a:	f3bf 8f4f 	dsb	sy
 8010a9e:	607b      	str	r3, [r7, #4]
}
 8010aa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010aa2:	4b10      	ldr	r3, [pc, #64]	@ (8010ae4 <vPortEnterCritical+0x5c>)
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8010ae4 <vPortEnterCritical+0x5c>)
 8010aaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010aac:	4b0d      	ldr	r3, [pc, #52]	@ (8010ae4 <vPortEnterCritical+0x5c>)
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2b01      	cmp	r3, #1
 8010ab2:	d110      	bne.n	8010ad6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8010ae8 <vPortEnterCritical+0x60>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00b      	beq.n	8010ad6 <vPortEnterCritical+0x4e>
	__asm volatile
 8010abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ac2:	f383 8811 	msr	BASEPRI, r3
 8010ac6:	f3bf 8f6f 	isb	sy
 8010aca:	f3bf 8f4f 	dsb	sy
 8010ace:	603b      	str	r3, [r7, #0]
}
 8010ad0:	bf00      	nop
 8010ad2:	bf00      	nop
 8010ad4:	e7fd      	b.n	8010ad2 <vPortEnterCritical+0x4a>
	}
}
 8010ad6:	bf00      	nop
 8010ad8:	370c      	adds	r7, #12
 8010ada:	46bd      	mov	sp, r7
 8010adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae0:	4770      	bx	lr
 8010ae2:	bf00      	nop
 8010ae4:	24000014 	.word	0x24000014
 8010ae8:	e000ed04 	.word	0xe000ed04

08010aec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010aec:	b480      	push	{r7}
 8010aee:	b083      	sub	sp, #12
 8010af0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010af2:	4b12      	ldr	r3, [pc, #72]	@ (8010b3c <vPortExitCritical+0x50>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10b      	bne.n	8010b12 <vPortExitCritical+0x26>
	__asm volatile
 8010afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010afe:	f383 8811 	msr	BASEPRI, r3
 8010b02:	f3bf 8f6f 	isb	sy
 8010b06:	f3bf 8f4f 	dsb	sy
 8010b0a:	607b      	str	r3, [r7, #4]
}
 8010b0c:	bf00      	nop
 8010b0e:	bf00      	nop
 8010b10:	e7fd      	b.n	8010b0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8010b12:	4b0a      	ldr	r3, [pc, #40]	@ (8010b3c <vPortExitCritical+0x50>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	3b01      	subs	r3, #1
 8010b18:	4a08      	ldr	r2, [pc, #32]	@ (8010b3c <vPortExitCritical+0x50>)
 8010b1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b1c:	4b07      	ldr	r3, [pc, #28]	@ (8010b3c <vPortExitCritical+0x50>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d105      	bne.n	8010b30 <vPortExitCritical+0x44>
 8010b24:	2300      	movs	r3, #0
 8010b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	f383 8811 	msr	BASEPRI, r3
}
 8010b2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	24000014 	.word	0x24000014

08010b40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010b40:	f3ef 8009 	mrs	r0, PSP
 8010b44:	f3bf 8f6f 	isb	sy
 8010b48:	4b15      	ldr	r3, [pc, #84]	@ (8010ba0 <pxCurrentTCBConst>)
 8010b4a:	681a      	ldr	r2, [r3, #0]
 8010b4c:	f01e 0f10 	tst.w	lr, #16
 8010b50:	bf08      	it	eq
 8010b52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010b56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b5a:	6010      	str	r0, [r2, #0]
 8010b5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010b60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010b64:	f380 8811 	msr	BASEPRI, r0
 8010b68:	f3bf 8f4f 	dsb	sy
 8010b6c:	f3bf 8f6f 	isb	sy
 8010b70:	f7fe fe8e 	bl	800f890 <vTaskSwitchContext>
 8010b74:	f04f 0000 	mov.w	r0, #0
 8010b78:	f380 8811 	msr	BASEPRI, r0
 8010b7c:	bc09      	pop	{r0, r3}
 8010b7e:	6819      	ldr	r1, [r3, #0]
 8010b80:	6808      	ldr	r0, [r1, #0]
 8010b82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b86:	f01e 0f10 	tst.w	lr, #16
 8010b8a:	bf08      	it	eq
 8010b8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010b90:	f380 8809 	msr	PSP, r0
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	4770      	bx	lr
 8010b9a:	bf00      	nop
 8010b9c:	f3af 8000 	nop.w

08010ba0 <pxCurrentTCBConst>:
 8010ba0:	24001354 	.word	0x24001354
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop

08010ba8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
	__asm volatile
 8010bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bb2:	f383 8811 	msr	BASEPRI, r3
 8010bb6:	f3bf 8f6f 	isb	sy
 8010bba:	f3bf 8f4f 	dsb	sy
 8010bbe:	607b      	str	r3, [r7, #4]
}
 8010bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010bc2:	f7fe fdab 	bl	800f71c <xTaskIncrementTick>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d003      	beq.n	8010bd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010bcc:	4b06      	ldr	r3, [pc, #24]	@ (8010be8 <xPortSysTickHandler+0x40>)
 8010bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	f383 8811 	msr	BASEPRI, r3
}
 8010bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010be0:	bf00      	nop
 8010be2:	3708      	adds	r7, #8
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bd80      	pop	{r7, pc}
 8010be8:	e000ed04 	.word	0xe000ed04

08010bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010bec:	b480      	push	{r7}
 8010bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8010c20 <vPortSetupTimerInterrupt+0x34>)
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8010c24 <vPortSetupTimerInterrupt+0x38>)
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8010c28 <vPortSetupTimerInterrupt+0x3c>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a0a      	ldr	r2, [pc, #40]	@ (8010c2c <vPortSetupTimerInterrupt+0x40>)
 8010c02:	fba2 2303 	umull	r2, r3, r2, r3
 8010c06:	099b      	lsrs	r3, r3, #6
 8010c08:	4a09      	ldr	r2, [pc, #36]	@ (8010c30 <vPortSetupTimerInterrupt+0x44>)
 8010c0a:	3b01      	subs	r3, #1
 8010c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c0e:	4b04      	ldr	r3, [pc, #16]	@ (8010c20 <vPortSetupTimerInterrupt+0x34>)
 8010c10:	2207      	movs	r2, #7
 8010c12:	601a      	str	r2, [r3, #0]
}
 8010c14:	bf00      	nop
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr
 8010c1e:	bf00      	nop
 8010c20:	e000e010 	.word	0xe000e010
 8010c24:	e000e018 	.word	0xe000e018
 8010c28:	24000000 	.word	0x24000000
 8010c2c:	10624dd3 	.word	0x10624dd3
 8010c30:	e000e014 	.word	0xe000e014

08010c34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010c44 <vPortEnableVFP+0x10>
 8010c38:	6801      	ldr	r1, [r0, #0]
 8010c3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010c3e:	6001      	str	r1, [r0, #0]
 8010c40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010c42:	bf00      	nop
 8010c44:	e000ed88 	.word	0xe000ed88

08010c48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010c48:	b480      	push	{r7}
 8010c4a:	b085      	sub	sp, #20
 8010c4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010c4e:	f3ef 8305 	mrs	r3, IPSR
 8010c52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b0f      	cmp	r3, #15
 8010c58:	d915      	bls.n	8010c86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010c5a:	4a18      	ldr	r2, [pc, #96]	@ (8010cbc <vPortValidateInterruptPriority+0x74>)
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	4413      	add	r3, r2
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010c64:	4b16      	ldr	r3, [pc, #88]	@ (8010cc0 <vPortValidateInterruptPriority+0x78>)
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	7afa      	ldrb	r2, [r7, #11]
 8010c6a:	429a      	cmp	r2, r3
 8010c6c:	d20b      	bcs.n	8010c86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8010c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c72:	f383 8811 	msr	BASEPRI, r3
 8010c76:	f3bf 8f6f 	isb	sy
 8010c7a:	f3bf 8f4f 	dsb	sy
 8010c7e:	607b      	str	r3, [r7, #4]
}
 8010c80:	bf00      	nop
 8010c82:	bf00      	nop
 8010c84:	e7fd      	b.n	8010c82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010c86:	4b0f      	ldr	r3, [pc, #60]	@ (8010cc4 <vPortValidateInterruptPriority+0x7c>)
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc8 <vPortValidateInterruptPriority+0x80>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d90b      	bls.n	8010cae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c9a:	f383 8811 	msr	BASEPRI, r3
 8010c9e:	f3bf 8f6f 	isb	sy
 8010ca2:	f3bf 8f4f 	dsb	sy
 8010ca6:	603b      	str	r3, [r7, #0]
}
 8010ca8:	bf00      	nop
 8010caa:	bf00      	nop
 8010cac:	e7fd      	b.n	8010caa <vPortValidateInterruptPriority+0x62>
	}
 8010cae:	bf00      	nop
 8010cb0:	3714      	adds	r7, #20
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb8:	4770      	bx	lr
 8010cba:	bf00      	nop
 8010cbc:	e000e3f0 	.word	0xe000e3f0
 8010cc0:	24001980 	.word	0x24001980
 8010cc4:	e000ed0c 	.word	0xe000ed0c
 8010cc8:	24001984 	.word	0x24001984

08010ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b08a      	sub	sp, #40	@ 0x28
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010cd8:	f7fe fc64 	bl	800f5a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8010e50 <pvPortMalloc+0x184>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d101      	bne.n	8010ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010ce4:	f000 f924 	bl	8010f30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ce8:	4b5a      	ldr	r3, [pc, #360]	@ (8010e54 <pvPortMalloc+0x188>)
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	4013      	ands	r3, r2
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	f040 8095 	bne.w	8010e20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d01e      	beq.n	8010d3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8010cfc:	2208      	movs	r2, #8
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	4413      	add	r3, r2
 8010d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f003 0307 	and.w	r3, r3, #7
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d015      	beq.n	8010d3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f023 0307 	bic.w	r3, r3, #7
 8010d14:	3308      	adds	r3, #8
 8010d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f003 0307 	and.w	r3, r3, #7
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00b      	beq.n	8010d3a <pvPortMalloc+0x6e>
	__asm volatile
 8010d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d26:	f383 8811 	msr	BASEPRI, r3
 8010d2a:	f3bf 8f6f 	isb	sy
 8010d2e:	f3bf 8f4f 	dsb	sy
 8010d32:	617b      	str	r3, [r7, #20]
}
 8010d34:	bf00      	nop
 8010d36:	bf00      	nop
 8010d38:	e7fd      	b.n	8010d36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d06f      	beq.n	8010e20 <pvPortMalloc+0x154>
 8010d40:	4b45      	ldr	r3, [pc, #276]	@ (8010e58 <pvPortMalloc+0x18c>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	429a      	cmp	r2, r3
 8010d48:	d86a      	bhi.n	8010e20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010d4a:	4b44      	ldr	r3, [pc, #272]	@ (8010e5c <pvPortMalloc+0x190>)
 8010d4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010d4e:	4b43      	ldr	r3, [pc, #268]	@ (8010e5c <pvPortMalloc+0x190>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d54:	e004      	b.n	8010d60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d903      	bls.n	8010d72 <pvPortMalloc+0xa6>
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d6c:	681b      	ldr	r3, [r3, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d1f1      	bne.n	8010d56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010d72:	4b37      	ldr	r3, [pc, #220]	@ (8010e50 <pvPortMalloc+0x184>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d78:	429a      	cmp	r2, r3
 8010d7a:	d051      	beq.n	8010e20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010d7c:	6a3b      	ldr	r3, [r7, #32]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2208      	movs	r2, #8
 8010d82:	4413      	add	r3, r2
 8010d84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d88:	681a      	ldr	r2, [r3, #0]
 8010d8a:	6a3b      	ldr	r3, [r7, #32]
 8010d8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d90:	685a      	ldr	r2, [r3, #4]
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	1ad2      	subs	r2, r2, r3
 8010d96:	2308      	movs	r3, #8
 8010d98:	005b      	lsls	r3, r3, #1
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d920      	bls.n	8010de0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4413      	add	r3, r2
 8010da4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010da6:	69bb      	ldr	r3, [r7, #24]
 8010da8:	f003 0307 	and.w	r3, r3, #7
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00b      	beq.n	8010dc8 <pvPortMalloc+0xfc>
	__asm volatile
 8010db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010db4:	f383 8811 	msr	BASEPRI, r3
 8010db8:	f3bf 8f6f 	isb	sy
 8010dbc:	f3bf 8f4f 	dsb	sy
 8010dc0:	613b      	str	r3, [r7, #16]
}
 8010dc2:	bf00      	nop
 8010dc4:	bf00      	nop
 8010dc6:	e7fd      	b.n	8010dc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dca:	685a      	ldr	r2, [r3, #4]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	1ad2      	subs	r2, r2, r3
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010dda:	69b8      	ldr	r0, [r7, #24]
 8010ddc:	f000 f90a 	bl	8010ff4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010de0:	4b1d      	ldr	r3, [pc, #116]	@ (8010e58 <pvPortMalloc+0x18c>)
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	1ad3      	subs	r3, r2, r3
 8010dea:	4a1b      	ldr	r2, [pc, #108]	@ (8010e58 <pvPortMalloc+0x18c>)
 8010dec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010dee:	4b1a      	ldr	r3, [pc, #104]	@ (8010e58 <pvPortMalloc+0x18c>)
 8010df0:	681a      	ldr	r2, [r3, #0]
 8010df2:	4b1b      	ldr	r3, [pc, #108]	@ (8010e60 <pvPortMalloc+0x194>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d203      	bcs.n	8010e02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010dfa:	4b17      	ldr	r3, [pc, #92]	@ (8010e58 <pvPortMalloc+0x18c>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	4a18      	ldr	r2, [pc, #96]	@ (8010e60 <pvPortMalloc+0x194>)
 8010e00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e04:	685a      	ldr	r2, [r3, #4]
 8010e06:	4b13      	ldr	r3, [pc, #76]	@ (8010e54 <pvPortMalloc+0x188>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	431a      	orrs	r2, r3
 8010e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e12:	2200      	movs	r2, #0
 8010e14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010e16:	4b13      	ldr	r3, [pc, #76]	@ (8010e64 <pvPortMalloc+0x198>)
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	3301      	adds	r3, #1
 8010e1c:	4a11      	ldr	r2, [pc, #68]	@ (8010e64 <pvPortMalloc+0x198>)
 8010e1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e20:	f7fe fbce 	bl	800f5c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e24:	69fb      	ldr	r3, [r7, #28]
 8010e26:	f003 0307 	and.w	r3, r3, #7
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d00b      	beq.n	8010e46 <pvPortMalloc+0x17a>
	__asm volatile
 8010e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e32:	f383 8811 	msr	BASEPRI, r3
 8010e36:	f3bf 8f6f 	isb	sy
 8010e3a:	f3bf 8f4f 	dsb	sy
 8010e3e:	60fb      	str	r3, [r7, #12]
}
 8010e40:	bf00      	nop
 8010e42:	bf00      	nop
 8010e44:	e7fd      	b.n	8010e42 <pvPortMalloc+0x176>
	return pvReturn;
 8010e46:	69fb      	ldr	r3, [r7, #28]
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3728      	adds	r7, #40	@ 0x28
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}
 8010e50:	24005590 	.word	0x24005590
 8010e54:	240055a4 	.word	0x240055a4
 8010e58:	24005594 	.word	0x24005594
 8010e5c:	24005588 	.word	0x24005588
 8010e60:	24005598 	.word	0x24005598
 8010e64:	2400559c 	.word	0x2400559c

08010e68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d04f      	beq.n	8010f1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010e7a:	2308      	movs	r3, #8
 8010e7c:	425b      	negs	r3, r3
 8010e7e:	697a      	ldr	r2, [r7, #20]
 8010e80:	4413      	add	r3, r2
 8010e82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	685a      	ldr	r2, [r3, #4]
 8010e8c:	4b25      	ldr	r3, [pc, #148]	@ (8010f24 <vPortFree+0xbc>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	4013      	ands	r3, r2
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d10b      	bne.n	8010eae <vPortFree+0x46>
	__asm volatile
 8010e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e9a:	f383 8811 	msr	BASEPRI, r3
 8010e9e:	f3bf 8f6f 	isb	sy
 8010ea2:	f3bf 8f4f 	dsb	sy
 8010ea6:	60fb      	str	r3, [r7, #12]
}
 8010ea8:	bf00      	nop
 8010eaa:	bf00      	nop
 8010eac:	e7fd      	b.n	8010eaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d00b      	beq.n	8010ece <vPortFree+0x66>
	__asm volatile
 8010eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eba:	f383 8811 	msr	BASEPRI, r3
 8010ebe:	f3bf 8f6f 	isb	sy
 8010ec2:	f3bf 8f4f 	dsb	sy
 8010ec6:	60bb      	str	r3, [r7, #8]
}
 8010ec8:	bf00      	nop
 8010eca:	bf00      	nop
 8010ecc:	e7fd      	b.n	8010eca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	685a      	ldr	r2, [r3, #4]
 8010ed2:	4b14      	ldr	r3, [pc, #80]	@ (8010f24 <vPortFree+0xbc>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4013      	ands	r3, r2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d01e      	beq.n	8010f1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010edc:	693b      	ldr	r3, [r7, #16]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d11a      	bne.n	8010f1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8010f24 <vPortFree+0xbc>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	43db      	mvns	r3, r3
 8010eee:	401a      	ands	r2, r3
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010ef4:	f7fe fb56 	bl	800f5a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	685a      	ldr	r2, [r3, #4]
 8010efc:	4b0a      	ldr	r3, [pc, #40]	@ (8010f28 <vPortFree+0xc0>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4413      	add	r3, r2
 8010f02:	4a09      	ldr	r2, [pc, #36]	@ (8010f28 <vPortFree+0xc0>)
 8010f04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f06:	6938      	ldr	r0, [r7, #16]
 8010f08:	f000 f874 	bl	8010ff4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010f0c:	4b07      	ldr	r3, [pc, #28]	@ (8010f2c <vPortFree+0xc4>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	3301      	adds	r3, #1
 8010f12:	4a06      	ldr	r2, [pc, #24]	@ (8010f2c <vPortFree+0xc4>)
 8010f14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010f16:	f7fe fb53 	bl	800f5c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f1a:	bf00      	nop
 8010f1c:	3718      	adds	r7, #24
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bd80      	pop	{r7, pc}
 8010f22:	bf00      	nop
 8010f24:	240055a4 	.word	0x240055a4
 8010f28:	24005594 	.word	0x24005594
 8010f2c:	240055a0 	.word	0x240055a0

08010f30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8010f3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f3c:	4b27      	ldr	r3, [pc, #156]	@ (8010fdc <prvHeapInit+0xac>)
 8010f3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	f003 0307 	and.w	r3, r3, #7
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d00c      	beq.n	8010f64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	3307      	adds	r3, #7
 8010f4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f023 0307 	bic.w	r3, r3, #7
 8010f56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010f58:	68ba      	ldr	r2, [r7, #8]
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	1ad3      	subs	r3, r2, r3
 8010f5e:	4a1f      	ldr	r2, [pc, #124]	@ (8010fdc <prvHeapInit+0xac>)
 8010f60:	4413      	add	r3, r2
 8010f62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010f68:	4a1d      	ldr	r2, [pc, #116]	@ (8010fe0 <prvHeapInit+0xb0>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8010fe0 <prvHeapInit+0xb0>)
 8010f70:	2200      	movs	r2, #0
 8010f72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	4413      	add	r3, r2
 8010f7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010f7c:	2208      	movs	r2, #8
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	1a9b      	subs	r3, r3, r2
 8010f82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	f023 0307 	bic.w	r3, r3, #7
 8010f8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	4a15      	ldr	r2, [pc, #84]	@ (8010fe4 <prvHeapInit+0xb4>)
 8010f90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010f92:	4b14      	ldr	r3, [pc, #80]	@ (8010fe4 <prvHeapInit+0xb4>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	2200      	movs	r2, #0
 8010f98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010f9a:	4b12      	ldr	r3, [pc, #72]	@ (8010fe4 <prvHeapInit+0xb4>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	68fa      	ldr	r2, [r7, #12]
 8010faa:	1ad2      	subs	r2, r2, r3
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8010fe4 <prvHeapInit+0xb4>)
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8010fe8 <prvHeapInit+0xb8>)
 8010fbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	685b      	ldr	r3, [r3, #4]
 8010fc4:	4a09      	ldr	r2, [pc, #36]	@ (8010fec <prvHeapInit+0xbc>)
 8010fc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010fc8:	4b09      	ldr	r3, [pc, #36]	@ (8010ff0 <prvHeapInit+0xc0>)
 8010fca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010fce:	601a      	str	r2, [r3, #0]
}
 8010fd0:	bf00      	nop
 8010fd2:	3714      	adds	r7, #20
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	24001988 	.word	0x24001988
 8010fe0:	24005588 	.word	0x24005588
 8010fe4:	24005590 	.word	0x24005590
 8010fe8:	24005598 	.word	0x24005598
 8010fec:	24005594 	.word	0x24005594
 8010ff0:	240055a4 	.word	0x240055a4

08010ff4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b085      	sub	sp, #20
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010ffc:	4b28      	ldr	r3, [pc, #160]	@ (80110a0 <prvInsertBlockIntoFreeList+0xac>)
 8010ffe:	60fb      	str	r3, [r7, #12]
 8011000:	e002      	b.n	8011008 <prvInsertBlockIntoFreeList+0x14>
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	60fb      	str	r3, [r7, #12]
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	687a      	ldr	r2, [r7, #4]
 801100e:	429a      	cmp	r2, r3
 8011010:	d8f7      	bhi.n	8011002 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	685b      	ldr	r3, [r3, #4]
 801101a:	68ba      	ldr	r2, [r7, #8]
 801101c:	4413      	add	r3, r2
 801101e:	687a      	ldr	r2, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d108      	bne.n	8011036 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	685a      	ldr	r2, [r3, #4]
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	441a      	add	r2, r3
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	685b      	ldr	r3, [r3, #4]
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	441a      	add	r2, r3
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d118      	bne.n	801107c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	4b15      	ldr	r3, [pc, #84]	@ (80110a4 <prvInsertBlockIntoFreeList+0xb0>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	429a      	cmp	r2, r3
 8011054:	d00d      	beq.n	8011072 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	441a      	add	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	601a      	str	r2, [r3, #0]
 8011070:	e008      	b.n	8011084 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011072:	4b0c      	ldr	r3, [pc, #48]	@ (80110a4 <prvInsertBlockIntoFreeList+0xb0>)
 8011074:	681a      	ldr	r2, [r3, #0]
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	601a      	str	r2, [r3, #0]
 801107a:	e003      	b.n	8011084 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011084:	68fa      	ldr	r2, [r7, #12]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	429a      	cmp	r2, r3
 801108a:	d002      	beq.n	8011092 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	687a      	ldr	r2, [r7, #4]
 8011090:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011092:	bf00      	nop
 8011094:	3714      	adds	r7, #20
 8011096:	46bd      	mov	sp, r7
 8011098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109c:	4770      	bx	lr
 801109e:	bf00      	nop
 80110a0:	24005588 	.word	0x24005588
 80110a4:	24005590 	.word	0x24005590

080110a8 <__cvt>:
 80110a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110aa:	ed2d 8b02 	vpush	{d8}
 80110ae:	eeb0 8b40 	vmov.f64	d8, d0
 80110b2:	b085      	sub	sp, #20
 80110b4:	4617      	mov	r7, r2
 80110b6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80110b8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80110ba:	ee18 2a90 	vmov	r2, s17
 80110be:	f025 0520 	bic.w	r5, r5, #32
 80110c2:	2a00      	cmp	r2, #0
 80110c4:	bfb6      	itet	lt
 80110c6:	222d      	movlt	r2, #45	@ 0x2d
 80110c8:	2200      	movge	r2, #0
 80110ca:	eeb1 8b40 	vneglt.f64	d8, d0
 80110ce:	2d46      	cmp	r5, #70	@ 0x46
 80110d0:	460c      	mov	r4, r1
 80110d2:	701a      	strb	r2, [r3, #0]
 80110d4:	d004      	beq.n	80110e0 <__cvt+0x38>
 80110d6:	2d45      	cmp	r5, #69	@ 0x45
 80110d8:	d100      	bne.n	80110dc <__cvt+0x34>
 80110da:	3401      	adds	r4, #1
 80110dc:	2102      	movs	r1, #2
 80110de:	e000      	b.n	80110e2 <__cvt+0x3a>
 80110e0:	2103      	movs	r1, #3
 80110e2:	ab03      	add	r3, sp, #12
 80110e4:	9301      	str	r3, [sp, #4]
 80110e6:	ab02      	add	r3, sp, #8
 80110e8:	9300      	str	r3, [sp, #0]
 80110ea:	4622      	mov	r2, r4
 80110ec:	4633      	mov	r3, r6
 80110ee:	eeb0 0b48 	vmov.f64	d0, d8
 80110f2:	f000 feb9 	bl	8011e68 <_dtoa_r>
 80110f6:	2d47      	cmp	r5, #71	@ 0x47
 80110f8:	d114      	bne.n	8011124 <__cvt+0x7c>
 80110fa:	07fb      	lsls	r3, r7, #31
 80110fc:	d50a      	bpl.n	8011114 <__cvt+0x6c>
 80110fe:	1902      	adds	r2, r0, r4
 8011100:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011108:	bf08      	it	eq
 801110a:	9203      	streq	r2, [sp, #12]
 801110c:	2130      	movs	r1, #48	@ 0x30
 801110e:	9b03      	ldr	r3, [sp, #12]
 8011110:	4293      	cmp	r3, r2
 8011112:	d319      	bcc.n	8011148 <__cvt+0xa0>
 8011114:	9b03      	ldr	r3, [sp, #12]
 8011116:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011118:	1a1b      	subs	r3, r3, r0
 801111a:	6013      	str	r3, [r2, #0]
 801111c:	b005      	add	sp, #20
 801111e:	ecbd 8b02 	vpop	{d8}
 8011122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011124:	2d46      	cmp	r5, #70	@ 0x46
 8011126:	eb00 0204 	add.w	r2, r0, r4
 801112a:	d1e9      	bne.n	8011100 <__cvt+0x58>
 801112c:	7803      	ldrb	r3, [r0, #0]
 801112e:	2b30      	cmp	r3, #48	@ 0x30
 8011130:	d107      	bne.n	8011142 <__cvt+0x9a>
 8011132:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113a:	bf1c      	itt	ne
 801113c:	f1c4 0401 	rsbne	r4, r4, #1
 8011140:	6034      	strne	r4, [r6, #0]
 8011142:	6833      	ldr	r3, [r6, #0]
 8011144:	441a      	add	r2, r3
 8011146:	e7db      	b.n	8011100 <__cvt+0x58>
 8011148:	1c5c      	adds	r4, r3, #1
 801114a:	9403      	str	r4, [sp, #12]
 801114c:	7019      	strb	r1, [r3, #0]
 801114e:	e7de      	b.n	801110e <__cvt+0x66>

08011150 <__exponent>:
 8011150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011152:	2900      	cmp	r1, #0
 8011154:	bfba      	itte	lt
 8011156:	4249      	neglt	r1, r1
 8011158:	232d      	movlt	r3, #45	@ 0x2d
 801115a:	232b      	movge	r3, #43	@ 0x2b
 801115c:	2909      	cmp	r1, #9
 801115e:	7002      	strb	r2, [r0, #0]
 8011160:	7043      	strb	r3, [r0, #1]
 8011162:	dd29      	ble.n	80111b8 <__exponent+0x68>
 8011164:	f10d 0307 	add.w	r3, sp, #7
 8011168:	461d      	mov	r5, r3
 801116a:	270a      	movs	r7, #10
 801116c:	461a      	mov	r2, r3
 801116e:	fbb1 f6f7 	udiv	r6, r1, r7
 8011172:	fb07 1416 	mls	r4, r7, r6, r1
 8011176:	3430      	adds	r4, #48	@ 0x30
 8011178:	f802 4c01 	strb.w	r4, [r2, #-1]
 801117c:	460c      	mov	r4, r1
 801117e:	2c63      	cmp	r4, #99	@ 0x63
 8011180:	f103 33ff 	add.w	r3, r3, #4294967295
 8011184:	4631      	mov	r1, r6
 8011186:	dcf1      	bgt.n	801116c <__exponent+0x1c>
 8011188:	3130      	adds	r1, #48	@ 0x30
 801118a:	1e94      	subs	r4, r2, #2
 801118c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011190:	1c41      	adds	r1, r0, #1
 8011192:	4623      	mov	r3, r4
 8011194:	42ab      	cmp	r3, r5
 8011196:	d30a      	bcc.n	80111ae <__exponent+0x5e>
 8011198:	f10d 0309 	add.w	r3, sp, #9
 801119c:	1a9b      	subs	r3, r3, r2
 801119e:	42ac      	cmp	r4, r5
 80111a0:	bf88      	it	hi
 80111a2:	2300      	movhi	r3, #0
 80111a4:	3302      	adds	r3, #2
 80111a6:	4403      	add	r3, r0
 80111a8:	1a18      	subs	r0, r3, r0
 80111aa:	b003      	add	sp, #12
 80111ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ae:	f813 6b01 	ldrb.w	r6, [r3], #1
 80111b2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80111b6:	e7ed      	b.n	8011194 <__exponent+0x44>
 80111b8:	2330      	movs	r3, #48	@ 0x30
 80111ba:	3130      	adds	r1, #48	@ 0x30
 80111bc:	7083      	strb	r3, [r0, #2]
 80111be:	70c1      	strb	r1, [r0, #3]
 80111c0:	1d03      	adds	r3, r0, #4
 80111c2:	e7f1      	b.n	80111a8 <__exponent+0x58>
 80111c4:	0000      	movs	r0, r0
	...

080111c8 <_printf_float>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	b08d      	sub	sp, #52	@ 0x34
 80111ce:	460c      	mov	r4, r1
 80111d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80111d4:	4616      	mov	r6, r2
 80111d6:	461f      	mov	r7, r3
 80111d8:	4605      	mov	r5, r0
 80111da:	f000 fcdf 	bl	8011b9c <_localeconv_r>
 80111de:	f8d0 b000 	ldr.w	fp, [r0]
 80111e2:	4658      	mov	r0, fp
 80111e4:	f7ef f8e4 	bl	80003b0 <strlen>
 80111e8:	2300      	movs	r3, #0
 80111ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80111ec:	f8d8 3000 	ldr.w	r3, [r8]
 80111f0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80111f4:	6822      	ldr	r2, [r4, #0]
 80111f6:	9005      	str	r0, [sp, #20]
 80111f8:	3307      	adds	r3, #7
 80111fa:	f023 0307 	bic.w	r3, r3, #7
 80111fe:	f103 0108 	add.w	r1, r3, #8
 8011202:	f8c8 1000 	str.w	r1, [r8]
 8011206:	ed93 0b00 	vldr	d0, [r3]
 801120a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8011468 <_printf_float+0x2a0>
 801120e:	eeb0 7bc0 	vabs.f64	d7, d0
 8011212:	eeb4 7b46 	vcmp.f64	d7, d6
 8011216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801121a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801121e:	dd24      	ble.n	801126a <_printf_float+0xa2>
 8011220:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011228:	d502      	bpl.n	8011230 <_printf_float+0x68>
 801122a:	232d      	movs	r3, #45	@ 0x2d
 801122c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011230:	498f      	ldr	r1, [pc, #572]	@ (8011470 <_printf_float+0x2a8>)
 8011232:	4b90      	ldr	r3, [pc, #576]	@ (8011474 <_printf_float+0x2ac>)
 8011234:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011238:	bf94      	ite	ls
 801123a:	4688      	movls	r8, r1
 801123c:	4698      	movhi	r8, r3
 801123e:	f022 0204 	bic.w	r2, r2, #4
 8011242:	2303      	movs	r3, #3
 8011244:	6123      	str	r3, [r4, #16]
 8011246:	6022      	str	r2, [r4, #0]
 8011248:	f04f 0a00 	mov.w	sl, #0
 801124c:	9700      	str	r7, [sp, #0]
 801124e:	4633      	mov	r3, r6
 8011250:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011252:	4621      	mov	r1, r4
 8011254:	4628      	mov	r0, r5
 8011256:	f000 f9d1 	bl	80115fc <_printf_common>
 801125a:	3001      	adds	r0, #1
 801125c:	f040 8089 	bne.w	8011372 <_printf_float+0x1aa>
 8011260:	f04f 30ff 	mov.w	r0, #4294967295
 8011264:	b00d      	add	sp, #52	@ 0x34
 8011266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801126a:	eeb4 0b40 	vcmp.f64	d0, d0
 801126e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011272:	d709      	bvc.n	8011288 <_printf_float+0xc0>
 8011274:	ee10 3a90 	vmov	r3, s1
 8011278:	2b00      	cmp	r3, #0
 801127a:	bfbc      	itt	lt
 801127c:	232d      	movlt	r3, #45	@ 0x2d
 801127e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011282:	497d      	ldr	r1, [pc, #500]	@ (8011478 <_printf_float+0x2b0>)
 8011284:	4b7d      	ldr	r3, [pc, #500]	@ (801147c <_printf_float+0x2b4>)
 8011286:	e7d5      	b.n	8011234 <_printf_float+0x6c>
 8011288:	6863      	ldr	r3, [r4, #4]
 801128a:	1c59      	adds	r1, r3, #1
 801128c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011290:	d139      	bne.n	8011306 <_printf_float+0x13e>
 8011292:	2306      	movs	r3, #6
 8011294:	6063      	str	r3, [r4, #4]
 8011296:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801129a:	2300      	movs	r3, #0
 801129c:	6022      	str	r2, [r4, #0]
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80112a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80112a6:	ab09      	add	r3, sp, #36	@ 0x24
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	6861      	ldr	r1, [r4, #4]
 80112ac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80112b0:	4628      	mov	r0, r5
 80112b2:	f7ff fef9 	bl	80110a8 <__cvt>
 80112b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80112ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80112bc:	4680      	mov	r8, r0
 80112be:	d129      	bne.n	8011314 <_printf_float+0x14c>
 80112c0:	1cc8      	adds	r0, r1, #3
 80112c2:	db02      	blt.n	80112ca <_printf_float+0x102>
 80112c4:	6863      	ldr	r3, [r4, #4]
 80112c6:	4299      	cmp	r1, r3
 80112c8:	dd41      	ble.n	801134e <_printf_float+0x186>
 80112ca:	f1a9 0902 	sub.w	r9, r9, #2
 80112ce:	fa5f f989 	uxtb.w	r9, r9
 80112d2:	3901      	subs	r1, #1
 80112d4:	464a      	mov	r2, r9
 80112d6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80112da:	9109      	str	r1, [sp, #36]	@ 0x24
 80112dc:	f7ff ff38 	bl	8011150 <__exponent>
 80112e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80112e2:	1813      	adds	r3, r2, r0
 80112e4:	2a01      	cmp	r2, #1
 80112e6:	4682      	mov	sl, r0
 80112e8:	6123      	str	r3, [r4, #16]
 80112ea:	dc02      	bgt.n	80112f2 <_printf_float+0x12a>
 80112ec:	6822      	ldr	r2, [r4, #0]
 80112ee:	07d2      	lsls	r2, r2, #31
 80112f0:	d501      	bpl.n	80112f6 <_printf_float+0x12e>
 80112f2:	3301      	adds	r3, #1
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d0a6      	beq.n	801124c <_printf_float+0x84>
 80112fe:	232d      	movs	r3, #45	@ 0x2d
 8011300:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011304:	e7a2      	b.n	801124c <_printf_float+0x84>
 8011306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801130a:	d1c4      	bne.n	8011296 <_printf_float+0xce>
 801130c:	2b00      	cmp	r3, #0
 801130e:	d1c2      	bne.n	8011296 <_printf_float+0xce>
 8011310:	2301      	movs	r3, #1
 8011312:	e7bf      	b.n	8011294 <_printf_float+0xcc>
 8011314:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8011318:	d9db      	bls.n	80112d2 <_printf_float+0x10a>
 801131a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801131e:	d118      	bne.n	8011352 <_printf_float+0x18a>
 8011320:	2900      	cmp	r1, #0
 8011322:	6863      	ldr	r3, [r4, #4]
 8011324:	dd0b      	ble.n	801133e <_printf_float+0x176>
 8011326:	6121      	str	r1, [r4, #16]
 8011328:	b913      	cbnz	r3, 8011330 <_printf_float+0x168>
 801132a:	6822      	ldr	r2, [r4, #0]
 801132c:	07d0      	lsls	r0, r2, #31
 801132e:	d502      	bpl.n	8011336 <_printf_float+0x16e>
 8011330:	3301      	adds	r3, #1
 8011332:	440b      	add	r3, r1
 8011334:	6123      	str	r3, [r4, #16]
 8011336:	65a1      	str	r1, [r4, #88]	@ 0x58
 8011338:	f04f 0a00 	mov.w	sl, #0
 801133c:	e7db      	b.n	80112f6 <_printf_float+0x12e>
 801133e:	b913      	cbnz	r3, 8011346 <_printf_float+0x17e>
 8011340:	6822      	ldr	r2, [r4, #0]
 8011342:	07d2      	lsls	r2, r2, #31
 8011344:	d501      	bpl.n	801134a <_printf_float+0x182>
 8011346:	3302      	adds	r3, #2
 8011348:	e7f4      	b.n	8011334 <_printf_float+0x16c>
 801134a:	2301      	movs	r3, #1
 801134c:	e7f2      	b.n	8011334 <_printf_float+0x16c>
 801134e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8011352:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011354:	4299      	cmp	r1, r3
 8011356:	db05      	blt.n	8011364 <_printf_float+0x19c>
 8011358:	6823      	ldr	r3, [r4, #0]
 801135a:	6121      	str	r1, [r4, #16]
 801135c:	07d8      	lsls	r0, r3, #31
 801135e:	d5ea      	bpl.n	8011336 <_printf_float+0x16e>
 8011360:	1c4b      	adds	r3, r1, #1
 8011362:	e7e7      	b.n	8011334 <_printf_float+0x16c>
 8011364:	2900      	cmp	r1, #0
 8011366:	bfd4      	ite	le
 8011368:	f1c1 0202 	rsble	r2, r1, #2
 801136c:	2201      	movgt	r2, #1
 801136e:	4413      	add	r3, r2
 8011370:	e7e0      	b.n	8011334 <_printf_float+0x16c>
 8011372:	6823      	ldr	r3, [r4, #0]
 8011374:	055a      	lsls	r2, r3, #21
 8011376:	d407      	bmi.n	8011388 <_printf_float+0x1c0>
 8011378:	6923      	ldr	r3, [r4, #16]
 801137a:	4642      	mov	r2, r8
 801137c:	4631      	mov	r1, r6
 801137e:	4628      	mov	r0, r5
 8011380:	47b8      	blx	r7
 8011382:	3001      	adds	r0, #1
 8011384:	d12a      	bne.n	80113dc <_printf_float+0x214>
 8011386:	e76b      	b.n	8011260 <_printf_float+0x98>
 8011388:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801138c:	f240 80e0 	bls.w	8011550 <_printf_float+0x388>
 8011390:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011394:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801139c:	d133      	bne.n	8011406 <_printf_float+0x23e>
 801139e:	4a38      	ldr	r2, [pc, #224]	@ (8011480 <_printf_float+0x2b8>)
 80113a0:	2301      	movs	r3, #1
 80113a2:	4631      	mov	r1, r6
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b8      	blx	r7
 80113a8:	3001      	adds	r0, #1
 80113aa:	f43f af59 	beq.w	8011260 <_printf_float+0x98>
 80113ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80113b2:	4543      	cmp	r3, r8
 80113b4:	db02      	blt.n	80113bc <_printf_float+0x1f4>
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	07d8      	lsls	r0, r3, #31
 80113ba:	d50f      	bpl.n	80113dc <_printf_float+0x214>
 80113bc:	9b05      	ldr	r3, [sp, #20]
 80113be:	465a      	mov	r2, fp
 80113c0:	4631      	mov	r1, r6
 80113c2:	4628      	mov	r0, r5
 80113c4:	47b8      	blx	r7
 80113c6:	3001      	adds	r0, #1
 80113c8:	f43f af4a 	beq.w	8011260 <_printf_float+0x98>
 80113cc:	f04f 0900 	mov.w	r9, #0
 80113d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80113d4:	f104 0a1a 	add.w	sl, r4, #26
 80113d8:	45c8      	cmp	r8, r9
 80113da:	dc09      	bgt.n	80113f0 <_printf_float+0x228>
 80113dc:	6823      	ldr	r3, [r4, #0]
 80113de:	079b      	lsls	r3, r3, #30
 80113e0:	f100 8107 	bmi.w	80115f2 <_printf_float+0x42a>
 80113e4:	68e0      	ldr	r0, [r4, #12]
 80113e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80113e8:	4298      	cmp	r0, r3
 80113ea:	bfb8      	it	lt
 80113ec:	4618      	movlt	r0, r3
 80113ee:	e739      	b.n	8011264 <_printf_float+0x9c>
 80113f0:	2301      	movs	r3, #1
 80113f2:	4652      	mov	r2, sl
 80113f4:	4631      	mov	r1, r6
 80113f6:	4628      	mov	r0, r5
 80113f8:	47b8      	blx	r7
 80113fa:	3001      	adds	r0, #1
 80113fc:	f43f af30 	beq.w	8011260 <_printf_float+0x98>
 8011400:	f109 0901 	add.w	r9, r9, #1
 8011404:	e7e8      	b.n	80113d8 <_printf_float+0x210>
 8011406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011408:	2b00      	cmp	r3, #0
 801140a:	dc3b      	bgt.n	8011484 <_printf_float+0x2bc>
 801140c:	4a1c      	ldr	r2, [pc, #112]	@ (8011480 <_printf_float+0x2b8>)
 801140e:	2301      	movs	r3, #1
 8011410:	4631      	mov	r1, r6
 8011412:	4628      	mov	r0, r5
 8011414:	47b8      	blx	r7
 8011416:	3001      	adds	r0, #1
 8011418:	f43f af22 	beq.w	8011260 <_printf_float+0x98>
 801141c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011420:	ea59 0303 	orrs.w	r3, r9, r3
 8011424:	d102      	bne.n	801142c <_printf_float+0x264>
 8011426:	6823      	ldr	r3, [r4, #0]
 8011428:	07d9      	lsls	r1, r3, #31
 801142a:	d5d7      	bpl.n	80113dc <_printf_float+0x214>
 801142c:	9b05      	ldr	r3, [sp, #20]
 801142e:	465a      	mov	r2, fp
 8011430:	4631      	mov	r1, r6
 8011432:	4628      	mov	r0, r5
 8011434:	47b8      	blx	r7
 8011436:	3001      	adds	r0, #1
 8011438:	f43f af12 	beq.w	8011260 <_printf_float+0x98>
 801143c:	f04f 0a00 	mov.w	sl, #0
 8011440:	f104 0b1a 	add.w	fp, r4, #26
 8011444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011446:	425b      	negs	r3, r3
 8011448:	4553      	cmp	r3, sl
 801144a:	dc01      	bgt.n	8011450 <_printf_float+0x288>
 801144c:	464b      	mov	r3, r9
 801144e:	e794      	b.n	801137a <_printf_float+0x1b2>
 8011450:	2301      	movs	r3, #1
 8011452:	465a      	mov	r2, fp
 8011454:	4631      	mov	r1, r6
 8011456:	4628      	mov	r0, r5
 8011458:	47b8      	blx	r7
 801145a:	3001      	adds	r0, #1
 801145c:	f43f af00 	beq.w	8011260 <_printf_float+0x98>
 8011460:	f10a 0a01 	add.w	sl, sl, #1
 8011464:	e7ee      	b.n	8011444 <_printf_float+0x27c>
 8011466:	bf00      	nop
 8011468:	ffffffff 	.word	0xffffffff
 801146c:	7fefffff 	.word	0x7fefffff
 8011470:	08013e0c 	.word	0x08013e0c
 8011474:	08013e10 	.word	0x08013e10
 8011478:	08013e14 	.word	0x08013e14
 801147c:	08013e18 	.word	0x08013e18
 8011480:	08013e1c 	.word	0x08013e1c
 8011484:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011486:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801148a:	4553      	cmp	r3, sl
 801148c:	bfa8      	it	ge
 801148e:	4653      	movge	r3, sl
 8011490:	2b00      	cmp	r3, #0
 8011492:	4699      	mov	r9, r3
 8011494:	dc37      	bgt.n	8011506 <_printf_float+0x33e>
 8011496:	2300      	movs	r3, #0
 8011498:	9307      	str	r3, [sp, #28]
 801149a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801149e:	f104 021a 	add.w	r2, r4, #26
 80114a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80114a4:	9907      	ldr	r1, [sp, #28]
 80114a6:	9306      	str	r3, [sp, #24]
 80114a8:	eba3 0309 	sub.w	r3, r3, r9
 80114ac:	428b      	cmp	r3, r1
 80114ae:	dc31      	bgt.n	8011514 <_printf_float+0x34c>
 80114b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114b2:	459a      	cmp	sl, r3
 80114b4:	dc3b      	bgt.n	801152e <_printf_float+0x366>
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	07da      	lsls	r2, r3, #31
 80114ba:	d438      	bmi.n	801152e <_printf_float+0x366>
 80114bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114be:	ebaa 0903 	sub.w	r9, sl, r3
 80114c2:	9b06      	ldr	r3, [sp, #24]
 80114c4:	ebaa 0303 	sub.w	r3, sl, r3
 80114c8:	4599      	cmp	r9, r3
 80114ca:	bfa8      	it	ge
 80114cc:	4699      	movge	r9, r3
 80114ce:	f1b9 0f00 	cmp.w	r9, #0
 80114d2:	dc34      	bgt.n	801153e <_printf_float+0x376>
 80114d4:	f04f 0800 	mov.w	r8, #0
 80114d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80114dc:	f104 0b1a 	add.w	fp, r4, #26
 80114e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114e2:	ebaa 0303 	sub.w	r3, sl, r3
 80114e6:	eba3 0309 	sub.w	r3, r3, r9
 80114ea:	4543      	cmp	r3, r8
 80114ec:	f77f af76 	ble.w	80113dc <_printf_float+0x214>
 80114f0:	2301      	movs	r3, #1
 80114f2:	465a      	mov	r2, fp
 80114f4:	4631      	mov	r1, r6
 80114f6:	4628      	mov	r0, r5
 80114f8:	47b8      	blx	r7
 80114fa:	3001      	adds	r0, #1
 80114fc:	f43f aeb0 	beq.w	8011260 <_printf_float+0x98>
 8011500:	f108 0801 	add.w	r8, r8, #1
 8011504:	e7ec      	b.n	80114e0 <_printf_float+0x318>
 8011506:	4642      	mov	r2, r8
 8011508:	4631      	mov	r1, r6
 801150a:	4628      	mov	r0, r5
 801150c:	47b8      	blx	r7
 801150e:	3001      	adds	r0, #1
 8011510:	d1c1      	bne.n	8011496 <_printf_float+0x2ce>
 8011512:	e6a5      	b.n	8011260 <_printf_float+0x98>
 8011514:	2301      	movs	r3, #1
 8011516:	4631      	mov	r1, r6
 8011518:	4628      	mov	r0, r5
 801151a:	9206      	str	r2, [sp, #24]
 801151c:	47b8      	blx	r7
 801151e:	3001      	adds	r0, #1
 8011520:	f43f ae9e 	beq.w	8011260 <_printf_float+0x98>
 8011524:	9b07      	ldr	r3, [sp, #28]
 8011526:	9a06      	ldr	r2, [sp, #24]
 8011528:	3301      	adds	r3, #1
 801152a:	9307      	str	r3, [sp, #28]
 801152c:	e7b9      	b.n	80114a2 <_printf_float+0x2da>
 801152e:	9b05      	ldr	r3, [sp, #20]
 8011530:	465a      	mov	r2, fp
 8011532:	4631      	mov	r1, r6
 8011534:	4628      	mov	r0, r5
 8011536:	47b8      	blx	r7
 8011538:	3001      	adds	r0, #1
 801153a:	d1bf      	bne.n	80114bc <_printf_float+0x2f4>
 801153c:	e690      	b.n	8011260 <_printf_float+0x98>
 801153e:	9a06      	ldr	r2, [sp, #24]
 8011540:	464b      	mov	r3, r9
 8011542:	4442      	add	r2, r8
 8011544:	4631      	mov	r1, r6
 8011546:	4628      	mov	r0, r5
 8011548:	47b8      	blx	r7
 801154a:	3001      	adds	r0, #1
 801154c:	d1c2      	bne.n	80114d4 <_printf_float+0x30c>
 801154e:	e687      	b.n	8011260 <_printf_float+0x98>
 8011550:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8011554:	f1b9 0f01 	cmp.w	r9, #1
 8011558:	dc01      	bgt.n	801155e <_printf_float+0x396>
 801155a:	07db      	lsls	r3, r3, #31
 801155c:	d536      	bpl.n	80115cc <_printf_float+0x404>
 801155e:	2301      	movs	r3, #1
 8011560:	4642      	mov	r2, r8
 8011562:	4631      	mov	r1, r6
 8011564:	4628      	mov	r0, r5
 8011566:	47b8      	blx	r7
 8011568:	3001      	adds	r0, #1
 801156a:	f43f ae79 	beq.w	8011260 <_printf_float+0x98>
 801156e:	9b05      	ldr	r3, [sp, #20]
 8011570:	465a      	mov	r2, fp
 8011572:	4631      	mov	r1, r6
 8011574:	4628      	mov	r0, r5
 8011576:	47b8      	blx	r7
 8011578:	3001      	adds	r0, #1
 801157a:	f43f ae71 	beq.w	8011260 <_printf_float+0x98>
 801157e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8011582:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801158a:	f109 39ff 	add.w	r9, r9, #4294967295
 801158e:	d018      	beq.n	80115c2 <_printf_float+0x3fa>
 8011590:	464b      	mov	r3, r9
 8011592:	f108 0201 	add.w	r2, r8, #1
 8011596:	4631      	mov	r1, r6
 8011598:	4628      	mov	r0, r5
 801159a:	47b8      	blx	r7
 801159c:	3001      	adds	r0, #1
 801159e:	d10c      	bne.n	80115ba <_printf_float+0x3f2>
 80115a0:	e65e      	b.n	8011260 <_printf_float+0x98>
 80115a2:	2301      	movs	r3, #1
 80115a4:	465a      	mov	r2, fp
 80115a6:	4631      	mov	r1, r6
 80115a8:	4628      	mov	r0, r5
 80115aa:	47b8      	blx	r7
 80115ac:	3001      	adds	r0, #1
 80115ae:	f43f ae57 	beq.w	8011260 <_printf_float+0x98>
 80115b2:	f108 0801 	add.w	r8, r8, #1
 80115b6:	45c8      	cmp	r8, r9
 80115b8:	dbf3      	blt.n	80115a2 <_printf_float+0x3da>
 80115ba:	4653      	mov	r3, sl
 80115bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80115c0:	e6dc      	b.n	801137c <_printf_float+0x1b4>
 80115c2:	f04f 0800 	mov.w	r8, #0
 80115c6:	f104 0b1a 	add.w	fp, r4, #26
 80115ca:	e7f4      	b.n	80115b6 <_printf_float+0x3ee>
 80115cc:	2301      	movs	r3, #1
 80115ce:	4642      	mov	r2, r8
 80115d0:	e7e1      	b.n	8011596 <_printf_float+0x3ce>
 80115d2:	2301      	movs	r3, #1
 80115d4:	464a      	mov	r2, r9
 80115d6:	4631      	mov	r1, r6
 80115d8:	4628      	mov	r0, r5
 80115da:	47b8      	blx	r7
 80115dc:	3001      	adds	r0, #1
 80115de:	f43f ae3f 	beq.w	8011260 <_printf_float+0x98>
 80115e2:	f108 0801 	add.w	r8, r8, #1
 80115e6:	68e3      	ldr	r3, [r4, #12]
 80115e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80115ea:	1a5b      	subs	r3, r3, r1
 80115ec:	4543      	cmp	r3, r8
 80115ee:	dcf0      	bgt.n	80115d2 <_printf_float+0x40a>
 80115f0:	e6f8      	b.n	80113e4 <_printf_float+0x21c>
 80115f2:	f04f 0800 	mov.w	r8, #0
 80115f6:	f104 0919 	add.w	r9, r4, #25
 80115fa:	e7f4      	b.n	80115e6 <_printf_float+0x41e>

080115fc <_printf_common>:
 80115fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011600:	4616      	mov	r6, r2
 8011602:	4698      	mov	r8, r3
 8011604:	688a      	ldr	r2, [r1, #8]
 8011606:	690b      	ldr	r3, [r1, #16]
 8011608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801160c:	4293      	cmp	r3, r2
 801160e:	bfb8      	it	lt
 8011610:	4613      	movlt	r3, r2
 8011612:	6033      	str	r3, [r6, #0]
 8011614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011618:	4607      	mov	r7, r0
 801161a:	460c      	mov	r4, r1
 801161c:	b10a      	cbz	r2, 8011622 <_printf_common+0x26>
 801161e:	3301      	adds	r3, #1
 8011620:	6033      	str	r3, [r6, #0]
 8011622:	6823      	ldr	r3, [r4, #0]
 8011624:	0699      	lsls	r1, r3, #26
 8011626:	bf42      	ittt	mi
 8011628:	6833      	ldrmi	r3, [r6, #0]
 801162a:	3302      	addmi	r3, #2
 801162c:	6033      	strmi	r3, [r6, #0]
 801162e:	6825      	ldr	r5, [r4, #0]
 8011630:	f015 0506 	ands.w	r5, r5, #6
 8011634:	d106      	bne.n	8011644 <_printf_common+0x48>
 8011636:	f104 0a19 	add.w	sl, r4, #25
 801163a:	68e3      	ldr	r3, [r4, #12]
 801163c:	6832      	ldr	r2, [r6, #0]
 801163e:	1a9b      	subs	r3, r3, r2
 8011640:	42ab      	cmp	r3, r5
 8011642:	dc26      	bgt.n	8011692 <_printf_common+0x96>
 8011644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011648:	6822      	ldr	r2, [r4, #0]
 801164a:	3b00      	subs	r3, #0
 801164c:	bf18      	it	ne
 801164e:	2301      	movne	r3, #1
 8011650:	0692      	lsls	r2, r2, #26
 8011652:	d42b      	bmi.n	80116ac <_printf_common+0xb0>
 8011654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011658:	4641      	mov	r1, r8
 801165a:	4638      	mov	r0, r7
 801165c:	47c8      	blx	r9
 801165e:	3001      	adds	r0, #1
 8011660:	d01e      	beq.n	80116a0 <_printf_common+0xa4>
 8011662:	6823      	ldr	r3, [r4, #0]
 8011664:	6922      	ldr	r2, [r4, #16]
 8011666:	f003 0306 	and.w	r3, r3, #6
 801166a:	2b04      	cmp	r3, #4
 801166c:	bf02      	ittt	eq
 801166e:	68e5      	ldreq	r5, [r4, #12]
 8011670:	6833      	ldreq	r3, [r6, #0]
 8011672:	1aed      	subeq	r5, r5, r3
 8011674:	68a3      	ldr	r3, [r4, #8]
 8011676:	bf0c      	ite	eq
 8011678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801167c:	2500      	movne	r5, #0
 801167e:	4293      	cmp	r3, r2
 8011680:	bfc4      	itt	gt
 8011682:	1a9b      	subgt	r3, r3, r2
 8011684:	18ed      	addgt	r5, r5, r3
 8011686:	2600      	movs	r6, #0
 8011688:	341a      	adds	r4, #26
 801168a:	42b5      	cmp	r5, r6
 801168c:	d11a      	bne.n	80116c4 <_printf_common+0xc8>
 801168e:	2000      	movs	r0, #0
 8011690:	e008      	b.n	80116a4 <_printf_common+0xa8>
 8011692:	2301      	movs	r3, #1
 8011694:	4652      	mov	r2, sl
 8011696:	4641      	mov	r1, r8
 8011698:	4638      	mov	r0, r7
 801169a:	47c8      	blx	r9
 801169c:	3001      	adds	r0, #1
 801169e:	d103      	bne.n	80116a8 <_printf_common+0xac>
 80116a0:	f04f 30ff 	mov.w	r0, #4294967295
 80116a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a8:	3501      	adds	r5, #1
 80116aa:	e7c6      	b.n	801163a <_printf_common+0x3e>
 80116ac:	18e1      	adds	r1, r4, r3
 80116ae:	1c5a      	adds	r2, r3, #1
 80116b0:	2030      	movs	r0, #48	@ 0x30
 80116b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116b6:	4422      	add	r2, r4
 80116b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116c0:	3302      	adds	r3, #2
 80116c2:	e7c7      	b.n	8011654 <_printf_common+0x58>
 80116c4:	2301      	movs	r3, #1
 80116c6:	4622      	mov	r2, r4
 80116c8:	4641      	mov	r1, r8
 80116ca:	4638      	mov	r0, r7
 80116cc:	47c8      	blx	r9
 80116ce:	3001      	adds	r0, #1
 80116d0:	d0e6      	beq.n	80116a0 <_printf_common+0xa4>
 80116d2:	3601      	adds	r6, #1
 80116d4:	e7d9      	b.n	801168a <_printf_common+0x8e>
	...

080116d8 <_printf_i>:
 80116d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116dc:	7e0f      	ldrb	r7, [r1, #24]
 80116de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116e0:	2f78      	cmp	r7, #120	@ 0x78
 80116e2:	4691      	mov	r9, r2
 80116e4:	4680      	mov	r8, r0
 80116e6:	460c      	mov	r4, r1
 80116e8:	469a      	mov	sl, r3
 80116ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116ee:	d807      	bhi.n	8011700 <_printf_i+0x28>
 80116f0:	2f62      	cmp	r7, #98	@ 0x62
 80116f2:	d80a      	bhi.n	801170a <_printf_i+0x32>
 80116f4:	2f00      	cmp	r7, #0
 80116f6:	f000 80d2 	beq.w	801189e <_printf_i+0x1c6>
 80116fa:	2f58      	cmp	r7, #88	@ 0x58
 80116fc:	f000 80b9 	beq.w	8011872 <_printf_i+0x19a>
 8011700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011708:	e03a      	b.n	8011780 <_printf_i+0xa8>
 801170a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801170e:	2b15      	cmp	r3, #21
 8011710:	d8f6      	bhi.n	8011700 <_printf_i+0x28>
 8011712:	a101      	add	r1, pc, #4	@ (adr r1, 8011718 <_printf_i+0x40>)
 8011714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011718:	08011771 	.word	0x08011771
 801171c:	08011785 	.word	0x08011785
 8011720:	08011701 	.word	0x08011701
 8011724:	08011701 	.word	0x08011701
 8011728:	08011701 	.word	0x08011701
 801172c:	08011701 	.word	0x08011701
 8011730:	08011785 	.word	0x08011785
 8011734:	08011701 	.word	0x08011701
 8011738:	08011701 	.word	0x08011701
 801173c:	08011701 	.word	0x08011701
 8011740:	08011701 	.word	0x08011701
 8011744:	08011885 	.word	0x08011885
 8011748:	080117af 	.word	0x080117af
 801174c:	0801183f 	.word	0x0801183f
 8011750:	08011701 	.word	0x08011701
 8011754:	08011701 	.word	0x08011701
 8011758:	080118a7 	.word	0x080118a7
 801175c:	08011701 	.word	0x08011701
 8011760:	080117af 	.word	0x080117af
 8011764:	08011701 	.word	0x08011701
 8011768:	08011701 	.word	0x08011701
 801176c:	08011847 	.word	0x08011847
 8011770:	6833      	ldr	r3, [r6, #0]
 8011772:	1d1a      	adds	r2, r3, #4
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	6032      	str	r2, [r6, #0]
 8011778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801177c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011780:	2301      	movs	r3, #1
 8011782:	e09d      	b.n	80118c0 <_printf_i+0x1e8>
 8011784:	6833      	ldr	r3, [r6, #0]
 8011786:	6820      	ldr	r0, [r4, #0]
 8011788:	1d19      	adds	r1, r3, #4
 801178a:	6031      	str	r1, [r6, #0]
 801178c:	0606      	lsls	r6, r0, #24
 801178e:	d501      	bpl.n	8011794 <_printf_i+0xbc>
 8011790:	681d      	ldr	r5, [r3, #0]
 8011792:	e003      	b.n	801179c <_printf_i+0xc4>
 8011794:	0645      	lsls	r5, r0, #25
 8011796:	d5fb      	bpl.n	8011790 <_printf_i+0xb8>
 8011798:	f9b3 5000 	ldrsh.w	r5, [r3]
 801179c:	2d00      	cmp	r5, #0
 801179e:	da03      	bge.n	80117a8 <_printf_i+0xd0>
 80117a0:	232d      	movs	r3, #45	@ 0x2d
 80117a2:	426d      	negs	r5, r5
 80117a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117a8:	4859      	ldr	r0, [pc, #356]	@ (8011910 <_printf_i+0x238>)
 80117aa:	230a      	movs	r3, #10
 80117ac:	e011      	b.n	80117d2 <_printf_i+0xfa>
 80117ae:	6821      	ldr	r1, [r4, #0]
 80117b0:	6833      	ldr	r3, [r6, #0]
 80117b2:	0608      	lsls	r0, r1, #24
 80117b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117b8:	d402      	bmi.n	80117c0 <_printf_i+0xe8>
 80117ba:	0649      	lsls	r1, r1, #25
 80117bc:	bf48      	it	mi
 80117be:	b2ad      	uxthmi	r5, r5
 80117c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80117c2:	4853      	ldr	r0, [pc, #332]	@ (8011910 <_printf_i+0x238>)
 80117c4:	6033      	str	r3, [r6, #0]
 80117c6:	bf14      	ite	ne
 80117c8:	230a      	movne	r3, #10
 80117ca:	2308      	moveq	r3, #8
 80117cc:	2100      	movs	r1, #0
 80117ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117d2:	6866      	ldr	r6, [r4, #4]
 80117d4:	60a6      	str	r6, [r4, #8]
 80117d6:	2e00      	cmp	r6, #0
 80117d8:	bfa2      	ittt	ge
 80117da:	6821      	ldrge	r1, [r4, #0]
 80117dc:	f021 0104 	bicge.w	r1, r1, #4
 80117e0:	6021      	strge	r1, [r4, #0]
 80117e2:	b90d      	cbnz	r5, 80117e8 <_printf_i+0x110>
 80117e4:	2e00      	cmp	r6, #0
 80117e6:	d04b      	beq.n	8011880 <_printf_i+0x1a8>
 80117e8:	4616      	mov	r6, r2
 80117ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80117ee:	fb03 5711 	mls	r7, r3, r1, r5
 80117f2:	5dc7      	ldrb	r7, [r0, r7]
 80117f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80117f8:	462f      	mov	r7, r5
 80117fa:	42bb      	cmp	r3, r7
 80117fc:	460d      	mov	r5, r1
 80117fe:	d9f4      	bls.n	80117ea <_printf_i+0x112>
 8011800:	2b08      	cmp	r3, #8
 8011802:	d10b      	bne.n	801181c <_printf_i+0x144>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	07df      	lsls	r7, r3, #31
 8011808:	d508      	bpl.n	801181c <_printf_i+0x144>
 801180a:	6923      	ldr	r3, [r4, #16]
 801180c:	6861      	ldr	r1, [r4, #4]
 801180e:	4299      	cmp	r1, r3
 8011810:	bfde      	ittt	le
 8011812:	2330      	movle	r3, #48	@ 0x30
 8011814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011818:	f106 36ff 	addle.w	r6, r6, #4294967295
 801181c:	1b92      	subs	r2, r2, r6
 801181e:	6122      	str	r2, [r4, #16]
 8011820:	f8cd a000 	str.w	sl, [sp]
 8011824:	464b      	mov	r3, r9
 8011826:	aa03      	add	r2, sp, #12
 8011828:	4621      	mov	r1, r4
 801182a:	4640      	mov	r0, r8
 801182c:	f7ff fee6 	bl	80115fc <_printf_common>
 8011830:	3001      	adds	r0, #1
 8011832:	d14a      	bne.n	80118ca <_printf_i+0x1f2>
 8011834:	f04f 30ff 	mov.w	r0, #4294967295
 8011838:	b004      	add	sp, #16
 801183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801183e:	6823      	ldr	r3, [r4, #0]
 8011840:	f043 0320 	orr.w	r3, r3, #32
 8011844:	6023      	str	r3, [r4, #0]
 8011846:	4833      	ldr	r0, [pc, #204]	@ (8011914 <_printf_i+0x23c>)
 8011848:	2778      	movs	r7, #120	@ 0x78
 801184a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801184e:	6823      	ldr	r3, [r4, #0]
 8011850:	6831      	ldr	r1, [r6, #0]
 8011852:	061f      	lsls	r7, r3, #24
 8011854:	f851 5b04 	ldr.w	r5, [r1], #4
 8011858:	d402      	bmi.n	8011860 <_printf_i+0x188>
 801185a:	065f      	lsls	r7, r3, #25
 801185c:	bf48      	it	mi
 801185e:	b2ad      	uxthmi	r5, r5
 8011860:	6031      	str	r1, [r6, #0]
 8011862:	07d9      	lsls	r1, r3, #31
 8011864:	bf44      	itt	mi
 8011866:	f043 0320 	orrmi.w	r3, r3, #32
 801186a:	6023      	strmi	r3, [r4, #0]
 801186c:	b11d      	cbz	r5, 8011876 <_printf_i+0x19e>
 801186e:	2310      	movs	r3, #16
 8011870:	e7ac      	b.n	80117cc <_printf_i+0xf4>
 8011872:	4827      	ldr	r0, [pc, #156]	@ (8011910 <_printf_i+0x238>)
 8011874:	e7e9      	b.n	801184a <_printf_i+0x172>
 8011876:	6823      	ldr	r3, [r4, #0]
 8011878:	f023 0320 	bic.w	r3, r3, #32
 801187c:	6023      	str	r3, [r4, #0]
 801187e:	e7f6      	b.n	801186e <_printf_i+0x196>
 8011880:	4616      	mov	r6, r2
 8011882:	e7bd      	b.n	8011800 <_printf_i+0x128>
 8011884:	6833      	ldr	r3, [r6, #0]
 8011886:	6825      	ldr	r5, [r4, #0]
 8011888:	6961      	ldr	r1, [r4, #20]
 801188a:	1d18      	adds	r0, r3, #4
 801188c:	6030      	str	r0, [r6, #0]
 801188e:	062e      	lsls	r6, r5, #24
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	d501      	bpl.n	8011898 <_printf_i+0x1c0>
 8011894:	6019      	str	r1, [r3, #0]
 8011896:	e002      	b.n	801189e <_printf_i+0x1c6>
 8011898:	0668      	lsls	r0, r5, #25
 801189a:	d5fb      	bpl.n	8011894 <_printf_i+0x1bc>
 801189c:	8019      	strh	r1, [r3, #0]
 801189e:	2300      	movs	r3, #0
 80118a0:	6123      	str	r3, [r4, #16]
 80118a2:	4616      	mov	r6, r2
 80118a4:	e7bc      	b.n	8011820 <_printf_i+0x148>
 80118a6:	6833      	ldr	r3, [r6, #0]
 80118a8:	1d1a      	adds	r2, r3, #4
 80118aa:	6032      	str	r2, [r6, #0]
 80118ac:	681e      	ldr	r6, [r3, #0]
 80118ae:	6862      	ldr	r2, [r4, #4]
 80118b0:	2100      	movs	r1, #0
 80118b2:	4630      	mov	r0, r6
 80118b4:	f7ee fd2c 	bl	8000310 <memchr>
 80118b8:	b108      	cbz	r0, 80118be <_printf_i+0x1e6>
 80118ba:	1b80      	subs	r0, r0, r6
 80118bc:	6060      	str	r0, [r4, #4]
 80118be:	6863      	ldr	r3, [r4, #4]
 80118c0:	6123      	str	r3, [r4, #16]
 80118c2:	2300      	movs	r3, #0
 80118c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118c8:	e7aa      	b.n	8011820 <_printf_i+0x148>
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	4632      	mov	r2, r6
 80118ce:	4649      	mov	r1, r9
 80118d0:	4640      	mov	r0, r8
 80118d2:	47d0      	blx	sl
 80118d4:	3001      	adds	r0, #1
 80118d6:	d0ad      	beq.n	8011834 <_printf_i+0x15c>
 80118d8:	6823      	ldr	r3, [r4, #0]
 80118da:	079b      	lsls	r3, r3, #30
 80118dc:	d413      	bmi.n	8011906 <_printf_i+0x22e>
 80118de:	68e0      	ldr	r0, [r4, #12]
 80118e0:	9b03      	ldr	r3, [sp, #12]
 80118e2:	4298      	cmp	r0, r3
 80118e4:	bfb8      	it	lt
 80118e6:	4618      	movlt	r0, r3
 80118e8:	e7a6      	b.n	8011838 <_printf_i+0x160>
 80118ea:	2301      	movs	r3, #1
 80118ec:	4632      	mov	r2, r6
 80118ee:	4649      	mov	r1, r9
 80118f0:	4640      	mov	r0, r8
 80118f2:	47d0      	blx	sl
 80118f4:	3001      	adds	r0, #1
 80118f6:	d09d      	beq.n	8011834 <_printf_i+0x15c>
 80118f8:	3501      	adds	r5, #1
 80118fa:	68e3      	ldr	r3, [r4, #12]
 80118fc:	9903      	ldr	r1, [sp, #12]
 80118fe:	1a5b      	subs	r3, r3, r1
 8011900:	42ab      	cmp	r3, r5
 8011902:	dcf2      	bgt.n	80118ea <_printf_i+0x212>
 8011904:	e7eb      	b.n	80118de <_printf_i+0x206>
 8011906:	2500      	movs	r5, #0
 8011908:	f104 0619 	add.w	r6, r4, #25
 801190c:	e7f5      	b.n	80118fa <_printf_i+0x222>
 801190e:	bf00      	nop
 8011910:	08013e1e 	.word	0x08013e1e
 8011914:	08013e2f 	.word	0x08013e2f

08011918 <std>:
 8011918:	2300      	movs	r3, #0
 801191a:	b510      	push	{r4, lr}
 801191c:	4604      	mov	r4, r0
 801191e:	e9c0 3300 	strd	r3, r3, [r0]
 8011922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011926:	6083      	str	r3, [r0, #8]
 8011928:	8181      	strh	r1, [r0, #12]
 801192a:	6643      	str	r3, [r0, #100]	@ 0x64
 801192c:	81c2      	strh	r2, [r0, #14]
 801192e:	6183      	str	r3, [r0, #24]
 8011930:	4619      	mov	r1, r3
 8011932:	2208      	movs	r2, #8
 8011934:	305c      	adds	r0, #92	@ 0x5c
 8011936:	f000 f928 	bl	8011b8a <memset>
 801193a:	4b0d      	ldr	r3, [pc, #52]	@ (8011970 <std+0x58>)
 801193c:	6263      	str	r3, [r4, #36]	@ 0x24
 801193e:	4b0d      	ldr	r3, [pc, #52]	@ (8011974 <std+0x5c>)
 8011940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011942:	4b0d      	ldr	r3, [pc, #52]	@ (8011978 <std+0x60>)
 8011944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011946:	4b0d      	ldr	r3, [pc, #52]	@ (801197c <std+0x64>)
 8011948:	6323      	str	r3, [r4, #48]	@ 0x30
 801194a:	4b0d      	ldr	r3, [pc, #52]	@ (8011980 <std+0x68>)
 801194c:	6224      	str	r4, [r4, #32]
 801194e:	429c      	cmp	r4, r3
 8011950:	d006      	beq.n	8011960 <std+0x48>
 8011952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011956:	4294      	cmp	r4, r2
 8011958:	d002      	beq.n	8011960 <std+0x48>
 801195a:	33d0      	adds	r3, #208	@ 0xd0
 801195c:	429c      	cmp	r4, r3
 801195e:	d105      	bne.n	801196c <std+0x54>
 8011960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011968:	f000 b9e2 	b.w	8011d30 <__retarget_lock_init_recursive>
 801196c:	bd10      	pop	{r4, pc}
 801196e:	bf00      	nop
 8011970:	08011b05 	.word	0x08011b05
 8011974:	08011b27 	.word	0x08011b27
 8011978:	08011b5f 	.word	0x08011b5f
 801197c:	08011b83 	.word	0x08011b83
 8011980:	240055a8 	.word	0x240055a8

08011984 <stdio_exit_handler>:
 8011984:	4a02      	ldr	r2, [pc, #8]	@ (8011990 <stdio_exit_handler+0xc>)
 8011986:	4903      	ldr	r1, [pc, #12]	@ (8011994 <stdio_exit_handler+0x10>)
 8011988:	4803      	ldr	r0, [pc, #12]	@ (8011998 <stdio_exit_handler+0x14>)
 801198a:	f000 b869 	b.w	8011a60 <_fwalk_sglue>
 801198e:	bf00      	nop
 8011990:	24000018 	.word	0x24000018
 8011994:	080135d1 	.word	0x080135d1
 8011998:	24000028 	.word	0x24000028

0801199c <cleanup_stdio>:
 801199c:	6841      	ldr	r1, [r0, #4]
 801199e:	4b0c      	ldr	r3, [pc, #48]	@ (80119d0 <cleanup_stdio+0x34>)
 80119a0:	4299      	cmp	r1, r3
 80119a2:	b510      	push	{r4, lr}
 80119a4:	4604      	mov	r4, r0
 80119a6:	d001      	beq.n	80119ac <cleanup_stdio+0x10>
 80119a8:	f001 fe12 	bl	80135d0 <_fflush_r>
 80119ac:	68a1      	ldr	r1, [r4, #8]
 80119ae:	4b09      	ldr	r3, [pc, #36]	@ (80119d4 <cleanup_stdio+0x38>)
 80119b0:	4299      	cmp	r1, r3
 80119b2:	d002      	beq.n	80119ba <cleanup_stdio+0x1e>
 80119b4:	4620      	mov	r0, r4
 80119b6:	f001 fe0b 	bl	80135d0 <_fflush_r>
 80119ba:	68e1      	ldr	r1, [r4, #12]
 80119bc:	4b06      	ldr	r3, [pc, #24]	@ (80119d8 <cleanup_stdio+0x3c>)
 80119be:	4299      	cmp	r1, r3
 80119c0:	d004      	beq.n	80119cc <cleanup_stdio+0x30>
 80119c2:	4620      	mov	r0, r4
 80119c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119c8:	f001 be02 	b.w	80135d0 <_fflush_r>
 80119cc:	bd10      	pop	{r4, pc}
 80119ce:	bf00      	nop
 80119d0:	240055a8 	.word	0x240055a8
 80119d4:	24005610 	.word	0x24005610
 80119d8:	24005678 	.word	0x24005678

080119dc <global_stdio_init.part.0>:
 80119dc:	b510      	push	{r4, lr}
 80119de:	4b0b      	ldr	r3, [pc, #44]	@ (8011a0c <global_stdio_init.part.0+0x30>)
 80119e0:	4c0b      	ldr	r4, [pc, #44]	@ (8011a10 <global_stdio_init.part.0+0x34>)
 80119e2:	4a0c      	ldr	r2, [pc, #48]	@ (8011a14 <global_stdio_init.part.0+0x38>)
 80119e4:	601a      	str	r2, [r3, #0]
 80119e6:	4620      	mov	r0, r4
 80119e8:	2200      	movs	r2, #0
 80119ea:	2104      	movs	r1, #4
 80119ec:	f7ff ff94 	bl	8011918 <std>
 80119f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80119f4:	2201      	movs	r2, #1
 80119f6:	2109      	movs	r1, #9
 80119f8:	f7ff ff8e 	bl	8011918 <std>
 80119fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a00:	2202      	movs	r2, #2
 8011a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a06:	2112      	movs	r1, #18
 8011a08:	f7ff bf86 	b.w	8011918 <std>
 8011a0c:	240056e0 	.word	0x240056e0
 8011a10:	240055a8 	.word	0x240055a8
 8011a14:	08011985 	.word	0x08011985

08011a18 <__sfp_lock_acquire>:
 8011a18:	4801      	ldr	r0, [pc, #4]	@ (8011a20 <__sfp_lock_acquire+0x8>)
 8011a1a:	f000 b98a 	b.w	8011d32 <__retarget_lock_acquire_recursive>
 8011a1e:	bf00      	nop
 8011a20:	240056e9 	.word	0x240056e9

08011a24 <__sfp_lock_release>:
 8011a24:	4801      	ldr	r0, [pc, #4]	@ (8011a2c <__sfp_lock_release+0x8>)
 8011a26:	f000 b985 	b.w	8011d34 <__retarget_lock_release_recursive>
 8011a2a:	bf00      	nop
 8011a2c:	240056e9 	.word	0x240056e9

08011a30 <__sinit>:
 8011a30:	b510      	push	{r4, lr}
 8011a32:	4604      	mov	r4, r0
 8011a34:	f7ff fff0 	bl	8011a18 <__sfp_lock_acquire>
 8011a38:	6a23      	ldr	r3, [r4, #32]
 8011a3a:	b11b      	cbz	r3, 8011a44 <__sinit+0x14>
 8011a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a40:	f7ff bff0 	b.w	8011a24 <__sfp_lock_release>
 8011a44:	4b04      	ldr	r3, [pc, #16]	@ (8011a58 <__sinit+0x28>)
 8011a46:	6223      	str	r3, [r4, #32]
 8011a48:	4b04      	ldr	r3, [pc, #16]	@ (8011a5c <__sinit+0x2c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d1f5      	bne.n	8011a3c <__sinit+0xc>
 8011a50:	f7ff ffc4 	bl	80119dc <global_stdio_init.part.0>
 8011a54:	e7f2      	b.n	8011a3c <__sinit+0xc>
 8011a56:	bf00      	nop
 8011a58:	0801199d 	.word	0x0801199d
 8011a5c:	240056e0 	.word	0x240056e0

08011a60 <_fwalk_sglue>:
 8011a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011a64:	4607      	mov	r7, r0
 8011a66:	4688      	mov	r8, r1
 8011a68:	4614      	mov	r4, r2
 8011a6a:	2600      	movs	r6, #0
 8011a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011a70:	f1b9 0901 	subs.w	r9, r9, #1
 8011a74:	d505      	bpl.n	8011a82 <_fwalk_sglue+0x22>
 8011a76:	6824      	ldr	r4, [r4, #0]
 8011a78:	2c00      	cmp	r4, #0
 8011a7a:	d1f7      	bne.n	8011a6c <_fwalk_sglue+0xc>
 8011a7c:	4630      	mov	r0, r6
 8011a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011a82:	89ab      	ldrh	r3, [r5, #12]
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d907      	bls.n	8011a98 <_fwalk_sglue+0x38>
 8011a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011a8c:	3301      	adds	r3, #1
 8011a8e:	d003      	beq.n	8011a98 <_fwalk_sglue+0x38>
 8011a90:	4629      	mov	r1, r5
 8011a92:	4638      	mov	r0, r7
 8011a94:	47c0      	blx	r8
 8011a96:	4306      	orrs	r6, r0
 8011a98:	3568      	adds	r5, #104	@ 0x68
 8011a9a:	e7e9      	b.n	8011a70 <_fwalk_sglue+0x10>

08011a9c <sniprintf>:
 8011a9c:	b40c      	push	{r2, r3}
 8011a9e:	b530      	push	{r4, r5, lr}
 8011aa0:	4b17      	ldr	r3, [pc, #92]	@ (8011b00 <sniprintf+0x64>)
 8011aa2:	1e0c      	subs	r4, r1, #0
 8011aa4:	681d      	ldr	r5, [r3, #0]
 8011aa6:	b09d      	sub	sp, #116	@ 0x74
 8011aa8:	da08      	bge.n	8011abc <sniprintf+0x20>
 8011aaa:	238b      	movs	r3, #139	@ 0x8b
 8011aac:	602b      	str	r3, [r5, #0]
 8011aae:	f04f 30ff 	mov.w	r0, #4294967295
 8011ab2:	b01d      	add	sp, #116	@ 0x74
 8011ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ab8:	b002      	add	sp, #8
 8011aba:	4770      	bx	lr
 8011abc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ac4:	bf14      	ite	ne
 8011ac6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011aca:	4623      	moveq	r3, r4
 8011acc:	9304      	str	r3, [sp, #16]
 8011ace:	9307      	str	r3, [sp, #28]
 8011ad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011ad4:	9002      	str	r0, [sp, #8]
 8011ad6:	9006      	str	r0, [sp, #24]
 8011ad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011adc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011ade:	ab21      	add	r3, sp, #132	@ 0x84
 8011ae0:	a902      	add	r1, sp, #8
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	f001 fbf3 	bl	80132d0 <_svfiprintf_r>
 8011aea:	1c43      	adds	r3, r0, #1
 8011aec:	bfbc      	itt	lt
 8011aee:	238b      	movlt	r3, #139	@ 0x8b
 8011af0:	602b      	strlt	r3, [r5, #0]
 8011af2:	2c00      	cmp	r4, #0
 8011af4:	d0dd      	beq.n	8011ab2 <sniprintf+0x16>
 8011af6:	9b02      	ldr	r3, [sp, #8]
 8011af8:	2200      	movs	r2, #0
 8011afa:	701a      	strb	r2, [r3, #0]
 8011afc:	e7d9      	b.n	8011ab2 <sniprintf+0x16>
 8011afe:	bf00      	nop
 8011b00:	24000024 	.word	0x24000024

08011b04 <__sread>:
 8011b04:	b510      	push	{r4, lr}
 8011b06:	460c      	mov	r4, r1
 8011b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b0c:	f000 f8c2 	bl	8011c94 <_read_r>
 8011b10:	2800      	cmp	r0, #0
 8011b12:	bfab      	itete	ge
 8011b14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011b16:	89a3      	ldrhlt	r3, [r4, #12]
 8011b18:	181b      	addge	r3, r3, r0
 8011b1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011b1e:	bfac      	ite	ge
 8011b20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011b22:	81a3      	strhlt	r3, [r4, #12]
 8011b24:	bd10      	pop	{r4, pc}

08011b26 <__swrite>:
 8011b26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b2a:	461f      	mov	r7, r3
 8011b2c:	898b      	ldrh	r3, [r1, #12]
 8011b2e:	05db      	lsls	r3, r3, #23
 8011b30:	4605      	mov	r5, r0
 8011b32:	460c      	mov	r4, r1
 8011b34:	4616      	mov	r6, r2
 8011b36:	d505      	bpl.n	8011b44 <__swrite+0x1e>
 8011b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b3c:	2302      	movs	r3, #2
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f000 f896 	bl	8011c70 <_lseek_r>
 8011b44:	89a3      	ldrh	r3, [r4, #12]
 8011b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011b4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011b4e:	81a3      	strh	r3, [r4, #12]
 8011b50:	4632      	mov	r2, r6
 8011b52:	463b      	mov	r3, r7
 8011b54:	4628      	mov	r0, r5
 8011b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5a:	f000 b8ad 	b.w	8011cb8 <_write_r>

08011b5e <__sseek>:
 8011b5e:	b510      	push	{r4, lr}
 8011b60:	460c      	mov	r4, r1
 8011b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b66:	f000 f883 	bl	8011c70 <_lseek_r>
 8011b6a:	1c43      	adds	r3, r0, #1
 8011b6c:	89a3      	ldrh	r3, [r4, #12]
 8011b6e:	bf15      	itete	ne
 8011b70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011b72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011b76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011b7a:	81a3      	strheq	r3, [r4, #12]
 8011b7c:	bf18      	it	ne
 8011b7e:	81a3      	strhne	r3, [r4, #12]
 8011b80:	bd10      	pop	{r4, pc}

08011b82 <__sclose>:
 8011b82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b86:	f000 b80d 	b.w	8011ba4 <_close_r>

08011b8a <memset>:
 8011b8a:	4402      	add	r2, r0
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	4293      	cmp	r3, r2
 8011b90:	d100      	bne.n	8011b94 <memset+0xa>
 8011b92:	4770      	bx	lr
 8011b94:	f803 1b01 	strb.w	r1, [r3], #1
 8011b98:	e7f9      	b.n	8011b8e <memset+0x4>
	...

08011b9c <_localeconv_r>:
 8011b9c:	4800      	ldr	r0, [pc, #0]	@ (8011ba0 <_localeconv_r+0x4>)
 8011b9e:	4770      	bx	lr
 8011ba0:	24000164 	.word	0x24000164

08011ba4 <_close_r>:
 8011ba4:	b538      	push	{r3, r4, r5, lr}
 8011ba6:	4d06      	ldr	r5, [pc, #24]	@ (8011bc0 <_close_r+0x1c>)
 8011ba8:	2300      	movs	r3, #0
 8011baa:	4604      	mov	r4, r0
 8011bac:	4608      	mov	r0, r1
 8011bae:	602b      	str	r3, [r5, #0]
 8011bb0:	f7f0 fe74 	bl	800289c <_close>
 8011bb4:	1c43      	adds	r3, r0, #1
 8011bb6:	d102      	bne.n	8011bbe <_close_r+0x1a>
 8011bb8:	682b      	ldr	r3, [r5, #0]
 8011bba:	b103      	cbz	r3, 8011bbe <_close_r+0x1a>
 8011bbc:	6023      	str	r3, [r4, #0]
 8011bbe:	bd38      	pop	{r3, r4, r5, pc}
 8011bc0:	240056e4 	.word	0x240056e4

08011bc4 <_reclaim_reent>:
 8011bc4:	4b29      	ldr	r3, [pc, #164]	@ (8011c6c <_reclaim_reent+0xa8>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	4283      	cmp	r3, r0
 8011bca:	b570      	push	{r4, r5, r6, lr}
 8011bcc:	4604      	mov	r4, r0
 8011bce:	d04b      	beq.n	8011c68 <_reclaim_reent+0xa4>
 8011bd0:	69c3      	ldr	r3, [r0, #28]
 8011bd2:	b1ab      	cbz	r3, 8011c00 <_reclaim_reent+0x3c>
 8011bd4:	68db      	ldr	r3, [r3, #12]
 8011bd6:	b16b      	cbz	r3, 8011bf4 <_reclaim_reent+0x30>
 8011bd8:	2500      	movs	r5, #0
 8011bda:	69e3      	ldr	r3, [r4, #28]
 8011bdc:	68db      	ldr	r3, [r3, #12]
 8011bde:	5959      	ldr	r1, [r3, r5]
 8011be0:	2900      	cmp	r1, #0
 8011be2:	d13b      	bne.n	8011c5c <_reclaim_reent+0x98>
 8011be4:	3504      	adds	r5, #4
 8011be6:	2d80      	cmp	r5, #128	@ 0x80
 8011be8:	d1f7      	bne.n	8011bda <_reclaim_reent+0x16>
 8011bea:	69e3      	ldr	r3, [r4, #28]
 8011bec:	4620      	mov	r0, r4
 8011bee:	68d9      	ldr	r1, [r3, #12]
 8011bf0:	f000 fe90 	bl	8012914 <_free_r>
 8011bf4:	69e3      	ldr	r3, [r4, #28]
 8011bf6:	6819      	ldr	r1, [r3, #0]
 8011bf8:	b111      	cbz	r1, 8011c00 <_reclaim_reent+0x3c>
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	f000 fe8a 	bl	8012914 <_free_r>
 8011c00:	6961      	ldr	r1, [r4, #20]
 8011c02:	b111      	cbz	r1, 8011c0a <_reclaim_reent+0x46>
 8011c04:	4620      	mov	r0, r4
 8011c06:	f000 fe85 	bl	8012914 <_free_r>
 8011c0a:	69e1      	ldr	r1, [r4, #28]
 8011c0c:	b111      	cbz	r1, 8011c14 <_reclaim_reent+0x50>
 8011c0e:	4620      	mov	r0, r4
 8011c10:	f000 fe80 	bl	8012914 <_free_r>
 8011c14:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8011c16:	b111      	cbz	r1, 8011c1e <_reclaim_reent+0x5a>
 8011c18:	4620      	mov	r0, r4
 8011c1a:	f000 fe7b 	bl	8012914 <_free_r>
 8011c1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c20:	b111      	cbz	r1, 8011c28 <_reclaim_reent+0x64>
 8011c22:	4620      	mov	r0, r4
 8011c24:	f000 fe76 	bl	8012914 <_free_r>
 8011c28:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8011c2a:	b111      	cbz	r1, 8011c32 <_reclaim_reent+0x6e>
 8011c2c:	4620      	mov	r0, r4
 8011c2e:	f000 fe71 	bl	8012914 <_free_r>
 8011c32:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8011c34:	b111      	cbz	r1, 8011c3c <_reclaim_reent+0x78>
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 fe6c 	bl	8012914 <_free_r>
 8011c3c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8011c3e:	b111      	cbz	r1, 8011c46 <_reclaim_reent+0x82>
 8011c40:	4620      	mov	r0, r4
 8011c42:	f000 fe67 	bl	8012914 <_free_r>
 8011c46:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011c48:	b111      	cbz	r1, 8011c50 <_reclaim_reent+0x8c>
 8011c4a:	4620      	mov	r0, r4
 8011c4c:	f000 fe62 	bl	8012914 <_free_r>
 8011c50:	6a23      	ldr	r3, [r4, #32]
 8011c52:	b14b      	cbz	r3, 8011c68 <_reclaim_reent+0xa4>
 8011c54:	4620      	mov	r0, r4
 8011c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011c5a:	4718      	bx	r3
 8011c5c:	680e      	ldr	r6, [r1, #0]
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f000 fe58 	bl	8012914 <_free_r>
 8011c64:	4631      	mov	r1, r6
 8011c66:	e7bb      	b.n	8011be0 <_reclaim_reent+0x1c>
 8011c68:	bd70      	pop	{r4, r5, r6, pc}
 8011c6a:	bf00      	nop
 8011c6c:	24000024 	.word	0x24000024

08011c70 <_lseek_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d07      	ldr	r5, [pc, #28]	@ (8011c90 <_lseek_r+0x20>)
 8011c74:	4604      	mov	r4, r0
 8011c76:	4608      	mov	r0, r1
 8011c78:	4611      	mov	r1, r2
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	602a      	str	r2, [r5, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	f7f0 fe33 	bl	80028ea <_lseek>
 8011c84:	1c43      	adds	r3, r0, #1
 8011c86:	d102      	bne.n	8011c8e <_lseek_r+0x1e>
 8011c88:	682b      	ldr	r3, [r5, #0]
 8011c8a:	b103      	cbz	r3, 8011c8e <_lseek_r+0x1e>
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	bd38      	pop	{r3, r4, r5, pc}
 8011c90:	240056e4 	.word	0x240056e4

08011c94 <_read_r>:
 8011c94:	b538      	push	{r3, r4, r5, lr}
 8011c96:	4d07      	ldr	r5, [pc, #28]	@ (8011cb4 <_read_r+0x20>)
 8011c98:	4604      	mov	r4, r0
 8011c9a:	4608      	mov	r0, r1
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	602a      	str	r2, [r5, #0]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	f7f0 fdc1 	bl	800282a <_read>
 8011ca8:	1c43      	adds	r3, r0, #1
 8011caa:	d102      	bne.n	8011cb2 <_read_r+0x1e>
 8011cac:	682b      	ldr	r3, [r5, #0]
 8011cae:	b103      	cbz	r3, 8011cb2 <_read_r+0x1e>
 8011cb0:	6023      	str	r3, [r4, #0]
 8011cb2:	bd38      	pop	{r3, r4, r5, pc}
 8011cb4:	240056e4 	.word	0x240056e4

08011cb8 <_write_r>:
 8011cb8:	b538      	push	{r3, r4, r5, lr}
 8011cba:	4d07      	ldr	r5, [pc, #28]	@ (8011cd8 <_write_r+0x20>)
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	4608      	mov	r0, r1
 8011cc0:	4611      	mov	r1, r2
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	602a      	str	r2, [r5, #0]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f7f0 fdcc 	bl	8002864 <_write>
 8011ccc:	1c43      	adds	r3, r0, #1
 8011cce:	d102      	bne.n	8011cd6 <_write_r+0x1e>
 8011cd0:	682b      	ldr	r3, [r5, #0]
 8011cd2:	b103      	cbz	r3, 8011cd6 <_write_r+0x1e>
 8011cd4:	6023      	str	r3, [r4, #0]
 8011cd6:	bd38      	pop	{r3, r4, r5, pc}
 8011cd8:	240056e4 	.word	0x240056e4

08011cdc <__errno>:
 8011cdc:	4b01      	ldr	r3, [pc, #4]	@ (8011ce4 <__errno+0x8>)
 8011cde:	6818      	ldr	r0, [r3, #0]
 8011ce0:	4770      	bx	lr
 8011ce2:	bf00      	nop
 8011ce4:	24000024 	.word	0x24000024

08011ce8 <__libc_init_array>:
 8011ce8:	b570      	push	{r4, r5, r6, lr}
 8011cea:	4d0d      	ldr	r5, [pc, #52]	@ (8011d20 <__libc_init_array+0x38>)
 8011cec:	4c0d      	ldr	r4, [pc, #52]	@ (8011d24 <__libc_init_array+0x3c>)
 8011cee:	1b64      	subs	r4, r4, r5
 8011cf0:	10a4      	asrs	r4, r4, #2
 8011cf2:	2600      	movs	r6, #0
 8011cf4:	42a6      	cmp	r6, r4
 8011cf6:	d109      	bne.n	8011d0c <__libc_init_array+0x24>
 8011cf8:	4d0b      	ldr	r5, [pc, #44]	@ (8011d28 <__libc_init_array+0x40>)
 8011cfa:	4c0c      	ldr	r4, [pc, #48]	@ (8011d2c <__libc_init_array+0x44>)
 8011cfc:	f001 fff8 	bl	8013cf0 <_init>
 8011d00:	1b64      	subs	r4, r4, r5
 8011d02:	10a4      	asrs	r4, r4, #2
 8011d04:	2600      	movs	r6, #0
 8011d06:	42a6      	cmp	r6, r4
 8011d08:	d105      	bne.n	8011d16 <__libc_init_array+0x2e>
 8011d0a:	bd70      	pop	{r4, r5, r6, pc}
 8011d0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d10:	4798      	blx	r3
 8011d12:	3601      	adds	r6, #1
 8011d14:	e7ee      	b.n	8011cf4 <__libc_init_array+0xc>
 8011d16:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d1a:	4798      	blx	r3
 8011d1c:	3601      	adds	r6, #1
 8011d1e:	e7f2      	b.n	8011d06 <__libc_init_array+0x1e>
 8011d20:	08014188 	.word	0x08014188
 8011d24:	08014188 	.word	0x08014188
 8011d28:	08014188 	.word	0x08014188
 8011d2c:	0801418c 	.word	0x0801418c

08011d30 <__retarget_lock_init_recursive>:
 8011d30:	4770      	bx	lr

08011d32 <__retarget_lock_acquire_recursive>:
 8011d32:	4770      	bx	lr

08011d34 <__retarget_lock_release_recursive>:
 8011d34:	4770      	bx	lr

08011d36 <memcpy>:
 8011d36:	440a      	add	r2, r1
 8011d38:	4291      	cmp	r1, r2
 8011d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d3e:	d100      	bne.n	8011d42 <memcpy+0xc>
 8011d40:	4770      	bx	lr
 8011d42:	b510      	push	{r4, lr}
 8011d44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d4c:	4291      	cmp	r1, r2
 8011d4e:	d1f9      	bne.n	8011d44 <memcpy+0xe>
 8011d50:	bd10      	pop	{r4, pc}

08011d52 <quorem>:
 8011d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d56:	6903      	ldr	r3, [r0, #16]
 8011d58:	690c      	ldr	r4, [r1, #16]
 8011d5a:	42a3      	cmp	r3, r4
 8011d5c:	4607      	mov	r7, r0
 8011d5e:	db7e      	blt.n	8011e5e <quorem+0x10c>
 8011d60:	3c01      	subs	r4, #1
 8011d62:	f101 0814 	add.w	r8, r1, #20
 8011d66:	00a3      	lsls	r3, r4, #2
 8011d68:	f100 0514 	add.w	r5, r0, #20
 8011d6c:	9300      	str	r3, [sp, #0]
 8011d6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d72:	9301      	str	r3, [sp, #4]
 8011d74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d7c:	3301      	adds	r3, #1
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8011d88:	d32e      	bcc.n	8011de8 <quorem+0x96>
 8011d8a:	f04f 0a00 	mov.w	sl, #0
 8011d8e:	46c4      	mov	ip, r8
 8011d90:	46ae      	mov	lr, r5
 8011d92:	46d3      	mov	fp, sl
 8011d94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011d98:	b298      	uxth	r0, r3
 8011d9a:	fb06 a000 	mla	r0, r6, r0, sl
 8011d9e:	0c02      	lsrs	r2, r0, #16
 8011da0:	0c1b      	lsrs	r3, r3, #16
 8011da2:	fb06 2303 	mla	r3, r6, r3, r2
 8011da6:	f8de 2000 	ldr.w	r2, [lr]
 8011daa:	b280      	uxth	r0, r0
 8011dac:	b292      	uxth	r2, r2
 8011dae:	1a12      	subs	r2, r2, r0
 8011db0:	445a      	add	r2, fp
 8011db2:	f8de 0000 	ldr.w	r0, [lr]
 8011db6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011dba:	b29b      	uxth	r3, r3
 8011dbc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011dc0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011dc4:	b292      	uxth	r2, r2
 8011dc6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011dca:	45e1      	cmp	r9, ip
 8011dcc:	f84e 2b04 	str.w	r2, [lr], #4
 8011dd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011dd4:	d2de      	bcs.n	8011d94 <quorem+0x42>
 8011dd6:	9b00      	ldr	r3, [sp, #0]
 8011dd8:	58eb      	ldr	r3, [r5, r3]
 8011dda:	b92b      	cbnz	r3, 8011de8 <quorem+0x96>
 8011ddc:	9b01      	ldr	r3, [sp, #4]
 8011dde:	3b04      	subs	r3, #4
 8011de0:	429d      	cmp	r5, r3
 8011de2:	461a      	mov	r2, r3
 8011de4:	d32f      	bcc.n	8011e46 <quorem+0xf4>
 8011de6:	613c      	str	r4, [r7, #16]
 8011de8:	4638      	mov	r0, r7
 8011dea:	f001 f90d 	bl	8013008 <__mcmp>
 8011dee:	2800      	cmp	r0, #0
 8011df0:	db25      	blt.n	8011e3e <quorem+0xec>
 8011df2:	4629      	mov	r1, r5
 8011df4:	2000      	movs	r0, #0
 8011df6:	f858 2b04 	ldr.w	r2, [r8], #4
 8011dfa:	f8d1 c000 	ldr.w	ip, [r1]
 8011dfe:	fa1f fe82 	uxth.w	lr, r2
 8011e02:	fa1f f38c 	uxth.w	r3, ip
 8011e06:	eba3 030e 	sub.w	r3, r3, lr
 8011e0a:	4403      	add	r3, r0
 8011e0c:	0c12      	lsrs	r2, r2, #16
 8011e0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011e12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e1c:	45c1      	cmp	r9, r8
 8011e1e:	f841 3b04 	str.w	r3, [r1], #4
 8011e22:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011e26:	d2e6      	bcs.n	8011df6 <quorem+0xa4>
 8011e28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e30:	b922      	cbnz	r2, 8011e3c <quorem+0xea>
 8011e32:	3b04      	subs	r3, #4
 8011e34:	429d      	cmp	r5, r3
 8011e36:	461a      	mov	r2, r3
 8011e38:	d30b      	bcc.n	8011e52 <quorem+0x100>
 8011e3a:	613c      	str	r4, [r7, #16]
 8011e3c:	3601      	adds	r6, #1
 8011e3e:	4630      	mov	r0, r6
 8011e40:	b003      	add	sp, #12
 8011e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e46:	6812      	ldr	r2, [r2, #0]
 8011e48:	3b04      	subs	r3, #4
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	d1cb      	bne.n	8011de6 <quorem+0x94>
 8011e4e:	3c01      	subs	r4, #1
 8011e50:	e7c6      	b.n	8011de0 <quorem+0x8e>
 8011e52:	6812      	ldr	r2, [r2, #0]
 8011e54:	3b04      	subs	r3, #4
 8011e56:	2a00      	cmp	r2, #0
 8011e58:	d1ef      	bne.n	8011e3a <quorem+0xe8>
 8011e5a:	3c01      	subs	r4, #1
 8011e5c:	e7ea      	b.n	8011e34 <quorem+0xe2>
 8011e5e:	2000      	movs	r0, #0
 8011e60:	e7ee      	b.n	8011e40 <quorem+0xee>
 8011e62:	0000      	movs	r0, r0
 8011e64:	0000      	movs	r0, r0
	...

08011e68 <_dtoa_r>:
 8011e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	ed2d 8b02 	vpush	{d8}
 8011e70:	69c7      	ldr	r7, [r0, #28]
 8011e72:	b091      	sub	sp, #68	@ 0x44
 8011e74:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011e78:	ec55 4b10 	vmov	r4, r5, d0
 8011e7c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8011e7e:	9107      	str	r1, [sp, #28]
 8011e80:	4681      	mov	r9, r0
 8011e82:	9209      	str	r2, [sp, #36]	@ 0x24
 8011e84:	930d      	str	r3, [sp, #52]	@ 0x34
 8011e86:	b97f      	cbnz	r7, 8011ea8 <_dtoa_r+0x40>
 8011e88:	2010      	movs	r0, #16
 8011e8a:	f000 fd8d 	bl	80129a8 <malloc>
 8011e8e:	4602      	mov	r2, r0
 8011e90:	f8c9 001c 	str.w	r0, [r9, #28]
 8011e94:	b920      	cbnz	r0, 8011ea0 <_dtoa_r+0x38>
 8011e96:	4ba0      	ldr	r3, [pc, #640]	@ (8012118 <_dtoa_r+0x2b0>)
 8011e98:	21ef      	movs	r1, #239	@ 0xef
 8011e9a:	48a0      	ldr	r0, [pc, #640]	@ (801211c <_dtoa_r+0x2b4>)
 8011e9c:	f001 fbea 	bl	8013674 <__assert_func>
 8011ea0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011ea4:	6007      	str	r7, [r0, #0]
 8011ea6:	60c7      	str	r7, [r0, #12]
 8011ea8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011eac:	6819      	ldr	r1, [r3, #0]
 8011eae:	b159      	cbz	r1, 8011ec8 <_dtoa_r+0x60>
 8011eb0:	685a      	ldr	r2, [r3, #4]
 8011eb2:	604a      	str	r2, [r1, #4]
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	4093      	lsls	r3, r2
 8011eb8:	608b      	str	r3, [r1, #8]
 8011eba:	4648      	mov	r0, r9
 8011ebc:	f000 fe6a 	bl	8012b94 <_Bfree>
 8011ec0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	1e2b      	subs	r3, r5, #0
 8011eca:	bfbb      	ittet	lt
 8011ecc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011ed0:	9303      	strlt	r3, [sp, #12]
 8011ed2:	2300      	movge	r3, #0
 8011ed4:	2201      	movlt	r2, #1
 8011ed6:	bfac      	ite	ge
 8011ed8:	6033      	strge	r3, [r6, #0]
 8011eda:	6032      	strlt	r2, [r6, #0]
 8011edc:	4b90      	ldr	r3, [pc, #576]	@ (8012120 <_dtoa_r+0x2b8>)
 8011ede:	9e03      	ldr	r6, [sp, #12]
 8011ee0:	43b3      	bics	r3, r6
 8011ee2:	d110      	bne.n	8011f06 <_dtoa_r+0x9e>
 8011ee4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011ee6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011eea:	6013      	str	r3, [r2, #0]
 8011eec:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8011ef0:	4323      	orrs	r3, r4
 8011ef2:	f000 84de 	beq.w	80128b2 <_dtoa_r+0xa4a>
 8011ef6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011ef8:	4f8a      	ldr	r7, [pc, #552]	@ (8012124 <_dtoa_r+0x2bc>)
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	f000 84e0 	beq.w	80128c0 <_dtoa_r+0xa58>
 8011f00:	1cfb      	adds	r3, r7, #3
 8011f02:	f000 bcdb 	b.w	80128bc <_dtoa_r+0xa54>
 8011f06:	ed9d 8b02 	vldr	d8, [sp, #8]
 8011f0a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011f0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f12:	d10a      	bne.n	8011f2a <_dtoa_r+0xc2>
 8011f14:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8011f16:	2301      	movs	r3, #1
 8011f18:	6013      	str	r3, [r2, #0]
 8011f1a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8011f1c:	b113      	cbz	r3, 8011f24 <_dtoa_r+0xbc>
 8011f1e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8011f20:	4b81      	ldr	r3, [pc, #516]	@ (8012128 <_dtoa_r+0x2c0>)
 8011f22:	6013      	str	r3, [r2, #0]
 8011f24:	4f81      	ldr	r7, [pc, #516]	@ (801212c <_dtoa_r+0x2c4>)
 8011f26:	f000 bccb 	b.w	80128c0 <_dtoa_r+0xa58>
 8011f2a:	aa0e      	add	r2, sp, #56	@ 0x38
 8011f2c:	a90f      	add	r1, sp, #60	@ 0x3c
 8011f2e:	4648      	mov	r0, r9
 8011f30:	eeb0 0b48 	vmov.f64	d0, d8
 8011f34:	f001 f918 	bl	8013168 <__d2b>
 8011f38:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8011f3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011f3e:	9001      	str	r0, [sp, #4]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d045      	beq.n	8011fd0 <_dtoa_r+0x168>
 8011f44:	eeb0 7b48 	vmov.f64	d7, d8
 8011f48:	ee18 1a90 	vmov	r1, s17
 8011f4c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011f50:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8011f54:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8011f58:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8011f5c:	2500      	movs	r5, #0
 8011f5e:	ee07 1a90 	vmov	s15, r1
 8011f62:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8011f66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012100 <_dtoa_r+0x298>
 8011f6a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011f6e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012108 <_dtoa_r+0x2a0>
 8011f72:	eea7 6b05 	vfma.f64	d6, d7, d5
 8011f76:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012110 <_dtoa_r+0x2a8>
 8011f7a:	ee07 3a90 	vmov	s15, r3
 8011f7e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8011f82:	eeb0 7b46 	vmov.f64	d7, d6
 8011f86:	eea4 7b05 	vfma.f64	d7, d4, d5
 8011f8a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8011f8e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8011f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f96:	ee16 8a90 	vmov	r8, s13
 8011f9a:	d508      	bpl.n	8011fae <_dtoa_r+0x146>
 8011f9c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8011fa0:	eeb4 6b47 	vcmp.f64	d6, d7
 8011fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa8:	bf18      	it	ne
 8011faa:	f108 38ff 	addne.w	r8, r8, #4294967295
 8011fae:	f1b8 0f16 	cmp.w	r8, #22
 8011fb2:	d82b      	bhi.n	801200c <_dtoa_r+0x1a4>
 8011fb4:	495e      	ldr	r1, [pc, #376]	@ (8012130 <_dtoa_r+0x2c8>)
 8011fb6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8011fba:	ed91 7b00 	vldr	d7, [r1]
 8011fbe:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8011fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fc6:	d501      	bpl.n	8011fcc <_dtoa_r+0x164>
 8011fc8:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fcc:	2100      	movs	r1, #0
 8011fce:	e01e      	b.n	801200e <_dtoa_r+0x1a6>
 8011fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fd2:	4413      	add	r3, r2
 8011fd4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8011fd8:	2920      	cmp	r1, #32
 8011fda:	bfc1      	itttt	gt
 8011fdc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8011fe0:	408e      	lslgt	r6, r1
 8011fe2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8011fe6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8011fea:	bfd6      	itet	le
 8011fec:	f1c1 0120 	rsble	r1, r1, #32
 8011ff0:	4331      	orrgt	r1, r6
 8011ff2:	fa04 f101 	lslle.w	r1, r4, r1
 8011ff6:	ee07 1a90 	vmov	s15, r1
 8011ffa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8011ffe:	3b01      	subs	r3, #1
 8012000:	ee17 1a90 	vmov	r1, s15
 8012004:	2501      	movs	r5, #1
 8012006:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 801200a:	e7a8      	b.n	8011f5e <_dtoa_r+0xf6>
 801200c:	2101      	movs	r1, #1
 801200e:	1ad2      	subs	r2, r2, r3
 8012010:	1e53      	subs	r3, r2, #1
 8012012:	9306      	str	r3, [sp, #24]
 8012014:	bf45      	ittet	mi
 8012016:	f1c2 0301 	rsbmi	r3, r2, #1
 801201a:	9305      	strmi	r3, [sp, #20]
 801201c:	2300      	movpl	r3, #0
 801201e:	2300      	movmi	r3, #0
 8012020:	bf4c      	ite	mi
 8012022:	9306      	strmi	r3, [sp, #24]
 8012024:	9305      	strpl	r3, [sp, #20]
 8012026:	f1b8 0f00 	cmp.w	r8, #0
 801202a:	910c      	str	r1, [sp, #48]	@ 0x30
 801202c:	db18      	blt.n	8012060 <_dtoa_r+0x1f8>
 801202e:	9b06      	ldr	r3, [sp, #24]
 8012030:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012034:	4443      	add	r3, r8
 8012036:	9306      	str	r3, [sp, #24]
 8012038:	2300      	movs	r3, #0
 801203a:	9a07      	ldr	r2, [sp, #28]
 801203c:	2a09      	cmp	r2, #9
 801203e:	d849      	bhi.n	80120d4 <_dtoa_r+0x26c>
 8012040:	2a05      	cmp	r2, #5
 8012042:	bfc4      	itt	gt
 8012044:	3a04      	subgt	r2, #4
 8012046:	9207      	strgt	r2, [sp, #28]
 8012048:	9a07      	ldr	r2, [sp, #28]
 801204a:	f1a2 0202 	sub.w	r2, r2, #2
 801204e:	bfcc      	ite	gt
 8012050:	2400      	movgt	r4, #0
 8012052:	2401      	movle	r4, #1
 8012054:	2a03      	cmp	r2, #3
 8012056:	d848      	bhi.n	80120ea <_dtoa_r+0x282>
 8012058:	e8df f002 	tbb	[pc, r2]
 801205c:	3a2c2e0b 	.word	0x3a2c2e0b
 8012060:	9b05      	ldr	r3, [sp, #20]
 8012062:	2200      	movs	r2, #0
 8012064:	eba3 0308 	sub.w	r3, r3, r8
 8012068:	9305      	str	r3, [sp, #20]
 801206a:	920a      	str	r2, [sp, #40]	@ 0x28
 801206c:	f1c8 0300 	rsb	r3, r8, #0
 8012070:	e7e3      	b.n	801203a <_dtoa_r+0x1d2>
 8012072:	2200      	movs	r2, #0
 8012074:	9208      	str	r2, [sp, #32]
 8012076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012078:	2a00      	cmp	r2, #0
 801207a:	dc39      	bgt.n	80120f0 <_dtoa_r+0x288>
 801207c:	f04f 0b01 	mov.w	fp, #1
 8012080:	46da      	mov	sl, fp
 8012082:	465a      	mov	r2, fp
 8012084:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012088:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801208c:	2100      	movs	r1, #0
 801208e:	2004      	movs	r0, #4
 8012090:	f100 0614 	add.w	r6, r0, #20
 8012094:	4296      	cmp	r6, r2
 8012096:	d930      	bls.n	80120fa <_dtoa_r+0x292>
 8012098:	6079      	str	r1, [r7, #4]
 801209a:	4648      	mov	r0, r9
 801209c:	9304      	str	r3, [sp, #16]
 801209e:	f000 fd39 	bl	8012b14 <_Balloc>
 80120a2:	9b04      	ldr	r3, [sp, #16]
 80120a4:	4607      	mov	r7, r0
 80120a6:	2800      	cmp	r0, #0
 80120a8:	d146      	bne.n	8012138 <_dtoa_r+0x2d0>
 80120aa:	4b22      	ldr	r3, [pc, #136]	@ (8012134 <_dtoa_r+0x2cc>)
 80120ac:	4602      	mov	r2, r0
 80120ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80120b2:	e6f2      	b.n	8011e9a <_dtoa_r+0x32>
 80120b4:	2201      	movs	r2, #1
 80120b6:	e7dd      	b.n	8012074 <_dtoa_r+0x20c>
 80120b8:	2200      	movs	r2, #0
 80120ba:	9208      	str	r2, [sp, #32]
 80120bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80120be:	eb08 0b02 	add.w	fp, r8, r2
 80120c2:	f10b 0a01 	add.w	sl, fp, #1
 80120c6:	4652      	mov	r2, sl
 80120c8:	2a01      	cmp	r2, #1
 80120ca:	bfb8      	it	lt
 80120cc:	2201      	movlt	r2, #1
 80120ce:	e7db      	b.n	8012088 <_dtoa_r+0x220>
 80120d0:	2201      	movs	r2, #1
 80120d2:	e7f2      	b.n	80120ba <_dtoa_r+0x252>
 80120d4:	2401      	movs	r4, #1
 80120d6:	2200      	movs	r2, #0
 80120d8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80120dc:	f04f 3bff 	mov.w	fp, #4294967295
 80120e0:	2100      	movs	r1, #0
 80120e2:	46da      	mov	sl, fp
 80120e4:	2212      	movs	r2, #18
 80120e6:	9109      	str	r1, [sp, #36]	@ 0x24
 80120e8:	e7ce      	b.n	8012088 <_dtoa_r+0x220>
 80120ea:	2201      	movs	r2, #1
 80120ec:	9208      	str	r2, [sp, #32]
 80120ee:	e7f5      	b.n	80120dc <_dtoa_r+0x274>
 80120f0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80120f4:	46da      	mov	sl, fp
 80120f6:	465a      	mov	r2, fp
 80120f8:	e7c6      	b.n	8012088 <_dtoa_r+0x220>
 80120fa:	3101      	adds	r1, #1
 80120fc:	0040      	lsls	r0, r0, #1
 80120fe:	e7c7      	b.n	8012090 <_dtoa_r+0x228>
 8012100:	636f4361 	.word	0x636f4361
 8012104:	3fd287a7 	.word	0x3fd287a7
 8012108:	8b60c8b3 	.word	0x8b60c8b3
 801210c:	3fc68a28 	.word	0x3fc68a28
 8012110:	509f79fb 	.word	0x509f79fb
 8012114:	3fd34413 	.word	0x3fd34413
 8012118:	08013e4d 	.word	0x08013e4d
 801211c:	08013e64 	.word	0x08013e64
 8012120:	7ff00000 	.word	0x7ff00000
 8012124:	08013e49 	.word	0x08013e49
 8012128:	08013e1d 	.word	0x08013e1d
 801212c:	08013e1c 	.word	0x08013e1c
 8012130:	08013f60 	.word	0x08013f60
 8012134:	08013ebc 	.word	0x08013ebc
 8012138:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801213c:	f1ba 0f0e 	cmp.w	sl, #14
 8012140:	6010      	str	r0, [r2, #0]
 8012142:	d86f      	bhi.n	8012224 <_dtoa_r+0x3bc>
 8012144:	2c00      	cmp	r4, #0
 8012146:	d06d      	beq.n	8012224 <_dtoa_r+0x3bc>
 8012148:	f1b8 0f00 	cmp.w	r8, #0
 801214c:	f340 80c2 	ble.w	80122d4 <_dtoa_r+0x46c>
 8012150:	4aca      	ldr	r2, [pc, #808]	@ (801247c <_dtoa_r+0x614>)
 8012152:	f008 010f 	and.w	r1, r8, #15
 8012156:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801215a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801215e:	ed92 7b00 	vldr	d7, [r2]
 8012162:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012166:	f000 80a9 	beq.w	80122bc <_dtoa_r+0x454>
 801216a:	4ac5      	ldr	r2, [pc, #788]	@ (8012480 <_dtoa_r+0x618>)
 801216c:	ed92 6b08 	vldr	d6, [r2, #32]
 8012170:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012174:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012178:	f001 010f 	and.w	r1, r1, #15
 801217c:	2203      	movs	r2, #3
 801217e:	48c0      	ldr	r0, [pc, #768]	@ (8012480 <_dtoa_r+0x618>)
 8012180:	2900      	cmp	r1, #0
 8012182:	f040 809d 	bne.w	80122c0 <_dtoa_r+0x458>
 8012186:	ed9d 6b02 	vldr	d6, [sp, #8]
 801218a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801218e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012192:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012194:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012198:	2900      	cmp	r1, #0
 801219a:	f000 80c1 	beq.w	8012320 <_dtoa_r+0x4b8>
 801219e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80121a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80121a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121aa:	f140 80b9 	bpl.w	8012320 <_dtoa_r+0x4b8>
 80121ae:	f1ba 0f00 	cmp.w	sl, #0
 80121b2:	f000 80b5 	beq.w	8012320 <_dtoa_r+0x4b8>
 80121b6:	f1bb 0f00 	cmp.w	fp, #0
 80121ba:	dd31      	ble.n	8012220 <_dtoa_r+0x3b8>
 80121bc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80121c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80121c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80121c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80121cc:	9104      	str	r1, [sp, #16]
 80121ce:	3201      	adds	r2, #1
 80121d0:	465c      	mov	r4, fp
 80121d2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80121d6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80121da:	ee07 2a90 	vmov	s15, r2
 80121de:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80121e2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80121e6:	ee15 2a90 	vmov	r2, s11
 80121ea:	ec51 0b15 	vmov	r0, r1, d5
 80121ee:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80121f2:	2c00      	cmp	r4, #0
 80121f4:	f040 8098 	bne.w	8012328 <_dtoa_r+0x4c0>
 80121f8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80121fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012200:	ec41 0b17 	vmov	d7, r0, r1
 8012204:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801220c:	f300 8261 	bgt.w	80126d2 <_dtoa_r+0x86a>
 8012210:	eeb1 7b47 	vneg.f64	d7, d7
 8012214:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801221c:	f100 80f5 	bmi.w	801240a <_dtoa_r+0x5a2>
 8012220:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012224:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012226:	2a00      	cmp	r2, #0
 8012228:	f2c0 812c 	blt.w	8012484 <_dtoa_r+0x61c>
 801222c:	f1b8 0f0e 	cmp.w	r8, #14
 8012230:	f300 8128 	bgt.w	8012484 <_dtoa_r+0x61c>
 8012234:	4b91      	ldr	r3, [pc, #580]	@ (801247c <_dtoa_r+0x614>)
 8012236:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801223a:	ed93 6b00 	vldr	d6, [r3]
 801223e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012240:	2b00      	cmp	r3, #0
 8012242:	da03      	bge.n	801224c <_dtoa_r+0x3e4>
 8012244:	f1ba 0f00 	cmp.w	sl, #0
 8012248:	f340 80d2 	ble.w	80123f0 <_dtoa_r+0x588>
 801224c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012250:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012254:	463e      	mov	r6, r7
 8012256:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801225a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801225e:	ee15 3a10 	vmov	r3, s10
 8012262:	3330      	adds	r3, #48	@ 0x30
 8012264:	f806 3b01 	strb.w	r3, [r6], #1
 8012268:	1bf3      	subs	r3, r6, r7
 801226a:	459a      	cmp	sl, r3
 801226c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012270:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012274:	f040 80f8 	bne.w	8012468 <_dtoa_r+0x600>
 8012278:	ee37 7b07 	vadd.f64	d7, d7, d7
 801227c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012284:	f300 80dd 	bgt.w	8012442 <_dtoa_r+0x5da>
 8012288:	eeb4 7b46 	vcmp.f64	d7, d6
 801228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012290:	d104      	bne.n	801229c <_dtoa_r+0x434>
 8012292:	ee15 3a10 	vmov	r3, s10
 8012296:	07db      	lsls	r3, r3, #31
 8012298:	f100 80d3 	bmi.w	8012442 <_dtoa_r+0x5da>
 801229c:	9901      	ldr	r1, [sp, #4]
 801229e:	4648      	mov	r0, r9
 80122a0:	f000 fc78 	bl	8012b94 <_Bfree>
 80122a4:	2300      	movs	r3, #0
 80122a6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80122a8:	7033      	strb	r3, [r6, #0]
 80122aa:	f108 0301 	add.w	r3, r8, #1
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	f000 8304 	beq.w	80128c0 <_dtoa_r+0xa58>
 80122b8:	601e      	str	r6, [r3, #0]
 80122ba:	e301      	b.n	80128c0 <_dtoa_r+0xa58>
 80122bc:	2202      	movs	r2, #2
 80122be:	e75e      	b.n	801217e <_dtoa_r+0x316>
 80122c0:	07cc      	lsls	r4, r1, #31
 80122c2:	d504      	bpl.n	80122ce <_dtoa_r+0x466>
 80122c4:	ed90 6b00 	vldr	d6, [r0]
 80122c8:	3201      	adds	r2, #1
 80122ca:	ee27 7b06 	vmul.f64	d7, d7, d6
 80122ce:	1049      	asrs	r1, r1, #1
 80122d0:	3008      	adds	r0, #8
 80122d2:	e755      	b.n	8012180 <_dtoa_r+0x318>
 80122d4:	d022      	beq.n	801231c <_dtoa_r+0x4b4>
 80122d6:	f1c8 0100 	rsb	r1, r8, #0
 80122da:	4a68      	ldr	r2, [pc, #416]	@ (801247c <_dtoa_r+0x614>)
 80122dc:	f001 000f 	and.w	r0, r1, #15
 80122e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80122e4:	ed92 7b00 	vldr	d7, [r2]
 80122e8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80122ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80122f0:	4863      	ldr	r0, [pc, #396]	@ (8012480 <_dtoa_r+0x618>)
 80122f2:	1109      	asrs	r1, r1, #4
 80122f4:	2400      	movs	r4, #0
 80122f6:	2202      	movs	r2, #2
 80122f8:	b929      	cbnz	r1, 8012306 <_dtoa_r+0x49e>
 80122fa:	2c00      	cmp	r4, #0
 80122fc:	f43f af49 	beq.w	8012192 <_dtoa_r+0x32a>
 8012300:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012304:	e745      	b.n	8012192 <_dtoa_r+0x32a>
 8012306:	07ce      	lsls	r6, r1, #31
 8012308:	d505      	bpl.n	8012316 <_dtoa_r+0x4ae>
 801230a:	ed90 6b00 	vldr	d6, [r0]
 801230e:	3201      	adds	r2, #1
 8012310:	2401      	movs	r4, #1
 8012312:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012316:	1049      	asrs	r1, r1, #1
 8012318:	3008      	adds	r0, #8
 801231a:	e7ed      	b.n	80122f8 <_dtoa_r+0x490>
 801231c:	2202      	movs	r2, #2
 801231e:	e738      	b.n	8012192 <_dtoa_r+0x32a>
 8012320:	f8cd 8010 	str.w	r8, [sp, #16]
 8012324:	4654      	mov	r4, sl
 8012326:	e754      	b.n	80121d2 <_dtoa_r+0x36a>
 8012328:	4a54      	ldr	r2, [pc, #336]	@ (801247c <_dtoa_r+0x614>)
 801232a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801232e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012332:	9a08      	ldr	r2, [sp, #32]
 8012334:	ec41 0b17 	vmov	d7, r0, r1
 8012338:	443c      	add	r4, r7
 801233a:	b34a      	cbz	r2, 8012390 <_dtoa_r+0x528>
 801233c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012340:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012344:	463e      	mov	r6, r7
 8012346:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801234a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801234e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012352:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012356:	ee14 2a90 	vmov	r2, s9
 801235a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801235e:	3230      	adds	r2, #48	@ 0x30
 8012360:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012364:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236c:	f806 2b01 	strb.w	r2, [r6], #1
 8012370:	d438      	bmi.n	80123e4 <_dtoa_r+0x57c>
 8012372:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012376:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801237e:	d462      	bmi.n	8012446 <_dtoa_r+0x5de>
 8012380:	42a6      	cmp	r6, r4
 8012382:	f43f af4d 	beq.w	8012220 <_dtoa_r+0x3b8>
 8012386:	ee27 7b03 	vmul.f64	d7, d7, d3
 801238a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801238e:	e7e0      	b.n	8012352 <_dtoa_r+0x4ea>
 8012390:	4621      	mov	r1, r4
 8012392:	463e      	mov	r6, r7
 8012394:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012398:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801239c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80123a0:	ee14 2a90 	vmov	r2, s9
 80123a4:	3230      	adds	r2, #48	@ 0x30
 80123a6:	f806 2b01 	strb.w	r2, [r6], #1
 80123aa:	42a6      	cmp	r6, r4
 80123ac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80123b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80123b4:	d119      	bne.n	80123ea <_dtoa_r+0x582>
 80123b6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80123ba:	ee37 4b05 	vadd.f64	d4, d7, d5
 80123be:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80123c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123c6:	dc3e      	bgt.n	8012446 <_dtoa_r+0x5de>
 80123c8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80123cc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80123d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d4:	f57f af24 	bpl.w	8012220 <_dtoa_r+0x3b8>
 80123d8:	460e      	mov	r6, r1
 80123da:	3901      	subs	r1, #1
 80123dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80123e0:	2b30      	cmp	r3, #48	@ 0x30
 80123e2:	d0f9      	beq.n	80123d8 <_dtoa_r+0x570>
 80123e4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80123e8:	e758      	b.n	801229c <_dtoa_r+0x434>
 80123ea:	ee26 6b03 	vmul.f64	d6, d6, d3
 80123ee:	e7d5      	b.n	801239c <_dtoa_r+0x534>
 80123f0:	d10b      	bne.n	801240a <_dtoa_r+0x5a2>
 80123f2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80123f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80123fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80123fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012406:	f2c0 8161 	blt.w	80126cc <_dtoa_r+0x864>
 801240a:	2400      	movs	r4, #0
 801240c:	4625      	mov	r5, r4
 801240e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012410:	43db      	mvns	r3, r3
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	463e      	mov	r6, r7
 8012416:	f04f 0800 	mov.w	r8, #0
 801241a:	4621      	mov	r1, r4
 801241c:	4648      	mov	r0, r9
 801241e:	f000 fbb9 	bl	8012b94 <_Bfree>
 8012422:	2d00      	cmp	r5, #0
 8012424:	d0de      	beq.n	80123e4 <_dtoa_r+0x57c>
 8012426:	f1b8 0f00 	cmp.w	r8, #0
 801242a:	d005      	beq.n	8012438 <_dtoa_r+0x5d0>
 801242c:	45a8      	cmp	r8, r5
 801242e:	d003      	beq.n	8012438 <_dtoa_r+0x5d0>
 8012430:	4641      	mov	r1, r8
 8012432:	4648      	mov	r0, r9
 8012434:	f000 fbae 	bl	8012b94 <_Bfree>
 8012438:	4629      	mov	r1, r5
 801243a:	4648      	mov	r0, r9
 801243c:	f000 fbaa 	bl	8012b94 <_Bfree>
 8012440:	e7d0      	b.n	80123e4 <_dtoa_r+0x57c>
 8012442:	f8cd 8010 	str.w	r8, [sp, #16]
 8012446:	4633      	mov	r3, r6
 8012448:	461e      	mov	r6, r3
 801244a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801244e:	2a39      	cmp	r2, #57	@ 0x39
 8012450:	d106      	bne.n	8012460 <_dtoa_r+0x5f8>
 8012452:	429f      	cmp	r7, r3
 8012454:	d1f8      	bne.n	8012448 <_dtoa_r+0x5e0>
 8012456:	9a04      	ldr	r2, [sp, #16]
 8012458:	3201      	adds	r2, #1
 801245a:	9204      	str	r2, [sp, #16]
 801245c:	2230      	movs	r2, #48	@ 0x30
 801245e:	703a      	strb	r2, [r7, #0]
 8012460:	781a      	ldrb	r2, [r3, #0]
 8012462:	3201      	adds	r2, #1
 8012464:	701a      	strb	r2, [r3, #0]
 8012466:	e7bd      	b.n	80123e4 <_dtoa_r+0x57c>
 8012468:	ee27 7b04 	vmul.f64	d7, d7, d4
 801246c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012474:	f47f aeef 	bne.w	8012256 <_dtoa_r+0x3ee>
 8012478:	e710      	b.n	801229c <_dtoa_r+0x434>
 801247a:	bf00      	nop
 801247c:	08013f60 	.word	0x08013f60
 8012480:	08013f38 	.word	0x08013f38
 8012484:	9908      	ldr	r1, [sp, #32]
 8012486:	2900      	cmp	r1, #0
 8012488:	f000 80e3 	beq.w	8012652 <_dtoa_r+0x7ea>
 801248c:	9907      	ldr	r1, [sp, #28]
 801248e:	2901      	cmp	r1, #1
 8012490:	f300 80c8 	bgt.w	8012624 <_dtoa_r+0x7bc>
 8012494:	2d00      	cmp	r5, #0
 8012496:	f000 80c1 	beq.w	801261c <_dtoa_r+0x7b4>
 801249a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801249e:	9e05      	ldr	r6, [sp, #20]
 80124a0:	461c      	mov	r4, r3
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	9b05      	ldr	r3, [sp, #20]
 80124a6:	4413      	add	r3, r2
 80124a8:	9305      	str	r3, [sp, #20]
 80124aa:	9b06      	ldr	r3, [sp, #24]
 80124ac:	2101      	movs	r1, #1
 80124ae:	4413      	add	r3, r2
 80124b0:	4648      	mov	r0, r9
 80124b2:	9306      	str	r3, [sp, #24]
 80124b4:	f000 fc22 	bl	8012cfc <__i2b>
 80124b8:	9b04      	ldr	r3, [sp, #16]
 80124ba:	4605      	mov	r5, r0
 80124bc:	b166      	cbz	r6, 80124d8 <_dtoa_r+0x670>
 80124be:	9a06      	ldr	r2, [sp, #24]
 80124c0:	2a00      	cmp	r2, #0
 80124c2:	dd09      	ble.n	80124d8 <_dtoa_r+0x670>
 80124c4:	42b2      	cmp	r2, r6
 80124c6:	9905      	ldr	r1, [sp, #20]
 80124c8:	bfa8      	it	ge
 80124ca:	4632      	movge	r2, r6
 80124cc:	1a89      	subs	r1, r1, r2
 80124ce:	9105      	str	r1, [sp, #20]
 80124d0:	9906      	ldr	r1, [sp, #24]
 80124d2:	1ab6      	subs	r6, r6, r2
 80124d4:	1a8a      	subs	r2, r1, r2
 80124d6:	9206      	str	r2, [sp, #24]
 80124d8:	b1fb      	cbz	r3, 801251a <_dtoa_r+0x6b2>
 80124da:	9a08      	ldr	r2, [sp, #32]
 80124dc:	2a00      	cmp	r2, #0
 80124de:	f000 80bc 	beq.w	801265a <_dtoa_r+0x7f2>
 80124e2:	b19c      	cbz	r4, 801250c <_dtoa_r+0x6a4>
 80124e4:	4629      	mov	r1, r5
 80124e6:	4622      	mov	r2, r4
 80124e8:	4648      	mov	r0, r9
 80124ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80124ec:	f000 fcc6 	bl	8012e7c <__pow5mult>
 80124f0:	9a01      	ldr	r2, [sp, #4]
 80124f2:	4601      	mov	r1, r0
 80124f4:	4605      	mov	r5, r0
 80124f6:	4648      	mov	r0, r9
 80124f8:	f000 fc16 	bl	8012d28 <__multiply>
 80124fc:	9901      	ldr	r1, [sp, #4]
 80124fe:	9004      	str	r0, [sp, #16]
 8012500:	4648      	mov	r0, r9
 8012502:	f000 fb47 	bl	8012b94 <_Bfree>
 8012506:	9a04      	ldr	r2, [sp, #16]
 8012508:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801250a:	9201      	str	r2, [sp, #4]
 801250c:	1b1a      	subs	r2, r3, r4
 801250e:	d004      	beq.n	801251a <_dtoa_r+0x6b2>
 8012510:	9901      	ldr	r1, [sp, #4]
 8012512:	4648      	mov	r0, r9
 8012514:	f000 fcb2 	bl	8012e7c <__pow5mult>
 8012518:	9001      	str	r0, [sp, #4]
 801251a:	2101      	movs	r1, #1
 801251c:	4648      	mov	r0, r9
 801251e:	f000 fbed 	bl	8012cfc <__i2b>
 8012522:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012524:	4604      	mov	r4, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	f000 81d0 	beq.w	80128cc <_dtoa_r+0xa64>
 801252c:	461a      	mov	r2, r3
 801252e:	4601      	mov	r1, r0
 8012530:	4648      	mov	r0, r9
 8012532:	f000 fca3 	bl	8012e7c <__pow5mult>
 8012536:	9b07      	ldr	r3, [sp, #28]
 8012538:	2b01      	cmp	r3, #1
 801253a:	4604      	mov	r4, r0
 801253c:	f300 8095 	bgt.w	801266a <_dtoa_r+0x802>
 8012540:	9b02      	ldr	r3, [sp, #8]
 8012542:	2b00      	cmp	r3, #0
 8012544:	f040 808b 	bne.w	801265e <_dtoa_r+0x7f6>
 8012548:	9b03      	ldr	r3, [sp, #12]
 801254a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801254e:	2a00      	cmp	r2, #0
 8012550:	f040 8087 	bne.w	8012662 <_dtoa_r+0x7fa>
 8012554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012558:	0d12      	lsrs	r2, r2, #20
 801255a:	0512      	lsls	r2, r2, #20
 801255c:	2a00      	cmp	r2, #0
 801255e:	f000 8082 	beq.w	8012666 <_dtoa_r+0x7fe>
 8012562:	9b05      	ldr	r3, [sp, #20]
 8012564:	3301      	adds	r3, #1
 8012566:	9305      	str	r3, [sp, #20]
 8012568:	9b06      	ldr	r3, [sp, #24]
 801256a:	3301      	adds	r3, #1
 801256c:	9306      	str	r3, [sp, #24]
 801256e:	2301      	movs	r3, #1
 8012570:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012572:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012574:	2b00      	cmp	r3, #0
 8012576:	f000 81af 	beq.w	80128d8 <_dtoa_r+0xa70>
 801257a:	6922      	ldr	r2, [r4, #16]
 801257c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8012580:	6910      	ldr	r0, [r2, #16]
 8012582:	f000 fb6f 	bl	8012c64 <__hi0bits>
 8012586:	f1c0 0020 	rsb	r0, r0, #32
 801258a:	9b06      	ldr	r3, [sp, #24]
 801258c:	4418      	add	r0, r3
 801258e:	f010 001f 	ands.w	r0, r0, #31
 8012592:	d076      	beq.n	8012682 <_dtoa_r+0x81a>
 8012594:	f1c0 0220 	rsb	r2, r0, #32
 8012598:	2a04      	cmp	r2, #4
 801259a:	dd69      	ble.n	8012670 <_dtoa_r+0x808>
 801259c:	9b05      	ldr	r3, [sp, #20]
 801259e:	f1c0 001c 	rsb	r0, r0, #28
 80125a2:	4403      	add	r3, r0
 80125a4:	9305      	str	r3, [sp, #20]
 80125a6:	9b06      	ldr	r3, [sp, #24]
 80125a8:	4406      	add	r6, r0
 80125aa:	4403      	add	r3, r0
 80125ac:	9306      	str	r3, [sp, #24]
 80125ae:	9b05      	ldr	r3, [sp, #20]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	dd05      	ble.n	80125c0 <_dtoa_r+0x758>
 80125b4:	9901      	ldr	r1, [sp, #4]
 80125b6:	461a      	mov	r2, r3
 80125b8:	4648      	mov	r0, r9
 80125ba:	f000 fcb9 	bl	8012f30 <__lshift>
 80125be:	9001      	str	r0, [sp, #4]
 80125c0:	9b06      	ldr	r3, [sp, #24]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	dd05      	ble.n	80125d2 <_dtoa_r+0x76a>
 80125c6:	4621      	mov	r1, r4
 80125c8:	461a      	mov	r2, r3
 80125ca:	4648      	mov	r0, r9
 80125cc:	f000 fcb0 	bl	8012f30 <__lshift>
 80125d0:	4604      	mov	r4, r0
 80125d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d056      	beq.n	8012686 <_dtoa_r+0x81e>
 80125d8:	9801      	ldr	r0, [sp, #4]
 80125da:	4621      	mov	r1, r4
 80125dc:	f000 fd14 	bl	8013008 <__mcmp>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	da50      	bge.n	8012686 <_dtoa_r+0x81e>
 80125e4:	f108 33ff 	add.w	r3, r8, #4294967295
 80125e8:	9304      	str	r3, [sp, #16]
 80125ea:	9901      	ldr	r1, [sp, #4]
 80125ec:	2300      	movs	r3, #0
 80125ee:	220a      	movs	r2, #10
 80125f0:	4648      	mov	r0, r9
 80125f2:	f000 faf1 	bl	8012bd8 <__multadd>
 80125f6:	9b08      	ldr	r3, [sp, #32]
 80125f8:	9001      	str	r0, [sp, #4]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	f000 816e 	beq.w	80128dc <_dtoa_r+0xa74>
 8012600:	4629      	mov	r1, r5
 8012602:	2300      	movs	r3, #0
 8012604:	220a      	movs	r2, #10
 8012606:	4648      	mov	r0, r9
 8012608:	f000 fae6 	bl	8012bd8 <__multadd>
 801260c:	f1bb 0f00 	cmp.w	fp, #0
 8012610:	4605      	mov	r5, r0
 8012612:	dc64      	bgt.n	80126de <_dtoa_r+0x876>
 8012614:	9b07      	ldr	r3, [sp, #28]
 8012616:	2b02      	cmp	r3, #2
 8012618:	dc3e      	bgt.n	8012698 <_dtoa_r+0x830>
 801261a:	e060      	b.n	80126de <_dtoa_r+0x876>
 801261c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801261e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8012622:	e73c      	b.n	801249e <_dtoa_r+0x636>
 8012624:	f10a 34ff 	add.w	r4, sl, #4294967295
 8012628:	42a3      	cmp	r3, r4
 801262a:	bfbf      	itttt	lt
 801262c:	1ae2      	sublt	r2, r4, r3
 801262e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012630:	189b      	addlt	r3, r3, r2
 8012632:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8012634:	bfae      	itee	ge
 8012636:	1b1c      	subge	r4, r3, r4
 8012638:	4623      	movlt	r3, r4
 801263a:	2400      	movlt	r4, #0
 801263c:	f1ba 0f00 	cmp.w	sl, #0
 8012640:	bfb5      	itete	lt
 8012642:	9a05      	ldrlt	r2, [sp, #20]
 8012644:	9e05      	ldrge	r6, [sp, #20]
 8012646:	eba2 060a 	sublt.w	r6, r2, sl
 801264a:	4652      	movge	r2, sl
 801264c:	bfb8      	it	lt
 801264e:	2200      	movlt	r2, #0
 8012650:	e727      	b.n	80124a2 <_dtoa_r+0x63a>
 8012652:	9e05      	ldr	r6, [sp, #20]
 8012654:	9d08      	ldr	r5, [sp, #32]
 8012656:	461c      	mov	r4, r3
 8012658:	e730      	b.n	80124bc <_dtoa_r+0x654>
 801265a:	461a      	mov	r2, r3
 801265c:	e758      	b.n	8012510 <_dtoa_r+0x6a8>
 801265e:	2300      	movs	r3, #0
 8012660:	e786      	b.n	8012570 <_dtoa_r+0x708>
 8012662:	9b02      	ldr	r3, [sp, #8]
 8012664:	e784      	b.n	8012570 <_dtoa_r+0x708>
 8012666:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012668:	e783      	b.n	8012572 <_dtoa_r+0x70a>
 801266a:	2300      	movs	r3, #0
 801266c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801266e:	e784      	b.n	801257a <_dtoa_r+0x712>
 8012670:	d09d      	beq.n	80125ae <_dtoa_r+0x746>
 8012672:	9b05      	ldr	r3, [sp, #20]
 8012674:	321c      	adds	r2, #28
 8012676:	4413      	add	r3, r2
 8012678:	9305      	str	r3, [sp, #20]
 801267a:	9b06      	ldr	r3, [sp, #24]
 801267c:	4416      	add	r6, r2
 801267e:	4413      	add	r3, r2
 8012680:	e794      	b.n	80125ac <_dtoa_r+0x744>
 8012682:	4602      	mov	r2, r0
 8012684:	e7f5      	b.n	8012672 <_dtoa_r+0x80a>
 8012686:	f1ba 0f00 	cmp.w	sl, #0
 801268a:	f8cd 8010 	str.w	r8, [sp, #16]
 801268e:	46d3      	mov	fp, sl
 8012690:	dc21      	bgt.n	80126d6 <_dtoa_r+0x86e>
 8012692:	9b07      	ldr	r3, [sp, #28]
 8012694:	2b02      	cmp	r3, #2
 8012696:	dd1e      	ble.n	80126d6 <_dtoa_r+0x86e>
 8012698:	f1bb 0f00 	cmp.w	fp, #0
 801269c:	f47f aeb7 	bne.w	801240e <_dtoa_r+0x5a6>
 80126a0:	4621      	mov	r1, r4
 80126a2:	465b      	mov	r3, fp
 80126a4:	2205      	movs	r2, #5
 80126a6:	4648      	mov	r0, r9
 80126a8:	f000 fa96 	bl	8012bd8 <__multadd>
 80126ac:	4601      	mov	r1, r0
 80126ae:	4604      	mov	r4, r0
 80126b0:	9801      	ldr	r0, [sp, #4]
 80126b2:	f000 fca9 	bl	8013008 <__mcmp>
 80126b6:	2800      	cmp	r0, #0
 80126b8:	f77f aea9 	ble.w	801240e <_dtoa_r+0x5a6>
 80126bc:	463e      	mov	r6, r7
 80126be:	2331      	movs	r3, #49	@ 0x31
 80126c0:	f806 3b01 	strb.w	r3, [r6], #1
 80126c4:	9b04      	ldr	r3, [sp, #16]
 80126c6:	3301      	adds	r3, #1
 80126c8:	9304      	str	r3, [sp, #16]
 80126ca:	e6a4      	b.n	8012416 <_dtoa_r+0x5ae>
 80126cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80126d0:	4654      	mov	r4, sl
 80126d2:	4625      	mov	r5, r4
 80126d4:	e7f2      	b.n	80126bc <_dtoa_r+0x854>
 80126d6:	9b08      	ldr	r3, [sp, #32]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 8103 	beq.w	80128e4 <_dtoa_r+0xa7c>
 80126de:	2e00      	cmp	r6, #0
 80126e0:	dd05      	ble.n	80126ee <_dtoa_r+0x886>
 80126e2:	4629      	mov	r1, r5
 80126e4:	4632      	mov	r2, r6
 80126e6:	4648      	mov	r0, r9
 80126e8:	f000 fc22 	bl	8012f30 <__lshift>
 80126ec:	4605      	mov	r5, r0
 80126ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d058      	beq.n	80127a6 <_dtoa_r+0x93e>
 80126f4:	6869      	ldr	r1, [r5, #4]
 80126f6:	4648      	mov	r0, r9
 80126f8:	f000 fa0c 	bl	8012b14 <_Balloc>
 80126fc:	4606      	mov	r6, r0
 80126fe:	b928      	cbnz	r0, 801270c <_dtoa_r+0x8a4>
 8012700:	4b82      	ldr	r3, [pc, #520]	@ (801290c <_dtoa_r+0xaa4>)
 8012702:	4602      	mov	r2, r0
 8012704:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012708:	f7ff bbc7 	b.w	8011e9a <_dtoa_r+0x32>
 801270c:	692a      	ldr	r2, [r5, #16]
 801270e:	3202      	adds	r2, #2
 8012710:	0092      	lsls	r2, r2, #2
 8012712:	f105 010c 	add.w	r1, r5, #12
 8012716:	300c      	adds	r0, #12
 8012718:	f7ff fb0d 	bl	8011d36 <memcpy>
 801271c:	2201      	movs	r2, #1
 801271e:	4631      	mov	r1, r6
 8012720:	4648      	mov	r0, r9
 8012722:	f000 fc05 	bl	8012f30 <__lshift>
 8012726:	1c7b      	adds	r3, r7, #1
 8012728:	9305      	str	r3, [sp, #20]
 801272a:	eb07 030b 	add.w	r3, r7, fp
 801272e:	9309      	str	r3, [sp, #36]	@ 0x24
 8012730:	9b02      	ldr	r3, [sp, #8]
 8012732:	f003 0301 	and.w	r3, r3, #1
 8012736:	46a8      	mov	r8, r5
 8012738:	9308      	str	r3, [sp, #32]
 801273a:	4605      	mov	r5, r0
 801273c:	9b05      	ldr	r3, [sp, #20]
 801273e:	9801      	ldr	r0, [sp, #4]
 8012740:	4621      	mov	r1, r4
 8012742:	f103 3bff 	add.w	fp, r3, #4294967295
 8012746:	f7ff fb04 	bl	8011d52 <quorem>
 801274a:	4641      	mov	r1, r8
 801274c:	9002      	str	r0, [sp, #8]
 801274e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8012752:	9801      	ldr	r0, [sp, #4]
 8012754:	f000 fc58 	bl	8013008 <__mcmp>
 8012758:	462a      	mov	r2, r5
 801275a:	9006      	str	r0, [sp, #24]
 801275c:	4621      	mov	r1, r4
 801275e:	4648      	mov	r0, r9
 8012760:	f000 fc6e 	bl	8013040 <__mdiff>
 8012764:	68c2      	ldr	r2, [r0, #12]
 8012766:	4606      	mov	r6, r0
 8012768:	b9fa      	cbnz	r2, 80127aa <_dtoa_r+0x942>
 801276a:	4601      	mov	r1, r0
 801276c:	9801      	ldr	r0, [sp, #4]
 801276e:	f000 fc4b 	bl	8013008 <__mcmp>
 8012772:	4602      	mov	r2, r0
 8012774:	4631      	mov	r1, r6
 8012776:	4648      	mov	r0, r9
 8012778:	920a      	str	r2, [sp, #40]	@ 0x28
 801277a:	f000 fa0b 	bl	8012b94 <_Bfree>
 801277e:	9b07      	ldr	r3, [sp, #28]
 8012780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012782:	9e05      	ldr	r6, [sp, #20]
 8012784:	ea43 0102 	orr.w	r1, r3, r2
 8012788:	9b08      	ldr	r3, [sp, #32]
 801278a:	4319      	orrs	r1, r3
 801278c:	d10f      	bne.n	80127ae <_dtoa_r+0x946>
 801278e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012792:	d028      	beq.n	80127e6 <_dtoa_r+0x97e>
 8012794:	9b06      	ldr	r3, [sp, #24]
 8012796:	2b00      	cmp	r3, #0
 8012798:	dd02      	ble.n	80127a0 <_dtoa_r+0x938>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80127a0:	f88b a000 	strb.w	sl, [fp]
 80127a4:	e639      	b.n	801241a <_dtoa_r+0x5b2>
 80127a6:	4628      	mov	r0, r5
 80127a8:	e7bd      	b.n	8012726 <_dtoa_r+0x8be>
 80127aa:	2201      	movs	r2, #1
 80127ac:	e7e2      	b.n	8012774 <_dtoa_r+0x90c>
 80127ae:	9b06      	ldr	r3, [sp, #24]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	db04      	blt.n	80127be <_dtoa_r+0x956>
 80127b4:	9907      	ldr	r1, [sp, #28]
 80127b6:	430b      	orrs	r3, r1
 80127b8:	9908      	ldr	r1, [sp, #32]
 80127ba:	430b      	orrs	r3, r1
 80127bc:	d120      	bne.n	8012800 <_dtoa_r+0x998>
 80127be:	2a00      	cmp	r2, #0
 80127c0:	ddee      	ble.n	80127a0 <_dtoa_r+0x938>
 80127c2:	9901      	ldr	r1, [sp, #4]
 80127c4:	2201      	movs	r2, #1
 80127c6:	4648      	mov	r0, r9
 80127c8:	f000 fbb2 	bl	8012f30 <__lshift>
 80127cc:	4621      	mov	r1, r4
 80127ce:	9001      	str	r0, [sp, #4]
 80127d0:	f000 fc1a 	bl	8013008 <__mcmp>
 80127d4:	2800      	cmp	r0, #0
 80127d6:	dc03      	bgt.n	80127e0 <_dtoa_r+0x978>
 80127d8:	d1e2      	bne.n	80127a0 <_dtoa_r+0x938>
 80127da:	f01a 0f01 	tst.w	sl, #1
 80127de:	d0df      	beq.n	80127a0 <_dtoa_r+0x938>
 80127e0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80127e4:	d1d9      	bne.n	801279a <_dtoa_r+0x932>
 80127e6:	2339      	movs	r3, #57	@ 0x39
 80127e8:	f88b 3000 	strb.w	r3, [fp]
 80127ec:	4633      	mov	r3, r6
 80127ee:	461e      	mov	r6, r3
 80127f0:	3b01      	subs	r3, #1
 80127f2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80127f6:	2a39      	cmp	r2, #57	@ 0x39
 80127f8:	d053      	beq.n	80128a2 <_dtoa_r+0xa3a>
 80127fa:	3201      	adds	r2, #1
 80127fc:	701a      	strb	r2, [r3, #0]
 80127fe:	e60c      	b.n	801241a <_dtoa_r+0x5b2>
 8012800:	2a00      	cmp	r2, #0
 8012802:	dd07      	ble.n	8012814 <_dtoa_r+0x9ac>
 8012804:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8012808:	d0ed      	beq.n	80127e6 <_dtoa_r+0x97e>
 801280a:	f10a 0301 	add.w	r3, sl, #1
 801280e:	f88b 3000 	strb.w	r3, [fp]
 8012812:	e602      	b.n	801241a <_dtoa_r+0x5b2>
 8012814:	9b05      	ldr	r3, [sp, #20]
 8012816:	9a05      	ldr	r2, [sp, #20]
 8012818:	f803 ac01 	strb.w	sl, [r3, #-1]
 801281c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801281e:	4293      	cmp	r3, r2
 8012820:	d029      	beq.n	8012876 <_dtoa_r+0xa0e>
 8012822:	9901      	ldr	r1, [sp, #4]
 8012824:	2300      	movs	r3, #0
 8012826:	220a      	movs	r2, #10
 8012828:	4648      	mov	r0, r9
 801282a:	f000 f9d5 	bl	8012bd8 <__multadd>
 801282e:	45a8      	cmp	r8, r5
 8012830:	9001      	str	r0, [sp, #4]
 8012832:	f04f 0300 	mov.w	r3, #0
 8012836:	f04f 020a 	mov.w	r2, #10
 801283a:	4641      	mov	r1, r8
 801283c:	4648      	mov	r0, r9
 801283e:	d107      	bne.n	8012850 <_dtoa_r+0x9e8>
 8012840:	f000 f9ca 	bl	8012bd8 <__multadd>
 8012844:	4680      	mov	r8, r0
 8012846:	4605      	mov	r5, r0
 8012848:	9b05      	ldr	r3, [sp, #20]
 801284a:	3301      	adds	r3, #1
 801284c:	9305      	str	r3, [sp, #20]
 801284e:	e775      	b.n	801273c <_dtoa_r+0x8d4>
 8012850:	f000 f9c2 	bl	8012bd8 <__multadd>
 8012854:	4629      	mov	r1, r5
 8012856:	4680      	mov	r8, r0
 8012858:	2300      	movs	r3, #0
 801285a:	220a      	movs	r2, #10
 801285c:	4648      	mov	r0, r9
 801285e:	f000 f9bb 	bl	8012bd8 <__multadd>
 8012862:	4605      	mov	r5, r0
 8012864:	e7f0      	b.n	8012848 <_dtoa_r+0x9e0>
 8012866:	f1bb 0f00 	cmp.w	fp, #0
 801286a:	bfcc      	ite	gt
 801286c:	465e      	movgt	r6, fp
 801286e:	2601      	movle	r6, #1
 8012870:	443e      	add	r6, r7
 8012872:	f04f 0800 	mov.w	r8, #0
 8012876:	9901      	ldr	r1, [sp, #4]
 8012878:	2201      	movs	r2, #1
 801287a:	4648      	mov	r0, r9
 801287c:	f000 fb58 	bl	8012f30 <__lshift>
 8012880:	4621      	mov	r1, r4
 8012882:	9001      	str	r0, [sp, #4]
 8012884:	f000 fbc0 	bl	8013008 <__mcmp>
 8012888:	2800      	cmp	r0, #0
 801288a:	dcaf      	bgt.n	80127ec <_dtoa_r+0x984>
 801288c:	d102      	bne.n	8012894 <_dtoa_r+0xa2c>
 801288e:	f01a 0f01 	tst.w	sl, #1
 8012892:	d1ab      	bne.n	80127ec <_dtoa_r+0x984>
 8012894:	4633      	mov	r3, r6
 8012896:	461e      	mov	r6, r3
 8012898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801289c:	2a30      	cmp	r2, #48	@ 0x30
 801289e:	d0fa      	beq.n	8012896 <_dtoa_r+0xa2e>
 80128a0:	e5bb      	b.n	801241a <_dtoa_r+0x5b2>
 80128a2:	429f      	cmp	r7, r3
 80128a4:	d1a3      	bne.n	80127ee <_dtoa_r+0x986>
 80128a6:	9b04      	ldr	r3, [sp, #16]
 80128a8:	3301      	adds	r3, #1
 80128aa:	9304      	str	r3, [sp, #16]
 80128ac:	2331      	movs	r3, #49	@ 0x31
 80128ae:	703b      	strb	r3, [r7, #0]
 80128b0:	e5b3      	b.n	801241a <_dtoa_r+0x5b2>
 80128b2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80128b4:	4f16      	ldr	r7, [pc, #88]	@ (8012910 <_dtoa_r+0xaa8>)
 80128b6:	b11b      	cbz	r3, 80128c0 <_dtoa_r+0xa58>
 80128b8:	f107 0308 	add.w	r3, r7, #8
 80128bc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	4638      	mov	r0, r7
 80128c2:	b011      	add	sp, #68	@ 0x44
 80128c4:	ecbd 8b02 	vpop	{d8}
 80128c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128cc:	9b07      	ldr	r3, [sp, #28]
 80128ce:	2b01      	cmp	r3, #1
 80128d0:	f77f ae36 	ble.w	8012540 <_dtoa_r+0x6d8>
 80128d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128d8:	2001      	movs	r0, #1
 80128da:	e656      	b.n	801258a <_dtoa_r+0x722>
 80128dc:	f1bb 0f00 	cmp.w	fp, #0
 80128e0:	f77f aed7 	ble.w	8012692 <_dtoa_r+0x82a>
 80128e4:	463e      	mov	r6, r7
 80128e6:	9801      	ldr	r0, [sp, #4]
 80128e8:	4621      	mov	r1, r4
 80128ea:	f7ff fa32 	bl	8011d52 <quorem>
 80128ee:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80128f2:	f806 ab01 	strb.w	sl, [r6], #1
 80128f6:	1bf2      	subs	r2, r6, r7
 80128f8:	4593      	cmp	fp, r2
 80128fa:	ddb4      	ble.n	8012866 <_dtoa_r+0x9fe>
 80128fc:	9901      	ldr	r1, [sp, #4]
 80128fe:	2300      	movs	r3, #0
 8012900:	220a      	movs	r2, #10
 8012902:	4648      	mov	r0, r9
 8012904:	f000 f968 	bl	8012bd8 <__multadd>
 8012908:	9001      	str	r0, [sp, #4]
 801290a:	e7ec      	b.n	80128e6 <_dtoa_r+0xa7e>
 801290c:	08013ebc 	.word	0x08013ebc
 8012910:	08013e40 	.word	0x08013e40

08012914 <_free_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	4605      	mov	r5, r0
 8012918:	2900      	cmp	r1, #0
 801291a:	d041      	beq.n	80129a0 <_free_r+0x8c>
 801291c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012920:	1f0c      	subs	r4, r1, #4
 8012922:	2b00      	cmp	r3, #0
 8012924:	bfb8      	it	lt
 8012926:	18e4      	addlt	r4, r4, r3
 8012928:	f000 f8e8 	bl	8012afc <__malloc_lock>
 801292c:	4a1d      	ldr	r2, [pc, #116]	@ (80129a4 <_free_r+0x90>)
 801292e:	6813      	ldr	r3, [r2, #0]
 8012930:	b933      	cbnz	r3, 8012940 <_free_r+0x2c>
 8012932:	6063      	str	r3, [r4, #4]
 8012934:	6014      	str	r4, [r2, #0]
 8012936:	4628      	mov	r0, r5
 8012938:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801293c:	f000 b8e4 	b.w	8012b08 <__malloc_unlock>
 8012940:	42a3      	cmp	r3, r4
 8012942:	d908      	bls.n	8012956 <_free_r+0x42>
 8012944:	6820      	ldr	r0, [r4, #0]
 8012946:	1821      	adds	r1, r4, r0
 8012948:	428b      	cmp	r3, r1
 801294a:	bf01      	itttt	eq
 801294c:	6819      	ldreq	r1, [r3, #0]
 801294e:	685b      	ldreq	r3, [r3, #4]
 8012950:	1809      	addeq	r1, r1, r0
 8012952:	6021      	streq	r1, [r4, #0]
 8012954:	e7ed      	b.n	8012932 <_free_r+0x1e>
 8012956:	461a      	mov	r2, r3
 8012958:	685b      	ldr	r3, [r3, #4]
 801295a:	b10b      	cbz	r3, 8012960 <_free_r+0x4c>
 801295c:	42a3      	cmp	r3, r4
 801295e:	d9fa      	bls.n	8012956 <_free_r+0x42>
 8012960:	6811      	ldr	r1, [r2, #0]
 8012962:	1850      	adds	r0, r2, r1
 8012964:	42a0      	cmp	r0, r4
 8012966:	d10b      	bne.n	8012980 <_free_r+0x6c>
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	4401      	add	r1, r0
 801296c:	1850      	adds	r0, r2, r1
 801296e:	4283      	cmp	r3, r0
 8012970:	6011      	str	r1, [r2, #0]
 8012972:	d1e0      	bne.n	8012936 <_free_r+0x22>
 8012974:	6818      	ldr	r0, [r3, #0]
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	6053      	str	r3, [r2, #4]
 801297a:	4408      	add	r0, r1
 801297c:	6010      	str	r0, [r2, #0]
 801297e:	e7da      	b.n	8012936 <_free_r+0x22>
 8012980:	d902      	bls.n	8012988 <_free_r+0x74>
 8012982:	230c      	movs	r3, #12
 8012984:	602b      	str	r3, [r5, #0]
 8012986:	e7d6      	b.n	8012936 <_free_r+0x22>
 8012988:	6820      	ldr	r0, [r4, #0]
 801298a:	1821      	adds	r1, r4, r0
 801298c:	428b      	cmp	r3, r1
 801298e:	bf04      	itt	eq
 8012990:	6819      	ldreq	r1, [r3, #0]
 8012992:	685b      	ldreq	r3, [r3, #4]
 8012994:	6063      	str	r3, [r4, #4]
 8012996:	bf04      	itt	eq
 8012998:	1809      	addeq	r1, r1, r0
 801299a:	6021      	streq	r1, [r4, #0]
 801299c:	6054      	str	r4, [r2, #4]
 801299e:	e7ca      	b.n	8012936 <_free_r+0x22>
 80129a0:	bd38      	pop	{r3, r4, r5, pc}
 80129a2:	bf00      	nop
 80129a4:	240056f0 	.word	0x240056f0

080129a8 <malloc>:
 80129a8:	4b02      	ldr	r3, [pc, #8]	@ (80129b4 <malloc+0xc>)
 80129aa:	4601      	mov	r1, r0
 80129ac:	6818      	ldr	r0, [r3, #0]
 80129ae:	f000 b825 	b.w	80129fc <_malloc_r>
 80129b2:	bf00      	nop
 80129b4:	24000024 	.word	0x24000024

080129b8 <sbrk_aligned>:
 80129b8:	b570      	push	{r4, r5, r6, lr}
 80129ba:	4e0f      	ldr	r6, [pc, #60]	@ (80129f8 <sbrk_aligned+0x40>)
 80129bc:	460c      	mov	r4, r1
 80129be:	6831      	ldr	r1, [r6, #0]
 80129c0:	4605      	mov	r5, r0
 80129c2:	b911      	cbnz	r1, 80129ca <sbrk_aligned+0x12>
 80129c4:	f000 fe46 	bl	8013654 <_sbrk_r>
 80129c8:	6030      	str	r0, [r6, #0]
 80129ca:	4621      	mov	r1, r4
 80129cc:	4628      	mov	r0, r5
 80129ce:	f000 fe41 	bl	8013654 <_sbrk_r>
 80129d2:	1c43      	adds	r3, r0, #1
 80129d4:	d103      	bne.n	80129de <sbrk_aligned+0x26>
 80129d6:	f04f 34ff 	mov.w	r4, #4294967295
 80129da:	4620      	mov	r0, r4
 80129dc:	bd70      	pop	{r4, r5, r6, pc}
 80129de:	1cc4      	adds	r4, r0, #3
 80129e0:	f024 0403 	bic.w	r4, r4, #3
 80129e4:	42a0      	cmp	r0, r4
 80129e6:	d0f8      	beq.n	80129da <sbrk_aligned+0x22>
 80129e8:	1a21      	subs	r1, r4, r0
 80129ea:	4628      	mov	r0, r5
 80129ec:	f000 fe32 	bl	8013654 <_sbrk_r>
 80129f0:	3001      	adds	r0, #1
 80129f2:	d1f2      	bne.n	80129da <sbrk_aligned+0x22>
 80129f4:	e7ef      	b.n	80129d6 <sbrk_aligned+0x1e>
 80129f6:	bf00      	nop
 80129f8:	240056ec 	.word	0x240056ec

080129fc <_malloc_r>:
 80129fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a00:	1ccd      	adds	r5, r1, #3
 8012a02:	f025 0503 	bic.w	r5, r5, #3
 8012a06:	3508      	adds	r5, #8
 8012a08:	2d0c      	cmp	r5, #12
 8012a0a:	bf38      	it	cc
 8012a0c:	250c      	movcc	r5, #12
 8012a0e:	2d00      	cmp	r5, #0
 8012a10:	4606      	mov	r6, r0
 8012a12:	db01      	blt.n	8012a18 <_malloc_r+0x1c>
 8012a14:	42a9      	cmp	r1, r5
 8012a16:	d904      	bls.n	8012a22 <_malloc_r+0x26>
 8012a18:	230c      	movs	r3, #12
 8012a1a:	6033      	str	r3, [r6, #0]
 8012a1c:	2000      	movs	r0, #0
 8012a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012af8 <_malloc_r+0xfc>
 8012a26:	f000 f869 	bl	8012afc <__malloc_lock>
 8012a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8012a2e:	461c      	mov	r4, r3
 8012a30:	bb44      	cbnz	r4, 8012a84 <_malloc_r+0x88>
 8012a32:	4629      	mov	r1, r5
 8012a34:	4630      	mov	r0, r6
 8012a36:	f7ff ffbf 	bl	80129b8 <sbrk_aligned>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	4604      	mov	r4, r0
 8012a3e:	d158      	bne.n	8012af2 <_malloc_r+0xf6>
 8012a40:	f8d8 4000 	ldr.w	r4, [r8]
 8012a44:	4627      	mov	r7, r4
 8012a46:	2f00      	cmp	r7, #0
 8012a48:	d143      	bne.n	8012ad2 <_malloc_r+0xd6>
 8012a4a:	2c00      	cmp	r4, #0
 8012a4c:	d04b      	beq.n	8012ae6 <_malloc_r+0xea>
 8012a4e:	6823      	ldr	r3, [r4, #0]
 8012a50:	4639      	mov	r1, r7
 8012a52:	4630      	mov	r0, r6
 8012a54:	eb04 0903 	add.w	r9, r4, r3
 8012a58:	f000 fdfc 	bl	8013654 <_sbrk_r>
 8012a5c:	4581      	cmp	r9, r0
 8012a5e:	d142      	bne.n	8012ae6 <_malloc_r+0xea>
 8012a60:	6821      	ldr	r1, [r4, #0]
 8012a62:	1a6d      	subs	r5, r5, r1
 8012a64:	4629      	mov	r1, r5
 8012a66:	4630      	mov	r0, r6
 8012a68:	f7ff ffa6 	bl	80129b8 <sbrk_aligned>
 8012a6c:	3001      	adds	r0, #1
 8012a6e:	d03a      	beq.n	8012ae6 <_malloc_r+0xea>
 8012a70:	6823      	ldr	r3, [r4, #0]
 8012a72:	442b      	add	r3, r5
 8012a74:	6023      	str	r3, [r4, #0]
 8012a76:	f8d8 3000 	ldr.w	r3, [r8]
 8012a7a:	685a      	ldr	r2, [r3, #4]
 8012a7c:	bb62      	cbnz	r2, 8012ad8 <_malloc_r+0xdc>
 8012a7e:	f8c8 7000 	str.w	r7, [r8]
 8012a82:	e00f      	b.n	8012aa4 <_malloc_r+0xa8>
 8012a84:	6822      	ldr	r2, [r4, #0]
 8012a86:	1b52      	subs	r2, r2, r5
 8012a88:	d420      	bmi.n	8012acc <_malloc_r+0xd0>
 8012a8a:	2a0b      	cmp	r2, #11
 8012a8c:	d917      	bls.n	8012abe <_malloc_r+0xc2>
 8012a8e:	1961      	adds	r1, r4, r5
 8012a90:	42a3      	cmp	r3, r4
 8012a92:	6025      	str	r5, [r4, #0]
 8012a94:	bf18      	it	ne
 8012a96:	6059      	strne	r1, [r3, #4]
 8012a98:	6863      	ldr	r3, [r4, #4]
 8012a9a:	bf08      	it	eq
 8012a9c:	f8c8 1000 	streq.w	r1, [r8]
 8012aa0:	5162      	str	r2, [r4, r5]
 8012aa2:	604b      	str	r3, [r1, #4]
 8012aa4:	4630      	mov	r0, r6
 8012aa6:	f000 f82f 	bl	8012b08 <__malloc_unlock>
 8012aaa:	f104 000b 	add.w	r0, r4, #11
 8012aae:	1d23      	adds	r3, r4, #4
 8012ab0:	f020 0007 	bic.w	r0, r0, #7
 8012ab4:	1ac2      	subs	r2, r0, r3
 8012ab6:	bf1c      	itt	ne
 8012ab8:	1a1b      	subne	r3, r3, r0
 8012aba:	50a3      	strne	r3, [r4, r2]
 8012abc:	e7af      	b.n	8012a1e <_malloc_r+0x22>
 8012abe:	6862      	ldr	r2, [r4, #4]
 8012ac0:	42a3      	cmp	r3, r4
 8012ac2:	bf0c      	ite	eq
 8012ac4:	f8c8 2000 	streq.w	r2, [r8]
 8012ac8:	605a      	strne	r2, [r3, #4]
 8012aca:	e7eb      	b.n	8012aa4 <_malloc_r+0xa8>
 8012acc:	4623      	mov	r3, r4
 8012ace:	6864      	ldr	r4, [r4, #4]
 8012ad0:	e7ae      	b.n	8012a30 <_malloc_r+0x34>
 8012ad2:	463c      	mov	r4, r7
 8012ad4:	687f      	ldr	r7, [r7, #4]
 8012ad6:	e7b6      	b.n	8012a46 <_malloc_r+0x4a>
 8012ad8:	461a      	mov	r2, r3
 8012ada:	685b      	ldr	r3, [r3, #4]
 8012adc:	42a3      	cmp	r3, r4
 8012ade:	d1fb      	bne.n	8012ad8 <_malloc_r+0xdc>
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	6053      	str	r3, [r2, #4]
 8012ae4:	e7de      	b.n	8012aa4 <_malloc_r+0xa8>
 8012ae6:	230c      	movs	r3, #12
 8012ae8:	6033      	str	r3, [r6, #0]
 8012aea:	4630      	mov	r0, r6
 8012aec:	f000 f80c 	bl	8012b08 <__malloc_unlock>
 8012af0:	e794      	b.n	8012a1c <_malloc_r+0x20>
 8012af2:	6005      	str	r5, [r0, #0]
 8012af4:	e7d6      	b.n	8012aa4 <_malloc_r+0xa8>
 8012af6:	bf00      	nop
 8012af8:	240056f0 	.word	0x240056f0

08012afc <__malloc_lock>:
 8012afc:	4801      	ldr	r0, [pc, #4]	@ (8012b04 <__malloc_lock+0x8>)
 8012afe:	f7ff b918 	b.w	8011d32 <__retarget_lock_acquire_recursive>
 8012b02:	bf00      	nop
 8012b04:	240056e8 	.word	0x240056e8

08012b08 <__malloc_unlock>:
 8012b08:	4801      	ldr	r0, [pc, #4]	@ (8012b10 <__malloc_unlock+0x8>)
 8012b0a:	f7ff b913 	b.w	8011d34 <__retarget_lock_release_recursive>
 8012b0e:	bf00      	nop
 8012b10:	240056e8 	.word	0x240056e8

08012b14 <_Balloc>:
 8012b14:	b570      	push	{r4, r5, r6, lr}
 8012b16:	69c6      	ldr	r6, [r0, #28]
 8012b18:	4604      	mov	r4, r0
 8012b1a:	460d      	mov	r5, r1
 8012b1c:	b976      	cbnz	r6, 8012b3c <_Balloc+0x28>
 8012b1e:	2010      	movs	r0, #16
 8012b20:	f7ff ff42 	bl	80129a8 <malloc>
 8012b24:	4602      	mov	r2, r0
 8012b26:	61e0      	str	r0, [r4, #28]
 8012b28:	b920      	cbnz	r0, 8012b34 <_Balloc+0x20>
 8012b2a:	4b18      	ldr	r3, [pc, #96]	@ (8012b8c <_Balloc+0x78>)
 8012b2c:	4818      	ldr	r0, [pc, #96]	@ (8012b90 <_Balloc+0x7c>)
 8012b2e:	216b      	movs	r1, #107	@ 0x6b
 8012b30:	f000 fda0 	bl	8013674 <__assert_func>
 8012b34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b38:	6006      	str	r6, [r0, #0]
 8012b3a:	60c6      	str	r6, [r0, #12]
 8012b3c:	69e6      	ldr	r6, [r4, #28]
 8012b3e:	68f3      	ldr	r3, [r6, #12]
 8012b40:	b183      	cbz	r3, 8012b64 <_Balloc+0x50>
 8012b42:	69e3      	ldr	r3, [r4, #28]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b4a:	b9b8      	cbnz	r0, 8012b7c <_Balloc+0x68>
 8012b4c:	2101      	movs	r1, #1
 8012b4e:	fa01 f605 	lsl.w	r6, r1, r5
 8012b52:	1d72      	adds	r2, r6, #5
 8012b54:	0092      	lsls	r2, r2, #2
 8012b56:	4620      	mov	r0, r4
 8012b58:	f000 fdaa 	bl	80136b0 <_calloc_r>
 8012b5c:	b160      	cbz	r0, 8012b78 <_Balloc+0x64>
 8012b5e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012b62:	e00e      	b.n	8012b82 <_Balloc+0x6e>
 8012b64:	2221      	movs	r2, #33	@ 0x21
 8012b66:	2104      	movs	r1, #4
 8012b68:	4620      	mov	r0, r4
 8012b6a:	f000 fda1 	bl	80136b0 <_calloc_r>
 8012b6e:	69e3      	ldr	r3, [r4, #28]
 8012b70:	60f0      	str	r0, [r6, #12]
 8012b72:	68db      	ldr	r3, [r3, #12]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d1e4      	bne.n	8012b42 <_Balloc+0x2e>
 8012b78:	2000      	movs	r0, #0
 8012b7a:	bd70      	pop	{r4, r5, r6, pc}
 8012b7c:	6802      	ldr	r2, [r0, #0]
 8012b7e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012b82:	2300      	movs	r3, #0
 8012b84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012b88:	e7f7      	b.n	8012b7a <_Balloc+0x66>
 8012b8a:	bf00      	nop
 8012b8c:	08013e4d 	.word	0x08013e4d
 8012b90:	08013ecd 	.word	0x08013ecd

08012b94 <_Bfree>:
 8012b94:	b570      	push	{r4, r5, r6, lr}
 8012b96:	69c6      	ldr	r6, [r0, #28]
 8012b98:	4605      	mov	r5, r0
 8012b9a:	460c      	mov	r4, r1
 8012b9c:	b976      	cbnz	r6, 8012bbc <_Bfree+0x28>
 8012b9e:	2010      	movs	r0, #16
 8012ba0:	f7ff ff02 	bl	80129a8 <malloc>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	61e8      	str	r0, [r5, #28]
 8012ba8:	b920      	cbnz	r0, 8012bb4 <_Bfree+0x20>
 8012baa:	4b09      	ldr	r3, [pc, #36]	@ (8012bd0 <_Bfree+0x3c>)
 8012bac:	4809      	ldr	r0, [pc, #36]	@ (8012bd4 <_Bfree+0x40>)
 8012bae:	218f      	movs	r1, #143	@ 0x8f
 8012bb0:	f000 fd60 	bl	8013674 <__assert_func>
 8012bb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012bb8:	6006      	str	r6, [r0, #0]
 8012bba:	60c6      	str	r6, [r0, #12]
 8012bbc:	b13c      	cbz	r4, 8012bce <_Bfree+0x3a>
 8012bbe:	69eb      	ldr	r3, [r5, #28]
 8012bc0:	6862      	ldr	r2, [r4, #4]
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012bc8:	6021      	str	r1, [r4, #0]
 8012bca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012bce:	bd70      	pop	{r4, r5, r6, pc}
 8012bd0:	08013e4d 	.word	0x08013e4d
 8012bd4:	08013ecd 	.word	0x08013ecd

08012bd8 <__multadd>:
 8012bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bdc:	690d      	ldr	r5, [r1, #16]
 8012bde:	4607      	mov	r7, r0
 8012be0:	460c      	mov	r4, r1
 8012be2:	461e      	mov	r6, r3
 8012be4:	f101 0c14 	add.w	ip, r1, #20
 8012be8:	2000      	movs	r0, #0
 8012bea:	f8dc 3000 	ldr.w	r3, [ip]
 8012bee:	b299      	uxth	r1, r3
 8012bf0:	fb02 6101 	mla	r1, r2, r1, r6
 8012bf4:	0c1e      	lsrs	r6, r3, #16
 8012bf6:	0c0b      	lsrs	r3, r1, #16
 8012bf8:	fb02 3306 	mla	r3, r2, r6, r3
 8012bfc:	b289      	uxth	r1, r1
 8012bfe:	3001      	adds	r0, #1
 8012c00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c04:	4285      	cmp	r5, r0
 8012c06:	f84c 1b04 	str.w	r1, [ip], #4
 8012c0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c0e:	dcec      	bgt.n	8012bea <__multadd+0x12>
 8012c10:	b30e      	cbz	r6, 8012c56 <__multadd+0x7e>
 8012c12:	68a3      	ldr	r3, [r4, #8]
 8012c14:	42ab      	cmp	r3, r5
 8012c16:	dc19      	bgt.n	8012c4c <__multadd+0x74>
 8012c18:	6861      	ldr	r1, [r4, #4]
 8012c1a:	4638      	mov	r0, r7
 8012c1c:	3101      	adds	r1, #1
 8012c1e:	f7ff ff79 	bl	8012b14 <_Balloc>
 8012c22:	4680      	mov	r8, r0
 8012c24:	b928      	cbnz	r0, 8012c32 <__multadd+0x5a>
 8012c26:	4602      	mov	r2, r0
 8012c28:	4b0c      	ldr	r3, [pc, #48]	@ (8012c5c <__multadd+0x84>)
 8012c2a:	480d      	ldr	r0, [pc, #52]	@ (8012c60 <__multadd+0x88>)
 8012c2c:	21ba      	movs	r1, #186	@ 0xba
 8012c2e:	f000 fd21 	bl	8013674 <__assert_func>
 8012c32:	6922      	ldr	r2, [r4, #16]
 8012c34:	3202      	adds	r2, #2
 8012c36:	f104 010c 	add.w	r1, r4, #12
 8012c3a:	0092      	lsls	r2, r2, #2
 8012c3c:	300c      	adds	r0, #12
 8012c3e:	f7ff f87a 	bl	8011d36 <memcpy>
 8012c42:	4621      	mov	r1, r4
 8012c44:	4638      	mov	r0, r7
 8012c46:	f7ff ffa5 	bl	8012b94 <_Bfree>
 8012c4a:	4644      	mov	r4, r8
 8012c4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c50:	3501      	adds	r5, #1
 8012c52:	615e      	str	r6, [r3, #20]
 8012c54:	6125      	str	r5, [r4, #16]
 8012c56:	4620      	mov	r0, r4
 8012c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c5c:	08013ebc 	.word	0x08013ebc
 8012c60:	08013ecd 	.word	0x08013ecd

08012c64 <__hi0bits>:
 8012c64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012c68:	4603      	mov	r3, r0
 8012c6a:	bf36      	itet	cc
 8012c6c:	0403      	lslcc	r3, r0, #16
 8012c6e:	2000      	movcs	r0, #0
 8012c70:	2010      	movcc	r0, #16
 8012c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012c76:	bf3c      	itt	cc
 8012c78:	021b      	lslcc	r3, r3, #8
 8012c7a:	3008      	addcc	r0, #8
 8012c7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012c80:	bf3c      	itt	cc
 8012c82:	011b      	lslcc	r3, r3, #4
 8012c84:	3004      	addcc	r0, #4
 8012c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012c8a:	bf3c      	itt	cc
 8012c8c:	009b      	lslcc	r3, r3, #2
 8012c8e:	3002      	addcc	r0, #2
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	db05      	blt.n	8012ca0 <__hi0bits+0x3c>
 8012c94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012c98:	f100 0001 	add.w	r0, r0, #1
 8012c9c:	bf08      	it	eq
 8012c9e:	2020      	moveq	r0, #32
 8012ca0:	4770      	bx	lr

08012ca2 <__lo0bits>:
 8012ca2:	6803      	ldr	r3, [r0, #0]
 8012ca4:	4602      	mov	r2, r0
 8012ca6:	f013 0007 	ands.w	r0, r3, #7
 8012caa:	d00b      	beq.n	8012cc4 <__lo0bits+0x22>
 8012cac:	07d9      	lsls	r1, r3, #31
 8012cae:	d421      	bmi.n	8012cf4 <__lo0bits+0x52>
 8012cb0:	0798      	lsls	r0, r3, #30
 8012cb2:	bf49      	itett	mi
 8012cb4:	085b      	lsrmi	r3, r3, #1
 8012cb6:	089b      	lsrpl	r3, r3, #2
 8012cb8:	2001      	movmi	r0, #1
 8012cba:	6013      	strmi	r3, [r2, #0]
 8012cbc:	bf5c      	itt	pl
 8012cbe:	6013      	strpl	r3, [r2, #0]
 8012cc0:	2002      	movpl	r0, #2
 8012cc2:	4770      	bx	lr
 8012cc4:	b299      	uxth	r1, r3
 8012cc6:	b909      	cbnz	r1, 8012ccc <__lo0bits+0x2a>
 8012cc8:	0c1b      	lsrs	r3, r3, #16
 8012cca:	2010      	movs	r0, #16
 8012ccc:	b2d9      	uxtb	r1, r3
 8012cce:	b909      	cbnz	r1, 8012cd4 <__lo0bits+0x32>
 8012cd0:	3008      	adds	r0, #8
 8012cd2:	0a1b      	lsrs	r3, r3, #8
 8012cd4:	0719      	lsls	r1, r3, #28
 8012cd6:	bf04      	itt	eq
 8012cd8:	091b      	lsreq	r3, r3, #4
 8012cda:	3004      	addeq	r0, #4
 8012cdc:	0799      	lsls	r1, r3, #30
 8012cde:	bf04      	itt	eq
 8012ce0:	089b      	lsreq	r3, r3, #2
 8012ce2:	3002      	addeq	r0, #2
 8012ce4:	07d9      	lsls	r1, r3, #31
 8012ce6:	d403      	bmi.n	8012cf0 <__lo0bits+0x4e>
 8012ce8:	085b      	lsrs	r3, r3, #1
 8012cea:	f100 0001 	add.w	r0, r0, #1
 8012cee:	d003      	beq.n	8012cf8 <__lo0bits+0x56>
 8012cf0:	6013      	str	r3, [r2, #0]
 8012cf2:	4770      	bx	lr
 8012cf4:	2000      	movs	r0, #0
 8012cf6:	4770      	bx	lr
 8012cf8:	2020      	movs	r0, #32
 8012cfa:	4770      	bx	lr

08012cfc <__i2b>:
 8012cfc:	b510      	push	{r4, lr}
 8012cfe:	460c      	mov	r4, r1
 8012d00:	2101      	movs	r1, #1
 8012d02:	f7ff ff07 	bl	8012b14 <_Balloc>
 8012d06:	4602      	mov	r2, r0
 8012d08:	b928      	cbnz	r0, 8012d16 <__i2b+0x1a>
 8012d0a:	4b05      	ldr	r3, [pc, #20]	@ (8012d20 <__i2b+0x24>)
 8012d0c:	4805      	ldr	r0, [pc, #20]	@ (8012d24 <__i2b+0x28>)
 8012d0e:	f240 1145 	movw	r1, #325	@ 0x145
 8012d12:	f000 fcaf 	bl	8013674 <__assert_func>
 8012d16:	2301      	movs	r3, #1
 8012d18:	6144      	str	r4, [r0, #20]
 8012d1a:	6103      	str	r3, [r0, #16]
 8012d1c:	bd10      	pop	{r4, pc}
 8012d1e:	bf00      	nop
 8012d20:	08013ebc 	.word	0x08013ebc
 8012d24:	08013ecd 	.word	0x08013ecd

08012d28 <__multiply>:
 8012d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d2c:	4614      	mov	r4, r2
 8012d2e:	690a      	ldr	r2, [r1, #16]
 8012d30:	6923      	ldr	r3, [r4, #16]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	bfa8      	it	ge
 8012d36:	4623      	movge	r3, r4
 8012d38:	460f      	mov	r7, r1
 8012d3a:	bfa4      	itt	ge
 8012d3c:	460c      	movge	r4, r1
 8012d3e:	461f      	movge	r7, r3
 8012d40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012d44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012d48:	68a3      	ldr	r3, [r4, #8]
 8012d4a:	6861      	ldr	r1, [r4, #4]
 8012d4c:	eb0a 0609 	add.w	r6, sl, r9
 8012d50:	42b3      	cmp	r3, r6
 8012d52:	b085      	sub	sp, #20
 8012d54:	bfb8      	it	lt
 8012d56:	3101      	addlt	r1, #1
 8012d58:	f7ff fedc 	bl	8012b14 <_Balloc>
 8012d5c:	b930      	cbnz	r0, 8012d6c <__multiply+0x44>
 8012d5e:	4602      	mov	r2, r0
 8012d60:	4b44      	ldr	r3, [pc, #272]	@ (8012e74 <__multiply+0x14c>)
 8012d62:	4845      	ldr	r0, [pc, #276]	@ (8012e78 <__multiply+0x150>)
 8012d64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012d68:	f000 fc84 	bl	8013674 <__assert_func>
 8012d6c:	f100 0514 	add.w	r5, r0, #20
 8012d70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012d74:	462b      	mov	r3, r5
 8012d76:	2200      	movs	r2, #0
 8012d78:	4543      	cmp	r3, r8
 8012d7a:	d321      	bcc.n	8012dc0 <__multiply+0x98>
 8012d7c:	f107 0114 	add.w	r1, r7, #20
 8012d80:	f104 0214 	add.w	r2, r4, #20
 8012d84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012d88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012d8c:	9302      	str	r3, [sp, #8]
 8012d8e:	1b13      	subs	r3, r2, r4
 8012d90:	3b15      	subs	r3, #21
 8012d92:	f023 0303 	bic.w	r3, r3, #3
 8012d96:	3304      	adds	r3, #4
 8012d98:	f104 0715 	add.w	r7, r4, #21
 8012d9c:	42ba      	cmp	r2, r7
 8012d9e:	bf38      	it	cc
 8012da0:	2304      	movcc	r3, #4
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	9b02      	ldr	r3, [sp, #8]
 8012da6:	9103      	str	r1, [sp, #12]
 8012da8:	428b      	cmp	r3, r1
 8012daa:	d80c      	bhi.n	8012dc6 <__multiply+0x9e>
 8012dac:	2e00      	cmp	r6, #0
 8012dae:	dd03      	ble.n	8012db8 <__multiply+0x90>
 8012db0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d05b      	beq.n	8012e70 <__multiply+0x148>
 8012db8:	6106      	str	r6, [r0, #16]
 8012dba:	b005      	add	sp, #20
 8012dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc0:	f843 2b04 	str.w	r2, [r3], #4
 8012dc4:	e7d8      	b.n	8012d78 <__multiply+0x50>
 8012dc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8012dca:	f1ba 0f00 	cmp.w	sl, #0
 8012dce:	d024      	beq.n	8012e1a <__multiply+0xf2>
 8012dd0:	f104 0e14 	add.w	lr, r4, #20
 8012dd4:	46a9      	mov	r9, r5
 8012dd6:	f04f 0c00 	mov.w	ip, #0
 8012dda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012dde:	f8d9 3000 	ldr.w	r3, [r9]
 8012de2:	fa1f fb87 	uxth.w	fp, r7
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	fb0a 330b 	mla	r3, sl, fp, r3
 8012dec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012df0:	f8d9 7000 	ldr.w	r7, [r9]
 8012df4:	4463      	add	r3, ip
 8012df6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012dfa:	fb0a c70b 	mla	r7, sl, fp, ip
 8012dfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012e08:	4572      	cmp	r2, lr
 8012e0a:	f849 3b04 	str.w	r3, [r9], #4
 8012e0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012e12:	d8e2      	bhi.n	8012dda <__multiply+0xb2>
 8012e14:	9b01      	ldr	r3, [sp, #4]
 8012e16:	f845 c003 	str.w	ip, [r5, r3]
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012e20:	3104      	adds	r1, #4
 8012e22:	f1b9 0f00 	cmp.w	r9, #0
 8012e26:	d021      	beq.n	8012e6c <__multiply+0x144>
 8012e28:	682b      	ldr	r3, [r5, #0]
 8012e2a:	f104 0c14 	add.w	ip, r4, #20
 8012e2e:	46ae      	mov	lr, r5
 8012e30:	f04f 0a00 	mov.w	sl, #0
 8012e34:	f8bc b000 	ldrh.w	fp, [ip]
 8012e38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012e3c:	fb09 770b 	mla	r7, r9, fp, r7
 8012e40:	4457      	add	r7, sl
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012e48:	f84e 3b04 	str.w	r3, [lr], #4
 8012e4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e54:	f8be 3000 	ldrh.w	r3, [lr]
 8012e58:	fb09 330a 	mla	r3, r9, sl, r3
 8012e5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012e60:	4562      	cmp	r2, ip
 8012e62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012e66:	d8e5      	bhi.n	8012e34 <__multiply+0x10c>
 8012e68:	9f01      	ldr	r7, [sp, #4]
 8012e6a:	51eb      	str	r3, [r5, r7]
 8012e6c:	3504      	adds	r5, #4
 8012e6e:	e799      	b.n	8012da4 <__multiply+0x7c>
 8012e70:	3e01      	subs	r6, #1
 8012e72:	e79b      	b.n	8012dac <__multiply+0x84>
 8012e74:	08013ebc 	.word	0x08013ebc
 8012e78:	08013ecd 	.word	0x08013ecd

08012e7c <__pow5mult>:
 8012e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e80:	4615      	mov	r5, r2
 8012e82:	f012 0203 	ands.w	r2, r2, #3
 8012e86:	4607      	mov	r7, r0
 8012e88:	460e      	mov	r6, r1
 8012e8a:	d007      	beq.n	8012e9c <__pow5mult+0x20>
 8012e8c:	4c25      	ldr	r4, [pc, #148]	@ (8012f24 <__pow5mult+0xa8>)
 8012e8e:	3a01      	subs	r2, #1
 8012e90:	2300      	movs	r3, #0
 8012e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012e96:	f7ff fe9f 	bl	8012bd8 <__multadd>
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	10ad      	asrs	r5, r5, #2
 8012e9e:	d03d      	beq.n	8012f1c <__pow5mult+0xa0>
 8012ea0:	69fc      	ldr	r4, [r7, #28]
 8012ea2:	b97c      	cbnz	r4, 8012ec4 <__pow5mult+0x48>
 8012ea4:	2010      	movs	r0, #16
 8012ea6:	f7ff fd7f 	bl	80129a8 <malloc>
 8012eaa:	4602      	mov	r2, r0
 8012eac:	61f8      	str	r0, [r7, #28]
 8012eae:	b928      	cbnz	r0, 8012ebc <__pow5mult+0x40>
 8012eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8012f28 <__pow5mult+0xac>)
 8012eb2:	481e      	ldr	r0, [pc, #120]	@ (8012f2c <__pow5mult+0xb0>)
 8012eb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012eb8:	f000 fbdc 	bl	8013674 <__assert_func>
 8012ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ec0:	6004      	str	r4, [r0, #0]
 8012ec2:	60c4      	str	r4, [r0, #12]
 8012ec4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012ecc:	b94c      	cbnz	r4, 8012ee2 <__pow5mult+0x66>
 8012ece:	f240 2171 	movw	r1, #625	@ 0x271
 8012ed2:	4638      	mov	r0, r7
 8012ed4:	f7ff ff12 	bl	8012cfc <__i2b>
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ede:	4604      	mov	r4, r0
 8012ee0:	6003      	str	r3, [r0, #0]
 8012ee2:	f04f 0900 	mov.w	r9, #0
 8012ee6:	07eb      	lsls	r3, r5, #31
 8012ee8:	d50a      	bpl.n	8012f00 <__pow5mult+0x84>
 8012eea:	4631      	mov	r1, r6
 8012eec:	4622      	mov	r2, r4
 8012eee:	4638      	mov	r0, r7
 8012ef0:	f7ff ff1a 	bl	8012d28 <__multiply>
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	4680      	mov	r8, r0
 8012ef8:	4638      	mov	r0, r7
 8012efa:	f7ff fe4b 	bl	8012b94 <_Bfree>
 8012efe:	4646      	mov	r6, r8
 8012f00:	106d      	asrs	r5, r5, #1
 8012f02:	d00b      	beq.n	8012f1c <__pow5mult+0xa0>
 8012f04:	6820      	ldr	r0, [r4, #0]
 8012f06:	b938      	cbnz	r0, 8012f18 <__pow5mult+0x9c>
 8012f08:	4622      	mov	r2, r4
 8012f0a:	4621      	mov	r1, r4
 8012f0c:	4638      	mov	r0, r7
 8012f0e:	f7ff ff0b 	bl	8012d28 <__multiply>
 8012f12:	6020      	str	r0, [r4, #0]
 8012f14:	f8c0 9000 	str.w	r9, [r0]
 8012f18:	4604      	mov	r4, r0
 8012f1a:	e7e4      	b.n	8012ee6 <__pow5mult+0x6a>
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f22:	bf00      	nop
 8012f24:	08013f28 	.word	0x08013f28
 8012f28:	08013e4d 	.word	0x08013e4d
 8012f2c:	08013ecd 	.word	0x08013ecd

08012f30 <__lshift>:
 8012f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f34:	460c      	mov	r4, r1
 8012f36:	6849      	ldr	r1, [r1, #4]
 8012f38:	6923      	ldr	r3, [r4, #16]
 8012f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f3e:	68a3      	ldr	r3, [r4, #8]
 8012f40:	4607      	mov	r7, r0
 8012f42:	4691      	mov	r9, r2
 8012f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f48:	f108 0601 	add.w	r6, r8, #1
 8012f4c:	42b3      	cmp	r3, r6
 8012f4e:	db0b      	blt.n	8012f68 <__lshift+0x38>
 8012f50:	4638      	mov	r0, r7
 8012f52:	f7ff fddf 	bl	8012b14 <_Balloc>
 8012f56:	4605      	mov	r5, r0
 8012f58:	b948      	cbnz	r0, 8012f6e <__lshift+0x3e>
 8012f5a:	4602      	mov	r2, r0
 8012f5c:	4b28      	ldr	r3, [pc, #160]	@ (8013000 <__lshift+0xd0>)
 8012f5e:	4829      	ldr	r0, [pc, #164]	@ (8013004 <__lshift+0xd4>)
 8012f60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012f64:	f000 fb86 	bl	8013674 <__assert_func>
 8012f68:	3101      	adds	r1, #1
 8012f6a:	005b      	lsls	r3, r3, #1
 8012f6c:	e7ee      	b.n	8012f4c <__lshift+0x1c>
 8012f6e:	2300      	movs	r3, #0
 8012f70:	f100 0114 	add.w	r1, r0, #20
 8012f74:	f100 0210 	add.w	r2, r0, #16
 8012f78:	4618      	mov	r0, r3
 8012f7a:	4553      	cmp	r3, sl
 8012f7c:	db33      	blt.n	8012fe6 <__lshift+0xb6>
 8012f7e:	6920      	ldr	r0, [r4, #16]
 8012f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012f84:	f104 0314 	add.w	r3, r4, #20
 8012f88:	f019 091f 	ands.w	r9, r9, #31
 8012f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012f90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012f94:	d02b      	beq.n	8012fee <__lshift+0xbe>
 8012f96:	f1c9 0e20 	rsb	lr, r9, #32
 8012f9a:	468a      	mov	sl, r1
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	6818      	ldr	r0, [r3, #0]
 8012fa0:	fa00 f009 	lsl.w	r0, r0, r9
 8012fa4:	4310      	orrs	r0, r2
 8012fa6:	f84a 0b04 	str.w	r0, [sl], #4
 8012faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fae:	459c      	cmp	ip, r3
 8012fb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012fb4:	d8f3      	bhi.n	8012f9e <__lshift+0x6e>
 8012fb6:	ebac 0304 	sub.w	r3, ip, r4
 8012fba:	3b15      	subs	r3, #21
 8012fbc:	f023 0303 	bic.w	r3, r3, #3
 8012fc0:	3304      	adds	r3, #4
 8012fc2:	f104 0015 	add.w	r0, r4, #21
 8012fc6:	4584      	cmp	ip, r0
 8012fc8:	bf38      	it	cc
 8012fca:	2304      	movcc	r3, #4
 8012fcc:	50ca      	str	r2, [r1, r3]
 8012fce:	b10a      	cbz	r2, 8012fd4 <__lshift+0xa4>
 8012fd0:	f108 0602 	add.w	r6, r8, #2
 8012fd4:	3e01      	subs	r6, #1
 8012fd6:	4638      	mov	r0, r7
 8012fd8:	612e      	str	r6, [r5, #16]
 8012fda:	4621      	mov	r1, r4
 8012fdc:	f7ff fdda 	bl	8012b94 <_Bfree>
 8012fe0:	4628      	mov	r0, r5
 8012fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012fea:	3301      	adds	r3, #1
 8012fec:	e7c5      	b.n	8012f7a <__lshift+0x4a>
 8012fee:	3904      	subs	r1, #4
 8012ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ff4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012ff8:	459c      	cmp	ip, r3
 8012ffa:	d8f9      	bhi.n	8012ff0 <__lshift+0xc0>
 8012ffc:	e7ea      	b.n	8012fd4 <__lshift+0xa4>
 8012ffe:	bf00      	nop
 8013000:	08013ebc 	.word	0x08013ebc
 8013004:	08013ecd 	.word	0x08013ecd

08013008 <__mcmp>:
 8013008:	690a      	ldr	r2, [r1, #16]
 801300a:	4603      	mov	r3, r0
 801300c:	6900      	ldr	r0, [r0, #16]
 801300e:	1a80      	subs	r0, r0, r2
 8013010:	b530      	push	{r4, r5, lr}
 8013012:	d10e      	bne.n	8013032 <__mcmp+0x2a>
 8013014:	3314      	adds	r3, #20
 8013016:	3114      	adds	r1, #20
 8013018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801301c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013028:	4295      	cmp	r5, r2
 801302a:	d003      	beq.n	8013034 <__mcmp+0x2c>
 801302c:	d205      	bcs.n	801303a <__mcmp+0x32>
 801302e:	f04f 30ff 	mov.w	r0, #4294967295
 8013032:	bd30      	pop	{r4, r5, pc}
 8013034:	42a3      	cmp	r3, r4
 8013036:	d3f3      	bcc.n	8013020 <__mcmp+0x18>
 8013038:	e7fb      	b.n	8013032 <__mcmp+0x2a>
 801303a:	2001      	movs	r0, #1
 801303c:	e7f9      	b.n	8013032 <__mcmp+0x2a>
	...

08013040 <__mdiff>:
 8013040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013044:	4689      	mov	r9, r1
 8013046:	4606      	mov	r6, r0
 8013048:	4611      	mov	r1, r2
 801304a:	4648      	mov	r0, r9
 801304c:	4614      	mov	r4, r2
 801304e:	f7ff ffdb 	bl	8013008 <__mcmp>
 8013052:	1e05      	subs	r5, r0, #0
 8013054:	d112      	bne.n	801307c <__mdiff+0x3c>
 8013056:	4629      	mov	r1, r5
 8013058:	4630      	mov	r0, r6
 801305a:	f7ff fd5b 	bl	8012b14 <_Balloc>
 801305e:	4602      	mov	r2, r0
 8013060:	b928      	cbnz	r0, 801306e <__mdiff+0x2e>
 8013062:	4b3f      	ldr	r3, [pc, #252]	@ (8013160 <__mdiff+0x120>)
 8013064:	f240 2137 	movw	r1, #567	@ 0x237
 8013068:	483e      	ldr	r0, [pc, #248]	@ (8013164 <__mdiff+0x124>)
 801306a:	f000 fb03 	bl	8013674 <__assert_func>
 801306e:	2301      	movs	r3, #1
 8013070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013074:	4610      	mov	r0, r2
 8013076:	b003      	add	sp, #12
 8013078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801307c:	bfbc      	itt	lt
 801307e:	464b      	movlt	r3, r9
 8013080:	46a1      	movlt	r9, r4
 8013082:	4630      	mov	r0, r6
 8013084:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013088:	bfba      	itte	lt
 801308a:	461c      	movlt	r4, r3
 801308c:	2501      	movlt	r5, #1
 801308e:	2500      	movge	r5, #0
 8013090:	f7ff fd40 	bl	8012b14 <_Balloc>
 8013094:	4602      	mov	r2, r0
 8013096:	b918      	cbnz	r0, 80130a0 <__mdiff+0x60>
 8013098:	4b31      	ldr	r3, [pc, #196]	@ (8013160 <__mdiff+0x120>)
 801309a:	f240 2145 	movw	r1, #581	@ 0x245
 801309e:	e7e3      	b.n	8013068 <__mdiff+0x28>
 80130a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80130a4:	6926      	ldr	r6, [r4, #16]
 80130a6:	60c5      	str	r5, [r0, #12]
 80130a8:	f109 0310 	add.w	r3, r9, #16
 80130ac:	f109 0514 	add.w	r5, r9, #20
 80130b0:	f104 0e14 	add.w	lr, r4, #20
 80130b4:	f100 0b14 	add.w	fp, r0, #20
 80130b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80130bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80130c0:	9301      	str	r3, [sp, #4]
 80130c2:	46d9      	mov	r9, fp
 80130c4:	f04f 0c00 	mov.w	ip, #0
 80130c8:	9b01      	ldr	r3, [sp, #4]
 80130ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80130ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80130d2:	9301      	str	r3, [sp, #4]
 80130d4:	fa1f f38a 	uxth.w	r3, sl
 80130d8:	4619      	mov	r1, r3
 80130da:	b283      	uxth	r3, r0
 80130dc:	1acb      	subs	r3, r1, r3
 80130de:	0c00      	lsrs	r0, r0, #16
 80130e0:	4463      	add	r3, ip
 80130e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80130e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80130f0:	4576      	cmp	r6, lr
 80130f2:	f849 3b04 	str.w	r3, [r9], #4
 80130f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80130fa:	d8e5      	bhi.n	80130c8 <__mdiff+0x88>
 80130fc:	1b33      	subs	r3, r6, r4
 80130fe:	3b15      	subs	r3, #21
 8013100:	f023 0303 	bic.w	r3, r3, #3
 8013104:	3415      	adds	r4, #21
 8013106:	3304      	adds	r3, #4
 8013108:	42a6      	cmp	r6, r4
 801310a:	bf38      	it	cc
 801310c:	2304      	movcc	r3, #4
 801310e:	441d      	add	r5, r3
 8013110:	445b      	add	r3, fp
 8013112:	461e      	mov	r6, r3
 8013114:	462c      	mov	r4, r5
 8013116:	4544      	cmp	r4, r8
 8013118:	d30e      	bcc.n	8013138 <__mdiff+0xf8>
 801311a:	f108 0103 	add.w	r1, r8, #3
 801311e:	1b49      	subs	r1, r1, r5
 8013120:	f021 0103 	bic.w	r1, r1, #3
 8013124:	3d03      	subs	r5, #3
 8013126:	45a8      	cmp	r8, r5
 8013128:	bf38      	it	cc
 801312a:	2100      	movcc	r1, #0
 801312c:	440b      	add	r3, r1
 801312e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013132:	b191      	cbz	r1, 801315a <__mdiff+0x11a>
 8013134:	6117      	str	r7, [r2, #16]
 8013136:	e79d      	b.n	8013074 <__mdiff+0x34>
 8013138:	f854 1b04 	ldr.w	r1, [r4], #4
 801313c:	46e6      	mov	lr, ip
 801313e:	0c08      	lsrs	r0, r1, #16
 8013140:	fa1c fc81 	uxtah	ip, ip, r1
 8013144:	4471      	add	r1, lr
 8013146:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801314a:	b289      	uxth	r1, r1
 801314c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013150:	f846 1b04 	str.w	r1, [r6], #4
 8013154:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013158:	e7dd      	b.n	8013116 <__mdiff+0xd6>
 801315a:	3f01      	subs	r7, #1
 801315c:	e7e7      	b.n	801312e <__mdiff+0xee>
 801315e:	bf00      	nop
 8013160:	08013ebc 	.word	0x08013ebc
 8013164:	08013ecd 	.word	0x08013ecd

08013168 <__d2b>:
 8013168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801316c:	460f      	mov	r7, r1
 801316e:	2101      	movs	r1, #1
 8013170:	ec59 8b10 	vmov	r8, r9, d0
 8013174:	4616      	mov	r6, r2
 8013176:	f7ff fccd 	bl	8012b14 <_Balloc>
 801317a:	4604      	mov	r4, r0
 801317c:	b930      	cbnz	r0, 801318c <__d2b+0x24>
 801317e:	4602      	mov	r2, r0
 8013180:	4b23      	ldr	r3, [pc, #140]	@ (8013210 <__d2b+0xa8>)
 8013182:	4824      	ldr	r0, [pc, #144]	@ (8013214 <__d2b+0xac>)
 8013184:	f240 310f 	movw	r1, #783	@ 0x30f
 8013188:	f000 fa74 	bl	8013674 <__assert_func>
 801318c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013194:	b10d      	cbz	r5, 801319a <__d2b+0x32>
 8013196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801319a:	9301      	str	r3, [sp, #4]
 801319c:	f1b8 0300 	subs.w	r3, r8, #0
 80131a0:	d023      	beq.n	80131ea <__d2b+0x82>
 80131a2:	4668      	mov	r0, sp
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	f7ff fd7c 	bl	8012ca2 <__lo0bits>
 80131aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131ae:	b1d0      	cbz	r0, 80131e6 <__d2b+0x7e>
 80131b0:	f1c0 0320 	rsb	r3, r0, #32
 80131b4:	fa02 f303 	lsl.w	r3, r2, r3
 80131b8:	430b      	orrs	r3, r1
 80131ba:	40c2      	lsrs	r2, r0
 80131bc:	6163      	str	r3, [r4, #20]
 80131be:	9201      	str	r2, [sp, #4]
 80131c0:	9b01      	ldr	r3, [sp, #4]
 80131c2:	61a3      	str	r3, [r4, #24]
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	bf0c      	ite	eq
 80131c8:	2201      	moveq	r2, #1
 80131ca:	2202      	movne	r2, #2
 80131cc:	6122      	str	r2, [r4, #16]
 80131ce:	b1a5      	cbz	r5, 80131fa <__d2b+0x92>
 80131d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80131d4:	4405      	add	r5, r0
 80131d6:	603d      	str	r5, [r7, #0]
 80131d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80131dc:	6030      	str	r0, [r6, #0]
 80131de:	4620      	mov	r0, r4
 80131e0:	b003      	add	sp, #12
 80131e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80131e6:	6161      	str	r1, [r4, #20]
 80131e8:	e7ea      	b.n	80131c0 <__d2b+0x58>
 80131ea:	a801      	add	r0, sp, #4
 80131ec:	f7ff fd59 	bl	8012ca2 <__lo0bits>
 80131f0:	9b01      	ldr	r3, [sp, #4]
 80131f2:	6163      	str	r3, [r4, #20]
 80131f4:	3020      	adds	r0, #32
 80131f6:	2201      	movs	r2, #1
 80131f8:	e7e8      	b.n	80131cc <__d2b+0x64>
 80131fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80131fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013202:	6038      	str	r0, [r7, #0]
 8013204:	6918      	ldr	r0, [r3, #16]
 8013206:	f7ff fd2d 	bl	8012c64 <__hi0bits>
 801320a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801320e:	e7e5      	b.n	80131dc <__d2b+0x74>
 8013210:	08013ebc 	.word	0x08013ebc
 8013214:	08013ecd 	.word	0x08013ecd

08013218 <__ssputs_r>:
 8013218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801321c:	688e      	ldr	r6, [r1, #8]
 801321e:	461f      	mov	r7, r3
 8013220:	42be      	cmp	r6, r7
 8013222:	680b      	ldr	r3, [r1, #0]
 8013224:	4682      	mov	sl, r0
 8013226:	460c      	mov	r4, r1
 8013228:	4690      	mov	r8, r2
 801322a:	d82d      	bhi.n	8013288 <__ssputs_r+0x70>
 801322c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013230:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013234:	d026      	beq.n	8013284 <__ssputs_r+0x6c>
 8013236:	6965      	ldr	r5, [r4, #20]
 8013238:	6909      	ldr	r1, [r1, #16]
 801323a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801323e:	eba3 0901 	sub.w	r9, r3, r1
 8013242:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013246:	1c7b      	adds	r3, r7, #1
 8013248:	444b      	add	r3, r9
 801324a:	106d      	asrs	r5, r5, #1
 801324c:	429d      	cmp	r5, r3
 801324e:	bf38      	it	cc
 8013250:	461d      	movcc	r5, r3
 8013252:	0553      	lsls	r3, r2, #21
 8013254:	d527      	bpl.n	80132a6 <__ssputs_r+0x8e>
 8013256:	4629      	mov	r1, r5
 8013258:	f7ff fbd0 	bl	80129fc <_malloc_r>
 801325c:	4606      	mov	r6, r0
 801325e:	b360      	cbz	r0, 80132ba <__ssputs_r+0xa2>
 8013260:	6921      	ldr	r1, [r4, #16]
 8013262:	464a      	mov	r2, r9
 8013264:	f7fe fd67 	bl	8011d36 <memcpy>
 8013268:	89a3      	ldrh	r3, [r4, #12]
 801326a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801326e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013272:	81a3      	strh	r3, [r4, #12]
 8013274:	6126      	str	r6, [r4, #16]
 8013276:	6165      	str	r5, [r4, #20]
 8013278:	444e      	add	r6, r9
 801327a:	eba5 0509 	sub.w	r5, r5, r9
 801327e:	6026      	str	r6, [r4, #0]
 8013280:	60a5      	str	r5, [r4, #8]
 8013282:	463e      	mov	r6, r7
 8013284:	42be      	cmp	r6, r7
 8013286:	d900      	bls.n	801328a <__ssputs_r+0x72>
 8013288:	463e      	mov	r6, r7
 801328a:	6820      	ldr	r0, [r4, #0]
 801328c:	4632      	mov	r2, r6
 801328e:	4641      	mov	r1, r8
 8013290:	f000 f9c6 	bl	8013620 <memmove>
 8013294:	68a3      	ldr	r3, [r4, #8]
 8013296:	1b9b      	subs	r3, r3, r6
 8013298:	60a3      	str	r3, [r4, #8]
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	4433      	add	r3, r6
 801329e:	6023      	str	r3, [r4, #0]
 80132a0:	2000      	movs	r0, #0
 80132a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80132a6:	462a      	mov	r2, r5
 80132a8:	f000 fa28 	bl	80136fc <_realloc_r>
 80132ac:	4606      	mov	r6, r0
 80132ae:	2800      	cmp	r0, #0
 80132b0:	d1e0      	bne.n	8013274 <__ssputs_r+0x5c>
 80132b2:	6921      	ldr	r1, [r4, #16]
 80132b4:	4650      	mov	r0, sl
 80132b6:	f7ff fb2d 	bl	8012914 <_free_r>
 80132ba:	230c      	movs	r3, #12
 80132bc:	f8ca 3000 	str.w	r3, [sl]
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80132c6:	81a3      	strh	r3, [r4, #12]
 80132c8:	f04f 30ff 	mov.w	r0, #4294967295
 80132cc:	e7e9      	b.n	80132a2 <__ssputs_r+0x8a>
	...

080132d0 <_svfiprintf_r>:
 80132d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	4698      	mov	r8, r3
 80132d6:	898b      	ldrh	r3, [r1, #12]
 80132d8:	061b      	lsls	r3, r3, #24
 80132da:	b09d      	sub	sp, #116	@ 0x74
 80132dc:	4607      	mov	r7, r0
 80132de:	460d      	mov	r5, r1
 80132e0:	4614      	mov	r4, r2
 80132e2:	d510      	bpl.n	8013306 <_svfiprintf_r+0x36>
 80132e4:	690b      	ldr	r3, [r1, #16]
 80132e6:	b973      	cbnz	r3, 8013306 <_svfiprintf_r+0x36>
 80132e8:	2140      	movs	r1, #64	@ 0x40
 80132ea:	f7ff fb87 	bl	80129fc <_malloc_r>
 80132ee:	6028      	str	r0, [r5, #0]
 80132f0:	6128      	str	r0, [r5, #16]
 80132f2:	b930      	cbnz	r0, 8013302 <_svfiprintf_r+0x32>
 80132f4:	230c      	movs	r3, #12
 80132f6:	603b      	str	r3, [r7, #0]
 80132f8:	f04f 30ff 	mov.w	r0, #4294967295
 80132fc:	b01d      	add	sp, #116	@ 0x74
 80132fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013302:	2340      	movs	r3, #64	@ 0x40
 8013304:	616b      	str	r3, [r5, #20]
 8013306:	2300      	movs	r3, #0
 8013308:	9309      	str	r3, [sp, #36]	@ 0x24
 801330a:	2320      	movs	r3, #32
 801330c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013310:	f8cd 800c 	str.w	r8, [sp, #12]
 8013314:	2330      	movs	r3, #48	@ 0x30
 8013316:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80134b4 <_svfiprintf_r+0x1e4>
 801331a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801331e:	f04f 0901 	mov.w	r9, #1
 8013322:	4623      	mov	r3, r4
 8013324:	469a      	mov	sl, r3
 8013326:	f813 2b01 	ldrb.w	r2, [r3], #1
 801332a:	b10a      	cbz	r2, 8013330 <_svfiprintf_r+0x60>
 801332c:	2a25      	cmp	r2, #37	@ 0x25
 801332e:	d1f9      	bne.n	8013324 <_svfiprintf_r+0x54>
 8013330:	ebba 0b04 	subs.w	fp, sl, r4
 8013334:	d00b      	beq.n	801334e <_svfiprintf_r+0x7e>
 8013336:	465b      	mov	r3, fp
 8013338:	4622      	mov	r2, r4
 801333a:	4629      	mov	r1, r5
 801333c:	4638      	mov	r0, r7
 801333e:	f7ff ff6b 	bl	8013218 <__ssputs_r>
 8013342:	3001      	adds	r0, #1
 8013344:	f000 80a7 	beq.w	8013496 <_svfiprintf_r+0x1c6>
 8013348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801334a:	445a      	add	r2, fp
 801334c:	9209      	str	r2, [sp, #36]	@ 0x24
 801334e:	f89a 3000 	ldrb.w	r3, [sl]
 8013352:	2b00      	cmp	r3, #0
 8013354:	f000 809f 	beq.w	8013496 <_svfiprintf_r+0x1c6>
 8013358:	2300      	movs	r3, #0
 801335a:	f04f 32ff 	mov.w	r2, #4294967295
 801335e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013362:	f10a 0a01 	add.w	sl, sl, #1
 8013366:	9304      	str	r3, [sp, #16]
 8013368:	9307      	str	r3, [sp, #28]
 801336a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801336e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013370:	4654      	mov	r4, sl
 8013372:	2205      	movs	r2, #5
 8013374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013378:	484e      	ldr	r0, [pc, #312]	@ (80134b4 <_svfiprintf_r+0x1e4>)
 801337a:	f7ec ffc9 	bl	8000310 <memchr>
 801337e:	9a04      	ldr	r2, [sp, #16]
 8013380:	b9d8      	cbnz	r0, 80133ba <_svfiprintf_r+0xea>
 8013382:	06d0      	lsls	r0, r2, #27
 8013384:	bf44      	itt	mi
 8013386:	2320      	movmi	r3, #32
 8013388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801338c:	0711      	lsls	r1, r2, #28
 801338e:	bf44      	itt	mi
 8013390:	232b      	movmi	r3, #43	@ 0x2b
 8013392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013396:	f89a 3000 	ldrb.w	r3, [sl]
 801339a:	2b2a      	cmp	r3, #42	@ 0x2a
 801339c:	d015      	beq.n	80133ca <_svfiprintf_r+0xfa>
 801339e:	9a07      	ldr	r2, [sp, #28]
 80133a0:	4654      	mov	r4, sl
 80133a2:	2000      	movs	r0, #0
 80133a4:	f04f 0c0a 	mov.w	ip, #10
 80133a8:	4621      	mov	r1, r4
 80133aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ae:	3b30      	subs	r3, #48	@ 0x30
 80133b0:	2b09      	cmp	r3, #9
 80133b2:	d94b      	bls.n	801344c <_svfiprintf_r+0x17c>
 80133b4:	b1b0      	cbz	r0, 80133e4 <_svfiprintf_r+0x114>
 80133b6:	9207      	str	r2, [sp, #28]
 80133b8:	e014      	b.n	80133e4 <_svfiprintf_r+0x114>
 80133ba:	eba0 0308 	sub.w	r3, r0, r8
 80133be:	fa09 f303 	lsl.w	r3, r9, r3
 80133c2:	4313      	orrs	r3, r2
 80133c4:	9304      	str	r3, [sp, #16]
 80133c6:	46a2      	mov	sl, r4
 80133c8:	e7d2      	b.n	8013370 <_svfiprintf_r+0xa0>
 80133ca:	9b03      	ldr	r3, [sp, #12]
 80133cc:	1d19      	adds	r1, r3, #4
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	9103      	str	r1, [sp, #12]
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	bfbb      	ittet	lt
 80133d6:	425b      	neglt	r3, r3
 80133d8:	f042 0202 	orrlt.w	r2, r2, #2
 80133dc:	9307      	strge	r3, [sp, #28]
 80133de:	9307      	strlt	r3, [sp, #28]
 80133e0:	bfb8      	it	lt
 80133e2:	9204      	strlt	r2, [sp, #16]
 80133e4:	7823      	ldrb	r3, [r4, #0]
 80133e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80133e8:	d10a      	bne.n	8013400 <_svfiprintf_r+0x130>
 80133ea:	7863      	ldrb	r3, [r4, #1]
 80133ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80133ee:	d132      	bne.n	8013456 <_svfiprintf_r+0x186>
 80133f0:	9b03      	ldr	r3, [sp, #12]
 80133f2:	1d1a      	adds	r2, r3, #4
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	9203      	str	r2, [sp, #12]
 80133f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80133fc:	3402      	adds	r4, #2
 80133fe:	9305      	str	r3, [sp, #20]
 8013400:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80134c4 <_svfiprintf_r+0x1f4>
 8013404:	7821      	ldrb	r1, [r4, #0]
 8013406:	2203      	movs	r2, #3
 8013408:	4650      	mov	r0, sl
 801340a:	f7ec ff81 	bl	8000310 <memchr>
 801340e:	b138      	cbz	r0, 8013420 <_svfiprintf_r+0x150>
 8013410:	9b04      	ldr	r3, [sp, #16]
 8013412:	eba0 000a 	sub.w	r0, r0, sl
 8013416:	2240      	movs	r2, #64	@ 0x40
 8013418:	4082      	lsls	r2, r0
 801341a:	4313      	orrs	r3, r2
 801341c:	3401      	adds	r4, #1
 801341e:	9304      	str	r3, [sp, #16]
 8013420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013424:	4824      	ldr	r0, [pc, #144]	@ (80134b8 <_svfiprintf_r+0x1e8>)
 8013426:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801342a:	2206      	movs	r2, #6
 801342c:	f7ec ff70 	bl	8000310 <memchr>
 8013430:	2800      	cmp	r0, #0
 8013432:	d036      	beq.n	80134a2 <_svfiprintf_r+0x1d2>
 8013434:	4b21      	ldr	r3, [pc, #132]	@ (80134bc <_svfiprintf_r+0x1ec>)
 8013436:	bb1b      	cbnz	r3, 8013480 <_svfiprintf_r+0x1b0>
 8013438:	9b03      	ldr	r3, [sp, #12]
 801343a:	3307      	adds	r3, #7
 801343c:	f023 0307 	bic.w	r3, r3, #7
 8013440:	3308      	adds	r3, #8
 8013442:	9303      	str	r3, [sp, #12]
 8013444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013446:	4433      	add	r3, r6
 8013448:	9309      	str	r3, [sp, #36]	@ 0x24
 801344a:	e76a      	b.n	8013322 <_svfiprintf_r+0x52>
 801344c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013450:	460c      	mov	r4, r1
 8013452:	2001      	movs	r0, #1
 8013454:	e7a8      	b.n	80133a8 <_svfiprintf_r+0xd8>
 8013456:	2300      	movs	r3, #0
 8013458:	3401      	adds	r4, #1
 801345a:	9305      	str	r3, [sp, #20]
 801345c:	4619      	mov	r1, r3
 801345e:	f04f 0c0a 	mov.w	ip, #10
 8013462:	4620      	mov	r0, r4
 8013464:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013468:	3a30      	subs	r2, #48	@ 0x30
 801346a:	2a09      	cmp	r2, #9
 801346c:	d903      	bls.n	8013476 <_svfiprintf_r+0x1a6>
 801346e:	2b00      	cmp	r3, #0
 8013470:	d0c6      	beq.n	8013400 <_svfiprintf_r+0x130>
 8013472:	9105      	str	r1, [sp, #20]
 8013474:	e7c4      	b.n	8013400 <_svfiprintf_r+0x130>
 8013476:	fb0c 2101 	mla	r1, ip, r1, r2
 801347a:	4604      	mov	r4, r0
 801347c:	2301      	movs	r3, #1
 801347e:	e7f0      	b.n	8013462 <_svfiprintf_r+0x192>
 8013480:	ab03      	add	r3, sp, #12
 8013482:	9300      	str	r3, [sp, #0]
 8013484:	462a      	mov	r2, r5
 8013486:	4b0e      	ldr	r3, [pc, #56]	@ (80134c0 <_svfiprintf_r+0x1f0>)
 8013488:	a904      	add	r1, sp, #16
 801348a:	4638      	mov	r0, r7
 801348c:	f7fd fe9c 	bl	80111c8 <_printf_float>
 8013490:	1c42      	adds	r2, r0, #1
 8013492:	4606      	mov	r6, r0
 8013494:	d1d6      	bne.n	8013444 <_svfiprintf_r+0x174>
 8013496:	89ab      	ldrh	r3, [r5, #12]
 8013498:	065b      	lsls	r3, r3, #25
 801349a:	f53f af2d 	bmi.w	80132f8 <_svfiprintf_r+0x28>
 801349e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80134a0:	e72c      	b.n	80132fc <_svfiprintf_r+0x2c>
 80134a2:	ab03      	add	r3, sp, #12
 80134a4:	9300      	str	r3, [sp, #0]
 80134a6:	462a      	mov	r2, r5
 80134a8:	4b05      	ldr	r3, [pc, #20]	@ (80134c0 <_svfiprintf_r+0x1f0>)
 80134aa:	a904      	add	r1, sp, #16
 80134ac:	4638      	mov	r0, r7
 80134ae:	f7fe f913 	bl	80116d8 <_printf_i>
 80134b2:	e7ed      	b.n	8013490 <_svfiprintf_r+0x1c0>
 80134b4:	08014028 	.word	0x08014028
 80134b8:	08014032 	.word	0x08014032
 80134bc:	080111c9 	.word	0x080111c9
 80134c0:	08013219 	.word	0x08013219
 80134c4:	0801402e 	.word	0x0801402e

080134c8 <__sflush_r>:
 80134c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80134cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134d0:	0716      	lsls	r6, r2, #28
 80134d2:	4605      	mov	r5, r0
 80134d4:	460c      	mov	r4, r1
 80134d6:	d454      	bmi.n	8013582 <__sflush_r+0xba>
 80134d8:	684b      	ldr	r3, [r1, #4]
 80134da:	2b00      	cmp	r3, #0
 80134dc:	dc02      	bgt.n	80134e4 <__sflush_r+0x1c>
 80134de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	dd48      	ble.n	8013576 <__sflush_r+0xae>
 80134e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80134e6:	2e00      	cmp	r6, #0
 80134e8:	d045      	beq.n	8013576 <__sflush_r+0xae>
 80134ea:	2300      	movs	r3, #0
 80134ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80134f0:	682f      	ldr	r7, [r5, #0]
 80134f2:	6a21      	ldr	r1, [r4, #32]
 80134f4:	602b      	str	r3, [r5, #0]
 80134f6:	d030      	beq.n	801355a <__sflush_r+0x92>
 80134f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80134fa:	89a3      	ldrh	r3, [r4, #12]
 80134fc:	0759      	lsls	r1, r3, #29
 80134fe:	d505      	bpl.n	801350c <__sflush_r+0x44>
 8013500:	6863      	ldr	r3, [r4, #4]
 8013502:	1ad2      	subs	r2, r2, r3
 8013504:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013506:	b10b      	cbz	r3, 801350c <__sflush_r+0x44>
 8013508:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801350a:	1ad2      	subs	r2, r2, r3
 801350c:	2300      	movs	r3, #0
 801350e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013510:	6a21      	ldr	r1, [r4, #32]
 8013512:	4628      	mov	r0, r5
 8013514:	47b0      	blx	r6
 8013516:	1c43      	adds	r3, r0, #1
 8013518:	89a3      	ldrh	r3, [r4, #12]
 801351a:	d106      	bne.n	801352a <__sflush_r+0x62>
 801351c:	6829      	ldr	r1, [r5, #0]
 801351e:	291d      	cmp	r1, #29
 8013520:	d82b      	bhi.n	801357a <__sflush_r+0xb2>
 8013522:	4a2a      	ldr	r2, [pc, #168]	@ (80135cc <__sflush_r+0x104>)
 8013524:	410a      	asrs	r2, r1
 8013526:	07d6      	lsls	r6, r2, #31
 8013528:	d427      	bmi.n	801357a <__sflush_r+0xb2>
 801352a:	2200      	movs	r2, #0
 801352c:	6062      	str	r2, [r4, #4]
 801352e:	04d9      	lsls	r1, r3, #19
 8013530:	6922      	ldr	r2, [r4, #16]
 8013532:	6022      	str	r2, [r4, #0]
 8013534:	d504      	bpl.n	8013540 <__sflush_r+0x78>
 8013536:	1c42      	adds	r2, r0, #1
 8013538:	d101      	bne.n	801353e <__sflush_r+0x76>
 801353a:	682b      	ldr	r3, [r5, #0]
 801353c:	b903      	cbnz	r3, 8013540 <__sflush_r+0x78>
 801353e:	6560      	str	r0, [r4, #84]	@ 0x54
 8013540:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013542:	602f      	str	r7, [r5, #0]
 8013544:	b1b9      	cbz	r1, 8013576 <__sflush_r+0xae>
 8013546:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801354a:	4299      	cmp	r1, r3
 801354c:	d002      	beq.n	8013554 <__sflush_r+0x8c>
 801354e:	4628      	mov	r0, r5
 8013550:	f7ff f9e0 	bl	8012914 <_free_r>
 8013554:	2300      	movs	r3, #0
 8013556:	6363      	str	r3, [r4, #52]	@ 0x34
 8013558:	e00d      	b.n	8013576 <__sflush_r+0xae>
 801355a:	2301      	movs	r3, #1
 801355c:	4628      	mov	r0, r5
 801355e:	47b0      	blx	r6
 8013560:	4602      	mov	r2, r0
 8013562:	1c50      	adds	r0, r2, #1
 8013564:	d1c9      	bne.n	80134fa <__sflush_r+0x32>
 8013566:	682b      	ldr	r3, [r5, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d0c6      	beq.n	80134fa <__sflush_r+0x32>
 801356c:	2b1d      	cmp	r3, #29
 801356e:	d001      	beq.n	8013574 <__sflush_r+0xac>
 8013570:	2b16      	cmp	r3, #22
 8013572:	d11e      	bne.n	80135b2 <__sflush_r+0xea>
 8013574:	602f      	str	r7, [r5, #0]
 8013576:	2000      	movs	r0, #0
 8013578:	e022      	b.n	80135c0 <__sflush_r+0xf8>
 801357a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801357e:	b21b      	sxth	r3, r3
 8013580:	e01b      	b.n	80135ba <__sflush_r+0xf2>
 8013582:	690f      	ldr	r7, [r1, #16]
 8013584:	2f00      	cmp	r7, #0
 8013586:	d0f6      	beq.n	8013576 <__sflush_r+0xae>
 8013588:	0793      	lsls	r3, r2, #30
 801358a:	680e      	ldr	r6, [r1, #0]
 801358c:	bf08      	it	eq
 801358e:	694b      	ldreq	r3, [r1, #20]
 8013590:	600f      	str	r7, [r1, #0]
 8013592:	bf18      	it	ne
 8013594:	2300      	movne	r3, #0
 8013596:	eba6 0807 	sub.w	r8, r6, r7
 801359a:	608b      	str	r3, [r1, #8]
 801359c:	f1b8 0f00 	cmp.w	r8, #0
 80135a0:	dde9      	ble.n	8013576 <__sflush_r+0xae>
 80135a2:	6a21      	ldr	r1, [r4, #32]
 80135a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80135a6:	4643      	mov	r3, r8
 80135a8:	463a      	mov	r2, r7
 80135aa:	4628      	mov	r0, r5
 80135ac:	47b0      	blx	r6
 80135ae:	2800      	cmp	r0, #0
 80135b0:	dc08      	bgt.n	80135c4 <__sflush_r+0xfc>
 80135b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80135ba:	81a3      	strh	r3, [r4, #12]
 80135bc:	f04f 30ff 	mov.w	r0, #4294967295
 80135c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135c4:	4407      	add	r7, r0
 80135c6:	eba8 0800 	sub.w	r8, r8, r0
 80135ca:	e7e7      	b.n	801359c <__sflush_r+0xd4>
 80135cc:	dfbffffe 	.word	0xdfbffffe

080135d0 <_fflush_r>:
 80135d0:	b538      	push	{r3, r4, r5, lr}
 80135d2:	690b      	ldr	r3, [r1, #16]
 80135d4:	4605      	mov	r5, r0
 80135d6:	460c      	mov	r4, r1
 80135d8:	b913      	cbnz	r3, 80135e0 <_fflush_r+0x10>
 80135da:	2500      	movs	r5, #0
 80135dc:	4628      	mov	r0, r5
 80135de:	bd38      	pop	{r3, r4, r5, pc}
 80135e0:	b118      	cbz	r0, 80135ea <_fflush_r+0x1a>
 80135e2:	6a03      	ldr	r3, [r0, #32]
 80135e4:	b90b      	cbnz	r3, 80135ea <_fflush_r+0x1a>
 80135e6:	f7fe fa23 	bl	8011a30 <__sinit>
 80135ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d0f3      	beq.n	80135da <_fflush_r+0xa>
 80135f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80135f4:	07d0      	lsls	r0, r2, #31
 80135f6:	d404      	bmi.n	8013602 <_fflush_r+0x32>
 80135f8:	0599      	lsls	r1, r3, #22
 80135fa:	d402      	bmi.n	8013602 <_fflush_r+0x32>
 80135fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80135fe:	f7fe fb98 	bl	8011d32 <__retarget_lock_acquire_recursive>
 8013602:	4628      	mov	r0, r5
 8013604:	4621      	mov	r1, r4
 8013606:	f7ff ff5f 	bl	80134c8 <__sflush_r>
 801360a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801360c:	07da      	lsls	r2, r3, #31
 801360e:	4605      	mov	r5, r0
 8013610:	d4e4      	bmi.n	80135dc <_fflush_r+0xc>
 8013612:	89a3      	ldrh	r3, [r4, #12]
 8013614:	059b      	lsls	r3, r3, #22
 8013616:	d4e1      	bmi.n	80135dc <_fflush_r+0xc>
 8013618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801361a:	f7fe fb8b 	bl	8011d34 <__retarget_lock_release_recursive>
 801361e:	e7dd      	b.n	80135dc <_fflush_r+0xc>

08013620 <memmove>:
 8013620:	4288      	cmp	r0, r1
 8013622:	b510      	push	{r4, lr}
 8013624:	eb01 0402 	add.w	r4, r1, r2
 8013628:	d902      	bls.n	8013630 <memmove+0x10>
 801362a:	4284      	cmp	r4, r0
 801362c:	4623      	mov	r3, r4
 801362e:	d807      	bhi.n	8013640 <memmove+0x20>
 8013630:	1e43      	subs	r3, r0, #1
 8013632:	42a1      	cmp	r1, r4
 8013634:	d008      	beq.n	8013648 <memmove+0x28>
 8013636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801363a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801363e:	e7f8      	b.n	8013632 <memmove+0x12>
 8013640:	4402      	add	r2, r0
 8013642:	4601      	mov	r1, r0
 8013644:	428a      	cmp	r2, r1
 8013646:	d100      	bne.n	801364a <memmove+0x2a>
 8013648:	bd10      	pop	{r4, pc}
 801364a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801364e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013652:	e7f7      	b.n	8013644 <memmove+0x24>

08013654 <_sbrk_r>:
 8013654:	b538      	push	{r3, r4, r5, lr}
 8013656:	4d06      	ldr	r5, [pc, #24]	@ (8013670 <_sbrk_r+0x1c>)
 8013658:	2300      	movs	r3, #0
 801365a:	4604      	mov	r4, r0
 801365c:	4608      	mov	r0, r1
 801365e:	602b      	str	r3, [r5, #0]
 8013660:	f7ef f950 	bl	8002904 <_sbrk>
 8013664:	1c43      	adds	r3, r0, #1
 8013666:	d102      	bne.n	801366e <_sbrk_r+0x1a>
 8013668:	682b      	ldr	r3, [r5, #0]
 801366a:	b103      	cbz	r3, 801366e <_sbrk_r+0x1a>
 801366c:	6023      	str	r3, [r4, #0]
 801366e:	bd38      	pop	{r3, r4, r5, pc}
 8013670:	240056e4 	.word	0x240056e4

08013674 <__assert_func>:
 8013674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013676:	4614      	mov	r4, r2
 8013678:	461a      	mov	r2, r3
 801367a:	4b09      	ldr	r3, [pc, #36]	@ (80136a0 <__assert_func+0x2c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	4605      	mov	r5, r0
 8013680:	68d8      	ldr	r0, [r3, #12]
 8013682:	b954      	cbnz	r4, 801369a <__assert_func+0x26>
 8013684:	4b07      	ldr	r3, [pc, #28]	@ (80136a4 <__assert_func+0x30>)
 8013686:	461c      	mov	r4, r3
 8013688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801368c:	9100      	str	r1, [sp, #0]
 801368e:	462b      	mov	r3, r5
 8013690:	4905      	ldr	r1, [pc, #20]	@ (80136a8 <__assert_func+0x34>)
 8013692:	f000 f86f 	bl	8013774 <fiprintf>
 8013696:	f000 f87f 	bl	8013798 <abort>
 801369a:	4b04      	ldr	r3, [pc, #16]	@ (80136ac <__assert_func+0x38>)
 801369c:	e7f4      	b.n	8013688 <__assert_func+0x14>
 801369e:	bf00      	nop
 80136a0:	24000024 	.word	0x24000024
 80136a4:	0801407e 	.word	0x0801407e
 80136a8:	08014050 	.word	0x08014050
 80136ac:	08014043 	.word	0x08014043

080136b0 <_calloc_r>:
 80136b0:	b570      	push	{r4, r5, r6, lr}
 80136b2:	fba1 5402 	umull	r5, r4, r1, r2
 80136b6:	b93c      	cbnz	r4, 80136c8 <_calloc_r+0x18>
 80136b8:	4629      	mov	r1, r5
 80136ba:	f7ff f99f 	bl	80129fc <_malloc_r>
 80136be:	4606      	mov	r6, r0
 80136c0:	b928      	cbnz	r0, 80136ce <_calloc_r+0x1e>
 80136c2:	2600      	movs	r6, #0
 80136c4:	4630      	mov	r0, r6
 80136c6:	bd70      	pop	{r4, r5, r6, pc}
 80136c8:	220c      	movs	r2, #12
 80136ca:	6002      	str	r2, [r0, #0]
 80136cc:	e7f9      	b.n	80136c2 <_calloc_r+0x12>
 80136ce:	462a      	mov	r2, r5
 80136d0:	4621      	mov	r1, r4
 80136d2:	f7fe fa5a 	bl	8011b8a <memset>
 80136d6:	e7f5      	b.n	80136c4 <_calloc_r+0x14>

080136d8 <__ascii_mbtowc>:
 80136d8:	b082      	sub	sp, #8
 80136da:	b901      	cbnz	r1, 80136de <__ascii_mbtowc+0x6>
 80136dc:	a901      	add	r1, sp, #4
 80136de:	b142      	cbz	r2, 80136f2 <__ascii_mbtowc+0x1a>
 80136e0:	b14b      	cbz	r3, 80136f6 <__ascii_mbtowc+0x1e>
 80136e2:	7813      	ldrb	r3, [r2, #0]
 80136e4:	600b      	str	r3, [r1, #0]
 80136e6:	7812      	ldrb	r2, [r2, #0]
 80136e8:	1e10      	subs	r0, r2, #0
 80136ea:	bf18      	it	ne
 80136ec:	2001      	movne	r0, #1
 80136ee:	b002      	add	sp, #8
 80136f0:	4770      	bx	lr
 80136f2:	4610      	mov	r0, r2
 80136f4:	e7fb      	b.n	80136ee <__ascii_mbtowc+0x16>
 80136f6:	f06f 0001 	mvn.w	r0, #1
 80136fa:	e7f8      	b.n	80136ee <__ascii_mbtowc+0x16>

080136fc <_realloc_r>:
 80136fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013700:	4680      	mov	r8, r0
 8013702:	4615      	mov	r5, r2
 8013704:	460c      	mov	r4, r1
 8013706:	b921      	cbnz	r1, 8013712 <_realloc_r+0x16>
 8013708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801370c:	4611      	mov	r1, r2
 801370e:	f7ff b975 	b.w	80129fc <_malloc_r>
 8013712:	b92a      	cbnz	r2, 8013720 <_realloc_r+0x24>
 8013714:	f7ff f8fe 	bl	8012914 <_free_r>
 8013718:	2400      	movs	r4, #0
 801371a:	4620      	mov	r0, r4
 801371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013720:	f000 f841 	bl	80137a6 <_malloc_usable_size_r>
 8013724:	4285      	cmp	r5, r0
 8013726:	4606      	mov	r6, r0
 8013728:	d802      	bhi.n	8013730 <_realloc_r+0x34>
 801372a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801372e:	d8f4      	bhi.n	801371a <_realloc_r+0x1e>
 8013730:	4629      	mov	r1, r5
 8013732:	4640      	mov	r0, r8
 8013734:	f7ff f962 	bl	80129fc <_malloc_r>
 8013738:	4607      	mov	r7, r0
 801373a:	2800      	cmp	r0, #0
 801373c:	d0ec      	beq.n	8013718 <_realloc_r+0x1c>
 801373e:	42b5      	cmp	r5, r6
 8013740:	462a      	mov	r2, r5
 8013742:	4621      	mov	r1, r4
 8013744:	bf28      	it	cs
 8013746:	4632      	movcs	r2, r6
 8013748:	f7fe faf5 	bl	8011d36 <memcpy>
 801374c:	4621      	mov	r1, r4
 801374e:	4640      	mov	r0, r8
 8013750:	f7ff f8e0 	bl	8012914 <_free_r>
 8013754:	463c      	mov	r4, r7
 8013756:	e7e0      	b.n	801371a <_realloc_r+0x1e>

08013758 <__ascii_wctomb>:
 8013758:	4603      	mov	r3, r0
 801375a:	4608      	mov	r0, r1
 801375c:	b141      	cbz	r1, 8013770 <__ascii_wctomb+0x18>
 801375e:	2aff      	cmp	r2, #255	@ 0xff
 8013760:	d904      	bls.n	801376c <__ascii_wctomb+0x14>
 8013762:	228a      	movs	r2, #138	@ 0x8a
 8013764:	601a      	str	r2, [r3, #0]
 8013766:	f04f 30ff 	mov.w	r0, #4294967295
 801376a:	4770      	bx	lr
 801376c:	700a      	strb	r2, [r1, #0]
 801376e:	2001      	movs	r0, #1
 8013770:	4770      	bx	lr
	...

08013774 <fiprintf>:
 8013774:	b40e      	push	{r1, r2, r3}
 8013776:	b503      	push	{r0, r1, lr}
 8013778:	4601      	mov	r1, r0
 801377a:	ab03      	add	r3, sp, #12
 801377c:	4805      	ldr	r0, [pc, #20]	@ (8013794 <fiprintf+0x20>)
 801377e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013782:	6800      	ldr	r0, [r0, #0]
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	f000 f83f 	bl	8013808 <_vfiprintf_r>
 801378a:	b002      	add	sp, #8
 801378c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013790:	b003      	add	sp, #12
 8013792:	4770      	bx	lr
 8013794:	24000024 	.word	0x24000024

08013798 <abort>:
 8013798:	b508      	push	{r3, lr}
 801379a:	2006      	movs	r0, #6
 801379c:	f000 fa08 	bl	8013bb0 <raise>
 80137a0:	2001      	movs	r0, #1
 80137a2:	f7ef f837 	bl	8002814 <_exit>

080137a6 <_malloc_usable_size_r>:
 80137a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137aa:	1f18      	subs	r0, r3, #4
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	bfbc      	itt	lt
 80137b0:	580b      	ldrlt	r3, [r1, r0]
 80137b2:	18c0      	addlt	r0, r0, r3
 80137b4:	4770      	bx	lr

080137b6 <__sfputc_r>:
 80137b6:	6893      	ldr	r3, [r2, #8]
 80137b8:	3b01      	subs	r3, #1
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	b410      	push	{r4}
 80137be:	6093      	str	r3, [r2, #8]
 80137c0:	da08      	bge.n	80137d4 <__sfputc_r+0x1e>
 80137c2:	6994      	ldr	r4, [r2, #24]
 80137c4:	42a3      	cmp	r3, r4
 80137c6:	db01      	blt.n	80137cc <__sfputc_r+0x16>
 80137c8:	290a      	cmp	r1, #10
 80137ca:	d103      	bne.n	80137d4 <__sfputc_r+0x1e>
 80137cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137d0:	f000 b932 	b.w	8013a38 <__swbuf_r>
 80137d4:	6813      	ldr	r3, [r2, #0]
 80137d6:	1c58      	adds	r0, r3, #1
 80137d8:	6010      	str	r0, [r2, #0]
 80137da:	7019      	strb	r1, [r3, #0]
 80137dc:	4608      	mov	r0, r1
 80137de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80137e2:	4770      	bx	lr

080137e4 <__sfputs_r>:
 80137e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137e6:	4606      	mov	r6, r0
 80137e8:	460f      	mov	r7, r1
 80137ea:	4614      	mov	r4, r2
 80137ec:	18d5      	adds	r5, r2, r3
 80137ee:	42ac      	cmp	r4, r5
 80137f0:	d101      	bne.n	80137f6 <__sfputs_r+0x12>
 80137f2:	2000      	movs	r0, #0
 80137f4:	e007      	b.n	8013806 <__sfputs_r+0x22>
 80137f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80137fa:	463a      	mov	r2, r7
 80137fc:	4630      	mov	r0, r6
 80137fe:	f7ff ffda 	bl	80137b6 <__sfputc_r>
 8013802:	1c43      	adds	r3, r0, #1
 8013804:	d1f3      	bne.n	80137ee <__sfputs_r+0xa>
 8013806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013808 <_vfiprintf_r>:
 8013808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801380c:	460d      	mov	r5, r1
 801380e:	b09d      	sub	sp, #116	@ 0x74
 8013810:	4614      	mov	r4, r2
 8013812:	4698      	mov	r8, r3
 8013814:	4606      	mov	r6, r0
 8013816:	b118      	cbz	r0, 8013820 <_vfiprintf_r+0x18>
 8013818:	6a03      	ldr	r3, [r0, #32]
 801381a:	b90b      	cbnz	r3, 8013820 <_vfiprintf_r+0x18>
 801381c:	f7fe f908 	bl	8011a30 <__sinit>
 8013820:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013822:	07d9      	lsls	r1, r3, #31
 8013824:	d405      	bmi.n	8013832 <_vfiprintf_r+0x2a>
 8013826:	89ab      	ldrh	r3, [r5, #12]
 8013828:	059a      	lsls	r2, r3, #22
 801382a:	d402      	bmi.n	8013832 <_vfiprintf_r+0x2a>
 801382c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801382e:	f7fe fa80 	bl	8011d32 <__retarget_lock_acquire_recursive>
 8013832:	89ab      	ldrh	r3, [r5, #12]
 8013834:	071b      	lsls	r3, r3, #28
 8013836:	d501      	bpl.n	801383c <_vfiprintf_r+0x34>
 8013838:	692b      	ldr	r3, [r5, #16]
 801383a:	b99b      	cbnz	r3, 8013864 <_vfiprintf_r+0x5c>
 801383c:	4629      	mov	r1, r5
 801383e:	4630      	mov	r0, r6
 8013840:	f000 f938 	bl	8013ab4 <__swsetup_r>
 8013844:	b170      	cbz	r0, 8013864 <_vfiprintf_r+0x5c>
 8013846:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013848:	07dc      	lsls	r4, r3, #31
 801384a:	d504      	bpl.n	8013856 <_vfiprintf_r+0x4e>
 801384c:	f04f 30ff 	mov.w	r0, #4294967295
 8013850:	b01d      	add	sp, #116	@ 0x74
 8013852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013856:	89ab      	ldrh	r3, [r5, #12]
 8013858:	0598      	lsls	r0, r3, #22
 801385a:	d4f7      	bmi.n	801384c <_vfiprintf_r+0x44>
 801385c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801385e:	f7fe fa69 	bl	8011d34 <__retarget_lock_release_recursive>
 8013862:	e7f3      	b.n	801384c <_vfiprintf_r+0x44>
 8013864:	2300      	movs	r3, #0
 8013866:	9309      	str	r3, [sp, #36]	@ 0x24
 8013868:	2320      	movs	r3, #32
 801386a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801386e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013872:	2330      	movs	r3, #48	@ 0x30
 8013874:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013a24 <_vfiprintf_r+0x21c>
 8013878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801387c:	f04f 0901 	mov.w	r9, #1
 8013880:	4623      	mov	r3, r4
 8013882:	469a      	mov	sl, r3
 8013884:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013888:	b10a      	cbz	r2, 801388e <_vfiprintf_r+0x86>
 801388a:	2a25      	cmp	r2, #37	@ 0x25
 801388c:	d1f9      	bne.n	8013882 <_vfiprintf_r+0x7a>
 801388e:	ebba 0b04 	subs.w	fp, sl, r4
 8013892:	d00b      	beq.n	80138ac <_vfiprintf_r+0xa4>
 8013894:	465b      	mov	r3, fp
 8013896:	4622      	mov	r2, r4
 8013898:	4629      	mov	r1, r5
 801389a:	4630      	mov	r0, r6
 801389c:	f7ff ffa2 	bl	80137e4 <__sfputs_r>
 80138a0:	3001      	adds	r0, #1
 80138a2:	f000 80a7 	beq.w	80139f4 <_vfiprintf_r+0x1ec>
 80138a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80138a8:	445a      	add	r2, fp
 80138aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80138ac:	f89a 3000 	ldrb.w	r3, [sl]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	f000 809f 	beq.w	80139f4 <_vfiprintf_r+0x1ec>
 80138b6:	2300      	movs	r3, #0
 80138b8:	f04f 32ff 	mov.w	r2, #4294967295
 80138bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80138c0:	f10a 0a01 	add.w	sl, sl, #1
 80138c4:	9304      	str	r3, [sp, #16]
 80138c6:	9307      	str	r3, [sp, #28]
 80138c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80138cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80138ce:	4654      	mov	r4, sl
 80138d0:	2205      	movs	r2, #5
 80138d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138d6:	4853      	ldr	r0, [pc, #332]	@ (8013a24 <_vfiprintf_r+0x21c>)
 80138d8:	f7ec fd1a 	bl	8000310 <memchr>
 80138dc:	9a04      	ldr	r2, [sp, #16]
 80138de:	b9d8      	cbnz	r0, 8013918 <_vfiprintf_r+0x110>
 80138e0:	06d1      	lsls	r1, r2, #27
 80138e2:	bf44      	itt	mi
 80138e4:	2320      	movmi	r3, #32
 80138e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138ea:	0713      	lsls	r3, r2, #28
 80138ec:	bf44      	itt	mi
 80138ee:	232b      	movmi	r3, #43	@ 0x2b
 80138f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138f4:	f89a 3000 	ldrb.w	r3, [sl]
 80138f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80138fa:	d015      	beq.n	8013928 <_vfiprintf_r+0x120>
 80138fc:	9a07      	ldr	r2, [sp, #28]
 80138fe:	4654      	mov	r4, sl
 8013900:	2000      	movs	r0, #0
 8013902:	f04f 0c0a 	mov.w	ip, #10
 8013906:	4621      	mov	r1, r4
 8013908:	f811 3b01 	ldrb.w	r3, [r1], #1
 801390c:	3b30      	subs	r3, #48	@ 0x30
 801390e:	2b09      	cmp	r3, #9
 8013910:	d94b      	bls.n	80139aa <_vfiprintf_r+0x1a2>
 8013912:	b1b0      	cbz	r0, 8013942 <_vfiprintf_r+0x13a>
 8013914:	9207      	str	r2, [sp, #28]
 8013916:	e014      	b.n	8013942 <_vfiprintf_r+0x13a>
 8013918:	eba0 0308 	sub.w	r3, r0, r8
 801391c:	fa09 f303 	lsl.w	r3, r9, r3
 8013920:	4313      	orrs	r3, r2
 8013922:	9304      	str	r3, [sp, #16]
 8013924:	46a2      	mov	sl, r4
 8013926:	e7d2      	b.n	80138ce <_vfiprintf_r+0xc6>
 8013928:	9b03      	ldr	r3, [sp, #12]
 801392a:	1d19      	adds	r1, r3, #4
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	9103      	str	r1, [sp, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	bfbb      	ittet	lt
 8013934:	425b      	neglt	r3, r3
 8013936:	f042 0202 	orrlt.w	r2, r2, #2
 801393a:	9307      	strge	r3, [sp, #28]
 801393c:	9307      	strlt	r3, [sp, #28]
 801393e:	bfb8      	it	lt
 8013940:	9204      	strlt	r2, [sp, #16]
 8013942:	7823      	ldrb	r3, [r4, #0]
 8013944:	2b2e      	cmp	r3, #46	@ 0x2e
 8013946:	d10a      	bne.n	801395e <_vfiprintf_r+0x156>
 8013948:	7863      	ldrb	r3, [r4, #1]
 801394a:	2b2a      	cmp	r3, #42	@ 0x2a
 801394c:	d132      	bne.n	80139b4 <_vfiprintf_r+0x1ac>
 801394e:	9b03      	ldr	r3, [sp, #12]
 8013950:	1d1a      	adds	r2, r3, #4
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	9203      	str	r2, [sp, #12]
 8013956:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801395a:	3402      	adds	r4, #2
 801395c:	9305      	str	r3, [sp, #20]
 801395e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013a34 <_vfiprintf_r+0x22c>
 8013962:	7821      	ldrb	r1, [r4, #0]
 8013964:	2203      	movs	r2, #3
 8013966:	4650      	mov	r0, sl
 8013968:	f7ec fcd2 	bl	8000310 <memchr>
 801396c:	b138      	cbz	r0, 801397e <_vfiprintf_r+0x176>
 801396e:	9b04      	ldr	r3, [sp, #16]
 8013970:	eba0 000a 	sub.w	r0, r0, sl
 8013974:	2240      	movs	r2, #64	@ 0x40
 8013976:	4082      	lsls	r2, r0
 8013978:	4313      	orrs	r3, r2
 801397a:	3401      	adds	r4, #1
 801397c:	9304      	str	r3, [sp, #16]
 801397e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013982:	4829      	ldr	r0, [pc, #164]	@ (8013a28 <_vfiprintf_r+0x220>)
 8013984:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013988:	2206      	movs	r2, #6
 801398a:	f7ec fcc1 	bl	8000310 <memchr>
 801398e:	2800      	cmp	r0, #0
 8013990:	d03f      	beq.n	8013a12 <_vfiprintf_r+0x20a>
 8013992:	4b26      	ldr	r3, [pc, #152]	@ (8013a2c <_vfiprintf_r+0x224>)
 8013994:	bb1b      	cbnz	r3, 80139de <_vfiprintf_r+0x1d6>
 8013996:	9b03      	ldr	r3, [sp, #12]
 8013998:	3307      	adds	r3, #7
 801399a:	f023 0307 	bic.w	r3, r3, #7
 801399e:	3308      	adds	r3, #8
 80139a0:	9303      	str	r3, [sp, #12]
 80139a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80139a4:	443b      	add	r3, r7
 80139a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80139a8:	e76a      	b.n	8013880 <_vfiprintf_r+0x78>
 80139aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80139ae:	460c      	mov	r4, r1
 80139b0:	2001      	movs	r0, #1
 80139b2:	e7a8      	b.n	8013906 <_vfiprintf_r+0xfe>
 80139b4:	2300      	movs	r3, #0
 80139b6:	3401      	adds	r4, #1
 80139b8:	9305      	str	r3, [sp, #20]
 80139ba:	4619      	mov	r1, r3
 80139bc:	f04f 0c0a 	mov.w	ip, #10
 80139c0:	4620      	mov	r0, r4
 80139c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80139c6:	3a30      	subs	r2, #48	@ 0x30
 80139c8:	2a09      	cmp	r2, #9
 80139ca:	d903      	bls.n	80139d4 <_vfiprintf_r+0x1cc>
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d0c6      	beq.n	801395e <_vfiprintf_r+0x156>
 80139d0:	9105      	str	r1, [sp, #20]
 80139d2:	e7c4      	b.n	801395e <_vfiprintf_r+0x156>
 80139d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80139d8:	4604      	mov	r4, r0
 80139da:	2301      	movs	r3, #1
 80139dc:	e7f0      	b.n	80139c0 <_vfiprintf_r+0x1b8>
 80139de:	ab03      	add	r3, sp, #12
 80139e0:	9300      	str	r3, [sp, #0]
 80139e2:	462a      	mov	r2, r5
 80139e4:	4b12      	ldr	r3, [pc, #72]	@ (8013a30 <_vfiprintf_r+0x228>)
 80139e6:	a904      	add	r1, sp, #16
 80139e8:	4630      	mov	r0, r6
 80139ea:	f7fd fbed 	bl	80111c8 <_printf_float>
 80139ee:	4607      	mov	r7, r0
 80139f0:	1c78      	adds	r0, r7, #1
 80139f2:	d1d6      	bne.n	80139a2 <_vfiprintf_r+0x19a>
 80139f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80139f6:	07d9      	lsls	r1, r3, #31
 80139f8:	d405      	bmi.n	8013a06 <_vfiprintf_r+0x1fe>
 80139fa:	89ab      	ldrh	r3, [r5, #12]
 80139fc:	059a      	lsls	r2, r3, #22
 80139fe:	d402      	bmi.n	8013a06 <_vfiprintf_r+0x1fe>
 8013a00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013a02:	f7fe f997 	bl	8011d34 <__retarget_lock_release_recursive>
 8013a06:	89ab      	ldrh	r3, [r5, #12]
 8013a08:	065b      	lsls	r3, r3, #25
 8013a0a:	f53f af1f 	bmi.w	801384c <_vfiprintf_r+0x44>
 8013a0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013a10:	e71e      	b.n	8013850 <_vfiprintf_r+0x48>
 8013a12:	ab03      	add	r3, sp, #12
 8013a14:	9300      	str	r3, [sp, #0]
 8013a16:	462a      	mov	r2, r5
 8013a18:	4b05      	ldr	r3, [pc, #20]	@ (8013a30 <_vfiprintf_r+0x228>)
 8013a1a:	a904      	add	r1, sp, #16
 8013a1c:	4630      	mov	r0, r6
 8013a1e:	f7fd fe5b 	bl	80116d8 <_printf_i>
 8013a22:	e7e4      	b.n	80139ee <_vfiprintf_r+0x1e6>
 8013a24:	08014028 	.word	0x08014028
 8013a28:	08014032 	.word	0x08014032
 8013a2c:	080111c9 	.word	0x080111c9
 8013a30:	080137e5 	.word	0x080137e5
 8013a34:	0801402e 	.word	0x0801402e

08013a38 <__swbuf_r>:
 8013a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a3a:	460e      	mov	r6, r1
 8013a3c:	4614      	mov	r4, r2
 8013a3e:	4605      	mov	r5, r0
 8013a40:	b118      	cbz	r0, 8013a4a <__swbuf_r+0x12>
 8013a42:	6a03      	ldr	r3, [r0, #32]
 8013a44:	b90b      	cbnz	r3, 8013a4a <__swbuf_r+0x12>
 8013a46:	f7fd fff3 	bl	8011a30 <__sinit>
 8013a4a:	69a3      	ldr	r3, [r4, #24]
 8013a4c:	60a3      	str	r3, [r4, #8]
 8013a4e:	89a3      	ldrh	r3, [r4, #12]
 8013a50:	071a      	lsls	r2, r3, #28
 8013a52:	d501      	bpl.n	8013a58 <__swbuf_r+0x20>
 8013a54:	6923      	ldr	r3, [r4, #16]
 8013a56:	b943      	cbnz	r3, 8013a6a <__swbuf_r+0x32>
 8013a58:	4621      	mov	r1, r4
 8013a5a:	4628      	mov	r0, r5
 8013a5c:	f000 f82a 	bl	8013ab4 <__swsetup_r>
 8013a60:	b118      	cbz	r0, 8013a6a <__swbuf_r+0x32>
 8013a62:	f04f 37ff 	mov.w	r7, #4294967295
 8013a66:	4638      	mov	r0, r7
 8013a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a6a:	6823      	ldr	r3, [r4, #0]
 8013a6c:	6922      	ldr	r2, [r4, #16]
 8013a6e:	1a98      	subs	r0, r3, r2
 8013a70:	6963      	ldr	r3, [r4, #20]
 8013a72:	b2f6      	uxtb	r6, r6
 8013a74:	4283      	cmp	r3, r0
 8013a76:	4637      	mov	r7, r6
 8013a78:	dc05      	bgt.n	8013a86 <__swbuf_r+0x4e>
 8013a7a:	4621      	mov	r1, r4
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	f7ff fda7 	bl	80135d0 <_fflush_r>
 8013a82:	2800      	cmp	r0, #0
 8013a84:	d1ed      	bne.n	8013a62 <__swbuf_r+0x2a>
 8013a86:	68a3      	ldr	r3, [r4, #8]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	60a3      	str	r3, [r4, #8]
 8013a8c:	6823      	ldr	r3, [r4, #0]
 8013a8e:	1c5a      	adds	r2, r3, #1
 8013a90:	6022      	str	r2, [r4, #0]
 8013a92:	701e      	strb	r6, [r3, #0]
 8013a94:	6962      	ldr	r2, [r4, #20]
 8013a96:	1c43      	adds	r3, r0, #1
 8013a98:	429a      	cmp	r2, r3
 8013a9a:	d004      	beq.n	8013aa6 <__swbuf_r+0x6e>
 8013a9c:	89a3      	ldrh	r3, [r4, #12]
 8013a9e:	07db      	lsls	r3, r3, #31
 8013aa0:	d5e1      	bpl.n	8013a66 <__swbuf_r+0x2e>
 8013aa2:	2e0a      	cmp	r6, #10
 8013aa4:	d1df      	bne.n	8013a66 <__swbuf_r+0x2e>
 8013aa6:	4621      	mov	r1, r4
 8013aa8:	4628      	mov	r0, r5
 8013aaa:	f7ff fd91 	bl	80135d0 <_fflush_r>
 8013aae:	2800      	cmp	r0, #0
 8013ab0:	d0d9      	beq.n	8013a66 <__swbuf_r+0x2e>
 8013ab2:	e7d6      	b.n	8013a62 <__swbuf_r+0x2a>

08013ab4 <__swsetup_r>:
 8013ab4:	b538      	push	{r3, r4, r5, lr}
 8013ab6:	4b29      	ldr	r3, [pc, #164]	@ (8013b5c <__swsetup_r+0xa8>)
 8013ab8:	4605      	mov	r5, r0
 8013aba:	6818      	ldr	r0, [r3, #0]
 8013abc:	460c      	mov	r4, r1
 8013abe:	b118      	cbz	r0, 8013ac8 <__swsetup_r+0x14>
 8013ac0:	6a03      	ldr	r3, [r0, #32]
 8013ac2:	b90b      	cbnz	r3, 8013ac8 <__swsetup_r+0x14>
 8013ac4:	f7fd ffb4 	bl	8011a30 <__sinit>
 8013ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013acc:	0719      	lsls	r1, r3, #28
 8013ace:	d422      	bmi.n	8013b16 <__swsetup_r+0x62>
 8013ad0:	06da      	lsls	r2, r3, #27
 8013ad2:	d407      	bmi.n	8013ae4 <__swsetup_r+0x30>
 8013ad4:	2209      	movs	r2, #9
 8013ad6:	602a      	str	r2, [r5, #0]
 8013ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013adc:	81a3      	strh	r3, [r4, #12]
 8013ade:	f04f 30ff 	mov.w	r0, #4294967295
 8013ae2:	e033      	b.n	8013b4c <__swsetup_r+0x98>
 8013ae4:	0758      	lsls	r0, r3, #29
 8013ae6:	d512      	bpl.n	8013b0e <__swsetup_r+0x5a>
 8013ae8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013aea:	b141      	cbz	r1, 8013afe <__swsetup_r+0x4a>
 8013aec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013af0:	4299      	cmp	r1, r3
 8013af2:	d002      	beq.n	8013afa <__swsetup_r+0x46>
 8013af4:	4628      	mov	r0, r5
 8013af6:	f7fe ff0d 	bl	8012914 <_free_r>
 8013afa:	2300      	movs	r3, #0
 8013afc:	6363      	str	r3, [r4, #52]	@ 0x34
 8013afe:	89a3      	ldrh	r3, [r4, #12]
 8013b00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013b04:	81a3      	strh	r3, [r4, #12]
 8013b06:	2300      	movs	r3, #0
 8013b08:	6063      	str	r3, [r4, #4]
 8013b0a:	6923      	ldr	r3, [r4, #16]
 8013b0c:	6023      	str	r3, [r4, #0]
 8013b0e:	89a3      	ldrh	r3, [r4, #12]
 8013b10:	f043 0308 	orr.w	r3, r3, #8
 8013b14:	81a3      	strh	r3, [r4, #12]
 8013b16:	6923      	ldr	r3, [r4, #16]
 8013b18:	b94b      	cbnz	r3, 8013b2e <__swsetup_r+0x7a>
 8013b1a:	89a3      	ldrh	r3, [r4, #12]
 8013b1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013b24:	d003      	beq.n	8013b2e <__swsetup_r+0x7a>
 8013b26:	4621      	mov	r1, r4
 8013b28:	4628      	mov	r0, r5
 8013b2a:	f000 f883 	bl	8013c34 <__smakebuf_r>
 8013b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b32:	f013 0201 	ands.w	r2, r3, #1
 8013b36:	d00a      	beq.n	8013b4e <__swsetup_r+0x9a>
 8013b38:	2200      	movs	r2, #0
 8013b3a:	60a2      	str	r2, [r4, #8]
 8013b3c:	6962      	ldr	r2, [r4, #20]
 8013b3e:	4252      	negs	r2, r2
 8013b40:	61a2      	str	r2, [r4, #24]
 8013b42:	6922      	ldr	r2, [r4, #16]
 8013b44:	b942      	cbnz	r2, 8013b58 <__swsetup_r+0xa4>
 8013b46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8013b4a:	d1c5      	bne.n	8013ad8 <__swsetup_r+0x24>
 8013b4c:	bd38      	pop	{r3, r4, r5, pc}
 8013b4e:	0799      	lsls	r1, r3, #30
 8013b50:	bf58      	it	pl
 8013b52:	6962      	ldrpl	r2, [r4, #20]
 8013b54:	60a2      	str	r2, [r4, #8]
 8013b56:	e7f4      	b.n	8013b42 <__swsetup_r+0x8e>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e7f7      	b.n	8013b4c <__swsetup_r+0x98>
 8013b5c:	24000024 	.word	0x24000024

08013b60 <_raise_r>:
 8013b60:	291f      	cmp	r1, #31
 8013b62:	b538      	push	{r3, r4, r5, lr}
 8013b64:	4605      	mov	r5, r0
 8013b66:	460c      	mov	r4, r1
 8013b68:	d904      	bls.n	8013b74 <_raise_r+0x14>
 8013b6a:	2316      	movs	r3, #22
 8013b6c:	6003      	str	r3, [r0, #0]
 8013b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b72:	bd38      	pop	{r3, r4, r5, pc}
 8013b74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8013b76:	b112      	cbz	r2, 8013b7e <_raise_r+0x1e>
 8013b78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b7c:	b94b      	cbnz	r3, 8013b92 <_raise_r+0x32>
 8013b7e:	4628      	mov	r0, r5
 8013b80:	f000 f830 	bl	8013be4 <_getpid_r>
 8013b84:	4622      	mov	r2, r4
 8013b86:	4601      	mov	r1, r0
 8013b88:	4628      	mov	r0, r5
 8013b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b8e:	f000 b817 	b.w	8013bc0 <_kill_r>
 8013b92:	2b01      	cmp	r3, #1
 8013b94:	d00a      	beq.n	8013bac <_raise_r+0x4c>
 8013b96:	1c59      	adds	r1, r3, #1
 8013b98:	d103      	bne.n	8013ba2 <_raise_r+0x42>
 8013b9a:	2316      	movs	r3, #22
 8013b9c:	6003      	str	r3, [r0, #0]
 8013b9e:	2001      	movs	r0, #1
 8013ba0:	e7e7      	b.n	8013b72 <_raise_r+0x12>
 8013ba2:	2100      	movs	r1, #0
 8013ba4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8013ba8:	4620      	mov	r0, r4
 8013baa:	4798      	blx	r3
 8013bac:	2000      	movs	r0, #0
 8013bae:	e7e0      	b.n	8013b72 <_raise_r+0x12>

08013bb0 <raise>:
 8013bb0:	4b02      	ldr	r3, [pc, #8]	@ (8013bbc <raise+0xc>)
 8013bb2:	4601      	mov	r1, r0
 8013bb4:	6818      	ldr	r0, [r3, #0]
 8013bb6:	f7ff bfd3 	b.w	8013b60 <_raise_r>
 8013bba:	bf00      	nop
 8013bbc:	24000024 	.word	0x24000024

08013bc0 <_kill_r>:
 8013bc0:	b538      	push	{r3, r4, r5, lr}
 8013bc2:	4d07      	ldr	r5, [pc, #28]	@ (8013be0 <_kill_r+0x20>)
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	4604      	mov	r4, r0
 8013bc8:	4608      	mov	r0, r1
 8013bca:	4611      	mov	r1, r2
 8013bcc:	602b      	str	r3, [r5, #0]
 8013bce:	f7ee fe11 	bl	80027f4 <_kill>
 8013bd2:	1c43      	adds	r3, r0, #1
 8013bd4:	d102      	bne.n	8013bdc <_kill_r+0x1c>
 8013bd6:	682b      	ldr	r3, [r5, #0]
 8013bd8:	b103      	cbz	r3, 8013bdc <_kill_r+0x1c>
 8013bda:	6023      	str	r3, [r4, #0]
 8013bdc:	bd38      	pop	{r3, r4, r5, pc}
 8013bde:	bf00      	nop
 8013be0:	240056e4 	.word	0x240056e4

08013be4 <_getpid_r>:
 8013be4:	f7ee bdfe 	b.w	80027e4 <_getpid>

08013be8 <__swhatbuf_r>:
 8013be8:	b570      	push	{r4, r5, r6, lr}
 8013bea:	460c      	mov	r4, r1
 8013bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf0:	2900      	cmp	r1, #0
 8013bf2:	b096      	sub	sp, #88	@ 0x58
 8013bf4:	4615      	mov	r5, r2
 8013bf6:	461e      	mov	r6, r3
 8013bf8:	da0d      	bge.n	8013c16 <__swhatbuf_r+0x2e>
 8013bfa:	89a3      	ldrh	r3, [r4, #12]
 8013bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c00:	f04f 0100 	mov.w	r1, #0
 8013c04:	bf14      	ite	ne
 8013c06:	2340      	movne	r3, #64	@ 0x40
 8013c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	6031      	str	r1, [r6, #0]
 8013c10:	602b      	str	r3, [r5, #0]
 8013c12:	b016      	add	sp, #88	@ 0x58
 8013c14:	bd70      	pop	{r4, r5, r6, pc}
 8013c16:	466a      	mov	r2, sp
 8013c18:	f000 f848 	bl	8013cac <_fstat_r>
 8013c1c:	2800      	cmp	r0, #0
 8013c1e:	dbec      	blt.n	8013bfa <__swhatbuf_r+0x12>
 8013c20:	9901      	ldr	r1, [sp, #4]
 8013c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8013c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8013c2a:	4259      	negs	r1, r3
 8013c2c:	4159      	adcs	r1, r3
 8013c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013c32:	e7eb      	b.n	8013c0c <__swhatbuf_r+0x24>

08013c34 <__smakebuf_r>:
 8013c34:	898b      	ldrh	r3, [r1, #12]
 8013c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c38:	079d      	lsls	r5, r3, #30
 8013c3a:	4606      	mov	r6, r0
 8013c3c:	460c      	mov	r4, r1
 8013c3e:	d507      	bpl.n	8013c50 <__smakebuf_r+0x1c>
 8013c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013c44:	6023      	str	r3, [r4, #0]
 8013c46:	6123      	str	r3, [r4, #16]
 8013c48:	2301      	movs	r3, #1
 8013c4a:	6163      	str	r3, [r4, #20]
 8013c4c:	b003      	add	sp, #12
 8013c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c50:	ab01      	add	r3, sp, #4
 8013c52:	466a      	mov	r2, sp
 8013c54:	f7ff ffc8 	bl	8013be8 <__swhatbuf_r>
 8013c58:	9f00      	ldr	r7, [sp, #0]
 8013c5a:	4605      	mov	r5, r0
 8013c5c:	4639      	mov	r1, r7
 8013c5e:	4630      	mov	r0, r6
 8013c60:	f7fe fecc 	bl	80129fc <_malloc_r>
 8013c64:	b948      	cbnz	r0, 8013c7a <__smakebuf_r+0x46>
 8013c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c6a:	059a      	lsls	r2, r3, #22
 8013c6c:	d4ee      	bmi.n	8013c4c <__smakebuf_r+0x18>
 8013c6e:	f023 0303 	bic.w	r3, r3, #3
 8013c72:	f043 0302 	orr.w	r3, r3, #2
 8013c76:	81a3      	strh	r3, [r4, #12]
 8013c78:	e7e2      	b.n	8013c40 <__smakebuf_r+0xc>
 8013c7a:	89a3      	ldrh	r3, [r4, #12]
 8013c7c:	6020      	str	r0, [r4, #0]
 8013c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c82:	81a3      	strh	r3, [r4, #12]
 8013c84:	9b01      	ldr	r3, [sp, #4]
 8013c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013c8a:	b15b      	cbz	r3, 8013ca4 <__smakebuf_r+0x70>
 8013c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013c90:	4630      	mov	r0, r6
 8013c92:	f000 f81d 	bl	8013cd0 <_isatty_r>
 8013c96:	b128      	cbz	r0, 8013ca4 <__smakebuf_r+0x70>
 8013c98:	89a3      	ldrh	r3, [r4, #12]
 8013c9a:	f023 0303 	bic.w	r3, r3, #3
 8013c9e:	f043 0301 	orr.w	r3, r3, #1
 8013ca2:	81a3      	strh	r3, [r4, #12]
 8013ca4:	89a3      	ldrh	r3, [r4, #12]
 8013ca6:	431d      	orrs	r5, r3
 8013ca8:	81a5      	strh	r5, [r4, #12]
 8013caa:	e7cf      	b.n	8013c4c <__smakebuf_r+0x18>

08013cac <_fstat_r>:
 8013cac:	b538      	push	{r3, r4, r5, lr}
 8013cae:	4d07      	ldr	r5, [pc, #28]	@ (8013ccc <_fstat_r+0x20>)
 8013cb0:	2300      	movs	r3, #0
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	4608      	mov	r0, r1
 8013cb6:	4611      	mov	r1, r2
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	f7ee fdfb 	bl	80028b4 <_fstat>
 8013cbe:	1c43      	adds	r3, r0, #1
 8013cc0:	d102      	bne.n	8013cc8 <_fstat_r+0x1c>
 8013cc2:	682b      	ldr	r3, [r5, #0]
 8013cc4:	b103      	cbz	r3, 8013cc8 <_fstat_r+0x1c>
 8013cc6:	6023      	str	r3, [r4, #0]
 8013cc8:	bd38      	pop	{r3, r4, r5, pc}
 8013cca:	bf00      	nop
 8013ccc:	240056e4 	.word	0x240056e4

08013cd0 <_isatty_r>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	4d06      	ldr	r5, [pc, #24]	@ (8013cec <_isatty_r+0x1c>)
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	4608      	mov	r0, r1
 8013cda:	602b      	str	r3, [r5, #0]
 8013cdc:	f7ee fdfa 	bl	80028d4 <_isatty>
 8013ce0:	1c43      	adds	r3, r0, #1
 8013ce2:	d102      	bne.n	8013cea <_isatty_r+0x1a>
 8013ce4:	682b      	ldr	r3, [r5, #0]
 8013ce6:	b103      	cbz	r3, 8013cea <_isatty_r+0x1a>
 8013ce8:	6023      	str	r3, [r4, #0]
 8013cea:	bd38      	pop	{r3, r4, r5, pc}
 8013cec:	240056e4 	.word	0x240056e4

08013cf0 <_init>:
 8013cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cf2:	bf00      	nop
 8013cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cf6:	bc08      	pop	{r3}
 8013cf8:	469e      	mov	lr, r3
 8013cfa:	4770      	bx	lr

08013cfc <_fini>:
 8013cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cfe:	bf00      	nop
 8013d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d02:	bc08      	pop	{r3}
 8013d04:	469e      	mov	lr, r3
 8013d06:	4770      	bx	lr
